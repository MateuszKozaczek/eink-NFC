
DISCO-eink-NFC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aadc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003f58  0800ab9c  0800ab9c  0001ab9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eaf4  0800eaf4  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800eaf4  0800eaf4  0001eaf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eafc  0800eafc  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eafc  0800eafc  0001eafc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eb00  0800eb00  0001eb00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800eb04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001314  20000088  0800eb8c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  2000139c  0800eb8c  0002139c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035b13  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049ad  00000000  00000000  00055bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0003a7cf  00000000  00000000  0005a570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001638  00000000  00000000  00094d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00007250  00000000  00000000  00096378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017b1b  00000000  00000000  0009d5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ffb7  00000000  00000000  000b50e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000831f9  00000000  00000000  000e509a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00168293  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005174  00000000  00000000  001682e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000088 	.word	0x20000088
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800ab84 	.word	0x0800ab84

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000008c 	.word	0x2000008c
 8000104:	0800ab84 	.word	0x0800ab84

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f834 	bl	80004b4 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_lmul>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	46ce      	mov	lr, r9
 800045c:	4647      	mov	r7, r8
 800045e:	b580      	push	{r7, lr}
 8000460:	0007      	movs	r7, r0
 8000462:	4699      	mov	r9, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	469c      	mov	ip, r3
 8000468:	0413      	lsls	r3, r2, #16
 800046a:	0c1b      	lsrs	r3, r3, #16
 800046c:	001d      	movs	r5, r3
 800046e:	000e      	movs	r6, r1
 8000470:	4661      	mov	r1, ip
 8000472:	0400      	lsls	r0, r0, #16
 8000474:	0c14      	lsrs	r4, r2, #16
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	4345      	muls	r5, r0
 800047a:	434b      	muls	r3, r1
 800047c:	4360      	muls	r0, r4
 800047e:	4361      	muls	r1, r4
 8000480:	18c0      	adds	r0, r0, r3
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	1820      	adds	r0, r4, r0
 8000486:	468c      	mov	ip, r1
 8000488:	4283      	cmp	r3, r0
 800048a:	d903      	bls.n	8000494 <__aeabi_lmul+0x3c>
 800048c:	2380      	movs	r3, #128	; 0x80
 800048e:	025b      	lsls	r3, r3, #9
 8000490:	4698      	mov	r8, r3
 8000492:	44c4      	add	ip, r8
 8000494:	4649      	mov	r1, r9
 8000496:	4379      	muls	r1, r7
 8000498:	4372      	muls	r2, r6
 800049a:	0c03      	lsrs	r3, r0, #16
 800049c:	4463      	add	r3, ip
 800049e:	042d      	lsls	r5, r5, #16
 80004a0:	0c2d      	lsrs	r5, r5, #16
 80004a2:	18c9      	adds	r1, r1, r3
 80004a4:	0400      	lsls	r0, r0, #16
 80004a6:	1940      	adds	r0, r0, r5
 80004a8:	1889      	adds	r1, r1, r2
 80004aa:	bcc0      	pop	{r6, r7}
 80004ac:	46b9      	mov	r9, r7
 80004ae:	46b0      	mov	r8, r6
 80004b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__udivmoddi4>:
 80004b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b6:	4657      	mov	r7, sl
 80004b8:	464e      	mov	r6, r9
 80004ba:	4645      	mov	r5, r8
 80004bc:	46de      	mov	lr, fp
 80004be:	b5e0      	push	{r5, r6, r7, lr}
 80004c0:	0004      	movs	r4, r0
 80004c2:	000d      	movs	r5, r1
 80004c4:	4692      	mov	sl, r2
 80004c6:	4699      	mov	r9, r3
 80004c8:	b083      	sub	sp, #12
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d830      	bhi.n	8000530 <__udivmoddi4+0x7c>
 80004ce:	d02d      	beq.n	800052c <__udivmoddi4+0x78>
 80004d0:	4649      	mov	r1, r9
 80004d2:	4650      	mov	r0, sl
 80004d4:	f000 f8d8 	bl	8000688 <__clzdi2>
 80004d8:	0029      	movs	r1, r5
 80004da:	0006      	movs	r6, r0
 80004dc:	0020      	movs	r0, r4
 80004de:	f000 f8d3 	bl	8000688 <__clzdi2>
 80004e2:	1a33      	subs	r3, r6, r0
 80004e4:	4698      	mov	r8, r3
 80004e6:	3b20      	subs	r3, #32
 80004e8:	469b      	mov	fp, r3
 80004ea:	d433      	bmi.n	8000554 <__udivmoddi4+0xa0>
 80004ec:	465a      	mov	r2, fp
 80004ee:	4653      	mov	r3, sl
 80004f0:	4093      	lsls	r3, r2
 80004f2:	4642      	mov	r2, r8
 80004f4:	001f      	movs	r7, r3
 80004f6:	4653      	mov	r3, sl
 80004f8:	4093      	lsls	r3, r2
 80004fa:	001e      	movs	r6, r3
 80004fc:	42af      	cmp	r7, r5
 80004fe:	d83a      	bhi.n	8000576 <__udivmoddi4+0xc2>
 8000500:	42af      	cmp	r7, r5
 8000502:	d100      	bne.n	8000506 <__udivmoddi4+0x52>
 8000504:	e078      	b.n	80005f8 <__udivmoddi4+0x144>
 8000506:	465b      	mov	r3, fp
 8000508:	1ba4      	subs	r4, r4, r6
 800050a:	41bd      	sbcs	r5, r7
 800050c:	2b00      	cmp	r3, #0
 800050e:	da00      	bge.n	8000512 <__udivmoddi4+0x5e>
 8000510:	e075      	b.n	80005fe <__udivmoddi4+0x14a>
 8000512:	2200      	movs	r2, #0
 8000514:	2300      	movs	r3, #0
 8000516:	9200      	str	r2, [sp, #0]
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	2301      	movs	r3, #1
 800051c:	465a      	mov	r2, fp
 800051e:	4093      	lsls	r3, r2
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2301      	movs	r3, #1
 8000524:	4642      	mov	r2, r8
 8000526:	4093      	lsls	r3, r2
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	e028      	b.n	800057e <__udivmoddi4+0xca>
 800052c:	4282      	cmp	r2, r0
 800052e:	d9cf      	bls.n	80004d0 <__udivmoddi4+0x1c>
 8000530:	2200      	movs	r2, #0
 8000532:	2300      	movs	r3, #0
 8000534:	9200      	str	r2, [sp, #0]
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <__udivmoddi4+0x8e>
 800053e:	601c      	str	r4, [r3, #0]
 8000540:	605d      	str	r5, [r3, #4]
 8000542:	9800      	ldr	r0, [sp, #0]
 8000544:	9901      	ldr	r1, [sp, #4]
 8000546:	b003      	add	sp, #12
 8000548:	bcf0      	pop	{r4, r5, r6, r7}
 800054a:	46bb      	mov	fp, r7
 800054c:	46b2      	mov	sl, r6
 800054e:	46a9      	mov	r9, r5
 8000550:	46a0      	mov	r8, r4
 8000552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000554:	4642      	mov	r2, r8
 8000556:	2320      	movs	r3, #32
 8000558:	1a9b      	subs	r3, r3, r2
 800055a:	4652      	mov	r2, sl
 800055c:	40da      	lsrs	r2, r3
 800055e:	4641      	mov	r1, r8
 8000560:	0013      	movs	r3, r2
 8000562:	464a      	mov	r2, r9
 8000564:	408a      	lsls	r2, r1
 8000566:	0017      	movs	r7, r2
 8000568:	4642      	mov	r2, r8
 800056a:	431f      	orrs	r7, r3
 800056c:	4653      	mov	r3, sl
 800056e:	4093      	lsls	r3, r2
 8000570:	001e      	movs	r6, r3
 8000572:	42af      	cmp	r7, r5
 8000574:	d9c4      	bls.n	8000500 <__udivmoddi4+0x4c>
 8000576:	2200      	movs	r2, #0
 8000578:	2300      	movs	r3, #0
 800057a:	9200      	str	r2, [sp, #0]
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	4643      	mov	r3, r8
 8000580:	2b00      	cmp	r3, #0
 8000582:	d0d9      	beq.n	8000538 <__udivmoddi4+0x84>
 8000584:	07fb      	lsls	r3, r7, #31
 8000586:	0872      	lsrs	r2, r6, #1
 8000588:	431a      	orrs	r2, r3
 800058a:	4646      	mov	r6, r8
 800058c:	087b      	lsrs	r3, r7, #1
 800058e:	e00e      	b.n	80005ae <__udivmoddi4+0xfa>
 8000590:	42ab      	cmp	r3, r5
 8000592:	d101      	bne.n	8000598 <__udivmoddi4+0xe4>
 8000594:	42a2      	cmp	r2, r4
 8000596:	d80c      	bhi.n	80005b2 <__udivmoddi4+0xfe>
 8000598:	1aa4      	subs	r4, r4, r2
 800059a:	419d      	sbcs	r5, r3
 800059c:	2001      	movs	r0, #1
 800059e:	1924      	adds	r4, r4, r4
 80005a0:	416d      	adcs	r5, r5
 80005a2:	2100      	movs	r1, #0
 80005a4:	3e01      	subs	r6, #1
 80005a6:	1824      	adds	r4, r4, r0
 80005a8:	414d      	adcs	r5, r1
 80005aa:	2e00      	cmp	r6, #0
 80005ac:	d006      	beq.n	80005bc <__udivmoddi4+0x108>
 80005ae:	42ab      	cmp	r3, r5
 80005b0:	d9ee      	bls.n	8000590 <__udivmoddi4+0xdc>
 80005b2:	3e01      	subs	r6, #1
 80005b4:	1924      	adds	r4, r4, r4
 80005b6:	416d      	adcs	r5, r5
 80005b8:	2e00      	cmp	r6, #0
 80005ba:	d1f8      	bne.n	80005ae <__udivmoddi4+0xfa>
 80005bc:	9800      	ldr	r0, [sp, #0]
 80005be:	9901      	ldr	r1, [sp, #4]
 80005c0:	465b      	mov	r3, fp
 80005c2:	1900      	adds	r0, r0, r4
 80005c4:	4169      	adcs	r1, r5
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	db24      	blt.n	8000614 <__udivmoddi4+0x160>
 80005ca:	002b      	movs	r3, r5
 80005cc:	465a      	mov	r2, fp
 80005ce:	4644      	mov	r4, r8
 80005d0:	40d3      	lsrs	r3, r2
 80005d2:	002a      	movs	r2, r5
 80005d4:	40e2      	lsrs	r2, r4
 80005d6:	001c      	movs	r4, r3
 80005d8:	465b      	mov	r3, fp
 80005da:	0015      	movs	r5, r2
 80005dc:	2b00      	cmp	r3, #0
 80005de:	db2a      	blt.n	8000636 <__udivmoddi4+0x182>
 80005e0:	0026      	movs	r6, r4
 80005e2:	409e      	lsls	r6, r3
 80005e4:	0033      	movs	r3, r6
 80005e6:	0026      	movs	r6, r4
 80005e8:	4647      	mov	r7, r8
 80005ea:	40be      	lsls	r6, r7
 80005ec:	0032      	movs	r2, r6
 80005ee:	1a80      	subs	r0, r0, r2
 80005f0:	4199      	sbcs	r1, r3
 80005f2:	9000      	str	r0, [sp, #0]
 80005f4:	9101      	str	r1, [sp, #4]
 80005f6:	e79f      	b.n	8000538 <__udivmoddi4+0x84>
 80005f8:	42a3      	cmp	r3, r4
 80005fa:	d8bc      	bhi.n	8000576 <__udivmoddi4+0xc2>
 80005fc:	e783      	b.n	8000506 <__udivmoddi4+0x52>
 80005fe:	4642      	mov	r2, r8
 8000600:	2320      	movs	r3, #32
 8000602:	2100      	movs	r1, #0
 8000604:	1a9b      	subs	r3, r3, r2
 8000606:	2200      	movs	r2, #0
 8000608:	9100      	str	r1, [sp, #0]
 800060a:	9201      	str	r2, [sp, #4]
 800060c:	2201      	movs	r2, #1
 800060e:	40da      	lsrs	r2, r3
 8000610:	9201      	str	r2, [sp, #4]
 8000612:	e786      	b.n	8000522 <__udivmoddi4+0x6e>
 8000614:	4642      	mov	r2, r8
 8000616:	2320      	movs	r3, #32
 8000618:	1a9b      	subs	r3, r3, r2
 800061a:	002a      	movs	r2, r5
 800061c:	4646      	mov	r6, r8
 800061e:	409a      	lsls	r2, r3
 8000620:	0023      	movs	r3, r4
 8000622:	40f3      	lsrs	r3, r6
 8000624:	4644      	mov	r4, r8
 8000626:	4313      	orrs	r3, r2
 8000628:	002a      	movs	r2, r5
 800062a:	40e2      	lsrs	r2, r4
 800062c:	001c      	movs	r4, r3
 800062e:	465b      	mov	r3, fp
 8000630:	0015      	movs	r5, r2
 8000632:	2b00      	cmp	r3, #0
 8000634:	dad4      	bge.n	80005e0 <__udivmoddi4+0x12c>
 8000636:	4642      	mov	r2, r8
 8000638:	002f      	movs	r7, r5
 800063a:	2320      	movs	r3, #32
 800063c:	0026      	movs	r6, r4
 800063e:	4097      	lsls	r7, r2
 8000640:	1a9b      	subs	r3, r3, r2
 8000642:	40de      	lsrs	r6, r3
 8000644:	003b      	movs	r3, r7
 8000646:	4333      	orrs	r3, r6
 8000648:	e7cd      	b.n	80005e6 <__udivmoddi4+0x132>
 800064a:	46c0      	nop			; (mov r8, r8)

0800064c <__clzsi2>:
 800064c:	211c      	movs	r1, #28
 800064e:	2301      	movs	r3, #1
 8000650:	041b      	lsls	r3, r3, #16
 8000652:	4298      	cmp	r0, r3
 8000654:	d301      	bcc.n	800065a <__clzsi2+0xe>
 8000656:	0c00      	lsrs	r0, r0, #16
 8000658:	3910      	subs	r1, #16
 800065a:	0a1b      	lsrs	r3, r3, #8
 800065c:	4298      	cmp	r0, r3
 800065e:	d301      	bcc.n	8000664 <__clzsi2+0x18>
 8000660:	0a00      	lsrs	r0, r0, #8
 8000662:	3908      	subs	r1, #8
 8000664:	091b      	lsrs	r3, r3, #4
 8000666:	4298      	cmp	r0, r3
 8000668:	d301      	bcc.n	800066e <__clzsi2+0x22>
 800066a:	0900      	lsrs	r0, r0, #4
 800066c:	3904      	subs	r1, #4
 800066e:	a202      	add	r2, pc, #8	; (adr r2, 8000678 <__clzsi2+0x2c>)
 8000670:	5c10      	ldrb	r0, [r2, r0]
 8000672:	1840      	adds	r0, r0, r1
 8000674:	4770      	bx	lr
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	02020304 	.word	0x02020304
 800067c:	01010101 	.word	0x01010101
	...

08000688 <__clzdi2>:
 8000688:	b510      	push	{r4, lr}
 800068a:	2900      	cmp	r1, #0
 800068c:	d103      	bne.n	8000696 <__clzdi2+0xe>
 800068e:	f7ff ffdd 	bl	800064c <__clzsi2>
 8000692:	3020      	adds	r0, #32
 8000694:	e002      	b.n	800069c <__clzdi2+0x14>
 8000696:	0008      	movs	r0, r1
 8000698:	f7ff ffd8 	bl	800064c <__clzsi2>
 800069c:	bd10      	pop	{r4, pc}
 800069e:	46c0      	nop			; (mov r8, r8)

080006a0 <EINK_NFC_SET_SIZE>:
	//EINK_NFC_DATA_EXTRACT(data, taginfo_obj->QR_txt, QR_BYTE_START, QR_BYTE_STOP);


}

void EINK_NFC_SET_SIZE(EINK_NFC_SIZE size, uint8_t* outputSizeTXT){
 80006a0:	0003      	movs	r3, r0
 80006a2:	b510      	push	{r4, lr}
 80006a4:	0008      	movs	r0, r1

	switch (size)
 80006a6:	2b09      	cmp	r3, #9
 80006a8:	d830      	bhi.n	800070c <EINK_NFC_SET_SIZE+0x6c>
 80006aa:	4a1b      	ldr	r2, [pc, #108]	; (8000718 <EINK_NFC_SET_SIZE+0x78>)
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	58d3      	ldr	r3, [r2, r3]
 80006b0:	469f      	mov	pc, r3
			break;
		case EINK_NFC_SIZE_4XL:
			memcpy(outputSizeTXT,"4XL",SIZE_BYTE_LENGTH_TXT);
			break;
		case EINK_NFC_SIZE_5XL:
			memcpy(outputSizeTXT,"5XL",SIZE_BYTE_LENGTH_TXT);
 80006b2:	2203      	movs	r2, #3
 80006b4:	4919      	ldr	r1, [pc, #100]	; (800071c <EINK_NFC_SET_SIZE+0x7c>)
 80006b6:	f008 ffb7 	bl	8009628 <memcpy>
		default:
			memcpy(outputSizeTXT,"ERR",SIZE_BYTE_LENGTH_TXT);
			break;
	}

}
 80006ba:	bd10      	pop	{r4, pc}
			memcpy(outputSizeTXT," XS",SIZE_BYTE_LENGTH_TXT);
 80006bc:	2203      	movs	r2, #3
 80006be:	4918      	ldr	r1, [pc, #96]	; (8000720 <EINK_NFC_SET_SIZE+0x80>)
 80006c0:	f008 ffb2 	bl	8009628 <memcpy>
			break;
 80006c4:	e7f9      	b.n	80006ba <EINK_NFC_SET_SIZE+0x1a>
			memcpy(outputSizeTXT,"  S",SIZE_BYTE_LENGTH_TXT);
 80006c6:	2203      	movs	r2, #3
 80006c8:	4916      	ldr	r1, [pc, #88]	; (8000724 <EINK_NFC_SET_SIZE+0x84>)
 80006ca:	f008 ffad 	bl	8009628 <memcpy>
			break;
 80006ce:	e7f4      	b.n	80006ba <EINK_NFC_SET_SIZE+0x1a>
			memcpy(outputSizeTXT,"  M",SIZE_BYTE_LENGTH_TXT);
 80006d0:	2203      	movs	r2, #3
 80006d2:	4915      	ldr	r1, [pc, #84]	; (8000728 <EINK_NFC_SET_SIZE+0x88>)
 80006d4:	f008 ffa8 	bl	8009628 <memcpy>
			break;
 80006d8:	e7ef      	b.n	80006ba <EINK_NFC_SET_SIZE+0x1a>
			memcpy(outputSizeTXT,"  L",SIZE_BYTE_LENGTH_TXT);
 80006da:	2203      	movs	r2, #3
 80006dc:	4913      	ldr	r1, [pc, #76]	; (800072c <EINK_NFC_SET_SIZE+0x8c>)
 80006de:	f008 ffa3 	bl	8009628 <memcpy>
			break;
 80006e2:	e7ea      	b.n	80006ba <EINK_NFC_SET_SIZE+0x1a>
			memcpy(outputSizeTXT," XL",SIZE_BYTE_LENGTH_TXT);
 80006e4:	2203      	movs	r2, #3
 80006e6:	4912      	ldr	r1, [pc, #72]	; (8000730 <EINK_NFC_SET_SIZE+0x90>)
 80006e8:	f008 ff9e 	bl	8009628 <memcpy>
			break;
 80006ec:	e7e5      	b.n	80006ba <EINK_NFC_SET_SIZE+0x1a>
			memcpy(outputSizeTXT,"XXL",SIZE_BYTE_LENGTH_TXT);
 80006ee:	2203      	movs	r2, #3
 80006f0:	4910      	ldr	r1, [pc, #64]	; (8000734 <EINK_NFC_SET_SIZE+0x94>)
 80006f2:	f008 ff99 	bl	8009628 <memcpy>
			break;
 80006f6:	e7e0      	b.n	80006ba <EINK_NFC_SET_SIZE+0x1a>
			memcpy(outputSizeTXT,"3XL",SIZE_BYTE_LENGTH_TXT);
 80006f8:	2203      	movs	r2, #3
 80006fa:	490f      	ldr	r1, [pc, #60]	; (8000738 <EINK_NFC_SET_SIZE+0x98>)
 80006fc:	f008 ff94 	bl	8009628 <memcpy>
			break;
 8000700:	e7db      	b.n	80006ba <EINK_NFC_SET_SIZE+0x1a>
			memcpy(outputSizeTXT,"4XL",SIZE_BYTE_LENGTH_TXT);
 8000702:	2203      	movs	r2, #3
 8000704:	490d      	ldr	r1, [pc, #52]	; (800073c <EINK_NFC_SET_SIZE+0x9c>)
 8000706:	f008 ff8f 	bl	8009628 <memcpy>
			break;
 800070a:	e7d6      	b.n	80006ba <EINK_NFC_SET_SIZE+0x1a>
			memcpy(outputSizeTXT,"ERR",SIZE_BYTE_LENGTH_TXT);
 800070c:	2203      	movs	r2, #3
 800070e:	490c      	ldr	r1, [pc, #48]	; (8000740 <EINK_NFC_SET_SIZE+0xa0>)
 8000710:	f008 ff8a 	bl	8009628 <memcpy>
}
 8000714:	e7d1      	b.n	80006ba <EINK_NFC_SET_SIZE+0x1a>
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	0800abc4 	.word	0x0800abc4
 800071c:	0800abbc 	.word	0x0800abbc
 8000720:	0800ab9c 	.word	0x0800ab9c
 8000724:	0800aba0 	.word	0x0800aba0
 8000728:	0800aba4 	.word	0x0800aba4
 800072c:	0800aba8 	.word	0x0800aba8
 8000730:	0800abac 	.word	0x0800abac
 8000734:	0800abb0 	.word	0x0800abb0
 8000738:	0800abb4 	.word	0x0800abb4
 800073c:	0800abb8 	.word	0x0800abb8
 8000740:	0800abc0 	.word	0x0800abc0

08000744 <EINK_NFC_SET_WASHING>:


/////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////

void EINK_NFC_SET_WASHING(EINK_NFC_WASHING washing, uint8_t* outputBitmap){
 8000744:	0003      	movs	r3, r0
 8000746:	b510      	push	{r4, lr}
 8000748:	0008      	movs	r0, r1
	int length_bitmap=WASHING_BYTE_LENGTH_BITMAP;
	switch (washing)
 800074a:	2b72      	cmp	r3, #114	; 0x72
 800074c:	d812      	bhi.n	8000774 <EINK_NFC_SET_WASHING+0x30>
 800074e:	2b2f      	cmp	r3, #47	; 0x2f
 8000750:	d907      	bls.n	8000762 <EINK_NFC_SET_WASHING+0x1e>
 8000752:	3b30      	subs	r3, #48	; 0x30
 8000754:	b2db      	uxtb	r3, r3
 8000756:	2b42      	cmp	r3, #66	; 0x42
 8000758:	d80b      	bhi.n	8000772 <EINK_NFC_SET_WASHING+0x2e>
 800075a:	4a23      	ldr	r2, [pc, #140]	; (80007e8 <EINK_NFC_SET_WASHING+0xa4>)
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	58d3      	ldr	r3, [r2, r3]
 8000760:	469f      	mov	pc, r3
 8000762:	2b01      	cmp	r3, #1
 8000764:	d03a      	beq.n	80007dc <EINK_NFC_SET_WASHING+0x98>
 8000766:	2b02      	cmp	r3, #2
 8000768:	d103      	bne.n	8000772 <EINK_NFC_SET_WASHING+0x2e>
	{
		case EINK_NFC_WASHING_DO_NOT_WASH:
			memcpy(outputBitmap,washing_do_not_wash,length_bitmap);
			break;
		case EINK_NFC_WASHING_HAND_WASH:
			memcpy(outputBitmap,washing_wash_by_hand,length_bitmap);
 800076a:	22af      	movs	r2, #175	; 0xaf
 800076c:	491f      	ldr	r1, [pc, #124]	; (80007ec <EINK_NFC_SET_WASHING+0xa8>)
 800076e:	f008 ff5b 	bl	8009628 <memcpy>

		default:
			break;
	}

}
 8000772:	bd10      	pop	{r4, pc}
	switch (washing)
 8000774:	2b95      	cmp	r3, #149	; 0x95
 8000776:	d1fc      	bne.n	8000772 <EINK_NFC_SET_WASHING+0x2e>
			memcpy(outputBitmap,washing_normal_95,length_bitmap);
 8000778:	22af      	movs	r2, #175	; 0xaf
 800077a:	491d      	ldr	r1, [pc, #116]	; (80007f0 <EINK_NFC_SET_WASHING+0xac>)
 800077c:	f008 ff54 	bl	8009628 <memcpy>
}
 8000780:	e7f7      	b.n	8000772 <EINK_NFC_SET_WASHING+0x2e>
			memcpy(outputBitmap,washing_normal_70,length_bitmap);
 8000782:	22af      	movs	r2, #175	; 0xaf
 8000784:	491b      	ldr	r1, [pc, #108]	; (80007f4 <EINK_NFC_SET_WASHING+0xb0>)
 8000786:	f008 ff4f 	bl	8009628 <memcpy>
			break;
 800078a:	e7f2      	b.n	8000772 <EINK_NFC_SET_WASHING+0x2e>
			memcpy(outputBitmap,washing_very_mild_30,length_bitmap);
 800078c:	22af      	movs	r2, #175	; 0xaf
 800078e:	491a      	ldr	r1, [pc, #104]	; (80007f8 <EINK_NFC_SET_WASHING+0xb4>)
 8000790:	f008 ff4a 	bl	8009628 <memcpy>
			break;
 8000794:	e7ed      	b.n	8000772 <EINK_NFC_SET_WASHING+0x2e>
			memcpy(outputBitmap,washing_mild_30,length_bitmap);
 8000796:	22af      	movs	r2, #175	; 0xaf
 8000798:	4918      	ldr	r1, [pc, #96]	; (80007fc <EINK_NFC_SET_WASHING+0xb8>)
 800079a:	f008 ff45 	bl	8009628 <memcpy>
			break;
 800079e:	e7e8      	b.n	8000772 <EINK_NFC_SET_WASHING+0x2e>
			memcpy(outputBitmap,washing_normal_30,length_bitmap);
 80007a0:	22af      	movs	r2, #175	; 0xaf
 80007a2:	4917      	ldr	r1, [pc, #92]	; (8000800 <EINK_NFC_SET_WASHING+0xbc>)
 80007a4:	f008 ff40 	bl	8009628 <memcpy>
			break;
 80007a8:	e7e3      	b.n	8000772 <EINK_NFC_SET_WASHING+0x2e>
			memcpy(outputBitmap,washing_very_mild_40,length_bitmap);
 80007aa:	22af      	movs	r2, #175	; 0xaf
 80007ac:	4915      	ldr	r1, [pc, #84]	; (8000804 <EINK_NFC_SET_WASHING+0xc0>)
 80007ae:	f008 ff3b 	bl	8009628 <memcpy>
			break;
 80007b2:	e7de      	b.n	8000772 <EINK_NFC_SET_WASHING+0x2e>
			memcpy(outputBitmap,washing_mild_40,length_bitmap);
 80007b4:	22af      	movs	r2, #175	; 0xaf
 80007b6:	4914      	ldr	r1, [pc, #80]	; (8000808 <EINK_NFC_SET_WASHING+0xc4>)
 80007b8:	f008 ff36 	bl	8009628 <memcpy>
			break;
 80007bc:	e7d9      	b.n	8000772 <EINK_NFC_SET_WASHING+0x2e>
			memcpy(outputBitmap,washing_normal_40,length_bitmap);
 80007be:	22af      	movs	r2, #175	; 0xaf
 80007c0:	4912      	ldr	r1, [pc, #72]	; (800080c <EINK_NFC_SET_WASHING+0xc8>)
 80007c2:	f008 ff31 	bl	8009628 <memcpy>
			break;
 80007c6:	e7d4      	b.n	8000772 <EINK_NFC_SET_WASHING+0x2e>
			memcpy(outputBitmap,washing_mild_60,length_bitmap);
 80007c8:	22af      	movs	r2, #175	; 0xaf
 80007ca:	4911      	ldr	r1, [pc, #68]	; (8000810 <EINK_NFC_SET_WASHING+0xcc>)
 80007cc:	f008 ff2c 	bl	8009628 <memcpy>
			break;
 80007d0:	e7cf      	b.n	8000772 <EINK_NFC_SET_WASHING+0x2e>
			memcpy(outputBitmap,washing_normal_60,length_bitmap);
 80007d2:	22af      	movs	r2, #175	; 0xaf
 80007d4:	490f      	ldr	r1, [pc, #60]	; (8000814 <EINK_NFC_SET_WASHING+0xd0>)
 80007d6:	f008 ff27 	bl	8009628 <memcpy>
			break;
 80007da:	e7ca      	b.n	8000772 <EINK_NFC_SET_WASHING+0x2e>
			memcpy(outputBitmap,washing_do_not_wash,length_bitmap);
 80007dc:	22af      	movs	r2, #175	; 0xaf
 80007de:	490e      	ldr	r1, [pc, #56]	; (8000818 <EINK_NFC_SET_WASHING+0xd4>)
 80007e0:	f008 ff22 	bl	8009628 <memcpy>
			break;
 80007e4:	e7c5      	b.n	8000772 <EINK_NFC_SET_WASHING+0x2e>
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	0800abec 	.word	0x0800abec
 80007ec:	0800e144 	.word	0x0800e144
 80007f0:	0800df34 	.word	0x0800df34
 80007f4:	0800de84 	.word	0x0800de84
 80007f8:	0800dfe4 	.word	0x0800dfe4
 80007fc:	0800da64 	.word	0x0800da64
 8000800:	0800dc74 	.word	0x0800dc74
 8000804:	0800e094 	.word	0x0800e094
 8000808:	0800db14 	.word	0x0800db14
 800080c:	0800dd24 	.word	0x0800dd24
 8000810:	0800dbc4 	.word	0x0800dbc4
 8000814:	0800ddd4 	.word	0x0800ddd4
 8000818:	0800d9b4 	.word	0x0800d9b4

0800081c <EINK_NFC_SET_DRYING>:
			break;
	}

}

void EINK_NFC_SET_DRYING(EINK_NFC_DRYING drying, uint8_t* outputBitmap){
 800081c:	0003      	movs	r3, r0
 800081e:	b510      	push	{r4, lr}
 8000820:	0008      	movs	r0, r1
	int length_bitmap=DRYING_BYTE_LENGTH_BITMAP;
	switch (drying)
 8000822:	2b0d      	cmp	r3, #13
 8000824:	d807      	bhi.n	8000836 <EINK_NFC_SET_DRYING+0x1a>
 8000826:	4a22      	ldr	r2, [pc, #136]	; (80008b0 <EINK_NFC_SET_DRYING+0x94>)
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	58d3      	ldr	r3, [r2, r3]
 800082c:	469f      	mov	pc, r3
			break;
		case EINK_NFC_DRYING_DRIP_LINE_DRY_SHADE:
			memcpy(outputBitmap,drying_drip_line_dry_shade,length_bitmap);
			break;
		case EINK_NFC_DRYING_DRIP_FLAT_DRY_SHADE:
			memcpy(outputBitmap,drying_drip_flat_dry_shade,length_bitmap);
 800082e:	22af      	movs	r2, #175	; 0xaf
 8000830:	4920      	ldr	r1, [pc, #128]	; (80008b4 <EINK_NFC_SET_DRYING+0x98>)
 8000832:	f008 fef9 	bl	8009628 <memcpy>
			break;
		default:
			break;
	}

}
 8000836:	bd10      	pop	{r4, pc}
			memcpy(outputBitmap,drying_do_not_tuble_dry,length_bitmap);
 8000838:	22af      	movs	r2, #175	; 0xaf
 800083a:	491f      	ldr	r1, [pc, #124]	; (80008b8 <EINK_NFC_SET_DRYING+0x9c>)
 800083c:	f008 fef4 	bl	8009628 <memcpy>
			break;
 8000840:	e7f9      	b.n	8000836 <EINK_NFC_SET_DRYING+0x1a>
			memcpy(outputBitmap,drying_tumble_drying,length_bitmap);
 8000842:	22af      	movs	r2, #175	; 0xaf
 8000844:	491d      	ldr	r1, [pc, #116]	; (80008bc <EINK_NFC_SET_DRYING+0xa0>)
 8000846:	f008 feef 	bl	8009628 <memcpy>
			break;
 800084a:	e7f4      	b.n	8000836 <EINK_NFC_SET_DRYING+0x1a>
			memcpy(outputBitmap,drying_mild_dry,length_bitmap);
 800084c:	22af      	movs	r2, #175	; 0xaf
 800084e:	491c      	ldr	r1, [pc, #112]	; (80008c0 <EINK_NFC_SET_DRYING+0xa4>)
 8000850:	f008 feea 	bl	8009628 <memcpy>
			break;
 8000854:	e7ef      	b.n	8000836 <EINK_NFC_SET_DRYING+0x1a>
			memcpy(outputBitmap,drying_normal_drying,length_bitmap);
 8000856:	22af      	movs	r2, #175	; 0xaf
 8000858:	491a      	ldr	r1, [pc, #104]	; (80008c4 <EINK_NFC_SET_DRYING+0xa8>)
 800085a:	f008 fee5 	bl	8009628 <memcpy>
			break;
 800085e:	e7ea      	b.n	8000836 <EINK_NFC_SET_DRYING+0x1a>
			memcpy(outputBitmap,drying_natural_drying,length_bitmap);
 8000860:	22af      	movs	r2, #175	; 0xaf
 8000862:	4919      	ldr	r1, [pc, #100]	; (80008c8 <EINK_NFC_SET_DRYING+0xac>)
 8000864:	f008 fee0 	bl	8009628 <memcpy>
			break;
 8000868:	e7e5      	b.n	8000836 <EINK_NFC_SET_DRYING+0x1a>
			memcpy(outputBitmap,drying_drip_line_dry, length_bitmap);
 800086a:	22af      	movs	r2, #175	; 0xaf
 800086c:	4917      	ldr	r1, [pc, #92]	; (80008cc <EINK_NFC_SET_DRYING+0xb0>)
 800086e:	f008 fedb 	bl	8009628 <memcpy>
			break;
 8000872:	e7e0      	b.n	8000836 <EINK_NFC_SET_DRYING+0x1a>
			memcpy(outputBitmap,drying_line_dry,length_bitmap);
 8000874:	22af      	movs	r2, #175	; 0xaf
 8000876:	4916      	ldr	r1, [pc, #88]	; (80008d0 <EINK_NFC_SET_DRYING+0xb4>)
 8000878:	f008 fed6 	bl	8009628 <memcpy>
			break;
 800087c:	e7db      	b.n	8000836 <EINK_NFC_SET_DRYING+0x1a>
			memcpy(outputBitmap,drying_flat_drying,length_bitmap);
 800087e:	22af      	movs	r2, #175	; 0xaf
 8000880:	4914      	ldr	r1, [pc, #80]	; (80008d4 <EINK_NFC_SET_DRYING+0xb8>)
 8000882:	f008 fed1 	bl	8009628 <memcpy>
			break;
 8000886:	e7d6      	b.n	8000836 <EINK_NFC_SET_DRYING+0x1a>
			memcpy(outputBitmap,drying_line_drying_shade,length_bitmap);
 8000888:	22af      	movs	r2, #175	; 0xaf
 800088a:	4913      	ldr	r1, [pc, #76]	; (80008d8 <EINK_NFC_SET_DRYING+0xbc>)
 800088c:	f008 fecc 	bl	8009628 <memcpy>
			break;
 8000890:	e7d1      	b.n	8000836 <EINK_NFC_SET_DRYING+0x1a>
			memcpy(outputBitmap,drying_drip_flat_dry,length_bitmap);
 8000892:	22af      	movs	r2, #175	; 0xaf
 8000894:	4911      	ldr	r1, [pc, #68]	; (80008dc <EINK_NFC_SET_DRYING+0xc0>)
 8000896:	f008 fec7 	bl	8009628 <memcpy>
			break;
 800089a:	e7cc      	b.n	8000836 <EINK_NFC_SET_DRYING+0x1a>
			memcpy(outputBitmap,drying_flat_dry_shade,length_bitmap);
 800089c:	22af      	movs	r2, #175	; 0xaf
 800089e:	4910      	ldr	r1, [pc, #64]	; (80008e0 <EINK_NFC_SET_DRYING+0xc4>)
 80008a0:	f008 fec2 	bl	8009628 <memcpy>
			break;
 80008a4:	e7c7      	b.n	8000836 <EINK_NFC_SET_DRYING+0x1a>
			memcpy(outputBitmap,drying_drip_line_dry_shade,length_bitmap);
 80008a6:	22af      	movs	r2, #175	; 0xaf
 80008a8:	490e      	ldr	r1, [pc, #56]	; (80008e4 <EINK_NFC_SET_DRYING+0xc8>)
 80008aa:	f008 febd 	bl	8009628 <memcpy>
			break;
 80008ae:	e7c2      	b.n	8000836 <EINK_NFC_SET_DRYING+0x1a>
 80008b0:	0800acf8 	.word	0x0800acf8
 80008b4:	0800c7d4 	.word	0x0800c7d4
 80008b8:	0800c674 	.word	0x0800c674
 80008bc:	0800ceb4 	.word	0x0800ceb4
 80008c0:	0800cca4 	.word	0x0800cca4
 80008c4:	0800ce04 	.word	0x0800ce04
 80008c8:	0800cd54 	.word	0x0800cd54
 80008cc:	0800c884 	.word	0x0800c884
 80008d0:	0800cb44 	.word	0x0800cb44
 80008d4:	0800ca94 	.word	0x0800ca94
 80008d8:	0800cbf4 	.word	0x0800cbf4
 80008dc:	0800c724 	.word	0x0800c724
 80008e0:	0800c9e4 	.word	0x0800c9e4
 80008e4:	0800c934 	.word	0x0800c934

080008e8 <EINK_NFC_SET_PROF>:
			break;
	}

}

void EINK_NFC_SET_PROF(EINK_NFC_PROF prof, uint8_t* outputBitmap){
 80008e8:	0003      	movs	r3, r0
 80008ea:	b510      	push	{r4, lr}
 80008ec:	0008      	movs	r0, r1
	int length_bitmap=PROF_BYTE_LENGTH_BITMAP;
	switch (prof)
 80008ee:	2b0b      	cmp	r3, #11
 80008f0:	d807      	bhi.n	8000902 <EINK_NFC_SET_PROF+0x1a>
 80008f2:	4a1d      	ldr	r2, [pc, #116]	; (8000968 <EINK_NFC_SET_PROF+0x80>)
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	58d3      	ldr	r3, [r2, r3]
 80008f8:	469f      	mov	pc, r3
			break;
		case EINK_NFC_PROF_VERY_MILD_WETCLEANING:
			memcpy(outputBitmap,prof_very_mild_wetcleaning,length_bitmap);
			break;
		case EINK_NFC_PROF_DO_NOT_WET_CLEAN:
			memcpy(outputBitmap,prof_do_not_wet_clean,length_bitmap);
 80008fa:	22af      	movs	r2, #175	; 0xaf
 80008fc:	491b      	ldr	r1, [pc, #108]	; (800096c <EINK_NFC_SET_PROF+0x84>)
 80008fe:	f008 fe93 	bl	8009628 <memcpy>

		default:
			break;
	}

}
 8000902:	bd10      	pop	{r4, pc}
			memcpy(outputBitmap,prof_dry_clean,length_bitmap);
 8000904:	22af      	movs	r2, #175	; 0xaf
 8000906:	491a      	ldr	r1, [pc, #104]	; (8000970 <EINK_NFC_SET_PROF+0x88>)
 8000908:	f008 fe8e 	bl	8009628 <memcpy>
			break;
 800090c:	e7f9      	b.n	8000902 <EINK_NFC_SET_PROF+0x1a>
			memcpy(outputBitmap,prof_normal_perhloro_clean,length_bitmap);
 800090e:	22af      	movs	r2, #175	; 0xaf
 8000910:	4918      	ldr	r1, [pc, #96]	; (8000974 <EINK_NFC_SET_PROF+0x8c>)
 8000912:	f008 fe89 	bl	8009628 <memcpy>
			break;
 8000916:	e7f4      	b.n	8000902 <EINK_NFC_SET_PROF+0x1a>
			memcpy(outputBitmap,prof_mild_perchloro_clean,length_bitmap);
 8000918:	22af      	movs	r2, #175	; 0xaf
 800091a:	4917      	ldr	r1, [pc, #92]	; (8000978 <EINK_NFC_SET_PROF+0x90>)
 800091c:	f008 fe84 	bl	8009628 <memcpy>
			break;
 8000920:	e7ef      	b.n	8000902 <EINK_NFC_SET_PROF+0x1a>
			memcpy(outputBitmap,prof_normal_hydro_clean,length_bitmap);
 8000922:	22af      	movs	r2, #175	; 0xaf
 8000924:	4915      	ldr	r1, [pc, #84]	; (800097c <EINK_NFC_SET_PROF+0x94>)
 8000926:	f008 fe7f 	bl	8009628 <memcpy>
			break;
 800092a:	e7ea      	b.n	8000902 <EINK_NFC_SET_PROF+0x1a>
			memcpy(outputBitmap,prof_mild_hydro_clean,length_bitmap);
 800092c:	22af      	movs	r2, #175	; 0xaf
 800092e:	4914      	ldr	r1, [pc, #80]	; (8000980 <EINK_NFC_SET_PROF+0x98>)
 8000930:	f008 fe7a 	bl	8009628 <memcpy>
			break;
 8000934:	e7e5      	b.n	8000902 <EINK_NFC_SET_PROF+0x1a>
			memcpy(outputBitmap,prof_not_dry_clean,length_bitmap);
 8000936:	22af      	movs	r2, #175	; 0xaf
 8000938:	4912      	ldr	r1, [pc, #72]	; (8000984 <EINK_NFC_SET_PROF+0x9c>)
 800093a:	f008 fe75 	bl	8009628 <memcpy>
			break;
 800093e:	e7e0      	b.n	8000902 <EINK_NFC_SET_PROF+0x1a>
			memcpy(outputBitmap,prof_wetcleaning,length_bitmap);
 8000940:	22af      	movs	r2, #175	; 0xaf
 8000942:	4911      	ldr	r1, [pc, #68]	; (8000988 <EINK_NFC_SET_PROF+0xa0>)
 8000944:	f008 fe70 	bl	8009628 <memcpy>
			break;
 8000948:	e7db      	b.n	8000902 <EINK_NFC_SET_PROF+0x1a>
			memcpy(outputBitmap,prof_norm_wetcleaning,length_bitmap);
 800094a:	22af      	movs	r2, #175	; 0xaf
 800094c:	490f      	ldr	r1, [pc, #60]	; (800098c <EINK_NFC_SET_PROF+0xa4>)
 800094e:	f008 fe6b 	bl	8009628 <memcpy>
			break;
 8000952:	e7d6      	b.n	8000902 <EINK_NFC_SET_PROF+0x1a>
			memcpy(outputBitmap,prof_mild_wetcleaning,length_bitmap);
 8000954:	22af      	movs	r2, #175	; 0xaf
 8000956:	490e      	ldr	r1, [pc, #56]	; (8000990 <EINK_NFC_SET_PROF+0xa8>)
 8000958:	f008 fe66 	bl	8009628 <memcpy>
			break;
 800095c:	e7d1      	b.n	8000902 <EINK_NFC_SET_PROF+0x1a>
			memcpy(outputBitmap,prof_very_mild_wetcleaning,length_bitmap);
 800095e:	22af      	movs	r2, #175	; 0xaf
 8000960:	490c      	ldr	r1, [pc, #48]	; (8000994 <EINK_NFC_SET_PROF+0xac>)
 8000962:	f008 fe61 	bl	8009628 <memcpy>
			break;
 8000966:	e7cc      	b.n	8000902 <EINK_NFC_SET_PROF+0x1a>
 8000968:	0800ad30 	.word	0x0800ad30
 800096c:	0800d224 	.word	0x0800d224
 8000970:	0800d2d4 	.word	0x0800d2d4
 8000974:	0800d6f4 	.word	0x0800d6f4
 8000978:	0800d434 	.word	0x0800d434
 800097c:	0800d644 	.word	0x0800d644
 8000980:	0800d384 	.word	0x0800d384
 8000984:	0800d7a4 	.word	0x0800d7a4
 8000988:	0800d904 	.word	0x0800d904
 800098c:	0800d594 	.word	0x0800d594
 8000990:	0800d4e4 	.word	0x0800d4e4
 8000994:	0800d854 	.word	0x0800d854

08000998 <EINK_NFC_Parser>:
	memcpy(outputDataBuff, data+indexSTART, indexSTOP-indexSTART);
 8000998:	22f0      	movs	r2, #240	; 0xf0
void EINK_NFC_Parser(EINK_NFC_TAGINFO_OBJ* taginfo_obj,uint8_t* data){
 800099a:	b570      	push	{r4, r5, r6, lr}
 800099c:	0004      	movs	r4, r0
 800099e:	000d      	movs	r5, r1
	memcpy(outputDataBuff, data+indexSTART, indexSTOP-indexSTART);
 80009a0:	0052      	lsls	r2, r2, #1
 80009a2:	f008 fe41 	bl	8009628 <memcpy>
 80009a6:	0020      	movs	r0, r4
 80009a8:	0029      	movs	r1, r5
 80009aa:	30e1      	adds	r0, #225	; 0xe1
 80009ac:	31f5      	adds	r1, #245	; 0xf5
 80009ae:	2208      	movs	r2, #8
 80009b0:	31ff      	adds	r1, #255	; 0xff
 80009b2:	30ff      	adds	r0, #255	; 0xff
 80009b4:	f008 fe38 	bl	8009628 <memcpy>
 80009b8:	0020      	movs	r0, r4
 80009ba:	0029      	movs	r1, r5
 80009bc:	30ea      	adds	r0, #234	; 0xea
 80009be:	31fd      	adds	r1, #253	; 0xfd
 80009c0:	2208      	movs	r2, #8
 80009c2:	31ff      	adds	r1, #255	; 0xff
 80009c4:	30ff      	adds	r0, #255	; 0xff
 80009c6:	f008 fe2f 	bl	8009628 <memcpy>
 80009ca:	2681      	movs	r6, #129	; 0x81
 80009cc:	0020      	movs	r0, r4
 80009ce:	00b6      	lsls	r6, r6, #2
 80009d0:	30f3      	adds	r0, #243	; 0xf3
 80009d2:	2208      	movs	r2, #8
 80009d4:	19a9      	adds	r1, r5, r6
 80009d6:	30ff      	adds	r0, #255	; 0xff
 80009d8:	f008 fe26 	bl	8009628 <memcpy>
 80009dc:	0020      	movs	r0, r4
 80009de:	2383      	movs	r3, #131	; 0x83
 80009e0:	30fc      	adds	r0, #252	; 0xfc
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	2208      	movs	r2, #8
 80009e6:	18e9      	adds	r1, r5, r3
 80009e8:	30ff      	adds	r0, #255	; 0xff
 80009ea:	f008 fe1d 	bl	8009628 <memcpy>
 80009ee:	2387      	movs	r3, #135	; 0x87
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	5ce8      	ldrb	r0, [r5, r3]
	taginfo_obj->size=sizeObjBuff;
 80009f4:	4b33      	ldr	r3, [pc, #204]	; (8000ac4 <EINK_NFC_Parser+0x12c>)
	EINK_NFC_SET_SIZE(sizeObjBuff,taginfo_obj->size_txt);
 80009f6:	19a1      	adds	r1, r4, r6
	taginfo_obj->size=sizeObjBuff;
 80009f8:	54e0      	strb	r0, [r4, r3]
	EINK_NFC_SET_SIZE(sizeObjBuff,taginfo_obj->size_txt);
 80009fa:	f7ff fe51 	bl	80006a0 <EINK_NFC_SET_SIZE>
	memcpy(outputDataBuff, data+indexSTART, indexSTOP-indexSTART);
 80009fe:	4b32      	ldr	r3, [pc, #200]	; (8000ac8 <EINK_NFC_Parser+0x130>)
 8000a00:	5ce8      	ldrb	r0, [r5, r3]
	taginfo_obj->washing=washingObjBuff;
 8000a02:	23d4      	movs	r3, #212	; 0xd4
 8000a04:	00db      	lsls	r3, r3, #3
 8000a06:	54e0      	strb	r0, [r4, r3]
	EINK_NFC_SET_WASHING(washingObjBuff,taginfo_obj->washing_bitmap);
 8000a08:	2382      	movs	r3, #130	; 0x82
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	18e1      	adds	r1, r4, r3
 8000a0e:	f7ff fe99 	bl	8000744 <EINK_NFC_SET_WASHING>
	memcpy(outputDataBuff, data+indexSTART, indexSTOP-indexSTART);
 8000a12:	4b2e      	ldr	r3, [pc, #184]	; (8000acc <EINK_NFC_Parser+0x134>)
	taginfo_obj->bleaching=bleachingObjBuff;
 8000a14:	4a2e      	ldr	r2, [pc, #184]	; (8000ad0 <EINK_NFC_Parser+0x138>)
 8000a16:	5ceb      	ldrb	r3, [r5, r3]
 8000a18:	54a3      	strb	r3, [r4, r2]
	EINK_NFC_SET_BLEACHING(bleachingObjBuff,taginfo_obj->bleaching_bitmap);
 8000a1a:	4a2e      	ldr	r2, [pc, #184]	; (8000ad4 <EINK_NFC_Parser+0x13c>)
 8000a1c:	18a0      	adds	r0, r4, r2
	switch (bleaching)
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d036      	beq.n	8000a90 <EINK_NFC_Parser+0xf8>
 8000a22:	2b03      	cmp	r3, #3
 8000a24:	d03e      	beq.n	8000aa4 <EINK_NFC_Parser+0x10c>
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d037      	beq.n	8000a9a <EINK_NFC_Parser+0x102>
	memcpy(outputDataBuff, data+indexSTART, indexSTOP-indexSTART);
 8000a2a:	4b2b      	ldr	r3, [pc, #172]	; (8000ad8 <EINK_NFC_Parser+0x140>)
 8000a2c:	5ce8      	ldrb	r0, [r5, r3]
	taginfo_obj->drying=dryingObjBuff;
 8000a2e:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <EINK_NFC_Parser+0x144>)
 8000a30:	54e0      	strb	r0, [r4, r3]
	EINK_NFC_SET_DRYING(dryingObjBuff,taginfo_obj->drying_bitmap);
 8000a32:	4b2b      	ldr	r3, [pc, #172]	; (8000ae0 <EINK_NFC_Parser+0x148>)
 8000a34:	18e1      	adds	r1, r4, r3
 8000a36:	f7ff fef1 	bl	800081c <EINK_NFC_SET_DRYING>
	memcpy(outputDataBuff, data+indexSTART, indexSTOP-indexSTART);
 8000a3a:	2388      	movs	r3, #136	; 0x88
 8000a3c:	009b      	lsls	r3, r3, #2
	taginfo_obj->ironing=ironingObjBuff;
 8000a3e:	4a29      	ldr	r2, [pc, #164]	; (8000ae4 <EINK_NFC_Parser+0x14c>)
 8000a40:	5ceb      	ldrb	r3, [r5, r3]
 8000a42:	54a3      	strb	r3, [r4, r2]
	EINK_NFC_SET_IRONING(ironingObjBuff,taginfo_obj->ironing_bitmap);
 8000a44:	4a28      	ldr	r2, [pc, #160]	; (8000ae8 <EINK_NFC_Parser+0x150>)
 8000a46:	18a0      	adds	r0, r4, r2
	switch (ironing)
 8000a48:	2b03      	cmp	r3, #3
 8000a4a:	d035      	beq.n	8000ab8 <EINK_NFC_Parser+0x120>
 8000a4c:	d819      	bhi.n	8000a82 <EINK_NFC_Parser+0xea>
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d02d      	beq.n	8000aae <EINK_NFC_Parser+0x116>
 8000a52:	2b02      	cmp	r3, #2
 8000a54:	d103      	bne.n	8000a5e <EINK_NFC_Parser+0xc6>
			memcpy(outputBitmap,ironing_low_iron,length_bitmap);
 8000a56:	22af      	movs	r2, #175	; 0xaf
 8000a58:	4924      	ldr	r1, [pc, #144]	; (8000aec <EINK_NFC_Parser+0x154>)
 8000a5a:	f008 fde5 	bl	8009628 <memcpy>
}
 8000a5e:	2388      	movs	r3, #136	; 0x88
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	5ce8      	ldrb	r0, [r5, r3]
	taginfo_obj->professional=professionalObjBuff;
 8000a64:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <EINK_NFC_Parser+0x158>)
 8000a66:	54e0      	strb	r0, [r4, r3]
	EINK_NFC_SET_PROF(professionalObjBuff,taginfo_obj->professional_bitmap);
 8000a68:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <EINK_NFC_Parser+0x15c>)
 8000a6a:	18e1      	adds	r1, r4, r3
 8000a6c:	f7ff ff3c 	bl	80008e8 <EINK_NFC_SET_PROF>
	strncpy((char*)taginfo_obj->QR_txt,(char*)data+QR_BYTE_START,QR_BYTE_LENGTH);
 8000a70:	2296      	movs	r2, #150	; 0x96
 8000a72:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <EINK_NFC_Parser+0x160>)
 8000a74:	0052      	lsls	r2, r2, #1
 8000a76:	18e9      	adds	r1, r5, r3
 8000a78:	4b20      	ldr	r3, [pc, #128]	; (8000afc <EINK_NFC_Parser+0x164>)
 8000a7a:	18e0      	adds	r0, r4, r3
 8000a7c:	f009 f9a8 	bl	8009dd0 <strncpy>
}
 8000a80:	bd70      	pop	{r4, r5, r6, pc}
	switch (ironing)
 8000a82:	2b04      	cmp	r3, #4
 8000a84:	d1eb      	bne.n	8000a5e <EINK_NFC_Parser+0xc6>
			memcpy(outputBitmap,ironing_hot_iron,length_bitmap);
 8000a86:	22af      	movs	r2, #175	; 0xaf
 8000a88:	491d      	ldr	r1, [pc, #116]	; (8000b00 <EINK_NFC_Parser+0x168>)
 8000a8a:	f008 fdcd 	bl	8009628 <memcpy>
			break;
 8000a8e:	e7e6      	b.n	8000a5e <EINK_NFC_Parser+0xc6>
			memcpy(outputBitmap,bleaching_any_bleach,length_bitmap);
 8000a90:	22af      	movs	r2, #175	; 0xaf
 8000a92:	491c      	ldr	r1, [pc, #112]	; (8000b04 <EINK_NFC_Parser+0x16c>)
 8000a94:	f008 fdc8 	bl	8009628 <memcpy>
			break;
 8000a98:	e7c7      	b.n	8000a2a <EINK_NFC_Parser+0x92>
			memcpy(outputBitmap,bleaching_do_not_bleach,length_bitmap);
 8000a9a:	22af      	movs	r2, #175	; 0xaf
 8000a9c:	491a      	ldr	r1, [pc, #104]	; (8000b08 <EINK_NFC_Parser+0x170>)
 8000a9e:	f008 fdc3 	bl	8009628 <memcpy>
}
 8000aa2:	e7c2      	b.n	8000a2a <EINK_NFC_Parser+0x92>
			memcpy(outputBitmap,bleaching_only_oxygen,length_bitmap);
 8000aa4:	22af      	movs	r2, #175	; 0xaf
 8000aa6:	4919      	ldr	r1, [pc, #100]	; (8000b0c <EINK_NFC_Parser+0x174>)
 8000aa8:	f008 fdbe 	bl	8009628 <memcpy>
			break;
 8000aac:	e7bd      	b.n	8000a2a <EINK_NFC_Parser+0x92>
			memcpy(outputBitmap,ironing_do_not_iron,length_bitmap);
 8000aae:	22af      	movs	r2, #175	; 0xaf
 8000ab0:	4917      	ldr	r1, [pc, #92]	; (8000b10 <EINK_NFC_Parser+0x178>)
 8000ab2:	f008 fdb9 	bl	8009628 <memcpy>
}
 8000ab6:	e7d2      	b.n	8000a5e <EINK_NFC_Parser+0xc6>
			memcpy(outputBitmap,ironing_mode_iron,length_bitmap);
 8000ab8:	22af      	movs	r2, #175	; 0xaf
 8000aba:	4916      	ldr	r1, [pc, #88]	; (8000b14 <EINK_NFC_Parser+0x17c>)
 8000abc:	f008 fdb4 	bl	8009628 <memcpy>
			break;
 8000ac0:	e7cd      	b.n	8000a5e <EINK_NFC_Parser+0xc6>
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	0000069f 	.word	0x0000069f
 8000ac8:	0000021d 	.word	0x0000021d
 8000acc:	0000021e 	.word	0x0000021e
 8000ad0:	000006a1 	.word	0x000006a1
 8000ad4:	00000366 	.word	0x00000366
 8000ad8:	0000021f 	.word	0x0000021f
 8000adc:	000006a2 	.word	0x000006a2
 8000ae0:	000002b7 	.word	0x000002b7
 8000ae4:	000006a3 	.word	0x000006a3
 8000ae8:	00000415 	.word	0x00000415
 8000aec:	0800d0c4 	.word	0x0800d0c4
 8000af0:	000006a4 	.word	0x000006a4
 8000af4:	000004c4 	.word	0x000004c4
 8000af8:	00000226 	.word	0x00000226
 8000afc:	00000573 	.word	0x00000573
 8000b00:	0800d014 	.word	0x0800d014
 8000b04:	0800c464 	.word	0x0800c464
 8000b08:	0800c514 	.word	0x0800c514
 8000b0c:	0800c5c4 	.word	0x0800c5c4
 8000b10:	0800cf64 	.word	0x0800cf64
 8000b14:	0800d174 	.word	0x0800d174

08000b18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b1a:	46c6      	mov	lr, r8

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1c:	2501      	movs	r5, #1
{
 8000b1e:	b500      	push	{lr}
 8000b20:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b22:	2214      	movs	r2, #20
 8000b24:	2100      	movs	r1, #0
 8000b26:	a802      	add	r0, sp, #8
 8000b28:	f008 fd9a 	bl	8009660 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2c:	4b21      	ldr	r3, [pc, #132]	; (8000bb4 <MX_GPIO_Init+0x9c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ePD1_RESET_Pin|ePD1_D_C_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ePD1_CS_GPIO_Port, ePD1_CS_Pin, GPIO_PIN_RESET);
 8000b2e:	24a0      	movs	r4, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(ePD1_CS_GPIO_Port, ePD1_CS_Pin, GPIO_PIN_RESET);
 8000b32:	05e4      	lsls	r4, r4, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b34:	432a      	orrs	r2, r5
 8000b36:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ePD1_RESET_Pin|ePD1_D_C_Pin;
 8000b3a:	2600      	movs	r6, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3c:	402a      	ands	r2, r5
 8000b3e:	9200      	str	r2, [sp, #0]
 8000b40:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b42:	2202      	movs	r2, #2
 8000b44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  GPIO_InitStruct.Pin = ePD1_RESET_Pin|ePD1_D_C_Pin;
 8000b46:	2700      	movs	r7, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b48:	4311      	orrs	r1, r2
 8000b4a:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, ePD1_RESET_Pin|ePD1_D_C_Pin, GPIO_PIN_RESET);
 8000b4e:	491a      	ldr	r1, [pc, #104]	; (8000bb8 <MX_GPIO_Init+0xa0>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b50:	401a      	ands	r2, r3
 8000b52:	9201      	str	r2, [sp, #4]
 8000b54:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(GPIOB, ePD1_RESET_Pin|ePD1_D_C_Pin, GPIO_PIN_RESET);
 8000b56:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <MX_GPIO_Init+0xa4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	4698      	mov	r8, r3
 8000b5e:	f000 feb5 	bl	80018cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ePD1_CS_GPIO_Port, ePD1_CS_Pin, GPIO_PIN_RESET);
 8000b62:	2180      	movs	r1, #128	; 0x80
 8000b64:	0020      	movs	r0, r4
 8000b66:	2200      	movs	r2, #0
 8000b68:	0209      	lsls	r1, r1, #8
 8000b6a:	f000 feaf 	bl	80018cc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = ePD1_RESET_Pin|ePD1_D_C_Pin;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	4a11      	ldr	r2, [pc, #68]	; (8000bb8 <MX_GPIO_Init+0xa0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b72:	4640      	mov	r0, r8
 8000b74:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = ePD1_RESET_Pin|ePD1_D_C_Pin;
 8000b76:	9202      	str	r2, [sp, #8]
 8000b78:	9303      	str	r3, [sp, #12]
 8000b7a:	9604      	str	r6, [sp, #16]
 8000b7c:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7e:	f000 fd05 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ePD1_BUSY_Pin;
 8000b82:	2280      	movs	r2, #128	; 0x80
 8000b84:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(ePD1_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000b86:	0020      	movs	r0, r4
  GPIO_InitStruct.Pin = ePD1_BUSY_Pin;
 8000b88:	0052      	lsls	r2, r2, #1
  HAL_GPIO_Init(ePD1_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000b8a:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = ePD1_BUSY_Pin;
 8000b8c:	9202      	str	r2, [sp, #8]
 8000b8e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b90:	9504      	str	r5, [sp, #16]
  HAL_GPIO_Init(ePD1_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f000 fcfb 	bl	800158c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ePD1_CS_Pin;
 8000b96:	2280      	movs	r2, #128	; 0x80
 8000b98:	2301      	movs	r3, #1
 8000b9a:	0212      	lsls	r2, r2, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ePD1_CS_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	0020      	movs	r0, r4
 8000b9e:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = ePD1_CS_Pin;
 8000ba0:	9202      	str	r2, [sp, #8]
 8000ba2:	9303      	str	r3, [sp, #12]
 8000ba4:	9604      	str	r6, [sp, #16]
 8000ba6:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(ePD1_CS_GPIO_Port, &GPIO_InitStruct);
 8000ba8:	f000 fcf0 	bl	800158c <HAL_GPIO_Init>

}
 8000bac:	b008      	add	sp, #32
 8000bae:	bc80      	pop	{r7}
 8000bb0:	46b8      	mov	r8, r7
 8000bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	00000804 	.word	0x00000804
 8000bbc:	50000400 	.word	0x50000400

08000bc0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000bc0:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bc2:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <MX_I2C1_Init+0x6c>)
 8000bc4:	4c1a      	ldr	r4, [pc, #104]	; (8000c30 <MX_I2C1_Init+0x70>)
 8000bc6:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <MX_I2C1_Init+0x74>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bca:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x00707CBB;
 8000bcc:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 166;
 8000bce:	23a6      	movs	r3, #166	; 0xa6
 8000bd0:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bd2:	3ba5      	subs	r3, #165	; 0xa5
 8000bd4:	60e3      	str	r3, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bda:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bdc:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bde:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000be0:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000be2:	f001 f831 	bl	8001c48 <HAL_I2C_Init>
 8000be6:	2800      	cmp	r0, #0
 8000be8:	d10c      	bne.n	8000c04 <MX_I2C1_Init+0x44>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bea:	2100      	movs	r1, #0
 8000bec:	0020      	movs	r0, r4
 8000bee:	f001 ffeb 	bl	8002bc8 <HAL_I2CEx_ConfigAnalogFilter>
 8000bf2:	2800      	cmp	r0, #0
 8000bf4:	d10e      	bne.n	8000c14 <MX_I2C1_Init+0x54>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	0020      	movs	r0, r4
 8000bfa:	f002 f80d 	bl	8002c18 <HAL_I2CEx_ConfigDigitalFilter>
 8000bfe:	2800      	cmp	r0, #0
 8000c00:	d110      	bne.n	8000c24 <MX_I2C1_Init+0x64>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c02:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000c04:	f000 fa80 	bl	8001108 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c08:	2100      	movs	r1, #0
 8000c0a:	0020      	movs	r0, r4
 8000c0c:	f001 ffdc 	bl	8002bc8 <HAL_I2CEx_ConfigAnalogFilter>
 8000c10:	2800      	cmp	r0, #0
 8000c12:	d0f0      	beq.n	8000bf6 <MX_I2C1_Init+0x36>
    Error_Handler();
 8000c14:	f000 fa78 	bl	8001108 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c18:	2100      	movs	r1, #0
 8000c1a:	0020      	movs	r0, r4
 8000c1c:	f001 fffc 	bl	8002c18 <HAL_I2CEx_ConfigDigitalFilter>
 8000c20:	2800      	cmp	r0, #0
 8000c22:	d0ee      	beq.n	8000c02 <MX_I2C1_Init+0x42>
    Error_Handler();
 8000c24:	f000 fa70 	bl	8001108 <Error_Handler>
}
 8000c28:	e7eb      	b.n	8000c02 <MX_I2C1_Init+0x42>
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	40005400 	.word	0x40005400
 8000c30:	200000a4 	.word	0x200000a4
 8000c34:	00707cbb 	.word	0x00707cbb

08000c38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c38:	b510      	push	{r4, lr}
 8000c3a:	0004      	movs	r4, r0
 8000c3c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3e:	2214      	movs	r2, #20
 8000c40:	2100      	movs	r1, #0
 8000c42:	a802      	add	r0, sp, #8
 8000c44:	f008 fd0c 	bl	8009660 <memset>
  if(i2cHandle->Instance==I2C1)
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <HAL_I2C_MspInit+0x64>)
 8000c4a:	6822      	ldr	r2, [r4, #0]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d001      	beq.n	8000c54 <HAL_I2C_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c50:	b008      	add	sp, #32
 8000c52:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c54:	2302      	movs	r3, #2
 8000c56:	4c12      	ldr	r4, [pc, #72]	; (8000ca0 <HAL_I2C_MspInit+0x68>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c58:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5c:	4811      	ldr	r0, [pc, #68]	; (8000ca4 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5e:	431a      	orrs	r2, r3
 8000c60:	62e2      	str	r2, [r4, #44]	; 0x2c
 8000c62:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000c64:	4013      	ands	r3, r2
 8000c66:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000c68:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000c6c:	2312      	movs	r3, #18
 8000c6e:	9202      	str	r2, [sp, #8]
 8000c70:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c72:	2303      	movs	r3, #3
 8000c74:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000c76:	3b02      	subs	r3, #2
 8000c78:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7a:	f000 fc87 	bl	800158c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c7e:	2380      	movs	r3, #128	; 0x80
 8000c80:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000c82:	039b      	lsls	r3, r3, #14
 8000c84:	4313      	orrs	r3, r2
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000c86:	2100      	movs	r1, #0
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2017      	movs	r0, #23
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c8c:	63a3      	str	r3, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000c8e:	f000 fbeb 	bl	8001468 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000c92:	2017      	movs	r0, #23
 8000c94:	f000 fc1a 	bl	80014cc <HAL_NVIC_EnableIRQ>
}
 8000c98:	e7da      	b.n	8000c50 <HAL_I2C_MspInit+0x18>
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	40005400 	.word	0x40005400
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	50000400 	.word	0x50000400

08000ca8 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{

  if(i2cHandle->Instance==I2C1)
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <HAL_I2C_MspDeInit+0x30>)
 8000caa:	6802      	ldr	r2, [r0, #0]
{
 8000cac:	b510      	push	{r4, lr}
  if(i2cHandle->Instance==I2C1)
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d000      	beq.n	8000cb4 <HAL_I2C_MspDeInit+0xc>
    HAL_NVIC_DisableIRQ(I2C1_IRQn);
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 8000cb2:	bd10      	pop	{r4, pc}
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000cb4:	4a09      	ldr	r2, [pc, #36]	; (8000cdc <HAL_I2C_MspDeInit+0x34>)
 8000cb6:	490a      	ldr	r1, [pc, #40]	; (8000ce0 <HAL_I2C_MspDeInit+0x38>)
 8000cb8:	6b93      	ldr	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 8000cba:	480a      	ldr	r0, [pc, #40]	; (8000ce4 <HAL_I2C_MspDeInit+0x3c>)
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000cbc:	400b      	ands	r3, r1
 8000cbe:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 8000cc0:	2140      	movs	r1, #64	; 0x40
 8000cc2:	f000 fd6f 	bl	80017a4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 8000cc6:	2180      	movs	r1, #128	; 0x80
 8000cc8:	4806      	ldr	r0, [pc, #24]	; (8000ce4 <HAL_I2C_MspDeInit+0x3c>)
 8000cca:	f000 fd6b 	bl	80017a4 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C1_IRQn);
 8000cce:	2017      	movs	r0, #23
 8000cd0:	f000 fc08 	bl	80014e4 <HAL_NVIC_DisableIRQ>
}
 8000cd4:	e7ed      	b.n	8000cb2 <HAL_I2C_MspDeInit+0xa>
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	40005400 	.word	0x40005400
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	ffdfffff 	.word	0xffdfffff
 8000ce4:	50000400 	.word	0x50000400

08000ce8 <I2C1_ReadReg16>:
	 IO.GetTick      = (ST25DV_GetTick_Func)HAL_GetTick;
	ST25DV_RegisterBusIO(&st25Obj, &IO);

}
int32_t  I2C1_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000ce8:	b530      	push	{r4, r5, lr}
  int32_t ret = 0;

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, HAL_I2C_STATE_TIMEOUT) != HAL_OK)
 8000cea:	25a0      	movs	r5, #160	; 0xa0
 8000cec:	4c0d      	ldr	r4, [pc, #52]	; (8000d24 <I2C1_ReadReg16+0x3c>)
{
 8000cee:	b085      	sub	sp, #20
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, HAL_I2C_STATE_TIMEOUT) != HAL_OK)
 8000cf0:	9301      	str	r3, [sp, #4]
 8000cf2:	9200      	str	r2, [sp, #0]
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	000a      	movs	r2, r1
 8000cf8:	9502      	str	r5, [sp, #8]
 8000cfa:	0001      	movs	r1, r0
 8000cfc:	0020      	movs	r0, r4
 8000cfe:	f001 f969 	bl	8001fd4 <HAL_I2C_Mem_Read>
 8000d02:	0003      	movs	r3, r0
  int32_t ret = 0;
 8000d04:	2000      	movs	r0, #0
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, HAL_I2C_STATE_TIMEOUT) != HAL_OK)
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d101      	bne.n	8000d0e <I2C1_ReadReg16+0x26>
    {
      ret =  -4;
    }
  }
  return ret;
}
 8000d0a:	b005      	add	sp, #20
 8000d0c:	bd30      	pop	{r4, r5, pc}
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000d0e:	0020      	movs	r0, r4
 8000d10:	f001 ff58 	bl	8002bc4 <HAL_I2C_GetError>
      ret =  -4;
 8000d14:	3804      	subs	r0, #4
 8000d16:	1e43      	subs	r3, r0, #1
 8000d18:	4198      	sbcs	r0, r3
 8000d1a:	2361      	movs	r3, #97	; 0x61
 8000d1c:	4240      	negs	r0, r0
 8000d1e:	4398      	bics	r0, r3
 8000d20:	3804      	subs	r0, #4
 8000d22:	e7f2      	b.n	8000d0a <I2C1_ReadReg16+0x22>
 8000d24:	200000a4 	.word	0x200000a4

08000d28 <I2C1_WriteReg16>:
int32_t I2C1_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000d28:	b530      	push	{r4, r5, lr}
  int32_t ret = 0;

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, HAL_I2C_STATE_TIMEOUT) != HAL_OK)
 8000d2a:	25a0      	movs	r5, #160	; 0xa0
 8000d2c:	4c0d      	ldr	r4, [pc, #52]	; (8000d64 <I2C1_WriteReg16+0x3c>)
{
 8000d2e:	b085      	sub	sp, #20
  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, HAL_I2C_STATE_TIMEOUT) != HAL_OK)
 8000d30:	9301      	str	r3, [sp, #4]
 8000d32:	9200      	str	r2, [sp, #0]
 8000d34:	2302      	movs	r3, #2
 8000d36:	000a      	movs	r2, r1
 8000d38:	9502      	str	r5, [sp, #8]
 8000d3a:	0001      	movs	r1, r0
 8000d3c:	0020      	movs	r0, r4
 8000d3e:	f000 fff7 	bl	8001d30 <HAL_I2C_Mem_Write>
 8000d42:	0003      	movs	r3, r0
  int32_t ret = 0;
 8000d44:	2000      	movs	r0, #0
  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, HAL_I2C_STATE_TIMEOUT) != HAL_OK)
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d101      	bne.n	8000d4e <I2C1_WriteReg16+0x26>
    {
      ret =  -4;
    }
  }
  return ret;
}
 8000d4a:	b005      	add	sp, #20
 8000d4c:	bd30      	pop	{r4, r5, pc}
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8000d4e:	0020      	movs	r0, r4
 8000d50:	f001 ff38 	bl	8002bc4 <HAL_I2C_GetError>
      ret =  -4;
 8000d54:	3804      	subs	r0, #4
 8000d56:	4243      	negs	r3, r0
 8000d58:	4158      	adcs	r0, r3
 8000d5a:	2361      	movs	r3, #97	; 0x61
 8000d5c:	4240      	negs	r0, r0
 8000d5e:	4398      	bics	r0, r3
 8000d60:	3804      	subs	r0, #4
 8000d62:	e7f2      	b.n	8000d4a <I2C1_WriteReg16+0x22>
 8000d64:	200000a4 	.word	0x200000a4

08000d68 <__io_putchar>:
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d68:	2301      	movs	r3, #1
{
 8000d6a:	b500      	push	{lr}
 8000d6c:	b083      	sub	sp, #12
 8000d6e:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d70:	2201      	movs	r2, #1
 8000d72:	425b      	negs	r3, r3
 8000d74:	a901      	add	r1, sp, #4
 8000d76:	4803      	ldr	r0, [pc, #12]	; (8000d84 <__io_putchar+0x1c>)
 8000d78:	f002 ff64 	bl	8003c44 <HAL_UART_Transmit>
}
 8000d7c:	9801      	ldr	r0, [sp, #4]
 8000d7e:	b003      	add	sp, #12
 8000d80:	bd00      	pop	{pc}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	200012e8 	.word	0x200012e8

08000d88 <SystemClock_Config>:
{
 8000d88:	b500      	push	{lr}
 8000d8a:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8c:	2224      	movs	r2, #36	; 0x24
 8000d8e:	2100      	movs	r1, #0
 8000d90:	a80f      	add	r0, sp, #60	; 0x3c
 8000d92:	f008 fc65 	bl	8009660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d96:	2214      	movs	r2, #20
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4668      	mov	r0, sp
 8000d9c:	f008 fc60 	bl	8009660 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da0:	2224      	movs	r2, #36	; 0x24
 8000da2:	2100      	movs	r1, #0
 8000da4:	a805      	add	r0, sp, #20
 8000da6:	f008 fc5b 	bl	8009660 <memset>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000daa:	491e      	ldr	r1, [pc, #120]	; (8000e24 <SystemClock_Config+0x9c>)
 8000dac:	4a1e      	ldr	r2, [pc, #120]	; (8000e28 <SystemClock_Config+0xa0>)
 8000dae:	680b      	ldr	r3, [r1, #0]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db0:	a80e      	add	r0, sp, #56	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000db2:	401a      	ands	r2, r3
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	011b      	lsls	r3, r3, #4
 8000db8:	4313      	orrs	r3, r2
 8000dba:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc4:	330f      	adds	r3, #15
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc6:	2202      	movs	r2, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc8:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	9218      	str	r2, [sp, #96]	; 0x60
 8000dce:	9319      	str	r3, [sp, #100]	; 0x64
 8000dd0:	2280      	movs	r2, #128	; 0x80
 8000dd2:	2380      	movs	r3, #128	; 0x80
 8000dd4:	02d2      	lsls	r2, r2, #11
 8000dd6:	03db      	lsls	r3, r3, #15
 8000dd8:	921a      	str	r2, [sp, #104]	; 0x68
 8000dda:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ddc:	f001 ffa0 	bl	8002d20 <HAL_RCC_OscConfig>
 8000de0:	2800      	cmp	r0, #0
 8000de2:	d001      	beq.n	8000de8 <SystemClock_Config+0x60>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <SystemClock_Config+0x5e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de8:	220f      	movs	r2, #15
 8000dea:	2303      	movs	r3, #3
 8000dec:	9200      	str	r2, [sp, #0]
 8000dee:	9301      	str	r3, [sp, #4]
 8000df0:	2200      	movs	r2, #0
 8000df2:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df4:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000df6:	2101      	movs	r1, #1
 8000df8:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dfa:	9202      	str	r2, [sp, #8]
 8000dfc:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000dfe:	f002 fa89 	bl	8003314 <HAL_RCC_ClockConfig>
 8000e02:	2800      	cmp	r0, #0
 8000e04:	d001      	beq.n	8000e0a <SystemClock_Config+0x82>
 8000e06:	b672      	cpsid	i
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <SystemClock_Config+0x80>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000e0a:	2309      	movs	r3, #9
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e0c:	9008      	str	r0, [sp, #32]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e0e:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e10:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000e12:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e14:	f002 fb8c 	bl	8003530 <HAL_RCCEx_PeriphCLKConfig>
 8000e18:	2800      	cmp	r0, #0
 8000e1a:	d001      	beq.n	8000e20 <SystemClock_Config+0x98>
 8000e1c:	b672      	cpsid	i
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <SystemClock_Config+0x96>
}
 8000e20:	b01d      	add	sp, #116	; 0x74
 8000e22:	bd00      	pop	{pc}
 8000e24:	40007000 	.word	0x40007000
 8000e28:	ffffe7ff 	.word	0xffffe7ff

08000e2c <I2C1_Init_Reg>:
void I2C1_Init_Reg(void){
 8000e2c:	b500      	push	{lr}
	 IO.Init         = (ST25DV_Init_Func) MX_I2C1_Init;
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <I2C1_Init_Reg+0x28>)
void I2C1_Init_Reg(void){
 8000e30:	b087      	sub	sp, #28
	 IO.Init         = (ST25DV_Init_Func) MX_I2C1_Init;
 8000e32:	9300      	str	r3, [sp, #0]
	 IO.DeInit       = (ST25DV_DeInit_Func)HAL_I2C_DeInit;
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <I2C1_Init_Reg+0x2c>)
	ST25DV_RegisterBusIO(&st25Obj, &IO);
 8000e36:	4669      	mov	r1, sp
	 IO.DeInit       = (ST25DV_DeInit_Func)HAL_I2C_DeInit;
 8000e38:	9301      	str	r3, [sp, #4]
	 IO.IsReady      = (ST25DV_IsReady_Func)HAL_I2C_IsDeviceReady;
 8000e3a:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <I2C1_Init_Reg+0x30>)
	ST25DV_RegisterBusIO(&st25Obj, &IO);
 8000e3c:	4808      	ldr	r0, [pc, #32]	; (8000e60 <I2C1_Init_Reg+0x34>)
	 IO.IsReady      = (ST25DV_IsReady_Func)HAL_I2C_IsDeviceReady;
 8000e3e:	9302      	str	r3, [sp, #8]
	 IO.Read         = (ST25DV_Read_Func)I2C1_ReadReg16;
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <I2C1_Init_Reg+0x38>)
 8000e42:	9304      	str	r3, [sp, #16]
	 IO.Write        = (ST25DV_Write_Func)I2C1_WriteReg16;
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <I2C1_Init_Reg+0x3c>)
 8000e46:	9303      	str	r3, [sp, #12]
	 IO.GetTick      = (ST25DV_GetTick_Func)HAL_GetTick;
 8000e48:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <I2C1_Init_Reg+0x40>)
 8000e4a:	9305      	str	r3, [sp, #20]
	ST25DV_RegisterBusIO(&st25Obj, &IO);
 8000e4c:	f008 facc 	bl	80093e8 <ST25DV_RegisterBusIO>
}
 8000e50:	b007      	add	sp, #28
 8000e52:	bd00      	pop	{pc}
 8000e54:	08000bc1 	.word	0x08000bc1
 8000e58:	08001cfd 	.word	0x08001cfd
 8000e5c:	080022c5 	.word	0x080022c5
 8000e60:	20001264 	.word	0x20001264
 8000e64:	08000ce9 	.word	0x08000ce9
 8000e68:	08000d29 	.word	0x08000d29
 8000e6c:	08001439 	.word	0x08001439

08000e70 <main>:
{
 8000e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e72:	46c6      	mov	lr, r8
 8000e74:	b500      	push	{lr}
 8000e76:	4c8b      	ldr	r4, [pc, #556]	; (80010a4 <main+0x234>)
 8000e78:	44a5      	add	sp, r4
  HAL_Init();
 8000e7a:	f000 fabd 	bl	80013f8 <HAL_Init>
  SystemClock_Config();
 8000e7e:	f7ff ff83 	bl	8000d88 <SystemClock_Config>
  MX_GPIO_Init();
 8000e82:	f7ff fe49 	bl	8000b18 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000e86:	f000 f941 	bl	800110c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000e8a:	f000 fa17 	bl	80012bc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000e8e:	f7ff fe97 	bl	8000bc0 <MX_I2C1_Init>
  	I2C1_Init_Reg();
 8000e92:	f7ff ffcb 	bl	8000e2c <I2C1_Init_Reg>
	ST25DV_SetEH_MODE(&st25Obj.Ctx, ST25DV_EH_ACTIVE_AFTER_BOOT);
 8000e96:	4b84      	ldr	r3, [pc, #528]	; (80010a8 <main+0x238>)
 8000e98:	2100      	movs	r1, #0
 8000e9a:	001c      	movs	r4, r3
 8000e9c:	3418      	adds	r4, #24
 8000e9e:	0020      	movs	r0, r4
 8000ea0:	4698      	mov	r8, r3
 8000ea2:	f008 fb45 	bl	8009530 <ST25DV_SetEH_MODE>
	ST25DV_GetEH_MODE(&st25Obj.Ctx, &value_eh_mode);
 8000ea6:	210f      	movs	r1, #15
 8000ea8:	0020      	movs	r0, r4
 8000eaa:	4469      	add	r1, sp
 8000eac:	f008 fb2c 	bl	8009508 <ST25DV_GetEH_MODE>
	ST25DV_SetGPO_ENABLE(&st25Obj.Ctx, 0);
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	0020      	movs	r0, r4
 8000eb4:	f008 fb04 	bl	80094c0 <ST25DV_SetGPO_ENABLE>
	ST25DV_SetGPO_RFWRITE(&st25Obj.Ctx,0);
 8000eb8:	2100      	movs	r1, #0
 8000eba:	0020      	movs	r0, r4
 8000ebc:	f008 fada 	bl	8009474 <ST25DV_SetGPO_RFWRITE>
	ST25DV_SetGPO_RFUSERSTATE(&st25Obj.Ctx, 0);
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	0020      	movs	r0, r4
 8000ec4:	f008 fab2 	bl	800942c <ST25DV_SetGPO_RFUSERSTATE>
	if(EPD_Init() != 0) {
 8000ec8:	f004 f8b6 	bl	8005038 <EPD_Init>
 8000ecc:	2800      	cmp	r0, #0
 8000ece:	d000      	beq.n	8000ed2 <main+0x62>
 8000ed0:	e0e4      	b.n	800109c <main+0x22c>
		EPD_Clear();
 8000ed2:	f004 fa61 	bl	8005398 <EPD_Clear>
		printf("size = %d\r\n", 	 EPD_WIDTH / 8 * EPD_HEIGHT);
 8000ed6:	4975      	ldr	r1, [pc, #468]	; (80010ac <main+0x23c>)
 8000ed8:	4875      	ldr	r0, [pc, #468]	; (80010b0 <main+0x240>)
 8000eda:	f008 fead 	bl	8009c38 <iprintf>
		printf("Paint_NewImage\r\n");
 8000ede:	4875      	ldr	r0, [pc, #468]	; (80010b4 <main+0x244>)
 8000ee0:	f008 ff36 	bl	8009d50 <puts>
		Paint_NewImage(BlackImage, EPD_WIDTH, EPD_HEIGHT, 270, WHITE);
 8000ee4:	26ff      	movs	r6, #255	; 0xff
 8000ee6:	2387      	movs	r3, #135	; 0x87
		uint8_t dataBuff[850]={0};
 8000ee8:	2500      	movs	r5, #0
		Paint_NewImage(BlackImage, EPD_WIDTH, EPD_HEIGHT, 270, WHITE);
 8000eea:	4f73      	ldr	r7, [pc, #460]	; (80010b8 <main+0x248>)
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	22d4      	movs	r2, #212	; 0xd4
 8000ef0:	2168      	movs	r1, #104	; 0x68
 8000ef2:	0038      	movs	r0, r7
 8000ef4:	9600      	str	r6, [sp, #0]
 8000ef6:	f003 fbf1 	bl	80046dc <Paint_NewImage>
		Paint_SelectImage(BlackImage);
 8000efa:	0038      	movs	r0, r7
 8000efc:	f003 fc10 	bl	8004720 <Paint_SelectImage>
		Paint_Clear(WHITE);
 8000f00:	20ff      	movs	r0, #255	; 0xff
 8000f02:	f003 fc2f 	bl	8004764 <Paint_Clear>
		Paint_SelectImage(BlackImage);
 8000f06:	0038      	movs	r0, r7
 8000f08:	f003 fc0a 	bl	8004720 <Paint_SelectImage>
		Paint_Clear(WHITE);
 8000f0c:	20ff      	movs	r0, #255	; 0xff
 8000f0e:	f003 fc29 	bl	8004764 <Paint_Clear>
		uint8_t dataBuff[850]={0};
 8000f12:	2100      	movs	r1, #0
 8000f14:	4a69      	ldr	r2, [pc, #420]	; (80010bc <main+0x24c>)
 8000f16:	a80a      	add	r0, sp, #40	; 0x28
 8000f18:	9509      	str	r5, [sp, #36]	; 0x24
 8000f1a:	f008 fba1 	bl	8009660 <memset>
		ST25DV_ReadData(&st25Obj, dataBuff, 0, 850);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	4b67      	ldr	r3, [pc, #412]	; (80010c0 <main+0x250>)
 8000f22:	4640      	mov	r0, r8
 8000f24:	a909      	add	r1, sp, #36	; 0x24
 8000f26:	f008 fa23 	bl	8009370 <ST25DV_ReadData>
		EINK_NFC_Parser(&eink_nfc_taginfo, dataBuff);
 8000f2a:	4c66      	ldr	r4, [pc, #408]	; (80010c4 <main+0x254>)
 8000f2c:	a909      	add	r1, sp, #36	; 0x24
 8000f2e:	0020      	movs	r0, r4
 8000f30:	f7ff fd32 	bl	8000998 <EINK_NFC_Parser>
		Paint_DrawBitMap_Paste(eink_nfc_taginfo.logo_bitmap, 155, 1, 60, 60, BLACK);
 8000f34:	233c      	movs	r3, #60	; 0x3c
 8000f36:	2201      	movs	r2, #1
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	219b      	movs	r1, #155	; 0x9b
 8000f3c:	0020      	movs	r0, r4
 8000f3e:	9501      	str	r5, [sp, #4]
 8000f40:	f003 fcca 	bl	80048d8 <Paint_DrawBitMap_Paste>
		sprintf(strPrice,"EUR%s",eink_nfc_taginfo.priceEUR_txt);
 8000f44:	0022      	movs	r2, r4
 8000f46:	32e1      	adds	r2, #225	; 0xe1
 8000f48:	495f      	ldr	r1, [pc, #380]	; (80010c8 <main+0x258>)
 8000f4a:	32ff      	adds	r2, #255	; 0xff
 8000f4c:	a805      	add	r0, sp, #20
 8000f4e:	f008 ff09 	bl	8009d64 <siprintf>
		Paint_DrawString_EN(65, 0, 						 strPrice, &Font12, WHITE, BLACK);
 8000f52:	4b5e      	ldr	r3, [pc, #376]	; (80010cc <main+0x25c>)
 8000f54:	2100      	movs	r1, #0
 8000f56:	2041      	movs	r0, #65	; 0x41
 8000f58:	aa05      	add	r2, sp, #20
 8000f5a:	9501      	str	r5, [sp, #4]
 8000f5c:	9600      	str	r6, [sp, #0]
 8000f5e:	4698      	mov	r8, r3
 8000f60:	f003 fc5c 	bl	800481c <Paint_DrawString_EN>
		sprintf(strPrice,"USD%s",eink_nfc_taginfo.priceUSD_txt);
 8000f64:	0022      	movs	r2, r4
 8000f66:	32ea      	adds	r2, #234	; 0xea
 8000f68:	4959      	ldr	r1, [pc, #356]	; (80010d0 <main+0x260>)
 8000f6a:	32ff      	adds	r2, #255	; 0xff
 8000f6c:	a805      	add	r0, sp, #20
 8000f6e:	f008 fef9 	bl	8009d64 <siprintf>
		Paint_DrawString_EN(65, 5 + Font12.Height,		 strPrice, &Font12, WHITE, BLACK);
 8000f72:	4643      	mov	r3, r8
 8000f74:	88d9      	ldrh	r1, [r3, #6]
 8000f76:	2041      	movs	r0, #65	; 0x41
 8000f78:	3105      	adds	r1, #5
 8000f7a:	b289      	uxth	r1, r1
 8000f7c:	aa05      	add	r2, sp, #20
 8000f7e:	9501      	str	r5, [sp, #4]
 8000f80:	9600      	str	r6, [sp, #0]
 8000f82:	f003 fc4b 	bl	800481c <Paint_DrawString_EN>
		sprintf(strPrice,"PLN%s",eink_nfc_taginfo.pricePLN_txt);
 8000f86:	0022      	movs	r2, r4
 8000f88:	32f3      	adds	r2, #243	; 0xf3
 8000f8a:	4952      	ldr	r1, [pc, #328]	; (80010d4 <main+0x264>)
 8000f8c:	32ff      	adds	r2, #255	; 0xff
 8000f8e:	a805      	add	r0, sp, #20
 8000f90:	f008 fee8 	bl	8009d64 <siprintf>
		Paint_DrawString_EN(65, (5 + Font12.Height)*2, 	 strPrice, &Font12, WHITE, BLACK);
 8000f94:	4643      	mov	r3, r8
 8000f96:	88d9      	ldrh	r1, [r3, #6]
 8000f98:	2041      	movs	r0, #65	; 0x41
 8000f9a:	3105      	adds	r1, #5
 8000f9c:	0049      	lsls	r1, r1, #1
 8000f9e:	b289      	uxth	r1, r1
 8000fa0:	aa05      	add	r2, sp, #20
 8000fa2:	9501      	str	r5, [sp, #4]
 8000fa4:	9600      	str	r6, [sp, #0]
 8000fa6:	f003 fc39 	bl	800481c <Paint_DrawString_EN>
		sprintf(strPrice,"GBP%s",eink_nfc_taginfo.priceGBP_txt);
 8000faa:	0022      	movs	r2, r4
 8000fac:	32fc      	adds	r2, #252	; 0xfc
 8000fae:	494a      	ldr	r1, [pc, #296]	; (80010d8 <main+0x268>)
 8000fb0:	32ff      	adds	r2, #255	; 0xff
 8000fb2:	a805      	add	r0, sp, #20
 8000fb4:	f008 fed6 	bl	8009d64 <siprintf>
		Paint_DrawString_EN(65, (5 + Font12.Height)*3, 	 strPrice, &Font12, WHITE, BLACK);
 8000fb8:	4643      	mov	r3, r8
 8000fba:	88db      	ldrh	r3, [r3, #6]
 8000fbc:	2041      	movs	r0, #65	; 0x41
 8000fbe:	0059      	lsls	r1, r3, #1
 8000fc0:	185b      	adds	r3, r3, r1
 8000fc2:	330f      	adds	r3, #15
 8000fc4:	b299      	uxth	r1, r3
 8000fc6:	aa05      	add	r2, sp, #20
 8000fc8:	4643      	mov	r3, r8
 8000fca:	9501      	str	r5, [sp, #4]
 8000fcc:	9600      	str	r6, [sp, #0]
 8000fce:	f003 fc25 	bl	800481c <Paint_DrawString_EN>
		Paint_DrawBitMap_Paste(eink_nfc_taginfo.washing_bitmap,		 position_x, 73, 35, 35, BLACK);
 8000fd2:	2382      	movs	r3, #130	; 0x82
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	18e0      	adds	r0, r4, r3
 8000fd8:	3be6      	subs	r3, #230	; 0xe6
 8000fda:	3bff      	subs	r3, #255	; 0xff
 8000fdc:	4698      	mov	r8, r3
 8000fde:	2249      	movs	r2, #73	; 0x49
 8000fe0:	2119      	movs	r1, #25
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	9501      	str	r5, [sp, #4]
 8000fe6:	f003 fc77 	bl	80048d8 <Paint_DrawBitMap_Paste>
		Paint_DrawBitMap_Paste(eink_nfc_taginfo.bleaching_bitmap, 	 position_x, 73, 35, 35, BLACK);
 8000fea:	4b3c      	ldr	r3, [pc, #240]	; (80010dc <main+0x26c>)
 8000fec:	2249      	movs	r2, #73	; 0x49
 8000fee:	18e0      	adds	r0, r4, r3
 8000ff0:	4643      	mov	r3, r8
 8000ff2:	213c      	movs	r1, #60	; 0x3c
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	9501      	str	r5, [sp, #4]
 8000ff8:	f003 fc6e 	bl	80048d8 <Paint_DrawBitMap_Paste>
		Paint_DrawBitMap_Paste(eink_nfc_taginfo.drying_bitmap, 		 position_x, 73, 35, 35, BLACK);
 8000ffc:	4b38      	ldr	r3, [pc, #224]	; (80010e0 <main+0x270>)
 8000ffe:	2249      	movs	r2, #73	; 0x49
 8001000:	18e0      	adds	r0, r4, r3
 8001002:	4643      	mov	r3, r8
 8001004:	215f      	movs	r1, #95	; 0x5f
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	9501      	str	r5, [sp, #4]
 800100a:	f003 fc65 	bl	80048d8 <Paint_DrawBitMap_Paste>
		Paint_DrawBitMap_Paste(eink_nfc_taginfo.ironing_bitmap, 	 position_x, 73, 35, 35, BLACK);
 800100e:	4b35      	ldr	r3, [pc, #212]	; (80010e4 <main+0x274>)
 8001010:	2249      	movs	r2, #73	; 0x49
 8001012:	18e0      	adds	r0, r4, r3
 8001014:	4643      	mov	r3, r8
 8001016:	2182      	movs	r1, #130	; 0x82
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	9501      	str	r5, [sp, #4]
 800101c:	f003 fc5c 	bl	80048d8 <Paint_DrawBitMap_Paste>
		Paint_DrawBitMap_Paste(eink_nfc_taginfo.professional_bitmap, position_x, 73, 35, 35, BLACK);
 8001020:	4b31      	ldr	r3, [pc, #196]	; (80010e8 <main+0x278>)
 8001022:	2249      	movs	r2, #73	; 0x49
 8001024:	18e0      	adds	r0, r4, r3
 8001026:	4643      	mov	r3, r8
 8001028:	21a5      	movs	r1, #165	; 0xa5
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	9501      	str	r5, [sp, #4]
 800102e:	f003 fc53 	bl	80048d8 <Paint_DrawBitMap_Paste>
		Paint_DrawQR_Paste(eink_nfc_taginfo.QR_txt,0,0);
 8001032:	4b2e      	ldr	r3, [pc, #184]	; (80010ec <main+0x27c>)
 8001034:	2200      	movs	r2, #0
 8001036:	18e0      	adds	r0, r4, r3
 8001038:	2100      	movs	r1, #0
 800103a:	f003 fd6b 	bl	8004b14 <Paint_DrawQR_Paste>
		Paint_SetRotate(ROTATE_180);
 800103e:	20b4      	movs	r0, #180	; 0xb4
 8001040:	f003 fb74 	bl	800472c <Paint_SetRotate>
		Paint_DrawString_EN(0, 0, 				 "size:", &Font8, WHITE, BLACK);
 8001044:	4b2a      	ldr	r3, [pc, #168]	; (80010f0 <main+0x280>)
 8001046:	4a2b      	ldr	r2, [pc, #172]	; (80010f4 <main+0x284>)
 8001048:	2100      	movs	r1, #0
 800104a:	2000      	movs	r0, #0
 800104c:	9501      	str	r5, [sp, #4]
 800104e:	9600      	str	r6, [sp, #0]
 8001050:	4698      	mov	r8, r3
 8001052:	f003 fbe3 	bl	800481c <Paint_DrawString_EN>
		sprintf(strSize,"%s",eink_nfc_taginfo.size_txt);
 8001056:	2381      	movs	r3, #129	; 0x81
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	18e1      	adds	r1, r4, r3
 800105c:	a804      	add	r0, sp, #16
 800105e:	f008 feaf 	bl	8009dc0 <strcpy>
		Paint_DrawString_EN(0, Font8.Height, 	 strSize, &Font16, WHITE, BLACK);
 8001062:	4643      	mov	r3, r8
 8001064:	aa04      	add	r2, sp, #16
 8001066:	88d9      	ldrh	r1, [r3, #6]
 8001068:	2000      	movs	r0, #0
 800106a:	4b23      	ldr	r3, [pc, #140]	; (80010f8 <main+0x288>)
 800106c:	9501      	str	r5, [sp, #4]
 800106e:	9600      	str	r6, [sp, #0]
 8001070:	f003 fbd4 	bl	800481c <Paint_DrawString_EN>
		EPD_Display(BlackImage);
 8001074:	0038      	movs	r0, r7
 8001076:	f004 fa1f 	bl	80054b8 <EPD_Display>
      printf("Goto Sleep mode...\r\n");
 800107a:	4820      	ldr	r0, [pc, #128]	; (80010fc <main+0x28c>)
 800107c:	f008 fe68 	bl	8009d50 <puts>
      EPD_Sleep();
 8001080:	f004 fab8 	bl	80055f4 <EPD_Sleep>
      HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8001084:	2080      	movs	r0, #128	; 0x80
 8001086:	0040      	lsls	r0, r0, #1
 8001088:	f001 fdec 	bl	8002c64 <HAL_PWR_EnableWakeUpPin>
      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800108c:	2104      	movs	r1, #4
 800108e:	4a1c      	ldr	r2, [pc, #112]	; (8001100 <main+0x290>)
 8001090:	6813      	ldr	r3, [r2, #0]
 8001092:	430b      	orrs	r3, r1
 8001094:	6013      	str	r3, [r2, #0]
      HAL_PWR_EnterSTANDBYMode();
 8001096:	f001 fded 	bl	8002c74 <HAL_PWR_EnterSTANDBYMode>
  while (1)
 800109a:	e7fe      	b.n	800109a <main+0x22a>
		printf("e-Paper init failed\r\n");
 800109c:	4819      	ldr	r0, [pc, #100]	; (8001104 <main+0x294>)
 800109e:	f008 fe57 	bl	8009d50 <puts>
 80010a2:	e716      	b.n	8000ed2 <main+0x62>
 80010a4:	fffffc88 	.word	0xfffffc88
 80010a8:	20001264 	.word	0x20001264
 80010ac:	00000ac4 	.word	0x00000ac4
 80010b0:	0800ad78 	.word	0x0800ad78
 80010b4:	0800ad84 	.word	0x0800ad84
 80010b8:	200000f8 	.word	0x200000f8
 80010bc:	0000034e 	.word	0x0000034e
 80010c0:	00000352 	.word	0x00000352
 80010c4:	20000bbc 	.word	0x20000bbc
 80010c8:	0800ad94 	.word	0x0800ad94
 80010cc:	2000000c 	.word	0x2000000c
 80010d0:	0800ad9c 	.word	0x0800ad9c
 80010d4:	0800ada4 	.word	0x0800ada4
 80010d8:	0800adac 	.word	0x0800adac
 80010dc:	00000366 	.word	0x00000366
 80010e0:	000002b7 	.word	0x000002b7
 80010e4:	00000415 	.word	0x00000415
 80010e8:	000004c4 	.word	0x000004c4
 80010ec:	00000573 	.word	0x00000573
 80010f0:	2000001c 	.word	0x2000001c
 80010f4:	0800adb4 	.word	0x0800adb4
 80010f8:	20000014 	.word	0x20000014
 80010fc:	0800adbc 	.word	0x0800adbc
 8001100:	40007000 	.word	0x40007000
 8001104:	0800ad60 	.word	0x0800ad60

08001108 <Error_Handler>:
 8001108:	b672      	cpsid	i
  while (1)
 800110a:	e7fe      	b.n	800110a <Error_Handler+0x2>

0800110c <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800110c:	480f      	ldr	r0, [pc, #60]	; (800114c <MX_SPI1_Init+0x40>)
 800110e:	4b10      	ldr	r3, [pc, #64]	; (8001150 <MX_SPI1_Init+0x44>)
{
 8001110:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 8001112:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001114:	2382      	movs	r3, #130	; 0x82
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001116:	2280      	movs	r2, #128	; 0x80
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800111c:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800111e:	0092      	lsls	r2, r2, #2
 8001120:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001122:	3ae1      	subs	r2, #225	; 0xe1
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001124:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001126:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001128:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800112a:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800112c:	3aff      	subs	r2, #255	; 0xff
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800112e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001130:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001132:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001134:	3307      	adds	r3, #7
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001136:	61c2      	str	r2, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 8001138:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800113a:	f002 fbaf 	bl	800389c <HAL_SPI_Init>
 800113e:	2800      	cmp	r0, #0
 8001140:	d100      	bne.n	8001144 <MX_SPI1_Init+0x38>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001142:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001144:	f7ff ffe0 	bl	8001108 <Error_Handler>
}
 8001148:	e7fb      	b.n	8001142 <MX_SPI1_Init+0x36>
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	2000128c 	.word	0x2000128c
 8001150:	40013000 	.word	0x40013000

08001154 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001154:	b510      	push	{r4, lr}
 8001156:	0004      	movs	r4, r0
 8001158:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115a:	2214      	movs	r2, #20
 800115c:	2100      	movs	r1, #0
 800115e:	a802      	add	r0, sp, #8
 8001160:	f008 fa7e 	bl	8009660 <memset>
  if(spiHandle->Instance==SPI1)
 8001164:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <HAL_SPI_MspInit+0x4c>)
 8001166:	6822      	ldr	r2, [r4, #0]
 8001168:	429a      	cmp	r2, r3
 800116a:	d001      	beq.n	8001170 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800116c:	b008      	add	sp, #32
 800116e:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001170:	2280      	movs	r2, #128	; 0x80
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <HAL_SPI_MspInit+0x50>)
 8001174:	0152      	lsls	r2, r2, #5
 8001176:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001178:	480b      	ldr	r0, [pc, #44]	; (80011a8 <HAL_SPI_MspInit+0x54>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800117a:	430a      	orrs	r2, r1
 800117c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117e:	2202      	movs	r2, #2
 8001180:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001182:	4311      	orrs	r1, r2
 8001184:	62d9      	str	r1, [r3, #44]	; 0x2c
 8001186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001188:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118a:	401a      	ands	r2, r3
 800118c:	9201      	str	r2, [sp, #4]
 800118e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ePD1_SCK_Pin|ePD1_MOSI_Pin;
 8001190:	2228      	movs	r2, #40	; 0x28
 8001192:	2302      	movs	r3, #2
 8001194:	9202      	str	r2, [sp, #8]
 8001196:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001198:	f000 f9f8 	bl	800158c <HAL_GPIO_Init>
}
 800119c:	e7e6      	b.n	800116c <HAL_SPI_MspInit+0x18>
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	40013000 	.word	0x40013000
 80011a4:	40021000 	.word	0x40021000
 80011a8:	50000400 	.word	0x50000400

080011ac <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ac:	2101      	movs	r1, #1
 80011ae:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <HAL_MspInit+0x18>)
 80011b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011b2:	430a      	orrs	r2, r1
 80011b4:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b6:	2280      	movs	r2, #128	; 0x80
 80011b8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80011ba:	0552      	lsls	r2, r2, #21
 80011bc:	430a      	orrs	r2, r1
 80011be:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c0:	4770      	bx	lr
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	40021000 	.word	0x40021000

080011c8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <NMI_Handler>
 80011ca:	46c0      	nop			; (mov r8, r8)

080011cc <HardFault_Handler>:
  */
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <HardFault_Handler>
 80011ce:	46c0      	nop			; (mov r8, r8)

080011d0 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011d0:	4770      	bx	lr
 80011d2:	46c0      	nop			; (mov r8, r8)

080011d4 <PendSV_Handler>:
 80011d4:	4770      	bx	lr
 80011d6:	46c0      	nop			; (mov r8, r8)

080011d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011da:	f000 f921 	bl	8001420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011de:	bd10      	pop	{r4, pc}

080011e0 <I2C1_IRQHandler>:
void I2C1_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80011e0:	4806      	ldr	r0, [pc, #24]	; (80011fc <I2C1_IRQHandler+0x1c>)
{
 80011e2:	b510      	push	{r4, lr}
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80011e4:	6803      	ldr	r3, [r0, #0]
 80011e6:	699a      	ldr	r2, [r3, #24]
 80011e8:	23e0      	movs	r3, #224	; 0xe0
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	421a      	tst	r2, r3
 80011ee:	d002      	beq.n	80011f6 <I2C1_IRQHandler+0x16>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80011f0:	f001 fca4 	bl	8002b3c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80011f4:	bd10      	pop	{r4, pc}
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80011f6:	f001 f95b 	bl	80024b0 <HAL_I2C_EV_IRQHandler>
}
 80011fa:	e7fb      	b.n	80011f4 <I2C1_IRQHandler+0x14>
 80011fc:	200000a4 	.word	0x200000a4

08001200 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001200:	2001      	movs	r0, #1
 8001202:	4770      	bx	lr

08001204 <_kill>:

int _kill(int pid, int sig)
{
 8001204:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001206:	f008 f9d5 	bl	80095b4 <__errno>
 800120a:	2316      	movs	r3, #22
 800120c:	6003      	str	r3, [r0, #0]
  return -1;
 800120e:	2001      	movs	r0, #1
}
 8001210:	4240      	negs	r0, r0
 8001212:	bd10      	pop	{r4, pc}

08001214 <_exit>:

void _exit (int status)
{
 8001214:	b510      	push	{r4, lr}
  errno = EINVAL;
 8001216:	f008 f9cd 	bl	80095b4 <__errno>
 800121a:	2316      	movs	r3, #22
 800121c:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800121e:	e7fe      	b.n	800121e <_exit+0xa>

08001220 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001220:	b570      	push	{r4, r5, r6, lr}
 8001222:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001224:	dd07      	ble.n	8001236 <_read+0x16>
 8001226:	000c      	movs	r4, r1
 8001228:	188d      	adds	r5, r1, r2
  {
    *ptr++ = __io_getchar();
 800122a:	e000      	b.n	800122e <_read+0xe>
 800122c:	bf00      	nop
 800122e:	7020      	strb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001230:	3401      	adds	r4, #1
 8001232:	42ac      	cmp	r4, r5
 8001234:	d1f9      	bne.n	800122a <_read+0xa>
  }

  return len;
}
 8001236:	0030      	movs	r0, r6
 8001238:	bd70      	pop	{r4, r5, r6, pc}
 800123a:	46c0      	nop			; (mov r8, r8)

0800123c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800123c:	b570      	push	{r4, r5, r6, lr}
 800123e:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001240:	dd07      	ble.n	8001252 <_write+0x16>
 8001242:	000c      	movs	r4, r1
 8001244:	188d      	adds	r5, r1, r2
  {
    __io_putchar(*ptr++);
 8001246:	7820      	ldrb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001248:	3401      	adds	r4, #1
    __io_putchar(*ptr++);
 800124a:	f7ff fd8d 	bl	8000d68 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124e:	42ac      	cmp	r4, r5
 8001250:	d1f9      	bne.n	8001246 <_write+0xa>
  }
  return len;
}
 8001252:	0030      	movs	r0, r6
 8001254:	bd70      	pop	{r4, r5, r6, pc}
 8001256:	46c0      	nop			; (mov r8, r8)

08001258 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
 8001258:	2001      	movs	r0, #1
}
 800125a:	4240      	negs	r0, r0
 800125c:	4770      	bx	lr
 800125e:	46c0      	nop			; (mov r8, r8)

08001260 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001260:	2380      	movs	r3, #128	; 0x80
 8001262:	019b      	lsls	r3, r3, #6
  return 0;
}
 8001264:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8001266:	604b      	str	r3, [r1, #4]
}
 8001268:	4770      	bx	lr
 800126a:	46c0      	nop			; (mov r8, r8)

0800126c <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800126c:	2001      	movs	r0, #1
 800126e:	4770      	bx	lr

08001270 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001270:	2000      	movs	r0, #0
 8001272:	4770      	bx	lr

08001274 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001274:	490c      	ldr	r1, [pc, #48]	; (80012a8 <_sbrk+0x34>)
 8001276:	4a0d      	ldr	r2, [pc, #52]	; (80012ac <_sbrk+0x38>)
{
 8001278:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800127a:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800127c:	490c      	ldr	r1, [pc, #48]	; (80012b0 <_sbrk+0x3c>)
{
 800127e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001280:	6808      	ldr	r0, [r1, #0]
 8001282:	2800      	cmp	r0, #0
 8001284:	d004      	beq.n	8001290 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001286:	18c3      	adds	r3, r0, r3
 8001288:	4293      	cmp	r3, r2
 800128a:	d806      	bhi.n	800129a <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800128c:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 800128e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001290:	4808      	ldr	r0, [pc, #32]	; (80012b4 <_sbrk+0x40>)
  if (__sbrk_heap_end + incr > max_heap)
 8001292:	18c3      	adds	r3, r0, r3
    __sbrk_heap_end = &_end;
 8001294:	6008      	str	r0, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001296:	4293      	cmp	r3, r2
 8001298:	d9f8      	bls.n	800128c <_sbrk+0x18>
    errno = ENOMEM;
 800129a:	f008 f98b 	bl	80095b4 <__errno>
 800129e:	230c      	movs	r3, #12
 80012a0:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80012a2:	2001      	movs	r0, #1
 80012a4:	4240      	negs	r0, r0
 80012a6:	e7f2      	b.n	800128e <_sbrk+0x1a>
 80012a8:	00000200 	.word	0x00000200
 80012ac:	20002000 	.word	0x20002000
 80012b0:	200012e4 	.word	0x200012e4
 80012b4:	200013a0 	.word	0x200013a0

080012b8 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b8:	4770      	bx	lr
 80012ba:	46c0      	nop			; (mov r8, r8)

080012bc <MX_USART1_UART_Init>:
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012bc:	480c      	ldr	r0, [pc, #48]	; (80012f0 <MX_USART1_UART_Init+0x34>)
 80012be:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <MX_USART1_UART_Init+0x38>)
{
 80012c0:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 80012c2:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80012c4:	23e1      	movs	r3, #225	; 0xe1
 80012c6:	025b      	lsls	r3, r3, #9
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012c8:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 80012ca:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012cc:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012ce:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012d0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012d2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012d4:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d8:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012da:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012dc:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012de:	f002 ff7d 	bl	80041dc <HAL_UART_Init>
 80012e2:	2800      	cmp	r0, #0
 80012e4:	d100      	bne.n	80012e8 <MX_USART1_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012e6:	bd10      	pop	{r4, pc}
    Error_Handler();
 80012e8:	f7ff ff0e 	bl	8001108 <Error_Handler>
}
 80012ec:	e7fb      	b.n	80012e6 <MX_USART1_UART_Init+0x2a>
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	200012e8 	.word	0x200012e8
 80012f4:	40013800 	.word	0x40013800

080012f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012f8:	b510      	push	{r4, lr}
 80012fa:	0004      	movs	r4, r0
 80012fc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fe:	2214      	movs	r2, #20
 8001300:	2100      	movs	r1, #0
 8001302:	a802      	add	r0, sp, #8
 8001304:	f008 f9ac 	bl	8009660 <memset>
  if(uartHandle->Instance==USART1)
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <HAL_UART_MspInit+0x58>)
 800130a:	6822      	ldr	r2, [r4, #0]
 800130c:	429a      	cmp	r2, r3
 800130e:	d001      	beq.n	8001314 <HAL_UART_MspInit+0x1c>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001310:	b008      	add	sp, #32
 8001312:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001314:	2280      	movs	r2, #128	; 0x80
 8001316:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <HAL_UART_MspInit+0x5c>)
 8001318:	01d2      	lsls	r2, r2, #7
 800131a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_ENABLE();
 800131e:	430a      	orrs	r2, r1
 8001320:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	2201      	movs	r2, #1
 8001324:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001326:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001328:	4311      	orrs	r1, r2
 800132a:	62d9      	str	r1, [r3, #44]	; 0x2c
 800132c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132e:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	401a      	ands	r2, r3
 8001332:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001334:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001336:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001338:	2302      	movs	r3, #2
 800133a:	00d2      	lsls	r2, r2, #3
 800133c:	9202      	str	r2, [sp, #8]
 800133e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001344:	3301      	adds	r3, #1
 8001346:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001348:	f000 f920 	bl	800158c <HAL_GPIO_Init>
}
 800134c:	e7e0      	b.n	8001310 <HAL_UART_MspInit+0x18>
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	40013800 	.word	0x40013800
 8001354:	40021000 	.word	0x40021000

08001358 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   r0, =_estack
 8001358:	480d      	ldr	r0, [pc, #52]	; (8001390 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800135a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800135c:	f7ff ffac 	bl	80012b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001360:	480c      	ldr	r0, [pc, #48]	; (8001394 <LoopForever+0x6>)
  ldr r1, =_edata
 8001362:	490d      	ldr	r1, [pc, #52]	; (8001398 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001364:	4a0d      	ldr	r2, [pc, #52]	; (800139c <LoopForever+0xe>)
  movs r3, #0
 8001366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001368:	e002      	b.n	8001370 <LoopCopyDataInit>

0800136a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800136a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800136c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800136e:	3304      	adds	r3, #4

08001370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001374:	d3f9      	bcc.n	800136a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001376:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001378:	4c0a      	ldr	r4, [pc, #40]	; (80013a4 <LoopForever+0x16>)
  movs r3, #0
 800137a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800137c:	e001      	b.n	8001382 <LoopFillZerobss>

0800137e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800137e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001380:	3204      	adds	r2, #4

08001382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001384:	d3fb      	bcc.n	800137e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001386:	f008 f92b 	bl	80095e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800138a:	f7ff fd71 	bl	8000e70 <main>

0800138e <LoopForever>:

LoopForever:
    b LoopForever
 800138e:	e7fe      	b.n	800138e <LoopForever>
  ldr   r0, =_estack
 8001390:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001398:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800139c:	0800eb04 	.word	0x0800eb04
  ldr r2, =_sbss
 80013a0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80013a4:	2000139c 	.word	0x2000139c

080013a8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013a8:	e7fe      	b.n	80013a8 <ADC1_COMP_IRQHandler>
	...

080013ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ac:	b510      	push	{r4, lr}
 80013ae:	0004      	movs	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013b0:	20fa      	movs	r0, #250	; 0xfa
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <HAL_InitTick+0x40>)
 80013b4:	0080      	lsls	r0, r0, #2
 80013b6:	7819      	ldrb	r1, [r3, #0]
 80013b8:	f7fe feb8 	bl	800012c <__udivsi3>
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <HAL_InitTick+0x44>)
 80013be:	0001      	movs	r1, r0
 80013c0:	6818      	ldr	r0, [r3, #0]
 80013c2:	f7fe feb3 	bl	800012c <__udivsi3>
 80013c6:	f000 f89d 	bl	8001504 <HAL_SYSTICK_Config>
 80013ca:	2800      	cmp	r0, #0
 80013cc:	d10c      	bne.n	80013e8 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 80013ce:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d0:	2c03      	cmp	r4, #3
 80013d2:	d900      	bls.n	80013d6 <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80013d4:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d6:	3802      	subs	r0, #2
 80013d8:	2200      	movs	r2, #0
 80013da:	0021      	movs	r1, r4
 80013dc:	f000 f844 	bl	8001468 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <HAL_InitTick+0x48>)
 80013e2:	2000      	movs	r0, #0
 80013e4:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 80013e6:	e7f5      	b.n	80013d4 <HAL_InitTick+0x28>
    return HAL_ERROR;
 80013e8:	2001      	movs	r0, #1
 80013ea:	e7f3      	b.n	80013d4 <HAL_InitTick+0x28>
 80013ec:	20000004 	.word	0x20000004
 80013f0:	20000000 	.word	0x20000000
 80013f4:	20000008 	.word	0x20000008

080013f8 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80013f8:	2140      	movs	r1, #64	; 0x40
 80013fa:	4a08      	ldr	r2, [pc, #32]	; (800141c <HAL_Init+0x24>)
{
 80013fc:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80013fe:	6813      	ldr	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001400:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001402:	430b      	orrs	r3, r1
 8001404:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001406:	f7ff ffd1 	bl	80013ac <HAL_InitTick>
 800140a:	1e04      	subs	r4, r0, #0
 800140c:	d002      	beq.n	8001414 <HAL_Init+0x1c>
    status = HAL_ERROR;
 800140e:	2401      	movs	r4, #1
}
 8001410:	0020      	movs	r0, r4
 8001412:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8001414:	f7ff feca 	bl	80011ac <HAL_MspInit>
 8001418:	e7fa      	b.n	8001410 <HAL_Init+0x18>
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	40022000 	.word	0x40022000

08001420 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001420:	4a03      	ldr	r2, [pc, #12]	; (8001430 <HAL_IncTick+0x10>)
 8001422:	4b04      	ldr	r3, [pc, #16]	; (8001434 <HAL_IncTick+0x14>)
 8001424:	6811      	ldr	r1, [r2, #0]
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	185b      	adds	r3, r3, r1
 800142a:	6013      	str	r3, [r2, #0]
}
 800142c:	4770      	bx	lr
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	20001370 	.word	0x20001370
 8001434:	20000004 	.word	0x20000004

08001438 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001438:	4b01      	ldr	r3, [pc, #4]	; (8001440 <HAL_GetTick+0x8>)
 800143a:	6818      	ldr	r0, [r3, #0]
}
 800143c:	4770      	bx	lr
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	20001370 	.word	0x20001370

08001444 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001444:	b570      	push	{r4, r5, r6, lr}
 8001446:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001448:	f7ff fff6 	bl	8001438 <HAL_GetTick>
 800144c:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800144e:	1c63      	adds	r3, r4, #1
 8001450:	d002      	beq.n	8001458 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001452:	4b04      	ldr	r3, [pc, #16]	; (8001464 <HAL_Delay+0x20>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001458:	f7ff ffee 	bl	8001438 <HAL_GetTick>
 800145c:	1b40      	subs	r0, r0, r5
 800145e:	42a0      	cmp	r0, r4
 8001460:	d3fa      	bcc.n	8001458 <HAL_Delay+0x14>
  {
  }
}
 8001462:	bd70      	pop	{r4, r5, r6, pc}
 8001464:	20000004 	.word	0x20000004

08001468 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001468:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800146a:	2800      	cmp	r0, #0
 800146c:	db14      	blt.n	8001498 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <HAL_NVIC_SetPriority+0x5c>)
 8001470:	2203      	movs	r2, #3
 8001472:	469c      	mov	ip, r3
 8001474:	23ff      	movs	r3, #255	; 0xff
 8001476:	0884      	lsrs	r4, r0, #2
 8001478:	4010      	ands	r0, r2
 800147a:	001a      	movs	r2, r3
 800147c:	26c0      	movs	r6, #192	; 0xc0
 800147e:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001480:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001482:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001484:	400b      	ands	r3, r1
 8001486:	4083      	lsls	r3, r0
 8001488:	00a4      	lsls	r4, r4, #2
 800148a:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800148c:	00b6      	lsls	r6, r6, #2
 800148e:	59a5      	ldr	r5, [r4, r6]
 8001490:	4395      	bics	r5, r2
 8001492:	432b      	orrs	r3, r5
 8001494:	51a3      	str	r3, [r4, r6]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001496:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001498:	4a0b      	ldr	r2, [pc, #44]	; (80014c8 <HAL_NVIC_SetPriority+0x60>)
 800149a:	230f      	movs	r3, #15
 800149c:	4694      	mov	ip, r2
 800149e:	2203      	movs	r2, #3
 80014a0:	4003      	ands	r3, r0
 80014a2:	4010      	ands	r0, r2
 80014a4:	32fc      	adds	r2, #252	; 0xfc
 80014a6:	0015      	movs	r5, r2
 80014a8:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014aa:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014ac:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014ae:	400a      	ands	r2, r1
 80014b0:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014b2:	3b08      	subs	r3, #8
 80014b4:	089b      	lsrs	r3, r3, #2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4463      	add	r3, ip
 80014ba:	69dc      	ldr	r4, [r3, #28]
 80014bc:	43ac      	bics	r4, r5
 80014be:	4322      	orrs	r2, r4
 80014c0:	61da      	str	r2, [r3, #28]
 80014c2:	e7e8      	b.n	8001496 <HAL_NVIC_SetPriority+0x2e>
 80014c4:	e000e100 	.word	0xe000e100
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80014cc:	2800      	cmp	r0, #0
 80014ce:	db05      	blt.n	80014dc <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d0:	231f      	movs	r3, #31
 80014d2:	4018      	ands	r0, r3
 80014d4:	3b1e      	subs	r3, #30
 80014d6:	4083      	lsls	r3, r0
 80014d8:	4a01      	ldr	r2, [pc, #4]	; (80014e0 <HAL_NVIC_EnableIRQ+0x14>)
 80014da:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80014dc:	4770      	bx	lr
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	e000e100 	.word	0xe000e100

080014e4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80014e4:	2800      	cmp	r0, #0
 80014e6:	db0a      	blt.n	80014fe <HAL_NVIC_DisableIRQ+0x1a>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014e8:	231f      	movs	r3, #31
 80014ea:	4018      	ands	r0, r3
 80014ec:	3b1e      	subs	r3, #30
 80014ee:	4083      	lsls	r3, r0
 80014f0:	2280      	movs	r2, #128	; 0x80
 80014f2:	4903      	ldr	r1, [pc, #12]	; (8001500 <HAL_NVIC_DisableIRQ+0x1c>)
 80014f4:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80014fa:	f3bf 8f6f 	isb	sy
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80014fe:	4770      	bx	lr
 8001500:	e000e100 	.word	0xe000e100

08001504 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001504:	2280      	movs	r2, #128	; 0x80
 8001506:	1e43      	subs	r3, r0, #1
 8001508:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800150a:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800150c:	4293      	cmp	r3, r2
 800150e:	d20e      	bcs.n	800152e <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001510:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001512:	4a07      	ldr	r2, [pc, #28]	; (8001530 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001514:	4807      	ldr	r0, [pc, #28]	; (8001534 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001516:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001518:	6a03      	ldr	r3, [r0, #32]
 800151a:	0609      	lsls	r1, r1, #24
 800151c:	021b      	lsls	r3, r3, #8
 800151e:	0a1b      	lsrs	r3, r3, #8
 8001520:	430b      	orrs	r3, r1
 8001522:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001524:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001526:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001528:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152a:	3307      	adds	r3, #7
 800152c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800152e:	4770      	bx	lr
 8001530:	e000e010 	.word	0xe000e010
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001538:	2325      	movs	r3, #37	; 0x25
{
 800153a:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800153c:	5cc2      	ldrb	r2, [r0, r3]
 800153e:	2a02      	cmp	r2, #2
 8001540:	d003      	beq.n	800154a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001542:	3b21      	subs	r3, #33	; 0x21
 8001544:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8001546:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8001548:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800154a:	240e      	movs	r4, #14
 800154c:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800154e:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001550:	6811      	ldr	r1, [r2, #0]
 8001552:	43a1      	bics	r1, r4
 8001554:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001556:	2101      	movs	r1, #1
 8001558:	6814      	ldr	r4, [r2, #0]
 800155a:	438c      	bics	r4, r1
 800155c:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800155e:	221c      	movs	r2, #28
 8001560:	402a      	ands	r2, r5
 8001562:	000d      	movs	r5, r1
 8001564:	4095      	lsls	r5, r2
 8001566:	6c04      	ldr	r4, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 8001568:	2200      	movs	r2, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800156a:	6065      	str	r5, [r4, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800156c:	54c1      	strb	r1, [r0, r3]
    __HAL_UNLOCK(hdma);
 800156e:	2324      	movs	r3, #36	; 0x24
 8001570:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 8001572:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001574:	2b00      	cmp	r3, #0
 8001576:	d002      	beq.n	800157e <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 8001578:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800157a:	2000      	movs	r0, #0
 800157c:	e7e4      	b.n	8001548 <HAL_DMA_Abort_IT+0x10>
 800157e:	2000      	movs	r0, #0
 8001580:	e7e2      	b.n	8001548 <HAL_DMA_Abort_IT+0x10>
 8001582:	46c0      	nop			; (mov r8, r8)

08001584 <HAL_DMA_GetState>:
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
 8001584:	2325      	movs	r3, #37	; 0x25
 8001586:	5cc0      	ldrb	r0, [r0, r3]
 8001588:	b2c0      	uxtb	r0, r0
}
 800158a:	4770      	bx	lr

0800158c <HAL_GPIO_Init>:
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800158c:	680b      	ldr	r3, [r1, #0]
{
 800158e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001590:	46de      	mov	lr, fp
  while (((GPIO_Init->Pin) >> position) != 0)
 8001592:	469b      	mov	fp, r3
{
 8001594:	4657      	mov	r7, sl
 8001596:	464e      	mov	r6, r9
 8001598:	4645      	mov	r5, r8
 800159a:	468c      	mov	ip, r1
  while (((GPIO_Init->Pin) >> position) != 0)
 800159c:	4659      	mov	r1, fp
{
 800159e:	b5e0      	push	{r5, r6, r7, lr}
  while (((GPIO_Init->Pin) >> position) != 0)
 80015a0:	2200      	movs	r2, #0
  uint32_t position = 0x00U;
 80015a2:	2300      	movs	r3, #0
{
 80015a4:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0)
 80015a6:	2900      	cmp	r1, #0
 80015a8:	d07b      	beq.n	80016a2 <HAL_GPIO_Init+0x116>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80015aa:	2601      	movs	r6, #1
 80015ac:	000c      	movs	r4, r1
 80015ae:	409e      	lsls	r6, r3
 80015b0:	4034      	ands	r4, r6
 80015b2:	46a3      	mov	fp, r4

    if (iocurrent)
 80015b4:	4231      	tst	r1, r6
 80015b6:	d06e      	beq.n	8001696 <HAL_GPIO_Init+0x10a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015b8:	4664      	mov	r4, ip
 80015ba:	2503      	movs	r5, #3
 80015bc:	6864      	ldr	r4, [r4, #4]
 80015be:	4025      	ands	r5, r4
 80015c0:	46a8      	mov	r8, r5
 80015c2:	3d01      	subs	r5, #1
 80015c4:	2d01      	cmp	r5, #1
 80015c6:	d800      	bhi.n	80015ca <HAL_GPIO_Init+0x3e>
 80015c8:	e072      	b.n	80016b0 <HAL_GPIO_Init+0x124>
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015ca:	4645      	mov	r5, r8
 80015cc:	2d03      	cmp	r5, #3
 80015ce:	d000      	beq.n	80015d2 <HAL_GPIO_Init+0x46>
 80015d0:	e0b8      	b.n	8001744 <HAL_GPIO_Init+0x1b8>
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80015d2:	4646      	mov	r6, r8
 80015d4:	4096      	lsls	r6, r2
 80015d6:	43f5      	mvns	r5, r6
 80015d8:	9501      	str	r5, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015da:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015dc:	9d01      	ldr	r5, [sp, #4]
 80015de:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015e0:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 80015e2:	6005      	str	r5, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015e4:	25c0      	movs	r5, #192	; 0xc0
 80015e6:	02ad      	lsls	r5, r5, #10
 80015e8:	422c      	tst	r4, r5
 80015ea:	d054      	beq.n	8001696 <HAL_GPIO_Init+0x10a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ec:	2701      	movs	r7, #1
 80015ee:	4e66      	ldr	r6, [pc, #408]	; (8001788 <HAL_GPIO_Init+0x1fc>)
 80015f0:	6b75      	ldr	r5, [r6, #52]	; 0x34
 80015f2:	433d      	orrs	r5, r7
 80015f4:	6375      	str	r5, [r6, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80015f6:	4e65      	ldr	r6, [pc, #404]	; (800178c <HAL_GPIO_Init+0x200>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80015f8:	3702      	adds	r7, #2
 80015fa:	46b0      	mov	r8, r6
        temp = SYSCFG->EXTICR[position >> 2U];
 80015fc:	089d      	lsrs	r5, r3, #2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80015fe:	401f      	ands	r7, r3
 8001600:	00bf      	lsls	r7, r7, #2
 8001602:	00ad      	lsls	r5, r5, #2
 8001604:	4445      	add	r5, r8
 8001606:	46b8      	mov	r8, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 8001608:	68ae      	ldr	r6, [r5, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800160a:	270f      	movs	r7, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 800160c:	46b2      	mov	sl, r6
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800160e:	4646      	mov	r6, r8
 8001610:	40b7      	lsls	r7, r6
 8001612:	003e      	movs	r6, r7
 8001614:	4657      	mov	r7, sl
 8001616:	43b7      	bics	r7, r6
 8001618:	46ba      	mov	sl, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800161a:	27a0      	movs	r7, #160	; 0xa0
 800161c:	05ff      	lsls	r7, r7, #23
 800161e:	42b8      	cmp	r0, r7
 8001620:	d018      	beq.n	8001654 <HAL_GPIO_Init+0xc8>
 8001622:	4f5b      	ldr	r7, [pc, #364]	; (8001790 <HAL_GPIO_Init+0x204>)
 8001624:	42b8      	cmp	r0, r7
 8001626:	d100      	bne.n	800162a <HAL_GPIO_Init+0x9e>
 8001628:	e0a5      	b.n	8001776 <HAL_GPIO_Init+0x1ea>
 800162a:	4f5a      	ldr	r7, [pc, #360]	; (8001794 <HAL_GPIO_Init+0x208>)
 800162c:	2602      	movs	r6, #2
 800162e:	42b8      	cmp	r0, r7
 8001630:	d009      	beq.n	8001646 <HAL_GPIO_Init+0xba>
 8001632:	4f59      	ldr	r7, [pc, #356]	; (8001798 <HAL_GPIO_Init+0x20c>)
 8001634:	2603      	movs	r6, #3
 8001636:	42b8      	cmp	r0, r7
 8001638:	d100      	bne.n	800163c <HAL_GPIO_Init+0xb0>
 800163a:	e096      	b.n	800176a <HAL_GPIO_Init+0x1de>
 800163c:	4f57      	ldr	r7, [pc, #348]	; (800179c <HAL_GPIO_Init+0x210>)
 800163e:	2606      	movs	r6, #6
 8001640:	42b8      	cmp	r0, r7
 8001642:	d100      	bne.n	8001646 <HAL_GPIO_Init+0xba>
 8001644:	e090      	b.n	8001768 <HAL_GPIO_Init+0x1dc>
 8001646:	0037      	movs	r7, r6
 8001648:	4646      	mov	r6, r8
 800164a:	40b7      	lsls	r7, r6
 800164c:	003e      	movs	r6, r7
 800164e:	4657      	mov	r7, sl
 8001650:	4337      	orrs	r7, r6
 8001652:	46ba      	mov	sl, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001654:	4656      	mov	r6, sl

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001656:	2780      	movs	r7, #128	; 0x80
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001658:	60ae      	str	r6, [r5, #8]
        temp &= ~((uint32_t)iocurrent);
 800165a:	465e      	mov	r6, fp
        temp = EXTI->RTSR;
 800165c:	4d50      	ldr	r5, [pc, #320]	; (80017a0 <HAL_GPIO_Init+0x214>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800165e:	037f      	lsls	r7, r7, #13
        temp &= ~((uint32_t)iocurrent);
 8001660:	43f6      	mvns	r6, r6
        temp = EXTI->RTSR;
 8001662:	68ad      	ldr	r5, [r5, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001664:	423c      	tst	r4, r7
 8001666:	d000      	beq.n	800166a <HAL_GPIO_Init+0xde>
 8001668:	e07b      	b.n	8001762 <HAL_GPIO_Init+0x1d6>
        temp &= ~((uint32_t)iocurrent);
 800166a:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 800166c:	4f4c      	ldr	r7, [pc, #304]	; (80017a0 <HAL_GPIO_Init+0x214>)
 800166e:	60bd      	str	r5, [r7, #8]

        temp = EXTI->FTSR;
 8001670:	68fd      	ldr	r5, [r7, #12]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001672:	02a7      	lsls	r7, r4, #10
 8001674:	d500      	bpl.n	8001678 <HAL_GPIO_Init+0xec>
 8001676:	e071      	b.n	800175c <HAL_GPIO_Init+0x1d0>
        temp &= ~((uint32_t)iocurrent);
 8001678:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 800167a:	4f49      	ldr	r7, [pc, #292]	; (80017a0 <HAL_GPIO_Init+0x214>)
 800167c:	60fd      	str	r5, [r7, #12]

        temp = EXTI->EMR;
 800167e:	687d      	ldr	r5, [r7, #4]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001680:	03a7      	lsls	r7, r4, #14
 8001682:	d468      	bmi.n	8001756 <HAL_GPIO_Init+0x1ca>
        temp &= ~((uint32_t)iocurrent);
 8001684:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8001686:	4f46      	ldr	r7, [pc, #280]	; (80017a0 <HAL_GPIO_Init+0x214>)
 8001688:	607d      	str	r5, [r7, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800168a:	683d      	ldr	r5, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800168c:	03e4      	lsls	r4, r4, #15
 800168e:	d45e      	bmi.n	800174e <HAL_GPIO_Init+0x1c2>
        temp &= ~((uint32_t)iocurrent);
 8001690:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8001692:	4c43      	ldr	r4, [pc, #268]	; (80017a0 <HAL_GPIO_Init+0x214>)
 8001694:	6025      	str	r5, [r4, #0]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001696:	000c      	movs	r4, r1
      }
    }
    position++;
 8001698:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 800169a:	40dc      	lsrs	r4, r3
 800169c:	3202      	adds	r2, #2
 800169e:	2c00      	cmp	r4, #0
 80016a0:	d183      	bne.n	80015aa <HAL_GPIO_Init+0x1e>
  }
}
 80016a2:	b003      	add	sp, #12
 80016a4:	bcf0      	pop	{r4, r5, r6, r7}
 80016a6:	46bb      	mov	fp, r7
 80016a8:	46b2      	mov	sl, r6
 80016aa:	46a9      	mov	r9, r5
 80016ac:	46a0      	mov	r8, r4
 80016ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 80016b0:	6885      	ldr	r5, [r0, #8]
 80016b2:	46a9      	mov	r9, r5
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80016b4:	2503      	movs	r5, #3
 80016b6:	4095      	lsls	r5, r2
 80016b8:	46aa      	mov	sl, r5
 80016ba:	43ed      	mvns	r5, r5
 80016bc:	464f      	mov	r7, r9
 80016be:	9501      	str	r5, [sp, #4]
 80016c0:	4655      	mov	r5, sl
 80016c2:	43af      	bics	r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016c4:	4665      	mov	r5, ip
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80016c6:	46ba      	mov	sl, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016c8:	68ef      	ldr	r7, [r5, #12]
 80016ca:	4097      	lsls	r7, r2
 80016cc:	46b9      	mov	r9, r7
 80016ce:	4657      	mov	r7, sl
 80016d0:	464d      	mov	r5, r9
 80016d2:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 80016d4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80016d6:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016d8:	002f      	movs	r7, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016da:	2501      	movs	r5, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016dc:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016de:	0926      	lsrs	r6, r4, #4
 80016e0:	402e      	ands	r6, r5
 80016e2:	409e      	lsls	r6, r3
 80016e4:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80016e6:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 80016e8:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016ea:	9d01      	ldr	r5, [sp, #4]
 80016ec:	402e      	ands	r6, r5
 80016ee:	46b1      	mov	r9, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016f0:	4666      	mov	r6, ip
 80016f2:	68b6      	ldr	r6, [r6, #8]
 80016f4:	464f      	mov	r7, r9
 80016f6:	4096      	lsls	r6, r2
 80016f8:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 80016fa:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016fc:	4647      	mov	r7, r8
 80016fe:	4646      	mov	r6, r8
 8001700:	4096      	lsls	r6, r2
 8001702:	2f02      	cmp	r7, #2
 8001704:	d000      	beq.n	8001708 <HAL_GPIO_Init+0x17c>
 8001706:	e768      	b.n	80015da <HAL_GPIO_Init+0x4e>
        temp = GPIOx->AFR[position >> 3U];
 8001708:	08dd      	lsrs	r5, r3, #3
 800170a:	00ad      	lsls	r5, r5, #2
 800170c:	46a8      	mov	r8, r5
 800170e:	4480      	add	r8, r0
 8001710:	4645      	mov	r5, r8
 8001712:	6a2d      	ldr	r5, [r5, #32]
 8001714:	46aa      	mov	sl, r5
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001716:	2507      	movs	r5, #7
 8001718:	002f      	movs	r7, r5
 800171a:	401f      	ands	r7, r3
 800171c:	00bd      	lsls	r5, r7, #2
 800171e:	270f      	movs	r7, #15
 8001720:	46a9      	mov	r9, r5
 8001722:	40af      	lsls	r7, r5
 8001724:	4655      	mov	r5, sl
 8001726:	43bd      	bics	r5, r7
 8001728:	46aa      	mov	sl, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800172a:	4665      	mov	r5, ip
 800172c:	464f      	mov	r7, r9
 800172e:	692d      	ldr	r5, [r5, #16]
 8001730:	40bd      	lsls	r5, r7
 8001732:	46a9      	mov	r9, r5
 8001734:	4655      	mov	r5, sl
 8001736:	464f      	mov	r7, r9
 8001738:	433d      	orrs	r5, r7
 800173a:	46aa      	mov	sl, r5
        GPIOx->AFR[position >> 3U] = temp;
 800173c:	4645      	mov	r5, r8
 800173e:	4657      	mov	r7, sl
 8001740:	622f      	str	r7, [r5, #32]
 8001742:	e74a      	b.n	80015da <HAL_GPIO_Init+0x4e>
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001744:	2503      	movs	r5, #3
 8001746:	4095      	lsls	r5, r2
 8001748:	43ed      	mvns	r5, r5
 800174a:	9501      	str	r5, [sp, #4]
 800174c:	e7cc      	b.n	80016e8 <HAL_GPIO_Init+0x15c>
          temp |= iocurrent;
 800174e:	465c      	mov	r4, fp
 8001750:	432c      	orrs	r4, r5
 8001752:	0025      	movs	r5, r4
 8001754:	e79d      	b.n	8001692 <HAL_GPIO_Init+0x106>
          temp |= iocurrent;
 8001756:	465f      	mov	r7, fp
 8001758:	433d      	orrs	r5, r7
 800175a:	e794      	b.n	8001686 <HAL_GPIO_Init+0xfa>
          temp |= iocurrent;
 800175c:	465f      	mov	r7, fp
 800175e:	433d      	orrs	r5, r7
 8001760:	e78b      	b.n	800167a <HAL_GPIO_Init+0xee>
          temp |= iocurrent;
 8001762:	465f      	mov	r7, fp
 8001764:	433d      	orrs	r5, r7
 8001766:	e781      	b.n	800166c <HAL_GPIO_Init+0xe0>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001768:	2605      	movs	r6, #5
 800176a:	4647      	mov	r7, r8
 800176c:	40be      	lsls	r6, r7
 800176e:	4657      	mov	r7, sl
 8001770:	4337      	orrs	r7, r6
 8001772:	46ba      	mov	sl, r7
 8001774:	e76e      	b.n	8001654 <HAL_GPIO_Init+0xc8>
 8001776:	4646      	mov	r6, r8
 8001778:	2701      	movs	r7, #1
 800177a:	40b7      	lsls	r7, r6
 800177c:	003e      	movs	r6, r7
 800177e:	4657      	mov	r7, sl
 8001780:	4337      	orrs	r7, r6
 8001782:	46ba      	mov	sl, r7
 8001784:	e766      	b.n	8001654 <HAL_GPIO_Init+0xc8>
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	40021000 	.word	0x40021000
 800178c:	40010000 	.word	0x40010000
 8001790:	50000400 	.word	0x50000400
 8001794:	50000800 	.word	0x50000800
 8001798:	50000c00 	.word	0x50000c00
 800179c:	50001c00 	.word	0x50001c00
 80017a0:	40010400 	.word	0x40010400

080017a4 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80017a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017a6:	46de      	mov	lr, fp
 80017a8:	4657      	mov	r7, sl
 80017aa:	464e      	mov	r6, r9
 80017ac:	4645      	mov	r5, r8
 80017ae:	b5e0      	push	{r5, r6, r7, lr}
  uint32_t position = 0x00U;
 80017b0:	2300      	movs	r3, #0
{
 80017b2:	b083      	sub	sp, #12

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 80017b4:	2900      	cmp	r1, #0
 80017b6:	d065      	beq.n	8001884 <HAL_GPIO_DeInit+0xe0>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 80017b8:	2201      	movs	r2, #1
 80017ba:	4691      	mov	r9, r2
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 80017bc:	3202      	adds	r2, #2
 80017be:	4693      	mov	fp, r2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80017c0:	4a3c      	ldr	r2, [pc, #240]	; (80018b4 <HAL_GPIO_DeInit+0x110>)
 80017c2:	4694      	mov	ip, r2
 80017c4:	e044      	b.n	8001850 <HAL_GPIO_DeInit+0xac>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80017c6:	4c3c      	ldr	r4, [pc, #240]	; (80018b8 <HAL_GPIO_DeInit+0x114>)
 80017c8:	42a0      	cmp	r0, r4
 80017ca:	d062      	beq.n	8001892 <HAL_GPIO_DeInit+0xee>
 80017cc:	4c3b      	ldr	r4, [pc, #236]	; (80018bc <HAL_GPIO_DeInit+0x118>)
 80017ce:	42a0      	cmp	r0, r4
 80017d0:	d063      	beq.n	800189a <HAL_GPIO_DeInit+0xf6>
 80017d2:	4c3b      	ldr	r4, [pc, #236]	; (80018c0 <HAL_GPIO_DeInit+0x11c>)
 80017d4:	42a0      	cmp	r0, r4
 80017d6:	d064      	beq.n	80018a2 <HAL_GPIO_DeInit+0xfe>
 80017d8:	4c3a      	ldr	r4, [pc, #232]	; (80018c4 <HAL_GPIO_DeInit+0x120>)
 80017da:	42a0      	cmp	r0, r4
 80017dc:	d065      	beq.n	80018aa <HAL_GPIO_DeInit+0x106>
 80017de:	2406      	movs	r4, #6
 80017e0:	40ac      	lsls	r4, r5
 80017e2:	0025      	movs	r5, r4
 80017e4:	42ae      	cmp	r6, r5
 80017e6:	d111      	bne.n	800180c <HAL_GPIO_DeInit+0x68>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80017e8:	4664      	mov	r4, ip
 80017ea:	6825      	ldr	r5, [r4, #0]
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
        EXTI->RTSR &= ~((uint32_t)iocurrent);

        tmp = (0x0FUL) << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80017ec:	9e01      	ldr	r6, [sp, #4]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80017ee:	43bd      	bics	r5, r7
 80017f0:	6025      	str	r5, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80017f2:	6865      	ldr	r5, [r4, #4]
 80017f4:	43bd      	bics	r5, r7
 80017f6:	6065      	str	r5, [r4, #4]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80017f8:	68e5      	ldr	r5, [r4, #12]
 80017fa:	43bd      	bics	r5, r7
 80017fc:	60e5      	str	r5, [r4, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80017fe:	68a5      	ldr	r5, [r4, #8]
 8001800:	43bd      	bics	r5, r7
 8001802:	60a5      	str	r5, [r4, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001804:	4644      	mov	r4, r8
 8001806:	68b5      	ldr	r5, [r6, #8]
 8001808:	43a5      	bics	r5, r4
 800180a:	60b5      	str	r5, [r6, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 800180c:	465e      	mov	r6, fp
 800180e:	005d      	lsls	r5, r3, #1
 8001810:	40ae      	lsls	r6, r5
 8001812:	6804      	ldr	r4, [r0, #0]
 8001814:	0035      	movs	r5, r6
 8001816:	4334      	orrs	r4, r6
 8001818:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800181a:	08dc      	lsrs	r4, r3, #3
 800181c:	00a4      	lsls	r4, r4, #2
 800181e:	1904      	adds	r4, r0, r4
 8001820:	6a26      	ldr	r6, [r4, #32]
 8001822:	2707      	movs	r7, #7
 8001824:	46b0      	mov	r8, r6
 8001826:	260f      	movs	r6, #15
 8001828:	401f      	ands	r7, r3
 800182a:	00bf      	lsls	r7, r7, #2
 800182c:	40be      	lsls	r6, r7
 800182e:	0037      	movs	r7, r6
 8001830:	4646      	mov	r6, r8
 8001832:	43be      	bics	r6, r7
 8001834:	6226      	str	r6, [r4, #32]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001836:	68c4      	ldr	r4, [r0, #12]
 8001838:	43ac      	bics	r4, r5
 800183a:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800183c:	6844      	ldr	r4, [r0, #4]
 800183e:	4394      	bics	r4, r2
 8001840:	6044      	str	r4, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001842:	6882      	ldr	r2, [r0, #8]
 8001844:	43aa      	bics	r2, r5
 8001846:	6082      	str	r2, [r0, #8]
  while ((GPIO_Pin >> position) != 0)
 8001848:	000a      	movs	r2, r1
    }
    position++;
 800184a:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0)
 800184c:	40da      	lsrs	r2, r3
 800184e:	d019      	beq.n	8001884 <HAL_GPIO_DeInit+0xe0>
    iocurrent = (GPIO_Pin) & (1U << position);
 8001850:	464a      	mov	r2, r9
 8001852:	000f      	movs	r7, r1
 8001854:	409a      	lsls	r2, r3
 8001856:	4017      	ands	r7, r2
    if (iocurrent)
 8001858:	4211      	tst	r1, r2
 800185a:	d0f5      	beq.n	8001848 <HAL_GPIO_DeInit+0xa4>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800185c:	4d1a      	ldr	r5, [pc, #104]	; (80018c8 <HAL_GPIO_DeInit+0x124>)
 800185e:	089c      	lsrs	r4, r3, #2
 8001860:	46a8      	mov	r8, r5
 8001862:	00a4      	lsls	r4, r4, #2
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8001864:	465d      	mov	r5, fp
 8001866:	4444      	add	r4, r8
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001868:	68a6      	ldr	r6, [r4, #8]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800186a:	9401      	str	r4, [sp, #4]
 800186c:	240f      	movs	r4, #15
 800186e:	401d      	ands	r5, r3
 8001870:	00ad      	lsls	r5, r5, #2
 8001872:	40ac      	lsls	r4, r5
 8001874:	46a0      	mov	r8, r4
 8001876:	4026      	ands	r6, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001878:	24a0      	movs	r4, #160	; 0xa0
 800187a:	05e4      	lsls	r4, r4, #23
 800187c:	42a0      	cmp	r0, r4
 800187e:	d1a2      	bne.n	80017c6 <HAL_GPIO_DeInit+0x22>
 8001880:	2500      	movs	r5, #0
 8001882:	e7af      	b.n	80017e4 <HAL_GPIO_DeInit+0x40>
  }
}
 8001884:	b003      	add	sp, #12
 8001886:	bcf0      	pop	{r4, r5, r6, r7}
 8001888:	46bb      	mov	fp, r7
 800188a:	46b2      	mov	sl, r6
 800188c:	46a9      	mov	r9, r5
 800188e:	46a0      	mov	r8, r4
 8001890:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001892:	464c      	mov	r4, r9
 8001894:	40ac      	lsls	r4, r5
 8001896:	0025      	movs	r5, r4
 8001898:	e7a4      	b.n	80017e4 <HAL_GPIO_DeInit+0x40>
 800189a:	2402      	movs	r4, #2
 800189c:	40ac      	lsls	r4, r5
 800189e:	0025      	movs	r5, r4
 80018a0:	e7a0      	b.n	80017e4 <HAL_GPIO_DeInit+0x40>
 80018a2:	465c      	mov	r4, fp
 80018a4:	40ac      	lsls	r4, r5
 80018a6:	0025      	movs	r5, r4
 80018a8:	e79c      	b.n	80017e4 <HAL_GPIO_DeInit+0x40>
 80018aa:	2405      	movs	r4, #5
 80018ac:	40ac      	lsls	r4, r5
 80018ae:	0025      	movs	r5, r4
 80018b0:	e798      	b.n	80017e4 <HAL_GPIO_DeInit+0x40>
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	40010400 	.word	0x40010400
 80018b8:	50000400 	.word	0x50000400
 80018bc:	50000800 	.word	0x50000800
 80018c0:	50000c00 	.word	0x50000c00
 80018c4:	50001c00 	.word	0x50001c00
 80018c8:	40010000 	.word	0x40010000

080018cc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018cc:	2a00      	cmp	r2, #0
 80018ce:	d001      	beq.n	80018d4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018d0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80018d2:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80018d4:	6281      	str	r1, [r0, #40]	; 0x28
}
 80018d6:	e7fc      	b.n	80018d2 <HAL_GPIO_WritePin+0x6>

080018d8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80018d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018da:	464e      	mov	r6, r9
 80018dc:	4645      	mov	r5, r8
 80018de:	46de      	mov	lr, fp
 80018e0:	4657      	mov	r7, sl
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80018e2:	2420      	movs	r4, #32
{
 80018e4:	b5e0      	push	{r5, r6, r7, lr}
 80018e6:	4680      	mov	r8, r0
 80018e8:	000e      	movs	r6, r1
 80018ea:	b083      	sub	sp, #12
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018ec:	6803      	ldr	r3, [r0, #0]
{
 80018ee:	9201      	str	r2, [sp, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80018f0:	2202      	movs	r2, #2
 80018f2:	4692      	mov	sl, r2
 80018f4:	4657      	mov	r7, sl
 80018f6:	4651      	mov	r1, sl
 80018f8:	699a      	ldr	r2, [r3, #24]
 80018fa:	4017      	ands	r7, r2
 80018fc:	4211      	tst	r1, r2
 80018fe:	d000      	beq.n	8001902 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
 8001900:	e0b7      	b.n	8001a72 <I2C_WaitOnTXISFlagUntilTimeout+0x19a>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001902:	2110      	movs	r1, #16
 8001904:	000a      	movs	r2, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 8001906:	6998      	ldr	r0, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001908:	2500      	movs	r5, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800190a:	4002      	ands	r2, r0
 800190c:	4201      	tst	r1, r0
 800190e:	d015      	beq.n	800193c <I2C_WaitOnTXISFlagUntilTimeout+0x64>
  HAL_StatusTypeDef status = HAL_OK;
 8001910:	2200      	movs	r2, #0
 8001912:	4691      	mov	r9, r2
      if (Timeout != HAL_MAX_DELAY)
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
          tmp2 = hi2c->Mode;
 8001914:	3242      	adds	r2, #66	; 0x42
 8001916:	4693      	mov	fp, r2
  uint32_t tickstart = Tickstart;
 8001918:	9d01      	ldr	r5, [sp, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800191a:	61d9      	str	r1, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800191c:	1c72      	adds	r2, r6, #1
 800191e:	d14b      	bne.n	80019b8 <I2C_WaitOnTXISFlagUntilTimeout+0xe0>
 8001920:	699a      	ldr	r2, [r3, #24]
 8001922:	4214      	tst	r4, r2
 8001924:	d000      	beq.n	8001928 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
 8001926:	e0b5      	b.n	8001a94 <I2C_WaitOnTXISFlagUntilTimeout+0x1bc>
 8001928:	464a      	mov	r2, r9
 800192a:	2a00      	cmp	r2, #0
 800192c:	d103      	bne.n	8001936 <I2C_WaitOnTXISFlagUntilTimeout+0x5e>
 800192e:	699a      	ldr	r2, [r3, #24]
 8001930:	4214      	tst	r4, r2
 8001932:	d0fc      	beq.n	800192e <I2C_WaitOnTXISFlagUntilTimeout+0x56>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001934:	61dc      	str	r4, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001936:	2204      	movs	r2, #4

    status = HAL_ERROR;
 8001938:	2501      	movs	r5, #1
    error_code |= HAL_I2C_ERROR_AF;
 800193a:	433a      	orrs	r2, r7
  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800193c:	2080      	movs	r0, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 800193e:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001940:	0040      	lsls	r0, r0, #1
 8001942:	4201      	tst	r1, r0
 8001944:	d034      	beq.n	80019b0 <I2C_WaitOnTXISFlagUntilTimeout+0xd8>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001946:	2401      	movs	r4, #1
 8001948:	4645      	mov	r5, r8
 800194a:	4322      	orrs	r2, r4

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800194c:	61d8      	str	r0, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800194e:	0548      	lsls	r0, r1, #21
 8001950:	d504      	bpl.n	800195c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001952:	2008      	movs	r0, #8
 8001954:	4302      	orrs	r2, r0

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001956:	2080      	movs	r0, #128	; 0x80
 8001958:	00c0      	lsls	r0, r0, #3
 800195a:	61d8      	str	r0, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800195c:	0589      	lsls	r1, r1, #22
 800195e:	d504      	bpl.n	800196a <I2C_WaitOnTXISFlagUntilTimeout+0x92>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001960:	2102      	movs	r1, #2
 8001962:	430a      	orrs	r2, r1

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001964:	31ff      	adds	r1, #255	; 0xff
 8001966:	31ff      	adds	r1, #255	; 0xff
 8001968:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800196a:	6999      	ldr	r1, [r3, #24]
 800196c:	0789      	lsls	r1, r1, #30
 800196e:	d501      	bpl.n	8001974 <I2C_WaitOnTXISFlagUntilTimeout+0x9c>
    hi2c->Instance->TXDR = 0x00U;
 8001970:	2100      	movs	r1, #0
 8001972:	6299      	str	r1, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001974:	2101      	movs	r1, #1
 8001976:	6998      	ldr	r0, [r3, #24]
 8001978:	4201      	tst	r1, r0
 800197a:	d102      	bne.n	8001982 <I2C_WaitOnTXISFlagUntilTimeout+0xaa>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800197c:	6998      	ldr	r0, [r3, #24]
 800197e:	4301      	orrs	r1, r0
 8001980:	6199      	str	r1, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001982:	6859      	ldr	r1, [r3, #4]
 8001984:	4847      	ldr	r0, [pc, #284]	; (8001aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x1cc>)
 8001986:	4001      	ands	r1, r0
 8001988:	6059      	str	r1, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800198a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
      return HAL_ERROR;
 800198c:	2001      	movs	r0, #1
    hi2c->ErrorCode |= error_code;
 800198e:	431a      	orrs	r2, r3
 8001990:	646a      	str	r2, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001992:	2341      	movs	r3, #65	; 0x41
 8001994:	2220      	movs	r2, #32
 8001996:	54ea      	strb	r2, [r5, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001998:	2300      	movs	r3, #0
 800199a:	3222      	adds	r2, #34	; 0x22
 800199c:	54ab      	strb	r3, [r5, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800199e:	3a02      	subs	r2, #2
 80019a0:	54ab      	strb	r3, [r5, r2]
}
 80019a2:	b003      	add	sp, #12
 80019a4:	bcf0      	pop	{r4, r5, r6, r7}
 80019a6:	46bb      	mov	fp, r7
 80019a8:	46b2      	mov	sl, r6
 80019aa:	46a9      	mov	r9, r5
 80019ac:	46a0      	mov	r8, r4
 80019ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80019b0:	0548      	lsls	r0, r1, #21
 80019b2:	d530      	bpl.n	8001a16 <I2C_WaitOnTXISFlagUntilTimeout+0x13e>
 80019b4:	4645      	mov	r5, r8
 80019b6:	e7cc      	b.n	8001952 <I2C_WaitOnTXISFlagUntilTimeout+0x7a>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80019b8:	699a      	ldr	r2, [r3, #24]
 80019ba:	4214      	tst	r4, r2
 80019bc:	d16a      	bne.n	8001a94 <I2C_WaitOnTXISFlagUntilTimeout+0x1bc>
 80019be:	464a      	mov	r2, r9
 80019c0:	2a00      	cmp	r2, #0
 80019c2:	d1b8      	bne.n	8001936 <I2C_WaitOnTXISFlagUntilTimeout+0x5e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80019c4:	f7ff fd38 	bl	8001438 <HAL_GetTick>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80019c8:	4643      	mov	r3, r8
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80019ca:	1b40      	subs	r0, r0, r5
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80019cc:	681b      	ldr	r3, [r3, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80019ce:	4286      	cmp	r6, r0
 80019d0:	d301      	bcc.n	80019d6 <I2C_WaitOnTXISFlagUntilTimeout+0xfe>
 80019d2:	2e00      	cmp	r6, #0
 80019d4:	d1a2      	bne.n	800191c <I2C_WaitOnTXISFlagUntilTimeout+0x44>
          tmp2 = hi2c->Mode;
 80019d6:	4659      	mov	r1, fp
 80019d8:	4642      	mov	r2, r8
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80019da:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 80019dc:	5c52      	ldrb	r2, [r2, r1]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80019de:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 80019e0:	b2d2      	uxtb	r2, r2
 80019e2:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80019e4:	2280      	movs	r2, #128	; 0x80
 80019e6:	0212      	lsls	r2, r2, #8
 80019e8:	4211      	tst	r1, r2
 80019ea:	d003      	beq.n	80019f4 <I2C_WaitOnTXISFlagUntilTimeout+0x11c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80019ec:	2180      	movs	r1, #128	; 0x80
 80019ee:	01c9      	lsls	r1, r1, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80019f0:	4208      	tst	r0, r1
 80019f2:	d040      	beq.n	8001a76 <I2C_WaitOnTXISFlagUntilTimeout+0x19e>
 80019f4:	4642      	mov	r2, r8
 80019f6:	46b8      	mov	r8, r7
 80019f8:	0017      	movs	r7, r2
 80019fa:	e005      	b.n	8001a08 <I2C_WaitOnTXISFlagUntilTimeout+0x130>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80019fc:	f7ff fd1c 	bl	8001438 <HAL_GetTick>
 8001a00:	1b40      	subs	r0, r0, r5
 8001a02:	2819      	cmp	r0, #25
 8001a04:	d82f      	bhi.n	8001a66 <I2C_WaitOnTXISFlagUntilTimeout+0x18e>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	699a      	ldr	r2, [r3, #24]
 8001a0a:	4214      	tst	r4, r2
 8001a0c:	d0f6      	beq.n	80019fc <I2C_WaitOnTXISFlagUntilTimeout+0x124>
 8001a0e:	003a      	movs	r2, r7
 8001a10:	4647      	mov	r7, r8
 8001a12:	4690      	mov	r8, r2
 8001a14:	e782      	b.n	800191c <I2C_WaitOnTXISFlagUntilTimeout+0x44>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001a16:	0589      	lsls	r1, r1, #22
 8001a18:	d501      	bpl.n	8001a1e <I2C_WaitOnTXISFlagUntilTimeout+0x146>
 8001a1a:	4645      	mov	r5, r8
 8001a1c:	e7a0      	b.n	8001960 <I2C_WaitOnTXISFlagUntilTimeout+0x88>
  if (status != HAL_OK)
 8001a1e:	2d00      	cmp	r5, #0
 8001a20:	d13d      	bne.n	8001a9e <I2C_WaitOnTXISFlagUntilTimeout+0x1c6>
    if (Timeout != HAL_MAX_DELAY)
 8001a22:	1c72      	adds	r2, r6, #1
 8001a24:	d100      	bne.n	8001a28 <I2C_WaitOnTXISFlagUntilTimeout+0x150>
 8001a26:	e765      	b.n	80018f4 <I2C_WaitOnTXISFlagUntilTimeout+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a28:	f7ff fd06 	bl	8001438 <HAL_GetTick>
 8001a2c:	9b01      	ldr	r3, [sp, #4]
 8001a2e:	1ac0      	subs	r0, r0, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001a30:	4643      	mov	r3, r8
 8001a32:	681b      	ldr	r3, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a34:	42b0      	cmp	r0, r6
 8001a36:	d802      	bhi.n	8001a3e <I2C_WaitOnTXISFlagUntilTimeout+0x166>
 8001a38:	2e00      	cmp	r6, #0
 8001a3a:	d000      	beq.n	8001a3e <I2C_WaitOnTXISFlagUntilTimeout+0x166>
 8001a3c:	e758      	b.n	80018f0 <I2C_WaitOnTXISFlagUntilTimeout+0x18>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001a3e:	2102      	movs	r1, #2
 8001a40:	0008      	movs	r0, r1
 8001a42:	699a      	ldr	r2, [r3, #24]
 8001a44:	4010      	ands	r0, r2
 8001a46:	4211      	tst	r1, r2
 8001a48:	d000      	beq.n	8001a4c <I2C_WaitOnTXISFlagUntilTimeout+0x174>
 8001a4a:	e751      	b.n	80018f0 <I2C_WaitOnTXISFlagUntilTimeout+0x18>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a4c:	4645      	mov	r5, r8
 8001a4e:	2220      	movs	r2, #32
 8001a50:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001a52:	4313      	orrs	r3, r2
 8001a54:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a56:	2341      	movs	r3, #65	; 0x41
 8001a58:	54ea      	strb	r2, [r5, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	54e8      	strb	r0, [r5, r3]
          __HAL_UNLOCK(hi2c);
 8001a5e:	3b02      	subs	r3, #2
 8001a60:	54e8      	strb	r0, [r5, r3]
 8001a62:	2001      	movs	r0, #1
 8001a64:	e79d      	b.n	80019a2 <I2C_WaitOnTXISFlagUntilTimeout+0xca>
              status = HAL_ERROR;
 8001a66:	2201      	movs	r2, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a68:	46b8      	mov	r8, r7
 8001a6a:	683b      	ldr	r3, [r7, #0]
              status = HAL_ERROR;
 8001a6c:	4691      	mov	r9, r2
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001a6e:	2720      	movs	r7, #32
 8001a70:	e754      	b.n	800191c <I2C_WaitOnTXISFlagUntilTimeout+0x44>
  return HAL_OK;
 8001a72:	2000      	movs	r0, #0
 8001a74:	e795      	b.n	80019a2 <I2C_WaitOnTXISFlagUntilTimeout+0xca>
              (tmp1 != I2C_CR2_STOP) && \
 8001a76:	4662      	mov	r2, ip
 8001a78:	2a20      	cmp	r2, #32
 8001a7a:	d0bb      	beq.n	80019f4 <I2C_WaitOnTXISFlagUntilTimeout+0x11c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a7c:	685a      	ldr	r2, [r3, #4]
 8001a7e:	4311      	orrs	r1, r2
 8001a80:	6059      	str	r1, [r3, #4]
            tickstart = HAL_GetTick();
 8001a82:	f7ff fcd9 	bl	8001438 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a86:	4643      	mov	r3, r8
 8001a88:	4642      	mov	r2, r8
            tickstart = HAL_GetTick();
 8001a8a:	0005      	movs	r5, r0
 8001a8c:	46b8      	mov	r8, r7
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	0017      	movs	r7, r2
 8001a92:	e7b9      	b.n	8001a08 <I2C_WaitOnTXISFlagUntilTimeout+0x130>
    if (status == HAL_OK)
 8001a94:	464a      	mov	r2, r9
 8001a96:	2a00      	cmp	r2, #0
 8001a98:	d100      	bne.n	8001a9c <I2C_WaitOnTXISFlagUntilTimeout+0x1c4>
 8001a9a:	e74b      	b.n	8001934 <I2C_WaitOnTXISFlagUntilTimeout+0x5c>
 8001a9c:	e74b      	b.n	8001936 <I2C_WaitOnTXISFlagUntilTimeout+0x5e>
 8001a9e:	4645      	mov	r5, r8
 8001aa0:	e763      	b.n	800196a <I2C_WaitOnTXISFlagUntilTimeout+0x92>
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	fe00e800 	.word	0xfe00e800

08001aa8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aaa:	46de      	mov	lr, fp
 8001aac:	4657      	mov	r7, sl
 8001aae:	464e      	mov	r6, r9
 8001ab0:	4645      	mov	r5, r8
 8001ab2:	b5e0      	push	{r5, r6, r7, lr}
 8001ab4:	000e      	movs	r6, r1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001ab6:	2110      	movs	r1, #16
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ab8:	6803      	ldr	r3, [r0, #0]
{
 8001aba:	4693      	mov	fp, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001abc:	699a      	ldr	r2, [r3, #24]
{
 8001abe:	0005      	movs	r5, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001ac0:	468a      	mov	sl, r1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ac2:	2420      	movs	r4, #32
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ac4:	0692      	lsls	r2, r2, #26
 8001ac6:	d464      	bmi.n	8001b92 <I2C_WaitOnSTOPFlagUntilTimeout+0xea>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001ac8:	4652      	mov	r2, sl
 8001aca:	4650      	mov	r0, sl
  uint32_t itflag   = hi2c->Instance->ISR;
 8001acc:	6999      	ldr	r1, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8001ace:	2700      	movs	r7, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001ad0:	400a      	ands	r2, r1
 8001ad2:	4208      	tst	r0, r1
 8001ad4:	d013      	beq.n	8001afe <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
  HAL_StatusTypeDef status = HAL_OK;
 8001ad6:	2200      	movs	r2, #0
  uint32_t tickstart = Tickstart;
 8001ad8:	46d8      	mov	r8, fp
  HAL_StatusTypeDef status = HAL_OK;
 8001ada:	4691      	mov	r9, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001adc:	61d8      	str	r0, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ade:	1c72      	adds	r2, r6, #1
 8001ae0:	d16a      	bne.n	8001bb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x110>
 8001ae2:	699a      	ldr	r2, [r3, #24]
 8001ae4:	4214      	tst	r4, r2
 8001ae6:	d000      	beq.n	8001aea <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
 8001ae8:	e0a7      	b.n	8001c3a <I2C_WaitOnSTOPFlagUntilTimeout+0x192>
 8001aea:	464a      	mov	r2, r9
 8001aec:	2a00      	cmp	r2, #0
 8001aee:	d103      	bne.n	8001af8 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
 8001af0:	699a      	ldr	r2, [r3, #24]
 8001af2:	4214      	tst	r4, r2
 8001af4:	d0fc      	beq.n	8001af0 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001af6:	61dc      	str	r4, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8001af8:	2204      	movs	r2, #4
 8001afa:	433a      	orrs	r2, r7
    status = HAL_ERROR;
 8001afc:	2701      	movs	r7, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001afe:	2080      	movs	r0, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 8001b00:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001b02:	0040      	lsls	r0, r0, #1
 8001b04:	4201      	tst	r1, r0
 8001b06:	d032      	beq.n	8001b6e <I2C_WaitOnSTOPFlagUntilTimeout+0xc6>
    error_code |= HAL_I2C_ERROR_BERR;
 8001b08:	2401      	movs	r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b0a:	61d8      	str	r0, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8001b0c:	4322      	orrs	r2, r4
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001b0e:	0548      	lsls	r0, r1, #21
 8001b10:	d504      	bpl.n	8001b1c <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
    error_code |= HAL_I2C_ERROR_OVR;
 8001b12:	2008      	movs	r0, #8
 8001b14:	4302      	orrs	r2, r0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b16:	2080      	movs	r0, #128	; 0x80
 8001b18:	00c0      	lsls	r0, r0, #3
 8001b1a:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001b1c:	0589      	lsls	r1, r1, #22
 8001b1e:	d504      	bpl.n	8001b2a <I2C_WaitOnSTOPFlagUntilTimeout+0x82>
    error_code |= HAL_I2C_ERROR_ARLO;
 8001b20:	2102      	movs	r1, #2
 8001b22:	430a      	orrs	r2, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b24:	31ff      	adds	r1, #255	; 0xff
 8001b26:	31ff      	adds	r1, #255	; 0xff
 8001b28:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b2a:	6999      	ldr	r1, [r3, #24]
 8001b2c:	0789      	lsls	r1, r1, #30
 8001b2e:	d501      	bpl.n	8001b34 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    hi2c->Instance->TXDR = 0x00U;
 8001b30:	2100      	movs	r1, #0
 8001b32:	6299      	str	r1, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b34:	2101      	movs	r1, #1
 8001b36:	6998      	ldr	r0, [r3, #24]
 8001b38:	4201      	tst	r1, r0
 8001b3a:	d102      	bne.n	8001b42 <I2C_WaitOnSTOPFlagUntilTimeout+0x9a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b3c:	6998      	ldr	r0, [r3, #24]
 8001b3e:	4301      	orrs	r1, r0
 8001b40:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8001b42:	6859      	ldr	r1, [r3, #4]
 8001b44:	483f      	ldr	r0, [pc, #252]	; (8001c44 <I2C_WaitOnSTOPFlagUntilTimeout+0x19c>)
 8001b46:	4001      	ands	r1, r0
 8001b48:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8001b4a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
      return HAL_ERROR;
 8001b4c:	2001      	movs	r0, #1
    hi2c->ErrorCode |= error_code;
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	646a      	str	r2, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001b52:	2341      	movs	r3, #65	; 0x41
 8001b54:	2220      	movs	r2, #32
 8001b56:	54ea      	strb	r2, [r5, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	3222      	adds	r2, #34	; 0x22
 8001b5c:	54ab      	strb	r3, [r5, r2]
    __HAL_UNLOCK(hi2c);
 8001b5e:	3a02      	subs	r2, #2
 8001b60:	54ab      	strb	r3, [r5, r2]
}
 8001b62:	bcf0      	pop	{r4, r5, r6, r7}
 8001b64:	46bb      	mov	fp, r7
 8001b66:	46b2      	mov	sl, r6
 8001b68:	46a9      	mov	r9, r5
 8001b6a:	46a0      	mov	r8, r4
 8001b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001b6e:	0548      	lsls	r0, r1, #21
 8001b70:	d4cf      	bmi.n	8001b12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001b72:	0589      	lsls	r1, r1, #22
 8001b74:	d4d4      	bmi.n	8001b20 <I2C_WaitOnSTOPFlagUntilTimeout+0x78>
  if (status != HAL_OK)
 8001b76:	2f00      	cmp	r7, #0
 8001b78:	d1d7      	bne.n	8001b2a <I2C_WaitOnSTOPFlagUntilTimeout+0x82>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b7a:	f7ff fc5d 	bl	8001438 <HAL_GetTick>
 8001b7e:	465b      	mov	r3, fp
 8001b80:	1ac0      	subs	r0, r0, r3
 8001b82:	42b0      	cmp	r0, r6
 8001b84:	d807      	bhi.n	8001b96 <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
 8001b86:	2e00      	cmp	r6, #0
 8001b88:	d005      	beq.n	8001b96 <I2C_WaitOnSTOPFlagUntilTimeout+0xee>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001b8a:	682b      	ldr	r3, [r5, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b8c:	699a      	ldr	r2, [r3, #24]
 8001b8e:	4214      	tst	r4, r2
 8001b90:	d09a      	beq.n	8001ac8 <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
  return HAL_OK;
 8001b92:	2000      	movs	r0, #0
 8001b94:	e7e5      	b.n	8001b62 <I2C_WaitOnSTOPFlagUntilTimeout+0xba>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001b96:	0021      	movs	r1, r4
 8001b98:	682b      	ldr	r3, [r5, #0]
 8001b9a:	699a      	ldr	r2, [r3, #24]
 8001b9c:	4011      	ands	r1, r2
 8001b9e:	4214      	tst	r4, r2
 8001ba0:	d1f4      	bne.n	8001b8c <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ba2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 8001ba4:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ba6:	4323      	orrs	r3, r4
 8001ba8:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001baa:	2341      	movs	r3, #65	; 0x41
 8001bac:	54ec      	strb	r4, [r5, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bae:	3301      	adds	r3, #1
 8001bb0:	54e9      	strb	r1, [r5, r3]
          __HAL_UNLOCK(hi2c);
 8001bb2:	3b02      	subs	r3, #2
 8001bb4:	54e9      	strb	r1, [r5, r3]
          return HAL_ERROR;
 8001bb6:	e7d4      	b.n	8001b62 <I2C_WaitOnSTOPFlagUntilTimeout+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001bb8:	699a      	ldr	r2, [r3, #24]
 8001bba:	4214      	tst	r4, r2
 8001bbc:	d13d      	bne.n	8001c3a <I2C_WaitOnSTOPFlagUntilTimeout+0x192>
 8001bbe:	464a      	mov	r2, r9
 8001bc0:	2a00      	cmp	r2, #0
 8001bc2:	d199      	bne.n	8001af8 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001bc4:	f7ff fc38 	bl	8001438 <HAL_GetTick>
 8001bc8:	4643      	mov	r3, r8
 8001bca:	1ac0      	subs	r0, r0, r3
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001bcc:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001bce:	4286      	cmp	r6, r0
 8001bd0:	d302      	bcc.n	8001bd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x130>
 8001bd2:	2e00      	cmp	r6, #0
 8001bd4:	d000      	beq.n	8001bd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x130>
 8001bd6:	e782      	b.n	8001ade <I2C_WaitOnSTOPFlagUntilTimeout+0x36>
          tmp2 = hi2c->Mode;
 8001bd8:	2242      	movs	r2, #66	; 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001bda:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8001bdc:	5caa      	ldrb	r2, [r5, r2]
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001bde:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001be4:	2280      	movs	r2, #128	; 0x80
 8001be6:	0212      	lsls	r2, r2, #8
 8001be8:	4211      	tst	r1, r2
 8001bea:	d003      	beq.n	8001bf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x14c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001bec:	2180      	movs	r1, #128	; 0x80
 8001bee:	01c9      	lsls	r1, r1, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001bf0:	4208      	tst	r0, r1
 8001bf2:	d016      	beq.n	8001c22 <I2C_WaitOnSTOPFlagUntilTimeout+0x17a>
 8001bf4:	4642      	mov	r2, r8
 8001bf6:	46b8      	mov	r8, r7
 8001bf8:	0017      	movs	r7, r2
 8001bfa:	e005      	b.n	8001c08 <I2C_WaitOnSTOPFlagUntilTimeout+0x160>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001bfc:	f7ff fc1c 	bl	8001438 <HAL_GetTick>
 8001c00:	1bc0      	subs	r0, r0, r7
 8001c02:	2819      	cmp	r0, #25
 8001c04:	d807      	bhi.n	8001c16 <I2C_WaitOnSTOPFlagUntilTimeout+0x16e>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c06:	682b      	ldr	r3, [r5, #0]
 8001c08:	699a      	ldr	r2, [r3, #24]
 8001c0a:	4214      	tst	r4, r2
 8001c0c:	d0f6      	beq.n	8001bfc <I2C_WaitOnSTOPFlagUntilTimeout+0x154>
 8001c0e:	003a      	movs	r2, r7
 8001c10:	4647      	mov	r7, r8
 8001c12:	4690      	mov	r8, r2
 8001c14:	e763      	b.n	8001ade <I2C_WaitOnSTOPFlagUntilTimeout+0x36>
              status = HAL_ERROR;
 8001c16:	2201      	movs	r2, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c18:	46b8      	mov	r8, r7
              status = HAL_ERROR;
 8001c1a:	4691      	mov	r9, r2
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001c1c:	2720      	movs	r7, #32
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c1e:	682b      	ldr	r3, [r5, #0]
 8001c20:	e75d      	b.n	8001ade <I2C_WaitOnSTOPFlagUntilTimeout+0x36>
              (tmp1 != I2C_CR2_STOP) && \
 8001c22:	4662      	mov	r2, ip
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d0e5      	beq.n	8001bf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x14c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	46b8      	mov	r8, r7
 8001c2c:	4311      	orrs	r1, r2
 8001c2e:	6059      	str	r1, [r3, #4]
            tickstart = HAL_GetTick();
 8001c30:	f7ff fc02 	bl	8001438 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c34:	682b      	ldr	r3, [r5, #0]
 8001c36:	0007      	movs	r7, r0
 8001c38:	e7e6      	b.n	8001c08 <I2C_WaitOnSTOPFlagUntilTimeout+0x160>
    if (status == HAL_OK)
 8001c3a:	464a      	mov	r2, r9
 8001c3c:	2a00      	cmp	r2, #0
 8001c3e:	d100      	bne.n	8001c42 <I2C_WaitOnSTOPFlagUntilTimeout+0x19a>
 8001c40:	e759      	b.n	8001af6 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
 8001c42:	e759      	b.n	8001af8 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
 8001c44:	fe00e800 	.word	0xfe00e800

08001c48 <HAL_I2C_Init>:
{
 8001c48:	b510      	push	{r4, lr}
 8001c4a:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 8001c4c:	d04d      	beq.n	8001cea <HAL_I2C_Init+0xa2>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c4e:	2341      	movs	r3, #65	; 0x41
 8001c50:	5cc3      	ldrb	r3, [r0, r3]
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d043      	beq.n	8001ce0 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c58:	2341      	movs	r3, #65	; 0x41
 8001c5a:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001c5c:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c5e:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8001c60:	6823      	ldr	r3, [r4, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	438a      	bics	r2, r1
 8001c66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c68:	6861      	ldr	r1, [r4, #4]
 8001c6a:	4a21      	ldr	r2, [pc, #132]	; (8001cf0 <HAL_I2C_Init+0xa8>)
 8001c6c:	400a      	ands	r2, r1
 8001c6e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	4920      	ldr	r1, [pc, #128]	; (8001cf4 <HAL_I2C_Init+0xac>)
 8001c74:	400a      	ands	r2, r1
 8001c76:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c78:	68e2      	ldr	r2, [r4, #12]
 8001c7a:	2a01      	cmp	r2, #1
 8001c7c:	d02a      	beq.n	8001cd4 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c7e:	2184      	movs	r1, #132	; 0x84
 8001c80:	68a0      	ldr	r0, [r4, #8]
 8001c82:	0209      	lsls	r1, r1, #8
 8001c84:	4301      	orrs	r1, r0
 8001c86:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c88:	2a02      	cmp	r2, #2
 8001c8a:	d102      	bne.n	8001c92 <HAL_I2C_Init+0x4a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c8c:	2280      	movs	r2, #128	; 0x80
 8001c8e:	0112      	lsls	r2, r2, #4
 8001c90:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c92:	6859      	ldr	r1, [r3, #4]
 8001c94:	4a18      	ldr	r2, [pc, #96]	; (8001cf8 <HAL_I2C_Init+0xb0>)
  return HAL_OK;
 8001c96:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	4915      	ldr	r1, [pc, #84]	; (8001cf4 <HAL_I2C_Init+0xac>)
 8001ca0:	400a      	ands	r2, r1
 8001ca2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ca4:	6961      	ldr	r1, [r4, #20]
 8001ca6:	6922      	ldr	r2, [r4, #16]
 8001ca8:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001caa:	69a1      	ldr	r1, [r4, #24]
 8001cac:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001cb2:	6a21      	ldr	r1, [r4, #32]
 8001cb4:	69e2      	ldr	r2, [r4, #28]
 8001cb6:	430a      	orrs	r2, r1
  __HAL_I2C_ENABLE(hi2c);
 8001cb8:	2101      	movs	r1, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001cba:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cc2:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001cc4:	2241      	movs	r2, #65	; 0x41
 8001cc6:	311f      	adds	r1, #31
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cc8:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001cca:	54a1      	strb	r1, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ccc:	3201      	adds	r2, #1
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cce:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd0:	54a3      	strb	r3, [r4, r2]
}
 8001cd2:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001cd4:	2280      	movs	r2, #128	; 0x80
 8001cd6:	68a1      	ldr	r1, [r4, #8]
 8001cd8:	0212      	lsls	r2, r2, #8
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cde:	e7d8      	b.n	8001c92 <HAL_I2C_Init+0x4a>
    hi2c->Lock = HAL_UNLOCKED;
 8001ce0:	3340      	adds	r3, #64	; 0x40
 8001ce2:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8001ce4:	f7fe ffa8 	bl	8000c38 <HAL_I2C_MspInit>
 8001ce8:	e7b6      	b.n	8001c58 <HAL_I2C_Init+0x10>
    return HAL_ERROR;
 8001cea:	2001      	movs	r0, #1
 8001cec:	e7f1      	b.n	8001cd2 <HAL_I2C_Init+0x8a>
 8001cee:	46c0      	nop			; (mov r8, r8)
 8001cf0:	f0ffffff 	.word	0xf0ffffff
 8001cf4:	ffff7fff 	.word	0xffff7fff
 8001cf8:	02008000 	.word	0x02008000

08001cfc <HAL_I2C_DeInit>:
{
 8001cfc:	b570      	push	{r4, r5, r6, lr}
 8001cfe:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 8001d00:	d013      	beq.n	8001d2a <HAL_I2C_DeInit+0x2e>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d02:	2541      	movs	r5, #65	; 0x41
 8001d04:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001d06:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d08:	5543      	strb	r3, [r0, r5]
  __HAL_I2C_DISABLE(hi2c);
 8001d0a:	6802      	ldr	r2, [r0, #0]
 8001d0c:	6813      	ldr	r3, [r2, #0]
 8001d0e:	438b      	bics	r3, r1
 8001d10:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8001d12:	f7fe ffc9 	bl	8000ca8 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d16:	2300      	movs	r3, #0
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d18:	2242      	movs	r2, #66	; 0x42
  return HAL_OK;
 8001d1a:	2000      	movs	r0, #0
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d1c:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8001d1e:	5563      	strb	r3, [r4, r5]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d20:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d22:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(hi2c);
 8001d24:	3a02      	subs	r2, #2
 8001d26:	54a3      	strb	r3, [r4, r2]
}
 8001d28:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	e7fc      	b.n	8001d28 <HAL_I2C_DeInit+0x2c>
 8001d2e:	46c0      	nop			; (mov r8, r8)

08001d30 <HAL_I2C_Mem_Write>:
{
 8001d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d32:	4657      	mov	r7, sl
 8001d34:	46de      	mov	lr, fp
 8001d36:	464e      	mov	r6, r9
 8001d38:	4645      	mov	r5, r8
 8001d3a:	b5e0      	push	{r5, r6, r7, lr}
 8001d3c:	4698      	mov	r8, r3
 8001d3e:	ab0a      	add	r3, sp, #40	; 0x28
 8001d40:	4691      	mov	r9, r2
 8001d42:	cb04      	ldmia	r3!, {r2}
 8001d44:	0004      	movs	r4, r0
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	000f      	movs	r7, r1
 8001d4a:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d4c:	2341      	movs	r3, #65	; 0x41
 8001d4e:	5cc3      	ldrb	r3, [r0, r3]
{
 8001d50:	4692      	mov	sl, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d52:	2b20      	cmp	r3, #32
 8001d54:	d000      	beq.n	8001d58 <HAL_I2C_Mem_Write+0x28>
 8001d56:	e0a8      	b.n	8001eaa <HAL_I2C_Mem_Write+0x17a>
    if ((pData == NULL) || (Size == 0U))
 8001d58:	2a00      	cmp	r2, #0
 8001d5a:	d100      	bne.n	8001d5e <HAL_I2C_Mem_Write+0x2e>
 8001d5c:	e09b      	b.n	8001e96 <HAL_I2C_Mem_Write+0x166>
 8001d5e:	465b      	mov	r3, fp
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d100      	bne.n	8001d66 <HAL_I2C_Mem_Write+0x36>
 8001d64:	e097      	b.n	8001e96 <HAL_I2C_Mem_Write+0x166>
    __HAL_LOCK(hi2c);
 8001d66:	2340      	movs	r3, #64	; 0x40
 8001d68:	5cc2      	ldrb	r2, [r0, r3]
 8001d6a:	2a01      	cmp	r2, #1
 8001d6c:	d100      	bne.n	8001d70 <HAL_I2C_Mem_Write+0x40>
 8001d6e:	e09c      	b.n	8001eaa <HAL_I2C_Mem_Write+0x17a>
 8001d70:	2201      	movs	r2, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d72:	2680      	movs	r6, #128	; 0x80
    __HAL_LOCK(hi2c);
 8001d74:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8001d76:	f7ff fb5f 	bl	8001438 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d7a:	6823      	ldr	r3, [r4, #0]
 8001d7c:	0236      	lsls	r6, r6, #8
 8001d7e:	699a      	ldr	r2, [r3, #24]
    tickstart = HAL_GetTick();
 8001d80:	0005      	movs	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d82:	4232      	tst	r2, r6
 8001d84:	d00c      	beq.n	8001da0 <HAL_I2C_Mem_Write+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d86:	f7ff fb57 	bl	8001438 <HAL_GetTick>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d8a:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d8c:	1b40      	subs	r0, r0, r5
 8001d8e:	2819      	cmp	r0, #25
 8001d90:	d903      	bls.n	8001d9a <HAL_I2C_Mem_Write+0x6a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d92:	699a      	ldr	r2, [r3, #24]
 8001d94:	4232      	tst	r2, r6
 8001d96:	d000      	beq.n	8001d9a <HAL_I2C_Mem_Write+0x6a>
 8001d98:	e089      	b.n	8001eae <HAL_I2C_Mem_Write+0x17e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d9a:	699a      	ldr	r2, [r3, #24]
 8001d9c:	4232      	tst	r2, r6
 8001d9e:	d1f2      	bne.n	8001d86 <HAL_I2C_Mem_Write+0x56>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001da0:	2241      	movs	r2, #65	; 0x41
 8001da2:	2121      	movs	r1, #33	; 0x21
 8001da4:	54a1      	strb	r1, [r4, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001da6:	3201      	adds	r2, #1
 8001da8:	311f      	adds	r1, #31
 8001daa:	54a1      	strb	r1, [r4, r2]
    hi2c->pBuffPtr  = pData;
 8001dac:	4651      	mov	r1, sl
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dae:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
 8001db0:	6261      	str	r1, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8001db2:	4659      	mov	r1, fp
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001db4:	6462      	str	r2, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 8001db6:	6362      	str	r2, [r4, #52]	; 0x34
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001db8:	4642      	mov	r2, r8
    hi2c->XferCount = Size;
 8001dba:	8561      	strh	r1, [r4, #42]	; 0x2a
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001dbc:	6858      	ldr	r0, [r3, #4]
 8001dbe:	4980      	ldr	r1, [pc, #512]	; (8001fc0 <HAL_I2C_Mem_Write+0x290>)
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001dc0:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 8001dc2:	4001      	ands	r1, r0
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dc4:	05bf      	lsls	r7, r7, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001dc6:	0412      	lsls	r2, r2, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8001dc8:	430a      	orrs	r2, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001dca:	0dbf      	lsrs	r7, r7, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8001dcc:	497d      	ldr	r1, [pc, #500]	; (8001fc4 <HAL_I2C_Mem_Write+0x294>)
 8001dce:	433a      	orrs	r2, r7
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dd4:	0020      	movs	r0, r4
 8001dd6:	002a      	movs	r2, r5
 8001dd8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001dda:	f7ff fd7d 	bl	80018d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001dde:	2800      	cmp	r0, #0
 8001de0:	d000      	beq.n	8001de4 <HAL_I2C_Mem_Write+0xb4>
 8001de2:	e0a0      	b.n	8001f26 <HAL_I2C_Mem_Write+0x1f6>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001de4:	4643      	mov	r3, r8
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d000      	beq.n	8001dec <HAL_I2C_Mem_Write+0xbc>
 8001dea:	e090      	b.n	8001f0e <HAL_I2C_Mem_Write+0x1de>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001dec:	464b      	mov	r3, r9
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dee:	2680      	movs	r6, #128	; 0x80
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001df0:	6821      	ldr	r1, [r4, #0]
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	628a      	str	r2, [r1, #40]	; 0x28
 8001df6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001df8:	3301      	adds	r3, #1
 8001dfa:	d165      	bne.n	8001ec8 <HAL_I2C_Mem_Write+0x198>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dfc:	2280      	movs	r2, #128	; 0x80
 8001dfe:	698b      	ldr	r3, [r1, #24]
 8001e00:	421a      	tst	r2, r3
 8001e02:	d0fc      	beq.n	8001dfe <HAL_I2C_Mem_Write+0xce>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e06:	2bff      	cmp	r3, #255	; 0xff
 8001e08:	d900      	bls.n	8001e0c <HAL_I2C_Mem_Write+0xdc>
 8001e0a:	e076      	b.n	8001efa <HAL_I2C_Mem_Write+0x1ca>
      hi2c->XferSize = hi2c->XferCount;
 8001e0c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e0e:	486e      	ldr	r0, [pc, #440]	; (8001fc8 <HAL_I2C_Mem_Write+0x298>)
 8001e10:	684a      	ldr	r2, [r1, #4]
      hi2c->XferSize = hi2c->XferCount;
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e16:	4002      	ands	r2, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e18:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e1a:	433a      	orrs	r2, r7
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e1c:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	2280      	movs	r2, #128	; 0x80
 8001e22:	0492      	lsls	r2, r2, #18
 8001e24:	4313      	orrs	r3, r2
 8001e26:	604b      	str	r3, [r1, #4]
 8001e28:	4b67      	ldr	r3, [pc, #412]	; (8001fc8 <HAL_I2C_Mem_Write+0x298>)
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e2a:	2680      	movs	r6, #128	; 0x80
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e2c:	4698      	mov	r8, r3
 8001e2e:	e003      	b.n	8001e38 <HAL_I2C_Mem_Write+0x108>
    } while (hi2c->XferCount > 0U);
 8001e30:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d100      	bne.n	8001e38 <HAL_I2C_Mem_Write+0x108>
 8001e36:	e0ad      	b.n	8001f94 <HAL_I2C_Mem_Write+0x264>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e38:	002a      	movs	r2, r5
 8001e3a:	0020      	movs	r0, r4
 8001e3c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001e3e:	f7ff fd4b 	bl	80018d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e42:	2800      	cmp	r0, #0
 8001e44:	d000      	beq.n	8001e48 <HAL_I2C_Mem_Write+0x118>
 8001e46:	e094      	b.n	8001f72 <HAL_I2C_Mem_Write+0x242>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e4a:	6822      	ldr	r2, [r4, #0]
 8001e4c:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8001e4e:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e50:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001e52:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001e54:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e56:	3b01      	subs	r3, #1
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001e5c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e5e:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e66:	2900      	cmp	r1, #0
 8001e68:	d0e2      	beq.n	8001e30 <HAL_I2C_Mem_Write+0x100>
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1e0      	bne.n	8001e30 <HAL_I2C_Mem_Write+0x100>
 8001e6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001e70:	3301      	adds	r3, #1
 8001e72:	d161      	bne.n	8001f38 <HAL_I2C_Mem_Write+0x208>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e74:	6993      	ldr	r3, [r2, #24]
 8001e76:	421e      	tst	r6, r3
 8001e78:	d0fc      	beq.n	8001e74 <HAL_I2C_Mem_Write+0x144>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e7a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e7c:	2bff      	cmp	r3, #255	; 0xff
 8001e7e:	d800      	bhi.n	8001e82 <HAL_I2C_Mem_Write+0x152>
 8001e80:	e079      	b.n	8001f76 <HAL_I2C_Mem_Write+0x246>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e82:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e84:	4641      	mov	r1, r8
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e86:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e88:	6853      	ldr	r3, [r2, #4]
 8001e8a:	400b      	ands	r3, r1
 8001e8c:	494f      	ldr	r1, [pc, #316]	; (8001fcc <HAL_I2C_Mem_Write+0x29c>)
 8001e8e:	433b      	orrs	r3, r7
 8001e90:	430b      	orrs	r3, r1
 8001e92:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001e94:	e7cc      	b.n	8001e30 <HAL_I2C_Mem_Write+0x100>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e96:	2380      	movs	r3, #128	; 0x80
      return  HAL_ERROR;
 8001e98:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	6463      	str	r3, [r4, #68]	; 0x44
}
 8001e9e:	bcf0      	pop	{r4, r5, r6, r7}
 8001ea0:	46bb      	mov	fp, r7
 8001ea2:	46b2      	mov	sl, r6
 8001ea4:	46a9      	mov	r9, r5
 8001ea6:	46a0      	mov	r8, r4
 8001ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8001eaa:	2002      	movs	r0, #2
 8001eac:	e7f7      	b.n	8001e9e <HAL_I2C_Mem_Write+0x16e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eae:	2220      	movs	r2, #32
 8001eb0:	6c63      	ldr	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001eb2:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001eb8:	2341      	movs	r3, #65	; 0x41
 8001eba:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	3222      	adds	r2, #34	; 0x22
 8001ec0:	54a3      	strb	r3, [r4, r2]
          __HAL_UNLOCK(hi2c);
 8001ec2:	3a02      	subs	r2, #2
 8001ec4:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 8001ec6:	e7ea      	b.n	8001e9e <HAL_I2C_Mem_Write+0x16e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ec8:	698b      	ldr	r3, [r1, #24]
 8001eca:	421e      	tst	r6, r3
 8001ecc:	d19a      	bne.n	8001e04 <HAL_I2C_Mem_Write+0xd4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ece:	f7ff fab3 	bl	8001438 <HAL_GetTick>
 8001ed2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ed4:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ed6:	1b40      	subs	r0, r0, r5
 8001ed8:	4283      	cmp	r3, r0
 8001eda:	d229      	bcs.n	8001f30 <HAL_I2C_Mem_Write+0x200>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001edc:	0032      	movs	r2, r6
 8001ede:	698b      	ldr	r3, [r1, #24]
 8001ee0:	401a      	ands	r2, r3
 8001ee2:	421e      	tst	r6, r3
 8001ee4:	d000      	beq.n	8001ee8 <HAL_I2C_Mem_Write+0x1b8>
 8001ee6:	e786      	b.n	8001df6 <HAL_I2C_Mem_Write+0xc6>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ee8:	2120      	movs	r1, #32
 8001eea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001eec:	430b      	orrs	r3, r1
 8001eee:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ef0:	2341      	movs	r3, #65	; 0x41
 8001ef2:	54e1      	strb	r1, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 8001ef8:	e015      	b.n	8001f26 <HAL_I2C_Mem_Write+0x1f6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001efa:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8001efc:	4a32      	ldr	r2, [pc, #200]	; (8001fc8 <HAL_I2C_Mem_Write+0x298>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001efe:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f00:	684b      	ldr	r3, [r1, #4]
 8001f02:	4013      	ands	r3, r2
 8001f04:	4a31      	ldr	r2, [pc, #196]	; (8001fcc <HAL_I2C_Mem_Write+0x29c>)
 8001f06:	433b      	orrs	r3, r7
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	604b      	str	r3, [r1, #4]
}
 8001f0c:	e78c      	b.n	8001e28 <HAL_I2C_Mem_Write+0xf8>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f0e:	464a      	mov	r2, r9
 8001f10:	6823      	ldr	r3, [r4, #0]
 8001f12:	0a12      	lsrs	r2, r2, #8
 8001f14:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f16:	0020      	movs	r0, r4
 8001f18:	002a      	movs	r2, r5
 8001f1a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001f1c:	f7ff fcdc 	bl	80018d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f20:	2800      	cmp	r0, #0
 8001f22:	d100      	bne.n	8001f26 <HAL_I2C_Mem_Write+0x1f6>
 8001f24:	e762      	b.n	8001dec <HAL_I2C_Mem_Write+0xbc>
      __HAL_UNLOCK(hi2c);
 8001f26:	2340      	movs	r3, #64	; 0x40
 8001f28:	2200      	movs	r2, #0
      return HAL_ERROR;
 8001f2a:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 8001f2c:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8001f2e:	e7b6      	b.n	8001e9e <HAL_I2C_Mem_Write+0x16e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d000      	beq.n	8001f36 <HAL_I2C_Mem_Write+0x206>
 8001f34:	e75f      	b.n	8001df6 <HAL_I2C_Mem_Write+0xc6>
 8001f36:	e7d1      	b.n	8001edc <HAL_I2C_Mem_Write+0x1ac>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f38:	6993      	ldr	r3, [r2, #24]
 8001f3a:	421e      	tst	r6, r3
 8001f3c:	d19d      	bne.n	8001e7a <HAL_I2C_Mem_Write+0x14a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f3e:	f7ff fa7b 	bl	8001438 <HAL_GetTick>
 8001f42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f44:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f46:	1b40      	subs	r0, r0, r5
 8001f48:	4283      	cmp	r3, r0
 8001f4a:	d302      	bcc.n	8001f52 <HAL_I2C_Mem_Write+0x222>
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d000      	beq.n	8001f52 <HAL_I2C_Mem_Write+0x222>
 8001f50:	e78d      	b.n	8001e6e <HAL_I2C_Mem_Write+0x13e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f52:	0031      	movs	r1, r6
 8001f54:	6993      	ldr	r3, [r2, #24]
 8001f56:	4019      	ands	r1, r3
 8001f58:	421e      	tst	r6, r3
 8001f5a:	d000      	beq.n	8001f5e <HAL_I2C_Mem_Write+0x22e>
 8001f5c:	e787      	b.n	8001e6e <HAL_I2C_Mem_Write+0x13e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f5e:	2220      	movs	r2, #32
 8001f60:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f62:	4313      	orrs	r3, r2
 8001f64:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f66:	2341      	movs	r3, #65	; 0x41
 8001f68:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	54e1      	strb	r1, [r4, r3]
          __HAL_UNLOCK(hi2c);
 8001f6e:	3b02      	subs	r3, #2
 8001f70:	54e1      	strb	r1, [r4, r3]
          return HAL_ERROR;
 8001f72:	2001      	movs	r0, #1
 8001f74:	e793      	b.n	8001e9e <HAL_I2C_Mem_Write+0x16e>
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f76:	4640      	mov	r0, r8
          hi2c->XferSize = hi2c->XferCount;
 8001f78:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f7a:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f80:	4001      	ands	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f82:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f84:	4339      	orrs	r1, r7
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f86:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f88:	430b      	orrs	r3, r1
 8001f8a:	2180      	movs	r1, #128	; 0x80
 8001f8c:	0489      	lsls	r1, r1, #18
 8001f8e:	430b      	orrs	r3, r1
 8001f90:	6053      	str	r3, [r2, #4]
}
 8001f92:	e74d      	b.n	8001e30 <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f94:	002a      	movs	r2, r5
 8001f96:	0020      	movs	r0, r4
 8001f98:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001f9a:	f7ff fd85 	bl	8001aa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f9e:	2800      	cmp	r0, #0
 8001fa0:	d1e7      	bne.n	8001f72 <HAL_I2C_Mem_Write+0x242>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fa2:	2120      	movs	r1, #32
 8001fa4:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8001fa6:	4d0a      	ldr	r5, [pc, #40]	; (8001fd0 <HAL_I2C_Mem_Write+0x2a0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fa8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	402a      	ands	r2, r5
 8001fae:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001fb0:	2341      	movs	r3, #65	; 0x41
 8001fb2:	54e1      	strb	r1, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	54e0      	strb	r0, [r4, r3]
    __HAL_UNLOCK(hi2c);
 8001fb8:	3b02      	subs	r3, #2
 8001fba:	54e0      	strb	r0, [r4, r3]
    return HAL_OK;
 8001fbc:	e76f      	b.n	8001e9e <HAL_I2C_Mem_Write+0x16e>
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	fc009800 	.word	0xfc009800
 8001fc4:	01002000 	.word	0x01002000
 8001fc8:	fc009c00 	.word	0xfc009c00
 8001fcc:	01ff0000 	.word	0x01ff0000
 8001fd0:	fe00e800 	.word	0xfe00e800

08001fd4 <HAL_I2C_Mem_Read>:
{
 8001fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fd6:	4645      	mov	r5, r8
 8001fd8:	46de      	mov	lr, fp
 8001fda:	4657      	mov	r7, sl
 8001fdc:	464e      	mov	r6, r9
 8001fde:	b5e0      	push	{r5, r6, r7, lr}
 8001fe0:	4699      	mov	r9, r3
 8001fe2:	ab0a      	add	r3, sp, #40	; 0x28
 8001fe4:	0015      	movs	r5, r2
 8001fe6:	cb04      	ldmia	r3!, {r2}
 8001fe8:	0004      	movs	r4, r0
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	4688      	mov	r8, r1
 8001fee:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff0:	2341      	movs	r3, #65	; 0x41
 8001ff2:	5cc3      	ldrb	r3, [r0, r3]
{
 8001ff4:	4692      	mov	sl, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff6:	2b20      	cmp	r3, #32
 8001ff8:	d000      	beq.n	8001ffc <HAL_I2C_Mem_Read+0x28>
 8001ffa:	e0b1      	b.n	8002160 <HAL_I2C_Mem_Read+0x18c>
    if ((pData == NULL) || (Size == 0U))
 8001ffc:	2a00      	cmp	r2, #0
 8001ffe:	d100      	bne.n	8002002 <HAL_I2C_Mem_Read+0x2e>
 8002000:	e0a4      	b.n	800214c <HAL_I2C_Mem_Read+0x178>
 8002002:	465b      	mov	r3, fp
 8002004:	2b00      	cmp	r3, #0
 8002006:	d100      	bne.n	800200a <HAL_I2C_Mem_Read+0x36>
 8002008:	e0a0      	b.n	800214c <HAL_I2C_Mem_Read+0x178>
    __HAL_LOCK(hi2c);
 800200a:	2340      	movs	r3, #64	; 0x40
 800200c:	5cc2      	ldrb	r2, [r0, r3]
 800200e:	2a01      	cmp	r2, #1
 8002010:	d100      	bne.n	8002014 <HAL_I2C_Mem_Read+0x40>
 8002012:	e0a5      	b.n	8002160 <HAL_I2C_Mem_Read+0x18c>
 8002014:	2201      	movs	r2, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002016:	2780      	movs	r7, #128	; 0x80
    __HAL_LOCK(hi2c);
 8002018:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 800201a:	f7ff fa0d 	bl	8001438 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800201e:	6823      	ldr	r3, [r4, #0]
 8002020:	023f      	lsls	r7, r7, #8
 8002022:	699a      	ldr	r2, [r3, #24]
    tickstart = HAL_GetTick();
 8002024:	0006      	movs	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002026:	423a      	tst	r2, r7
 8002028:	d00c      	beq.n	8002044 <HAL_I2C_Mem_Read+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800202a:	f7ff fa05 	bl	8001438 <HAL_GetTick>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800202e:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002030:	1b80      	subs	r0, r0, r6
 8002032:	2819      	cmp	r0, #25
 8002034:	d903      	bls.n	800203e <HAL_I2C_Mem_Read+0x6a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002036:	699a      	ldr	r2, [r3, #24]
 8002038:	423a      	tst	r2, r7
 800203a:	d000      	beq.n	800203e <HAL_I2C_Mem_Read+0x6a>
 800203c:	e092      	b.n	8002164 <HAL_I2C_Mem_Read+0x190>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800203e:	699a      	ldr	r2, [r3, #24]
 8002040:	423a      	tst	r2, r7
 8002042:	d1f2      	bne.n	800202a <HAL_I2C_Mem_Read+0x56>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002044:	2241      	movs	r2, #65	; 0x41
 8002046:	2122      	movs	r1, #34	; 0x22
 8002048:	54a1      	strb	r1, [r4, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800204a:	3201      	adds	r2, #1
 800204c:	311e      	adds	r1, #30
 800204e:	54a1      	strb	r1, [r4, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002050:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
 8002052:	4651      	mov	r1, sl
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002054:	6462      	str	r2, [r4, #68]	; 0x44
    hi2c->XferISR   = NULL;
 8002056:	6362      	str	r2, [r4, #52]	; 0x34
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002058:	4642      	mov	r2, r8
    hi2c->pBuffPtr  = pData;
 800205a:	6261      	str	r1, [r4, #36]	; 0x24
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800205c:	0597      	lsls	r7, r2, #22
    hi2c->XferCount = Size;
 800205e:	4659      	mov	r1, fp
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002060:	0dba      	lsrs	r2, r7, #22
 8002062:	4690      	mov	r8, r2
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002064:	464a      	mov	r2, r9
    hi2c->XferCount = Size;
 8002066:	8561      	strh	r1, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8002068:	6858      	ldr	r0, [r3, #4]
 800206a:	4990      	ldr	r1, [pc, #576]	; (80022ac <HAL_I2C_Mem_Read+0x2d8>)
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800206c:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 800206e:	4001      	ands	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002070:	0412      	lsls	r2, r2, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8002072:	430a      	orrs	r2, r1
 8002074:	4641      	mov	r1, r8
 8002076:	430a      	orrs	r2, r1
 8002078:	2180      	movs	r1, #128	; 0x80
 800207a:	0189      	lsls	r1, r1, #6
 800207c:	430a      	orrs	r2, r1
 800207e:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002080:	0020      	movs	r0, r4
 8002082:	0032      	movs	r2, r6
 8002084:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002086:	f7ff fc27 	bl	80018d8 <I2C_WaitOnTXISFlagUntilTimeout>
 800208a:	2800      	cmp	r0, #0
 800208c:	d000      	beq.n	8002090 <HAL_I2C_Mem_Read+0xbc>
 800208e:	e0e2      	b.n	8002256 <HAL_I2C_Mem_Read+0x282>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002090:	464b      	mov	r3, r9
 8002092:	2b01      	cmp	r3, #1
 8002094:	d000      	beq.n	8002098 <HAL_I2C_Mem_Read+0xc4>
 8002096:	e072      	b.n	800217e <HAL_I2C_Mem_Read+0x1aa>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002098:	6821      	ldr	r1, [r4, #0]
 800209a:	b2ed      	uxtb	r5, r5
 800209c:	628d      	str	r5, [r1, #40]	; 0x28
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800209e:	2540      	movs	r5, #64	; 0x40
 80020a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80020a2:	3301      	adds	r3, #1
 80020a4:	d000      	beq.n	80020a8 <HAL_I2C_Mem_Read+0xd4>
 80020a6:	e0ba      	b.n	800221e <HAL_I2C_Mem_Read+0x24a>
 80020a8:	2240      	movs	r2, #64	; 0x40
 80020aa:	698b      	ldr	r3, [r1, #24]
 80020ac:	421a      	tst	r2, r3
 80020ae:	d0fc      	beq.n	80020aa <HAL_I2C_Mem_Read+0xd6>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020b2:	2bff      	cmp	r3, #255	; 0xff
 80020b4:	d800      	bhi.n	80020b8 <HAL_I2C_Mem_Read+0xe4>
 80020b6:	e0d3      	b.n	8002260 <HAL_I2C_Mem_Read+0x28c>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020b8:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 80020ba:	4a7c      	ldr	r2, [pc, #496]	; (80022ac <HAL_I2C_Mem_Read+0x2d8>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020bc:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80020be:	684b      	ldr	r3, [r1, #4]
 80020c0:	4013      	ands	r3, r2
 80020c2:	4642      	mov	r2, r8
 80020c4:	4313      	orrs	r3, r2
 80020c6:	4a7a      	ldr	r2, [pc, #488]	; (80022b0 <HAL_I2C_Mem_Read+0x2dc>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	604b      	str	r3, [r1, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020cc:	2504      	movs	r5, #4
 80020ce:	2780      	movs	r7, #128	; 0x80
 80020d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80020d2:	3301      	adds	r3, #1
 80020d4:	d11d      	bne.n	8002112 <HAL_I2C_Mem_Read+0x13e>
 80020d6:	698b      	ldr	r3, [r1, #24]
 80020d8:	421d      	tst	r5, r3
 80020da:	d0fc      	beq.n	80020d6 <HAL_I2C_Mem_Read+0x102>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80020dc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80020de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80020e0:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 80020e2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80020e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80020e6:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80020e8:	3301      	adds	r3, #1
      hi2c->XferCount--;
 80020ea:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 80020ec:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80020ee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80020f0:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80020f2:	3b01      	subs	r3, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020f4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020fa:	2a00      	cmp	r2, #0
 80020fc:	d001      	beq.n	8002102 <HAL_I2C_Mem_Read+0x12e>
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d04b      	beq.n	800219a <HAL_I2C_Mem_Read+0x1c6>
    } while (hi2c->XferCount > 0U);
 8002102:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002104:	2b00      	cmp	r3, #0
 8002106:	d100      	bne.n	800210a <HAL_I2C_Mem_Read+0x136>
 8002108:	e0b9      	b.n	800227e <HAL_I2C_Mem_Read+0x2aa>
 800210a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800210c:	6821      	ldr	r1, [r4, #0]
 800210e:	3301      	adds	r3, #1
 8002110:	d0e1      	beq.n	80020d6 <HAL_I2C_Mem_Read+0x102>
 8002112:	698b      	ldr	r3, [r1, #24]
 8002114:	421d      	tst	r5, r3
 8002116:	d1e1      	bne.n	80020dc <HAL_I2C_Mem_Read+0x108>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002118:	f7ff f98e 	bl	8001438 <HAL_GetTick>
 800211c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800211e:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002120:	1b80      	subs	r0, r0, r6
 8002122:	4283      	cmp	r3, r0
 8002124:	d301      	bcc.n	800212a <HAL_I2C_Mem_Read+0x156>
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1d2      	bne.n	80020d0 <HAL_I2C_Mem_Read+0xfc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800212a:	002a      	movs	r2, r5
 800212c:	698b      	ldr	r3, [r1, #24]
 800212e:	401a      	ands	r2, r3
 8002130:	421d      	tst	r5, r3
 8002132:	d1cd      	bne.n	80020d0 <HAL_I2C_Mem_Read+0xfc>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002134:	2120      	movs	r1, #32
 8002136:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8002138:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800213a:	430b      	orrs	r3, r1
 800213c:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800213e:	2341      	movs	r3, #65	; 0x41
 8002140:	54e1      	strb	r1, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002142:	3301      	adds	r3, #1
 8002144:	54e2      	strb	r2, [r4, r3]
          __HAL_UNLOCK(hi2c);
 8002146:	3b02      	subs	r3, #2
 8002148:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 800214a:	e003      	b.n	8002154 <HAL_I2C_Mem_Read+0x180>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800214c:	2380      	movs	r3, #128	; 0x80
      return  HAL_ERROR;
 800214e:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	6463      	str	r3, [r4, #68]	; 0x44
}
 8002154:	bcf0      	pop	{r4, r5, r6, r7}
 8002156:	46bb      	mov	fp, r7
 8002158:	46b2      	mov	sl, r6
 800215a:	46a9      	mov	r9, r5
 800215c:	46a0      	mov	r8, r4
 800215e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8002160:	2002      	movs	r0, #2
 8002162:	e7f7      	b.n	8002154 <HAL_I2C_Mem_Read+0x180>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002164:	2220      	movs	r2, #32
 8002166:	6c63      	ldr	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002168:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800216a:	4313      	orrs	r3, r2
 800216c:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800216e:	2341      	movs	r3, #65	; 0x41
 8002170:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002172:	2300      	movs	r3, #0
 8002174:	3222      	adds	r2, #34	; 0x22
 8002176:	54a3      	strb	r3, [r4, r2]
          __HAL_UNLOCK(hi2c);
 8002178:	3a02      	subs	r2, #2
 800217a:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 800217c:	e7ea      	b.n	8002154 <HAL_I2C_Mem_Read+0x180>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800217e:	6823      	ldr	r3, [r4, #0]
 8002180:	0a2a      	lsrs	r2, r5, #8
 8002182:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002184:	0020      	movs	r0, r4
 8002186:	0032      	movs	r2, r6
 8002188:	990c      	ldr	r1, [sp, #48]	; 0x30
 800218a:	f7ff fba5 	bl	80018d8 <I2C_WaitOnTXISFlagUntilTimeout>
 800218e:	2800      	cmp	r0, #0
 8002190:	d161      	bne.n	8002256 <HAL_I2C_Mem_Read+0x282>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002192:	6821      	ldr	r1, [r4, #0]
 8002194:	b2ea      	uxtb	r2, r5
 8002196:	628a      	str	r2, [r1, #40]	; 0x28
 8002198:	e781      	b.n	800209e <HAL_I2C_Mem_Read+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800219a:	6822      	ldr	r2, [r4, #0]
 800219c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800219e:	3301      	adds	r3, #1
 80021a0:	d110      	bne.n	80021c4 <HAL_I2C_Mem_Read+0x1f0>
 80021a2:	6993      	ldr	r3, [r2, #24]
 80021a4:	421f      	tst	r7, r3
 80021a6:	d0fc      	beq.n	80021a2 <HAL_I2C_Mem_Read+0x1ce>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021aa:	2bff      	cmp	r3, #255	; 0xff
 80021ac:	d927      	bls.n	80021fe <HAL_I2C_Mem_Read+0x22a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021ae:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 80021b0:	4940      	ldr	r1, [pc, #256]	; (80022b4 <HAL_I2C_Mem_Read+0x2e0>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021b2:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80021b4:	6853      	ldr	r3, [r2, #4]
 80021b6:	400b      	ands	r3, r1
 80021b8:	4641      	mov	r1, r8
 80021ba:	430b      	orrs	r3, r1
 80021bc:	493e      	ldr	r1, [pc, #248]	; (80022b8 <HAL_I2C_Mem_Read+0x2e4>)
 80021be:	430b      	orrs	r3, r1
 80021c0:	6053      	str	r3, [r2, #4]
}
 80021c2:	e79e      	b.n	8002102 <HAL_I2C_Mem_Read+0x12e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021c4:	6993      	ldr	r3, [r2, #24]
 80021c6:	421f      	tst	r7, r3
 80021c8:	d1ee      	bne.n	80021a8 <HAL_I2C_Mem_Read+0x1d4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ca:	f7ff f935 	bl	8001438 <HAL_GetTick>
 80021ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021d0:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021d2:	1b80      	subs	r0, r0, r6
 80021d4:	4283      	cmp	r3, r0
 80021d6:	d301      	bcc.n	80021dc <HAL_I2C_Mem_Read+0x208>
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1df      	bne.n	800219c <HAL_I2C_Mem_Read+0x1c8>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021dc:	0039      	movs	r1, r7
 80021de:	6993      	ldr	r3, [r2, #24]
 80021e0:	4019      	ands	r1, r3
 80021e2:	421f      	tst	r7, r3
 80021e4:	d1da      	bne.n	800219c <HAL_I2C_Mem_Read+0x1c8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021e6:	2220      	movs	r2, #32
 80021e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 80021ea:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021ec:	4313      	orrs	r3, r2
 80021ee:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021f0:	2341      	movs	r3, #65	; 0x41
 80021f2:	54e2      	strb	r2, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f4:	3301      	adds	r3, #1
 80021f6:	54e1      	strb	r1, [r4, r3]
          __HAL_UNLOCK(hi2c);
 80021f8:	3b02      	subs	r3, #2
 80021fa:	54e1      	strb	r1, [r4, r3]
          return HAL_ERROR;
 80021fc:	e7aa      	b.n	8002154 <HAL_I2C_Mem_Read+0x180>
          hi2c->XferSize = hi2c->XferCount;
 80021fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8002200:	482c      	ldr	r0, [pc, #176]	; (80022b4 <HAL_I2C_Mem_Read+0x2e0>)
 8002202:	6851      	ldr	r1, [r2, #4]
          hi2c->XferSize = hi2c->XferCount;
 8002204:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8002206:	4001      	ands	r1, r0
 8002208:	4640      	mov	r0, r8
          hi2c->XferSize = hi2c->XferCount;
 800220a:	8523      	strh	r3, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800220c:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 800220e:	4301      	orrs	r1, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002210:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8002212:	430b      	orrs	r3, r1
 8002214:	2180      	movs	r1, #128	; 0x80
 8002216:	0489      	lsls	r1, r1, #18
 8002218:	430b      	orrs	r3, r1
 800221a:	6053      	str	r3, [r2, #4]
}
 800221c:	e771      	b.n	8002102 <HAL_I2C_Mem_Read+0x12e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800221e:	698b      	ldr	r3, [r1, #24]
 8002220:	421d      	tst	r5, r3
 8002222:	d000      	beq.n	8002226 <HAL_I2C_Mem_Read+0x252>
 8002224:	e744      	b.n	80020b0 <HAL_I2C_Mem_Read+0xdc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002226:	f7ff f907 	bl	8001438 <HAL_GetTick>
 800222a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800222c:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800222e:	1b80      	subs	r0, r0, r6
 8002230:	4283      	cmp	r3, r0
 8002232:	d302      	bcc.n	800223a <HAL_I2C_Mem_Read+0x266>
 8002234:	2b00      	cmp	r3, #0
 8002236:	d000      	beq.n	800223a <HAL_I2C_Mem_Read+0x266>
 8002238:	e732      	b.n	80020a0 <HAL_I2C_Mem_Read+0xcc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800223a:	002a      	movs	r2, r5
 800223c:	698b      	ldr	r3, [r1, #24]
 800223e:	401a      	ands	r2, r3
 8002240:	421d      	tst	r5, r3
 8002242:	d000      	beq.n	8002246 <HAL_I2C_Mem_Read+0x272>
 8002244:	e72c      	b.n	80020a0 <HAL_I2C_Mem_Read+0xcc>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002246:	2120      	movs	r1, #32
 8002248:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800224a:	430b      	orrs	r3, r1
 800224c:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800224e:	2341      	movs	r3, #65	; 0x41
 8002250:	54e1      	strb	r1, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002252:	3301      	adds	r3, #1
 8002254:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hi2c);
 8002256:	2340      	movs	r3, #64	; 0x40
 8002258:	2200      	movs	r2, #0
      return HAL_ERROR;
 800225a:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 800225c:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 800225e:	e779      	b.n	8002154 <HAL_I2C_Mem_Read+0x180>
      hi2c->XferSize = hi2c->XferCount;
 8002260:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8002262:	4812      	ldr	r0, [pc, #72]	; (80022ac <HAL_I2C_Mem_Read+0x2d8>)
 8002264:	684a      	ldr	r2, [r1, #4]
      hi2c->XferSize = hi2c->XferCount;
 8002266:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8002268:	4002      	ands	r2, r0
 800226a:	4640      	mov	r0, r8
      hi2c->XferSize = hi2c->XferCount;
 800226c:	8523      	strh	r3, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800226e:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8002270:	4302      	orrs	r2, r0
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002272:	041b      	lsls	r3, r3, #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8002274:	4313      	orrs	r3, r2
 8002276:	4a11      	ldr	r2, [pc, #68]	; (80022bc <HAL_I2C_Mem_Read+0x2e8>)
 8002278:	4313      	orrs	r3, r2
 800227a:	604b      	str	r3, [r1, #4]
}
 800227c:	e726      	b.n	80020cc <HAL_I2C_Mem_Read+0xf8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800227e:	0032      	movs	r2, r6
 8002280:	0020      	movs	r0, r4
 8002282:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002284:	f7ff fc10 	bl	8001aa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002288:	2800      	cmp	r0, #0
 800228a:	d10d      	bne.n	80022a8 <HAL_I2C_Mem_Read+0x2d4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800228c:	2120      	movs	r1, #32
 800228e:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002290:	4d0b      	ldr	r5, [pc, #44]	; (80022c0 <HAL_I2C_Mem_Read+0x2ec>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002292:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	402a      	ands	r2, r5
 8002298:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800229a:	2341      	movs	r3, #65	; 0x41
 800229c:	54e1      	strb	r1, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800229e:	3301      	adds	r3, #1
 80022a0:	54e0      	strb	r0, [r4, r3]
    __HAL_UNLOCK(hi2c);
 80022a2:	3b02      	subs	r3, #2
 80022a4:	54e0      	strb	r0, [r4, r3]
    return HAL_OK;
 80022a6:	e755      	b.n	8002154 <HAL_I2C_Mem_Read+0x180>
      return HAL_ERROR;
 80022a8:	2001      	movs	r0, #1
 80022aa:	e753      	b.n	8002154 <HAL_I2C_Mem_Read+0x180>
 80022ac:	fc009800 	.word	0xfc009800
 80022b0:	01ff2400 	.word	0x01ff2400
 80022b4:	fc009c00 	.word	0xfc009c00
 80022b8:	01ff0000 	.word	0x01ff0000
 80022bc:	02002400 	.word	0x02002400
 80022c0:	fe00e800 	.word	0xfe00e800

080022c4 <HAL_I2C_IsDeviceReady>:
{
 80022c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022c6:	4657      	mov	r7, sl
 80022c8:	4645      	mov	r5, r8
 80022ca:	46de      	mov	lr, fp
 80022cc:	464e      	mov	r6, r9
 80022ce:	b5e0      	push	{r5, r6, r7, lr}
 80022d0:	001d      	movs	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
 80022d2:	2300      	movs	r3, #0
{
 80022d4:	4692      	mov	sl, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80022d6:	2241      	movs	r2, #65	; 0x41
{
 80022d8:	b083      	sub	sp, #12
  __IO uint32_t I2C_Trials = 0UL;
 80022da:	9301      	str	r3, [sp, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80022dc:	5c83      	ldrb	r3, [r0, r2]
{
 80022de:	0004      	movs	r4, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80022e0:	2b20      	cmp	r3, #32
 80022e2:	d152      	bne.n	800238a <HAL_I2C_IsDeviceReady+0xc6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80022e4:	6803      	ldr	r3, [r0, #0]
 80022e6:	2080      	movs	r0, #128	; 0x80
 80022e8:	699e      	ldr	r6, [r3, #24]
 80022ea:	0200      	lsls	r0, r0, #8
 80022ec:	0037      	movs	r7, r6
 80022ee:	4007      	ands	r7, r0
 80022f0:	4206      	tst	r6, r0
 80022f2:	d14a      	bne.n	800238a <HAL_I2C_IsDeviceReady+0xc6>
    __HAL_LOCK(hi2c);
 80022f4:	2040      	movs	r0, #64	; 0x40
 80022f6:	5c26      	ldrb	r6, [r4, r0]
 80022f8:	2e01      	cmp	r6, #1
 80022fa:	d046      	beq.n	800238a <HAL_I2C_IsDeviceReady+0xc6>
 80022fc:	2601      	movs	r6, #1
 80022fe:	0589      	lsls	r1, r1, #22
 8002300:	5426      	strb	r6, [r4, r0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002302:	381c      	subs	r0, #28
 8002304:	54a0      	strb	r0, [r4, r2]
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002306:	0d8a      	lsrs	r2, r1, #22
 8002308:	4691      	mov	r9, r2
 800230a:	4a67      	ldr	r2, [pc, #412]	; (80024a8 <HAL_I2C_IsDeviceReady+0x1e4>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800230c:	6467      	str	r7, [r4, #68]	; 0x44
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800230e:	4693      	mov	fp, r2
 8002310:	68e2      	ldr	r2, [r4, #12]
 8002312:	2a01      	cmp	r2, #1
 8002314:	d055      	beq.n	80023c2 <HAL_I2C_IsDeviceReady+0xfe>
 8002316:	465a      	mov	r2, fp
 8002318:	4649      	mov	r1, r9
 800231a:	430a      	orrs	r2, r1
 800231c:	605a      	str	r2, [r3, #4]
      tickstart = HAL_GetTick();
 800231e:	f7ff f88b 	bl	8001438 <HAL_GetTick>
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002322:	2220      	movs	r2, #32
 8002324:	6823      	ldr	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8002326:	0006      	movs	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002328:	6999      	ldr	r1, [r3, #24]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800232a:	6998      	ldr	r0, [r3, #24]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800232c:	400a      	ands	r2, r1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800232e:	2110      	movs	r1, #16
 8002330:	4001      	ands	r1, r0
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002332:	430a      	orrs	r2, r1
 8002334:	d149      	bne.n	80023ca <HAL_I2C_IsDeviceReady+0x106>
 8002336:	1c6a      	adds	r2, r5, #1
 8002338:	d12f      	bne.n	800239a <HAL_I2C_IsDeviceReady+0xd6>
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800233a:	2010      	movs	r0, #16
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800233c:	2720      	movs	r7, #32
 800233e:	6999      	ldr	r1, [r3, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002340:	699a      	ldr	r2, [r3, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002342:	4039      	ands	r1, r7
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002344:	4002      	ands	r2, r0
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002346:	430a      	orrs	r2, r1
 8002348:	d0f9      	beq.n	800233e <HAL_I2C_IsDeviceReady+0x7a>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800234a:	699a      	ldr	r2, [r3, #24]
 800234c:	4210      	tst	r0, r2
 800234e:	d100      	bne.n	8002352 <HAL_I2C_IsDeviceReady+0x8e>
 8002350:	e082      	b.n	8002458 <HAL_I2C_IsDeviceReady+0x194>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002352:	2120      	movs	r1, #32
 8002354:	699a      	ldr	r2, [r3, #24]
 8002356:	4211      	tst	r1, r2
 8002358:	d0fc      	beq.n	8002354 <HAL_I2C_IsDeviceReady+0x90>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800235a:	2210      	movs	r2, #16
 800235c:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800235e:	3210      	adds	r2, #16
 8002360:	61da      	str	r2, [r3, #28]
      if (I2C_Trials == Trials)
 8002362:	9a01      	ldr	r2, [sp, #4]
 8002364:	4552      	cmp	r2, sl
 8002366:	d054      	beq.n	8002412 <HAL_I2C_IsDeviceReady+0x14e>
      I2C_Trials++;
 8002368:	9a01      	ldr	r2, [sp, #4]
 800236a:	3201      	adds	r2, #1
 800236c:	9201      	str	r2, [sp, #4]
    } while (I2C_Trials < Trials);
 800236e:	9a01      	ldr	r2, [sp, #4]
 8002370:	4552      	cmp	r2, sl
 8002372:	d3cd      	bcc.n	8002310 <HAL_I2C_IsDeviceReady+0x4c>
    hi2c->State = HAL_I2C_STATE_READY;
 8002374:	2220      	movs	r2, #32
 8002376:	2341      	movs	r3, #65	; 0x41
 8002378:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800237a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 800237c:	2001      	movs	r0, #1
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800237e:	4313      	orrs	r3, r2
 8002380:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8002382:	2200      	movs	r2, #0
 8002384:	2340      	movs	r3, #64	; 0x40
 8002386:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 8002388:	e000      	b.n	800238c <HAL_I2C_IsDeviceReady+0xc8>
    return HAL_BUSY;
 800238a:	2002      	movs	r0, #2
}
 800238c:	b003      	add	sp, #12
 800238e:	bcf0      	pop	{r4, r5, r6, r7}
 8002390:	46bb      	mov	fp, r7
 8002392:	46b2      	mov	sl, r6
 8002394:	46a9      	mov	r9, r5
 8002396:	46a0      	mov	r8, r4
 8002398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800239a:	2d00      	cmp	r5, #0
 800239c:	d036      	beq.n	800240c <HAL_I2C_IsDeviceReady+0x148>
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800239e:	2310      	movs	r3, #16
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80023a0:	2720      	movs	r7, #32
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80023a2:	4698      	mov	r8, r3
 80023a4:	e007      	b.n	80023b6 <HAL_I2C_IsDeviceReady+0xf2>
 80023a6:	4640      	mov	r0, r8
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80023a8:	6823      	ldr	r3, [r4, #0]
 80023aa:	6999      	ldr	r1, [r3, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80023ac:	699a      	ldr	r2, [r3, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80023ae:	4039      	ands	r1, r7
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80023b0:	4002      	ands	r2, r0
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80023b2:	430a      	orrs	r2, r1
 80023b4:	d109      	bne.n	80023ca <HAL_I2C_IsDeviceReady+0x106>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023b6:	f7ff f83f 	bl	8001438 <HAL_GetTick>
 80023ba:	1b80      	subs	r0, r0, r6
 80023bc:	4285      	cmp	r5, r0
 80023be:	d2f2      	bcs.n	80023a6 <HAL_I2C_IsDeviceReady+0xe2>
 80023c0:	e7d8      	b.n	8002374 <HAL_I2C_IsDeviceReady+0xb0>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80023c2:	4649      	mov	r1, r9
 80023c4:	4a39      	ldr	r2, [pc, #228]	; (80024ac <HAL_I2C_IsDeviceReady+0x1e8>)
 80023c6:	430a      	orrs	r2, r1
 80023c8:	e7a8      	b.n	800231c <HAL_I2C_IsDeviceReady+0x58>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80023ca:	699a      	ldr	r2, [r3, #24]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023cc:	2720      	movs	r7, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80023ce:	06d2      	lsls	r2, r2, #27
 80023d0:	d540      	bpl.n	8002454 <HAL_I2C_IsDeviceReady+0x190>
 80023d2:	1c6a      	adds	r2, r5, #1
 80023d4:	d0bd      	beq.n	8002352 <HAL_I2C_IsDeviceReady+0x8e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023d6:	699a      	ldr	r2, [r3, #24]
 80023d8:	4217      	tst	r7, r2
 80023da:	d1be      	bne.n	800235a <HAL_I2C_IsDeviceReady+0x96>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023dc:	f7ff f82c 	bl	8001438 <HAL_GetTick>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023e0:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e2:	1b80      	subs	r0, r0, r6
 80023e4:	4285      	cmp	r5, r0
 80023e6:	d301      	bcc.n	80023ec <HAL_I2C_IsDeviceReady+0x128>
 80023e8:	2d00      	cmp	r5, #0
 80023ea:	d1f2      	bne.n	80023d2 <HAL_I2C_IsDeviceReady+0x10e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023ec:	0039      	movs	r1, r7
 80023ee:	699a      	ldr	r2, [r3, #24]
 80023f0:	4011      	ands	r1, r2
 80023f2:	4217      	tst	r7, r2
 80023f4:	d1ed      	bne.n	80023d2 <HAL_I2C_IsDeviceReady+0x10e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 80023f8:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023fa:	433b      	orrs	r3, r7
 80023fc:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80023fe:	2341      	movs	r3, #65	; 0x41
 8002400:	54e7      	strb	r7, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002402:	3301      	adds	r3, #1
 8002404:	54e1      	strb	r1, [r4, r3]
          __HAL_UNLOCK(hi2c);
 8002406:	3b02      	subs	r3, #2
 8002408:	54e1      	strb	r1, [r4, r3]
          return HAL_ERROR;
 800240a:	e7bf      	b.n	800238c <HAL_I2C_IsDeviceReady+0xc8>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800240c:	f7ff f814 	bl	8001438 <HAL_GetTick>
            hi2c->State = HAL_I2C_STATE_READY;
 8002410:	e7b0      	b.n	8002374 <HAL_I2C_IsDeviceReady+0xb0>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002412:	2280      	movs	r2, #128	; 0x80
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002414:	2720      	movs	r7, #32
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002416:	6859      	ldr	r1, [r3, #4]
 8002418:	01d2      	lsls	r2, r2, #7
 800241a:	430a      	orrs	r2, r1
 800241c:	605a      	str	r2, [r3, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800241e:	1c6a      	adds	r2, r5, #1
 8002420:	d106      	bne.n	8002430 <HAL_I2C_IsDeviceReady+0x16c>
 8002422:	2120      	movs	r1, #32
 8002424:	699a      	ldr	r2, [r3, #24]
 8002426:	4211      	tst	r1, r2
 8002428:	d0fc      	beq.n	8002424 <HAL_I2C_IsDeviceReady+0x160>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800242a:	2220      	movs	r2, #32
 800242c:	61da      	str	r2, [r3, #28]
 800242e:	e79b      	b.n	8002368 <HAL_I2C_IsDeviceReady+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002430:	699a      	ldr	r2, [r3, #24]
 8002432:	4217      	tst	r7, r2
 8002434:	d1f9      	bne.n	800242a <HAL_I2C_IsDeviceReady+0x166>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002436:	f7fe ffff 	bl	8001438 <HAL_GetTick>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800243a:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800243c:	1b80      	subs	r0, r0, r6
 800243e:	4285      	cmp	r5, r0
 8002440:	d205      	bcs.n	800244e <HAL_I2C_IsDeviceReady+0x18a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002442:	0039      	movs	r1, r7
 8002444:	699a      	ldr	r2, [r3, #24]
 8002446:	4011      	ands	r1, r2
 8002448:	4217      	tst	r7, r2
 800244a:	d1e8      	bne.n	800241e <HAL_I2C_IsDeviceReady+0x15a>
 800244c:	e7d3      	b.n	80023f6 <HAL_I2C_IsDeviceReady+0x132>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800244e:	2d00      	cmp	r5, #0
 8002450:	d1e5      	bne.n	800241e <HAL_I2C_IsDeviceReady+0x15a>
 8002452:	e7f6      	b.n	8002442 <HAL_I2C_IsDeviceReady+0x17e>
 8002454:	1c6a      	adds	r2, r5, #1
 8002456:	d10c      	bne.n	8002472 <HAL_I2C_IsDeviceReady+0x1ae>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002458:	2120      	movs	r1, #32
 800245a:	699a      	ldr	r2, [r3, #24]
 800245c:	4211      	tst	r1, r2
 800245e:	d0fc      	beq.n	800245a <HAL_I2C_IsDeviceReady+0x196>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002460:	2220      	movs	r2, #32
 8002462:	61da      	str	r2, [r3, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8002464:	2341      	movs	r3, #65	; 0x41
 8002466:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hi2c);
 8002468:	2200      	movs	r2, #0
 800246a:	3b01      	subs	r3, #1
        return HAL_OK;
 800246c:	2000      	movs	r0, #0
        __HAL_UNLOCK(hi2c);
 800246e:	54e2      	strb	r2, [r4, r3]
        return HAL_OK;
 8002470:	e78c      	b.n	800238c <HAL_I2C_IsDeviceReady+0xc8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002472:	699a      	ldr	r2, [r3, #24]
 8002474:	4217      	tst	r7, r2
 8002476:	d1f3      	bne.n	8002460 <HAL_I2C_IsDeviceReady+0x19c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002478:	f7fe ffde 	bl	8001438 <HAL_GetTick>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800247c:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800247e:	1b80      	subs	r0, r0, r6
 8002480:	4285      	cmp	r5, r0
 8002482:	d301      	bcc.n	8002488 <HAL_I2C_IsDeviceReady+0x1c4>
 8002484:	2d00      	cmp	r5, #0
 8002486:	d1e5      	bne.n	8002454 <HAL_I2C_IsDeviceReady+0x190>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002488:	003a      	movs	r2, r7
 800248a:	6999      	ldr	r1, [r3, #24]
 800248c:	400a      	ands	r2, r1
 800248e:	420f      	tst	r7, r1
 8002490:	d1e0      	bne.n	8002454 <HAL_I2C_IsDeviceReady+0x190>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002492:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8002494:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002496:	433b      	orrs	r3, r7
 8002498:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800249a:	2341      	movs	r3, #65	; 0x41
 800249c:	54e7      	strb	r7, [r4, r3]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800249e:	3301      	adds	r3, #1
 80024a0:	54e2      	strb	r2, [r4, r3]
          __HAL_UNLOCK(hi2c);
 80024a2:	3b02      	subs	r3, #2
 80024a4:	54e2      	strb	r2, [r4, r3]
          return HAL_ERROR;
 80024a6:	e771      	b.n	800238c <HAL_I2C_IsDeviceReady+0xc8>
 80024a8:	02002800 	.word	0x02002800
 80024ac:	02002000 	.word	0x02002000

080024b0 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80024b0:	6803      	ldr	r3, [r0, #0]
{
 80024b2:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80024b4:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80024b6:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 80024b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d000      	beq.n	80024c0 <HAL_I2C_EV_IRQHandler+0x10>
    hi2c->XferISR(hi2c, itflags, itsources);
 80024be:	4798      	blx	r3
}
 80024c0:	bd10      	pop	{r4, pc}
 80024c2:	46c0      	nop			; (mov r8, r8)

080024c4 <HAL_I2C_SlaveTxCpltCallback>:
 80024c4:	4770      	bx	lr
 80024c6:	46c0      	nop			; (mov r8, r8)

080024c8 <HAL_I2C_SlaveRxCpltCallback>:
 80024c8:	4770      	bx	lr
 80024ca:	46c0      	nop			; (mov r8, r8)

080024cc <I2C_ITSlaveSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024cc:	2142      	movs	r1, #66	; 0x42
{
 80024ce:	b510      	push	{r4, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d0:	2400      	movs	r4, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80024d2:	6803      	ldr	r3, [r0, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d6:	5444      	strb	r4, [r0, r1]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80024d8:	3941      	subs	r1, #65	; 0x41
 80024da:	0454      	lsls	r4, r2, #17
 80024dc:	d521      	bpl.n	8002522 <I2C_ITSlaveSeqCplt+0x56>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4920      	ldr	r1, [pc, #128]	; (8002564 <I2C_ITSlaveSeqCplt+0x98>)
 80024e2:	400a      	ands	r2, r1
 80024e4:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80024e6:	2241      	movs	r2, #65	; 0x41
 80024e8:	5c81      	ldrb	r1, [r0, r2]
 80024ea:	2929      	cmp	r1, #41	; 0x29
 80024ec:	d024      	beq.n	8002538 <I2C_ITSlaveSeqCplt+0x6c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80024ee:	5c81      	ldrb	r1, [r0, r2]
 80024f0:	292a      	cmp	r1, #42	; 0x2a
 80024f2:	d000      	beq.n	80024f6 <I2C_ITSlaveSeqCplt+0x2a>
}
 80024f4:	bd10      	pop	{r4, pc}
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80024f6:	2422      	movs	r4, #34	; 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80024f8:	3902      	subs	r1, #2
 80024fa:	5481      	strb	r1, [r0, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80024fc:	6304      	str	r4, [r0, #48]	; 0x30
  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80024fe:	5c82      	ldrb	r2, [r0, r2]
 8002500:	4011      	ands	r1, r2
 8002502:	3928      	subs	r1, #40	; 0x28
 8002504:	424a      	negs	r2, r1
 8002506:	4151      	adcs	r1, r2
 8002508:	22b0      	movs	r2, #176	; 0xb0
 800250a:	4249      	negs	r1, r1
 800250c:	4011      	ands	r1, r2
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800250e:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002510:	39f5      	subs	r1, #245	; 0xf5
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002512:	4011      	ands	r1, r2
 8002514:	6019      	str	r1, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002516:	2200      	movs	r2, #0
 8002518:	2340      	movs	r3, #64	; 0x40
 800251a:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800251c:	f7ff ffd4 	bl	80024c8 <HAL_I2C_SlaveRxCpltCallback>
}
 8002520:	e7e8      	b.n	80024f4 <I2C_ITSlaveSeqCplt+0x28>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002522:	0bd2      	lsrs	r2, r2, #15
 8002524:	4211      	tst	r1, r2
 8002526:	d0de      	beq.n	80024e6 <I2C_ITSlaveSeqCplt+0x1a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	490f      	ldr	r1, [pc, #60]	; (8002568 <I2C_ITSlaveSeqCplt+0x9c>)
 800252c:	400a      	ands	r2, r1
 800252e:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002530:	2241      	movs	r2, #65	; 0x41
 8002532:	5c81      	ldrb	r1, [r0, r2]
 8002534:	2929      	cmp	r1, #41	; 0x29
 8002536:	d1da      	bne.n	80024ee <I2C_ITSlaveSeqCplt+0x22>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002538:	2421      	movs	r4, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800253a:	3901      	subs	r1, #1
 800253c:	5481      	strb	r1, [r0, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800253e:	6304      	str	r4, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002540:	5c82      	ldrb	r2, [r0, r2]
 8002542:	4011      	ands	r1, r2
 8002544:	3928      	subs	r1, #40	; 0x28
 8002546:	424a      	negs	r2, r1
 8002548:	4151      	adcs	r1, r2
 800254a:	22b0      	movs	r2, #176	; 0xb0
 800254c:	4249      	negs	r1, r1
 800254e:	4011      	ands	r1, r2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002550:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002552:	39f3      	subs	r1, #243	; 0xf3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002554:	4011      	ands	r1, r2
 8002556:	6019      	str	r1, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002558:	2200      	movs	r2, #0
 800255a:	2340      	movs	r3, #64	; 0x40
 800255c:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800255e:	f7ff ffb1 	bl	80024c4 <HAL_I2C_SlaveTxCpltCallback>
 8002562:	e7c7      	b.n	80024f4 <I2C_ITSlaveSeqCplt+0x28>
 8002564:	ffffbfff 	.word	0xffffbfff
 8002568:	ffff7fff 	.word	0xffff7fff

0800256c <HAL_I2C_AddrCallback>:
}
 800256c:	4770      	bx	lr
 800256e:	46c0      	nop			; (mov r8, r8)

08002570 <I2C_ITAddrCplt.part.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8002570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002572:	46c6      	mov	lr, r8
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002574:	26fe      	movs	r6, #254	; 0xfe
    transferdirection = I2C_GET_DIR(hi2c);
 8002576:	6803      	ldr	r3, [r0, #0]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002578:	68c5      	ldr	r5, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 800257a:	6999      	ldr	r1, [r3, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800257c:	699a      	ldr	r2, [r3, #24]
    transferdirection = I2C_GET_DIR(hi2c);
 800257e:	03c9      	lsls	r1, r1, #15
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002580:	0c12      	lsrs	r2, r2, #16
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002582:	689c      	ldr	r4, [r3, #8]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8002584:	b500      	push	{lr}
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002586:	68df      	ldr	r7, [r3, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8002588:	0fc9      	lsrs	r1, r1, #31
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800258a:	4032      	ands	r2, r6
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800258c:	2d02      	cmp	r5, #2
 800258e:	d113      	bne.n	80025b8 <I2C_ITAddrCplt.part.0+0x48>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002590:	05a4      	lsls	r4, r4, #22
 8002592:	0da5      	lsrs	r5, r4, #22
 8002594:	46ac      	mov	ip, r5
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002596:	2506      	movs	r5, #6
 8002598:	0f64      	lsrs	r4, r4, #29
 800259a:	4054      	eors	r4, r2
 800259c:	002a      	movs	r2, r5
 800259e:	4022      	ands	r2, r4
 80025a0:	4690      	mov	r8, r2
 80025a2:	4225      	tst	r5, r4
 80025a4:	d112      	bne.n	80025cc <I2C_ITAddrCplt.part.0+0x5c>
        hi2c->AddrEventCount++;
 80025a6:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80025a8:	3401      	adds	r4, #1
 80025aa:	6484      	str	r4, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80025ac:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80025ae:	2a02      	cmp	r2, #2
 80025b0:	d018      	beq.n	80025e4 <I2C_ITAddrCplt.part.0+0x74>
}
 80025b2:	bc80      	pop	{r7}
 80025b4:	46b8      	mov	r8, r7
 80025b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80025b8:	25b8      	movs	r5, #184	; 0xb8
 80025ba:	681c      	ldr	r4, [r3, #0]
 80025bc:	43ac      	bics	r4, r5
 80025be:	601c      	str	r4, [r3, #0]
      __HAL_UNLOCK(hi2c);
 80025c0:	2340      	movs	r3, #64	; 0x40
 80025c2:	2400      	movs	r4, #0
 80025c4:	54c4      	strb	r4, [r0, r3]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80025c6:	f7ff ffd1 	bl	800256c <HAL_I2C_AddrCallback>
}
 80025ca:	e7f2      	b.n	80025b2 <I2C_ITAddrCplt.part.0+0x42>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80025cc:	24b8      	movs	r4, #184	; 0xb8
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	43a2      	bics	r2, r4
 80025d2:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hi2c);
 80025d4:	2340      	movs	r3, #64	; 0x40
 80025d6:	2200      	movs	r2, #0
 80025d8:	54c2      	strb	r2, [r0, r3]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80025da:	0032      	movs	r2, r6
 80025dc:	403a      	ands	r2, r7
 80025de:	f7ff ffc5 	bl	800256c <HAL_I2C_AddrCallback>
 80025e2:	e7e6      	b.n	80025b2 <I2C_ITAddrCplt.part.0+0x42>
          hi2c->AddrEventCount = 0U;
 80025e4:	4642      	mov	r2, r8
 80025e6:	6482      	str	r2, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80025e8:	2208      	movs	r2, #8
 80025ea:	61da      	str	r2, [r3, #28]
          __HAL_UNLOCK(hi2c);
 80025ec:	4642      	mov	r2, r8
 80025ee:	2340      	movs	r3, #64	; 0x40
 80025f0:	54c2      	strb	r2, [r0, r3]
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80025f2:	4662      	mov	r2, ip
 80025f4:	f7ff ffba 	bl	800256c <HAL_I2C_AddrCallback>
 80025f8:	e7db      	b.n	80025b2 <I2C_ITAddrCplt.part.0+0x42>
 80025fa:	46c0      	nop			; (mov r8, r8)

080025fc <HAL_I2C_ListenCpltCallback>:
 80025fc:	4770      	bx	lr
 80025fe:	46c0      	nop			; (mov r8, r8)

08002600 <HAL_I2C_ErrorCallback>:
 8002600:	4770      	bx	lr
 8002602:	46c0      	nop			; (mov r8, r8)

08002604 <HAL_I2C_AbortCpltCallback>:
 8002604:	4770      	bx	lr
 8002606:	46c0      	nop			; (mov r8, r8)

08002608 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002608:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 800260a:	b510      	push	{r4, lr}
  if (hi2c->hdmatx != NULL)
 800260c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <I2C_DMAAbort+0xe>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002612:	2200      	movs	r2, #0
 8002614:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 8002616:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <I2C_DMAAbort+0x18>
    hi2c->hdmarx->XferAbortCallback = NULL;
 800261c:	2200      	movs	r2, #0
 800261e:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002620:	2341      	movs	r3, #65	; 0x41
 8002622:	5cc2      	ldrb	r2, [r0, r3]
 8002624:	2a60      	cmp	r2, #96	; 0x60
 8002626:	d006      	beq.n	8002636 <I2C_DMAAbort+0x2e>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002628:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 800262a:	2240      	movs	r2, #64	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800262c:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800262e:	5483      	strb	r3, [r0, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8002630:	f7ff ffe6 	bl	8002600 <HAL_I2C_ErrorCallback>
}
 8002634:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8002636:	3a40      	subs	r2, #64	; 0x40
 8002638:	54c2      	strb	r2, [r0, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 800263a:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 800263c:	3220      	adds	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 800263e:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002640:	5483      	strb	r3, [r0, r2]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002642:	f7ff ffdf 	bl	8002604 <HAL_I2C_AbortCpltCallback>
}
 8002646:	e7f5      	b.n	8002634 <I2C_DMAAbort+0x2c>

08002648 <I2C_ITError>:
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002648:	2241      	movs	r2, #65	; 0x41
{
 800264a:	b570      	push	{r4, r5, r6, lr}
 800264c:	0004      	movs	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800264e:	5c83      	ldrb	r3, [r0, r2]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002650:	2500      	movs	r5, #0
 8002652:	2042      	movs	r0, #66	; 0x42
 8002654:	5425      	strb	r5, [r4, r0]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002656:	4852      	ldr	r0, [pc, #328]	; (80027a0 <I2C_ITError+0x158>)
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002658:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800265a:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800265c:	8565      	strh	r5, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 800265e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002660:	4308      	orrs	r0, r1
 8002662:	6460      	str	r0, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002664:	2b02      	cmp	r3, #2
 8002666:	d834      	bhi.n	80026d2 <I2C_ITError+0x8a>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002668:	2028      	movs	r0, #40	; 0x28
 800266a:	5ca3      	ldrb	r3, [r4, r2]
 800266c:	4003      	ands	r3, r0
 800266e:	3b28      	subs	r3, #40	; 0x28
 8002670:	4259      	negs	r1, r3
 8002672:	414b      	adcs	r3, r1
 8002674:	21b0      	movs	r1, #176	; 0xb0
 8002676:	425b      	negs	r3, r3
 8002678:	4019      	ands	r1, r3
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800267a:	5ca3      	ldrb	r3, [r4, r2]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800267c:	39f7      	subs	r1, #247	; 0xf7
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800267e:	4018      	ands	r0, r3
 8002680:	2828      	cmp	r0, #40	; 0x28
 8002682:	d001      	beq.n	8002688 <I2C_ITError+0x40>
 8002684:	21f7      	movs	r1, #247	; 0xf7
 8002686:	4249      	negs	r1, r1
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002688:	6823      	ldr	r3, [r4, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	4011      	ands	r1, r2
 800268e:	6019      	str	r1, [r3, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002690:	2241      	movs	r2, #65	; 0x41
 8002692:	2128      	movs	r1, #40	; 0x28
 8002694:	54a1      	strb	r1, [r4, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002696:	4a43      	ldr	r2, [pc, #268]	; (80027a4 <I2C_ITError+0x15c>)
 8002698:	6362      	str	r2, [r4, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800269a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
 800269c:	6b22      	ldr	r2, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800269e:	2800      	cmp	r0, #0
 80026a0:	d004      	beq.n	80026ac <I2C_ITError+0x64>
 80026a2:	0011      	movs	r1, r2
 80026a4:	2510      	movs	r5, #16
 80026a6:	3911      	subs	r1, #17
 80026a8:	43a9      	bics	r1, r5
 80026aa:	d03b      	beq.n	8002724 <I2C_ITError+0xdc>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80026ac:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80026ae:	2800      	cmp	r0, #0
 80026b0:	d003      	beq.n	80026ba <I2C_ITError+0x72>
 80026b2:	2110      	movs	r1, #16
 80026b4:	3a12      	subs	r2, #18
 80026b6:	438a      	bics	r2, r1
 80026b8:	d049      	beq.n	800274e <I2C_ITError+0x106>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80026ba:	2341      	movs	r3, #65	; 0x41
 80026bc:	5ce2      	ldrb	r2, [r4, r3]
 80026be:	2a60      	cmp	r2, #96	; 0x60
 80026c0:	d063      	beq.n	800278a <I2C_ITError+0x142>
    hi2c->PreviousState = I2C_STATE_NONE;
 80026c2:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 80026c4:	2240      	movs	r2, #64	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 80026c6:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ErrorCallback(hi2c);
 80026c8:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 80026ca:	54a3      	strb	r3, [r4, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80026cc:	f7ff ff98 	bl	8002600 <HAL_I2C_ErrorCallback>
}
 80026d0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80026d2:	21fe      	movs	r1, #254	; 0xfe
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80026d4:	5ca3      	ldrb	r3, [r4, r2]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80026d6:	5ca3      	ldrb	r3, [r4, r2]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80026d8:	6823      	ldr	r3, [r4, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	438a      	bics	r2, r1
 80026de:	601a      	str	r2, [r3, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80026e0:	699a      	ldr	r2, [r3, #24]
 80026e2:	0792      	lsls	r2, r2, #30
 80026e4:	d500      	bpl.n	80026e8 <I2C_ITError+0xa0>
    hi2c->Instance->TXDR = 0x00U;
 80026e6:	629d      	str	r5, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026e8:	2201      	movs	r2, #1
 80026ea:	6999      	ldr	r1, [r3, #24]
 80026ec:	420a      	tst	r2, r1
 80026ee:	d102      	bne.n	80026f6 <I2C_ITError+0xae>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026f0:	6999      	ldr	r1, [r3, #24]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	619a      	str	r2, [r3, #24]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80026f6:	2241      	movs	r2, #65	; 0x41
 80026f8:	5ca1      	ldrb	r1, [r4, r2]
 80026fa:	2960      	cmp	r1, #96	; 0x60
 80026fc:	d00f      	beq.n	800271e <I2C_ITError+0xd6>
      hi2c->State         = HAL_I2C_STATE_READY;
 80026fe:	2120      	movs	r1, #32
 8002700:	54a1      	strb	r1, [r4, r2]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002702:	699a      	ldr	r2, [r3, #24]
 8002704:	4211      	tst	r1, r2
 8002706:	d00a      	beq.n	800271e <I2C_ITError+0xd6>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002708:	2210      	movs	r2, #16
 800270a:	6999      	ldr	r1, [r3, #24]
 800270c:	420a      	tst	r2, r1
 800270e:	d004      	beq.n	800271a <I2C_ITError+0xd2>
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002710:	2104      	movs	r1, #4
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002712:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002714:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002716:	430a      	orrs	r2, r1
 8002718:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800271a:	2220      	movs	r2, #32
 800271c:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
 800271e:	2200      	movs	r2, #0
 8002720:	6362      	str	r2, [r4, #52]	; 0x34
 8002722:	e7ba      	b.n	800269a <I2C_ITError+0x52>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	0452      	lsls	r2, r2, #17
 8002728:	d42a      	bmi.n	8002780 <I2C_ITError+0x138>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800272a:	f7fe ff2b 	bl	8001584 <HAL_DMA_GetState>
 800272e:	2801      	cmp	r0, #1
 8002730:	d0c3      	beq.n	80026ba <I2C_ITError+0x72>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002732:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002734:	4b1c      	ldr	r3, [pc, #112]	; (80027a8 <I2C_ITError+0x160>)
      __HAL_UNLOCK(hi2c);
 8002736:	2200      	movs	r2, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002738:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800273a:	2340      	movs	r3, #64	; 0x40
 800273c:	54e2      	strb	r2, [r4, r3]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800273e:	f7fe fefb 	bl	8001538 <HAL_DMA_Abort_IT>
 8002742:	2800      	cmp	r0, #0
 8002744:	d0c4      	beq.n	80026d0 <I2C_ITError+0x88>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002746:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002748:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800274a:	4798      	blx	r3
 800274c:	e7c0      	b.n	80026d0 <I2C_ITError+0x88>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	0412      	lsls	r2, r2, #16
 8002752:	d503      	bpl.n	800275c <I2C_ITError+0x114>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	4915      	ldr	r1, [pc, #84]	; (80027ac <I2C_ITError+0x164>)
 8002758:	400a      	ands	r2, r1
 800275a:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800275c:	f7fe ff12 	bl	8001584 <HAL_DMA_GetState>
 8002760:	2801      	cmp	r0, #1
 8002762:	d0aa      	beq.n	80026ba <I2C_ITError+0x72>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002764:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002766:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <I2C_ITError+0x160>)
      __HAL_UNLOCK(hi2c);
 8002768:	2200      	movs	r2, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800276a:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800276c:	2340      	movs	r3, #64	; 0x40
 800276e:	54e2      	strb	r2, [r4, r3]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002770:	f7fe fee2 	bl	8001538 <HAL_DMA_Abort_IT>
 8002774:	2800      	cmp	r0, #0
 8002776:	d0ab      	beq.n	80026d0 <I2C_ITError+0x88>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002778:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800277a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800277c:	4798      	blx	r3
 800277e:	e7a7      	b.n	80026d0 <I2C_ITError+0x88>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	490b      	ldr	r1, [pc, #44]	; (80027b0 <I2C_ITError+0x168>)
 8002784:	400a      	ands	r2, r1
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	e7cf      	b.n	800272a <I2C_ITError+0xe2>
    hi2c->State = HAL_I2C_STATE_READY;
 800278a:	3a40      	subs	r2, #64	; 0x40
 800278c:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 800278e:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 8002790:	3220      	adds	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8002792:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 8002794:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8002796:	54a3      	strb	r3, [r4, r2]
    HAL_I2C_AbortCpltCallback(hi2c);
 8002798:	f7ff ff34 	bl	8002604 <HAL_I2C_AbortCpltCallback>
}
 800279c:	e798      	b.n	80026d0 <I2C_ITError+0x88>
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	ffff0000 	.word	0xffff0000
 80027a4:	08002975 	.word	0x08002975
 80027a8:	08002609 	.word	0x08002609
 80027ac:	ffff7fff 	.word	0xffff7fff
 80027b0:	ffffbfff 	.word	0xffffbfff

080027b4 <I2C_ITSlaveCplt>:
{
 80027b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80027b6:	6803      	ldr	r3, [r0, #0]
{
 80027b8:	0004      	movs	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80027ba:	2041      	movs	r0, #65	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027bc:	2620      	movs	r6, #32
{
 80027be:	46c6      	mov	lr, r8
 80027c0:	000d      	movs	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80027c2:	6819      	ldr	r1, [r3, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80027c4:	5c22      	ldrb	r2, [r4, r0]
{
 80027c6:	b500      	push	{lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027c8:	61de      	str	r6, [r3, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80027ca:	3e18      	subs	r6, #24
 80027cc:	43b2      	bics	r2, r6
 80027ce:	2a21      	cmp	r2, #33	; 0x21
 80027d0:	d057      	beq.n	8002882 <I2C_ITSlaveCplt+0xce>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80027d2:	2a22      	cmp	r2, #34	; 0x22
 80027d4:	d100      	bne.n	80027d8 <I2C_ITSlaveCplt+0x24>
 80027d6:	e07d      	b.n	80028d4 <I2C_ITSlaveCplt+0x120>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80027d8:	2280      	movs	r2, #128	; 0x80
 80027da:	6858      	ldr	r0, [r3, #4]
 80027dc:	0212      	lsls	r2, r2, #8
 80027de:	4302      	orrs	r2, r0
 80027e0:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 80027e2:	685a      	ldr	r2, [r3, #4]
 80027e4:	485f      	ldr	r0, [pc, #380]	; (8002964 <I2C_ITSlaveCplt+0x1b0>)
 80027e6:	4002      	ands	r2, r0
 80027e8:	605a      	str	r2, [r3, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80027ea:	699a      	ldr	r2, [r3, #24]
 80027ec:	0792      	lsls	r2, r2, #30
 80027ee:	d501      	bpl.n	80027f4 <I2C_ITSlaveCplt+0x40>
    hi2c->Instance->TXDR = 0x00U;
 80027f0:	2200      	movs	r2, #0
 80027f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027f4:	2201      	movs	r2, #1
 80027f6:	6998      	ldr	r0, [r3, #24]
 80027f8:	4202      	tst	r2, r0
 80027fa:	d102      	bne.n	8002802 <I2C_ITSlaveCplt+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80027fc:	6998      	ldr	r0, [r3, #24]
 80027fe:	4302      	orrs	r2, r0
 8002800:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002802:	2201      	movs	r2, #1
 8002804:	0448      	lsls	r0, r1, #17
 8002806:	d543      	bpl.n	8002890 <I2C_ITSlaveCplt+0xdc>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	4957      	ldr	r1, [pc, #348]	; (8002968 <I2C_ITSlaveCplt+0x1b4>)
 800280c:	400a      	ands	r2, r1
 800280e:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8002810:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002812:	2a00      	cmp	r2, #0
 8002814:	d003      	beq.n	800281e <I2C_ITSlaveCplt+0x6a>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	6852      	ldr	r2, [r2, #4]
 800281a:	b292      	uxth	r2, r2
 800281c:	8562      	strh	r2, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800281e:	076a      	lsls	r2, r5, #29
 8002820:	d50a      	bpl.n	8002838 <I2C_ITSlaveCplt+0x84>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002822:	2204      	movs	r2, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002826:	4395      	bics	r5, r2
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002828:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800282a:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 800282c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800282e:	3301      	adds	r3, #1
 8002830:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8002832:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002834:	2b00      	cmp	r3, #0
 8002836:	d146      	bne.n	80028c6 <I2C_ITSlaveCplt+0x112>
  if (hi2c->XferCount != 0U)
 8002838:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <I2C_ITSlaveCplt+0x92>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800283e:	2204      	movs	r2, #4
 8002840:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002842:	4313      	orrs	r3, r2
 8002844:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002846:	2600      	movs	r6, #0
 8002848:	2742      	movs	r7, #66	; 0x42
 800284a:	55e6      	strb	r6, [r4, r7]
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800284c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 800284e:	6366      	str	r6, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002850:	4698      	mov	r8, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d145      	bne.n	80028e2 <I2C_ITSlaveCplt+0x12e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002856:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002858:	4d44      	ldr	r5, [pc, #272]	; (800296c <I2C_ITSlaveCplt+0x1b8>)
 800285a:	42ab      	cmp	r3, r5
 800285c:	d123      	bne.n	80028a6 <I2C_ITSlaveCplt+0xf2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800285e:	2341      	movs	r3, #65	; 0x41
 8002860:	5ce2      	ldrb	r2, [r4, r3]
 8002862:	2a22      	cmp	r2, #34	; 0x22
 8002864:	d100      	bne.n	8002868 <I2C_ITSlaveCplt+0xb4>
 8002866:	e072      	b.n	800294e <I2C_ITSlaveCplt+0x19a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002868:	2220      	movs	r2, #32
 800286a:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 800286c:	4643      	mov	r3, r8
    __HAL_UNLOCK(hi2c);
 800286e:	4642      	mov	r2, r8
    hi2c->PreviousState = I2C_STATE_NONE;
 8002870:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002872:	2340      	movs	r3, #64	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002874:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8002876:	54e2      	strb	r2, [r4, r3]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002878:	f7ff fe24 	bl	80024c4 <HAL_I2C_SlaveTxCpltCallback>
}
 800287c:	bc80      	pop	{r7}
 800287e:	46b8      	mov	r8, r7
 8002880:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002882:	5c20      	ldrb	r0, [r4, r0]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	36f2      	adds	r6, #242	; 0xf2
 8002888:	43b0      	bics	r0, r6
 800288a:	6018      	str	r0, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800288c:	6322      	str	r2, [r4, #48]	; 0x30
 800288e:	e7a3      	b.n	80027d8 <I2C_ITSlaveCplt+0x24>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002890:	0bc9      	lsrs	r1, r1, #15
 8002892:	420a      	tst	r2, r1
 8002894:	d0c3      	beq.n	800281e <I2C_ITSlaveCplt+0x6a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4935      	ldr	r1, [pc, #212]	; (8002970 <I2C_ITSlaveCplt+0x1bc>)
 800289a:	400a      	ands	r2, r1
 800289c:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800289e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80028a0:	2a00      	cmp	r2, #0
 80028a2:	d1b8      	bne.n	8002816 <I2C_ITSlaveCplt+0x62>
 80028a4:	e7bb      	b.n	800281e <I2C_ITSlaveCplt+0x6a>
    I2C_ITSlaveSeqCplt(hi2c);
 80028a6:	0020      	movs	r0, r4
 80028a8:	f7ff fe10 	bl	80024cc <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 80028ac:	2341      	movs	r3, #65	; 0x41
 80028ae:	2220      	movs	r2, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028b0:	62e5      	str	r5, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80028b2:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 80028b4:	4643      	mov	r3, r8
    __HAL_UNLOCK(hi2c);
 80028b6:	4642      	mov	r2, r8
    hi2c->PreviousState = I2C_STATE_NONE;
 80028b8:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80028ba:	2340      	movs	r3, #64	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80028bc:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 80028be:	54e2      	strb	r2, [r4, r3]
    HAL_I2C_ListenCpltCallback(hi2c);
 80028c0:	f7ff fe9c 	bl	80025fc <HAL_I2C_ListenCpltCallback>
 80028c4:	e7da      	b.n	800287c <I2C_ITSlaveCplt+0xc8>
      hi2c->XferSize--;
 80028c6:	3b01      	subs	r3, #1
 80028c8:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80028ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	8563      	strh	r3, [r4, #42]	; 0x2a
 80028d2:	e7b1      	b.n	8002838 <I2C_ITSlaveCplt+0x84>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80028d4:	26fc      	movs	r6, #252	; 0xfc
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80028d6:	5c20      	ldrb	r0, [r4, r0]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80028d8:	6818      	ldr	r0, [r3, #0]
 80028da:	43b0      	bics	r0, r6
 80028dc:	6018      	str	r0, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80028de:	6322      	str	r2, [r4, #48]	; 0x30
 80028e0:	e77a      	b.n	80027d8 <I2C_ITSlaveCplt+0x24>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80028e2:	0020      	movs	r0, r4
 80028e4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80028e6:	f7ff feaf 	bl	8002648 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80028ea:	2341      	movs	r3, #65	; 0x41
 80028ec:	5ce2      	ldrb	r2, [r4, r3]
 80028ee:	2a28      	cmp	r2, #40	; 0x28
 80028f0:	d1c4      	bne.n	800287c <I2C_ITSlaveCplt+0xc8>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028f2:	4a1e      	ldr	r2, [pc, #120]	; (800296c <I2C_ITSlaveCplt+0x1b8>)
 80028f4:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 80028f6:	2220      	movs	r2, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 80028f8:	6326      	str	r6, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80028fa:	54e2      	strb	r2, [r4, r3]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028fc:	55e6      	strb	r6, [r4, r7]
  hi2c->XferISR = NULL;
 80028fe:	6366      	str	r6, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002900:	076b      	lsls	r3, r5, #29
 8002902:	d513      	bpl.n	800292c <I2C_ITSlaveCplt+0x178>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002904:	6823      	ldr	r3, [r4, #0]
 8002906:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 800290c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800290e:	3301      	adds	r3, #1
 8002910:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8002912:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002914:	2b00      	cmp	r3, #0
 8002916:	d009      	beq.n	800292c <I2C_ITSlaveCplt+0x178>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002918:	2204      	movs	r2, #4
      hi2c->XferSize--;
 800291a:	3b01      	subs	r3, #1
 800291c:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800291e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002920:	3b01      	subs	r3, #1
 8002922:	b29b      	uxth	r3, r3
 8002924:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002926:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002928:	4313      	orrs	r3, r2
 800292a:	6463      	str	r3, [r4, #68]	; 0x44
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800292c:	2341      	movs	r3, #65	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800292e:	21fe      	movs	r1, #254	; 0xfe
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002930:	5ce2      	ldrb	r2, [r4, r3]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002932:	5ce3      	ldrb	r3, [r4, r3]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002934:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 8002936:	0020      	movs	r0, r4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	438a      	bics	r2, r1
 800293c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800293e:	2210      	movs	r2, #16
 8002940:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8002942:	2340      	movs	r3, #64	; 0x40
 8002944:	2200      	movs	r2, #0
 8002946:	54e2      	strb	r2, [r4, r3]
  HAL_I2C_ListenCpltCallback(hi2c);
 8002948:	f7ff fe58 	bl	80025fc <HAL_I2C_ListenCpltCallback>
}
 800294c:	e796      	b.n	800287c <I2C_ITSlaveCplt+0xc8>
    hi2c->State = HAL_I2C_STATE_READY;
 800294e:	3a02      	subs	r2, #2
 8002950:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002952:	4643      	mov	r3, r8
    __HAL_UNLOCK(hi2c);
 8002954:	4642      	mov	r2, r8
    hi2c->PreviousState = I2C_STATE_NONE;
 8002956:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002958:	2340      	movs	r3, #64	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800295a:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 800295c:	54e2      	strb	r2, [r4, r3]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800295e:	f7ff fdb3 	bl	80024c8 <HAL_I2C_SlaveRxCpltCallback>
 8002962:	e78b      	b.n	800287c <I2C_ITSlaveCplt+0xc8>
 8002964:	fe00e800 	.word	0xfe00e800
 8002968:	ffffbfff 	.word	0xffffbfff
 800296c:	ffff0000 	.word	0xffff0000
 8002970:	ffff7fff 	.word	0xffff7fff

08002974 <I2C_Slave_ISR_IT>:
{
 8002974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002976:	0016      	movs	r6, r2
  __HAL_LOCK(hi2c);
 8002978:	2240      	movs	r2, #64	; 0x40
 800297a:	5c83      	ldrb	r3, [r0, r2]
{
 800297c:	0004      	movs	r4, r0
 800297e:	000d      	movs	r5, r1
  uint32_t tmpoptions = hi2c->XferOptions;
 8002980:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8002982:	2b01      	cmp	r3, #1
 8002984:	d100      	bne.n	8002988 <I2C_Slave_ISR_IT+0x14>
 8002986:	e081      	b.n	8002a8c <I2C_Slave_ISR_IT+0x118>
 8002988:	2301      	movs	r3, #1
 800298a:	5483      	strb	r3, [r0, r2]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800298c:	094a      	lsrs	r2, r1, #5
 800298e:	4213      	tst	r3, r2
 8002990:	d003      	beq.n	800299a <I2C_Slave_ISR_IT+0x26>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002992:	0972      	lsrs	r2, r6, #5
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002994:	4213      	tst	r3, r2
 8002996:	d000      	beq.n	800299a <I2C_Slave_ISR_IT+0x26>
 8002998:	e063      	b.n	8002a62 <I2C_Slave_ISR_IT+0xee>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800299a:	2301      	movs	r3, #1
 800299c:	06ea      	lsls	r2, r5, #27
 800299e:	d518      	bpl.n	80029d2 <I2C_Slave_ISR_IT+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80029a0:	0932      	lsrs	r2, r6, #4
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80029a2:	4213      	tst	r3, r2
 80029a4:	d015      	beq.n	80029d2 <I2C_Slave_ISR_IT+0x5e>
    if (hi2c->XferCount == 0U)
 80029a6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80029a8:	b291      	uxth	r1, r2
 80029aa:	2a00      	cmp	r2, #0
 80029ac:	d15f      	bne.n	8002a6e <I2C_Slave_ISR_IT+0xfa>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80029ae:	3241      	adds	r2, #65	; 0x41
 80029b0:	5ca0      	ldrb	r0, [r4, r2]
 80029b2:	2828      	cmp	r0, #40	; 0x28
 80029b4:	d100      	bne.n	80029b8 <I2C_Slave_ISR_IT+0x44>
 80029b6:	e073      	b.n	8002aa0 <I2C_Slave_ISR_IT+0x12c>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80029b8:	2341      	movs	r3, #65	; 0x41
 80029ba:	5ce3      	ldrb	r3, [r4, r3]
 80029bc:	2b29      	cmp	r3, #41	; 0x29
 80029be:	d100      	bne.n	80029c2 <I2C_Slave_ISR_IT+0x4e>
 80029c0:	e0a3      	b.n	8002b0a <I2C_Slave_ISR_IT+0x196>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029c2:	2210      	movs	r2, #16
 80029c4:	6823      	ldr	r3, [r4, #0]
 80029c6:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80029c8:	2340      	movs	r3, #64	; 0x40
 80029ca:	2200      	movs	r2, #0
  return HAL_OK;
 80029cc:	2000      	movs	r0, #0
  __HAL_UNLOCK(hi2c);
 80029ce:	54e2      	strb	r2, [r4, r3]
}
 80029d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80029d2:	2301      	movs	r3, #1
 80029d4:	076a      	lsls	r2, r5, #29
 80029d6:	d40f      	bmi.n	80029f8 <I2C_Slave_ISR_IT+0x84>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80029d8:	2301      	movs	r3, #1
 80029da:	072a      	lsls	r2, r5, #28
 80029dc:	d52a      	bpl.n	8002a34 <I2C_Slave_ISR_IT+0xc0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80029de:	08f2      	lsrs	r2, r6, #3
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80029e0:	4213      	tst	r3, r2
 80029e2:	d027      	beq.n	8002a34 <I2C_Slave_ISR_IT+0xc0>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80029e4:	3340      	adds	r3, #64	; 0x40
 80029e6:	5ce2      	ldrb	r2, [r4, r3]
 80029e8:	3b19      	subs	r3, #25
 80029ea:	4013      	ands	r3, r2
 80029ec:	2b28      	cmp	r3, #40	; 0x28
 80029ee:	d053      	beq.n	8002a98 <I2C_Slave_ISR_IT+0x124>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80029f0:	2208      	movs	r2, #8
 80029f2:	6823      	ldr	r3, [r4, #0]
 80029f4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80029f6:	e7e7      	b.n	80029c8 <I2C_Slave_ISR_IT+0x54>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80029f8:	08b2      	lsrs	r2, r6, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80029fa:	4213      	tst	r3, r2
 80029fc:	d0ec      	beq.n	80029d8 <I2C_Slave_ISR_IT+0x64>
    if (hi2c->XferCount > 0U)
 80029fe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00d      	beq.n	8002a20 <I2C_Slave_ISR_IT+0xac>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a04:	6823      	ldr	r3, [r4, #0]
 8002a06:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002a0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a0e:	3301      	adds	r3, #1
 8002a10:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002a12:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002a14:	3b01      	subs	r3, #1
 8002a16:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002a18:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8002a20:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1d0      	bne.n	80029c8 <I2C_Slave_ISR_IT+0x54>
 8002a26:	4b43      	ldr	r3, [pc, #268]	; (8002b34 <I2C_Slave_ISR_IT+0x1c0>)
 8002a28:	429f      	cmp	r7, r3
 8002a2a:	d0cd      	beq.n	80029c8 <I2C_Slave_ISR_IT+0x54>
        I2C_ITSlaveSeqCplt(hi2c);
 8002a2c:	0020      	movs	r0, r4
 8002a2e:	f7ff fd4d 	bl	80024cc <I2C_ITSlaveSeqCplt>
 8002a32:	e7c9      	b.n	80029c8 <I2C_Slave_ISR_IT+0x54>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002a34:	2301      	movs	r3, #1
 8002a36:	07aa      	lsls	r2, r5, #30
 8002a38:	d5c6      	bpl.n	80029c8 <I2C_Slave_ISR_IT+0x54>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002a3a:	0876      	lsrs	r6, r6, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002a3c:	4233      	tst	r3, r6
 8002a3e:	d0c3      	beq.n	80029c8 <I2C_Slave_ISR_IT+0x54>
    if (hi2c->XferCount > 0U)
 8002a40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d024      	beq.n	8002a90 <I2C_Slave_ISR_IT+0x11c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a48:	6822      	ldr	r2, [r4, #0]
 8002a4a:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8002a4c:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a4e:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002a50:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002a52:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002a5a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	8523      	strh	r3, [r4, #40]	; 0x28
 8002a60:	e7b2      	b.n	80029c8 <I2C_Slave_ISR_IT+0x54>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002a62:	f7ff fea7 	bl	80027b4 <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002a66:	2301      	movs	r3, #1
 8002a68:	06ea      	lsls	r2, r5, #27
 8002a6a:	d5b2      	bpl.n	80029d2 <I2C_Slave_ISR_IT+0x5e>
 8002a6c:	e798      	b.n	80029a0 <I2C_Slave_ISR_IT+0x2c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a6e:	2210      	movs	r2, #16
 8002a70:	6823      	ldr	r3, [r4, #0]
 8002a72:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a74:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002a76:	3a0c      	subs	r2, #12
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002a7c:	4b2e      	ldr	r3, [pc, #184]	; (8002b38 <I2C_Slave_ISR_IT+0x1c4>)
 8002a7e:	421f      	tst	r7, r3
 8002a80:	d1a2      	bne.n	80029c8 <I2C_Slave_ISR_IT+0x54>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002a82:	0020      	movs	r0, r4
 8002a84:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002a86:	f7ff fddf 	bl	8002648 <I2C_ITError>
 8002a8a:	e79d      	b.n	80029c8 <I2C_Slave_ISR_IT+0x54>
  __HAL_LOCK(hi2c);
 8002a8c:	2002      	movs	r0, #2
 8002a8e:	e79f      	b.n	80029d0 <I2C_Slave_ISR_IT+0x5c>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002a90:	4b29      	ldr	r3, [pc, #164]	; (8002b38 <I2C_Slave_ISR_IT+0x1c4>)
 8002a92:	421f      	tst	r7, r3
 8002a94:	d0ca      	beq.n	8002a2c <I2C_Slave_ISR_IT+0xb8>
 8002a96:	e797      	b.n	80029c8 <I2C_Slave_ISR_IT+0x54>
 8002a98:	0020      	movs	r0, r4
 8002a9a:	f7ff fd69 	bl	8002570 <I2C_ITAddrCplt.part.0>
 8002a9e:	e793      	b.n	80029c8 <I2C_Slave_ISR_IT+0x54>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002aa0:	2080      	movs	r0, #128	; 0x80
 8002aa2:	0480      	lsls	r0, r0, #18
 8002aa4:	4287      	cmp	r7, r0
 8002aa6:	d000      	beq.n	8002aaa <I2C_Slave_ISR_IT+0x136>
 8002aa8:	e786      	b.n	80029b8 <I2C_Slave_ISR_IT+0x44>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002aaa:	4822      	ldr	r0, [pc, #136]	; (8002b34 <I2C_Slave_ISR_IT+0x1c0>)
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002aac:	08ad      	lsrs	r5, r5, #2
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002aae:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 8002ab0:	2020      	movs	r0, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ab2:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002ab4:	54a0      	strb	r0, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab6:	3201      	adds	r2, #1
 8002ab8:	54a1      	strb	r1, [r4, r2]
  hi2c->XferISR = NULL;
 8002aba:	6361      	str	r1, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002abc:	422b      	tst	r3, r5
 8002abe:	d013      	beq.n	8002ae8 <I2C_Slave_ISR_IT+0x174>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ac0:	6823      	ldr	r3, [r4, #0]
 8002ac2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 8002ac8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002aca:	3301      	adds	r3, #1
 8002acc:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8002ace:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d009      	beq.n	8002ae8 <I2C_Slave_ISR_IT+0x174>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ad4:	2204      	movs	r2, #4
      hi2c->XferSize--;
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002ada:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002adc:	3b01      	subs	r3, #1
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ae2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	6463      	str	r3, [r4, #68]	; 0x44
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ae8:	2341      	movs	r3, #65	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002aea:	21fe      	movs	r1, #254	; 0xfe
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002aec:	5ce2      	ldrb	r2, [r4, r3]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002aee:	5ce3      	ldrb	r3, [r4, r3]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002af0:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 8002af2:	0020      	movs	r0, r4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	438a      	bics	r2, r1
 8002af8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002afa:	2210      	movs	r2, #16
 8002afc:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8002afe:	2340      	movs	r3, #64	; 0x40
 8002b00:	2200      	movs	r2, #0
 8002b02:	54e2      	strb	r2, [r4, r3]
  HAL_I2C_ListenCpltCallback(hi2c);
 8002b04:	f7ff fd7a 	bl	80025fc <HAL_I2C_ListenCpltCallback>
}
 8002b08:	e75e      	b.n	80029c8 <I2C_Slave_ISR_IT+0x54>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002b0a:	4b0a      	ldr	r3, [pc, #40]	; (8002b34 <I2C_Slave_ISR_IT+0x1c0>)
 8002b0c:	429f      	cmp	r7, r3
 8002b0e:	d100      	bne.n	8002b12 <I2C_Slave_ISR_IT+0x19e>
 8002b10:	e757      	b.n	80029c2 <I2C_Slave_ISR_IT+0x4e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b12:	2210      	movs	r2, #16
 8002b14:	6823      	ldr	r3, [r4, #0]
 8002b16:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b18:	699a      	ldr	r2, [r3, #24]
 8002b1a:	0792      	lsls	r2, r2, #30
 8002b1c:	d501      	bpl.n	8002b22 <I2C_Slave_ISR_IT+0x1ae>
    hi2c->Instance->TXDR = 0x00U;
 8002b1e:	2200      	movs	r2, #0
 8002b20:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b22:	2201      	movs	r2, #1
 8002b24:	6999      	ldr	r1, [r3, #24]
 8002b26:	420a      	tst	r2, r1
 8002b28:	d000      	beq.n	8002b2c <I2C_Slave_ISR_IT+0x1b8>
 8002b2a:	e77f      	b.n	8002a2c <I2C_Slave_ISR_IT+0xb8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b2c:	6999      	ldr	r1, [r3, #24]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	619a      	str	r2, [r3, #24]
 8002b32:	e77b      	b.n	8002a2c <I2C_Slave_ISR_IT+0xb8>
 8002b34:	ffff0000 	.word	0xffff0000
 8002b38:	feffffff 	.word	0xfeffffff

08002b3c <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002b3c:	6802      	ldr	r2, [r0, #0]
{
 8002b3e:	b570      	push	{r4, r5, r6, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002b40:	6993      	ldr	r3, [r2, #24]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002b42:	2101      	movs	r1, #1
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002b44:	6814      	ldr	r4, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002b46:	05dd      	lsls	r5, r3, #23
 8002b48:	d530      	bpl.n	8002bac <HAL_I2C_ER_IRQHandler+0x70>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002b4a:	09e5      	lsrs	r5, r4, #7
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002b4c:	4229      	tst	r1, r5
 8002b4e:	d01d      	beq.n	8002b8c <HAL_I2C_ER_IRQHandler+0x50>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002b50:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002b52:	430c      	orrs	r4, r1
 8002b54:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b56:	2480      	movs	r4, #128	; 0x80
 8002b58:	0064      	lsls	r4, r4, #1
 8002b5a:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002b5c:	0a9c      	lsrs	r4, r3, #10
 8002b5e:	4221      	tst	r1, r4
 8002b60:	d02b      	beq.n	8002bba <HAL_I2C_ER_IRQHandler+0x7e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002b62:	2408      	movs	r4, #8
 8002b64:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002b66:	4321      	orrs	r1, r4
 8002b68:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b6a:	2180      	movs	r1, #128	; 0x80
 8002b6c:	00c9      	lsls	r1, r1, #3
 8002b6e:	61d1      	str	r1, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002b70:	059b      	lsls	r3, r3, #22
 8002b72:	d506      	bpl.n	8002b82 <HAL_I2C_ER_IRQHandler+0x46>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002b74:	2102      	movs	r1, #2
 8002b76:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002b78:	430b      	orrs	r3, r1
 8002b7a:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b7c:	2380      	movs	r3, #128	; 0x80
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	61d3      	str	r3, [r2, #28]
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002b82:	230b      	movs	r3, #11
  tmperror = hi2c->ErrorCode;
 8002b84:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002b86:	420b      	tst	r3, r1
 8002b88:	d10d      	bne.n	8002ba6 <HAL_I2C_ER_IRQHandler+0x6a>
}
 8002b8a:	bd70      	pop	{r4, r5, r6, pc}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002b8c:	0a9d      	lsrs	r5, r3, #10
 8002b8e:	4229      	tst	r1, r5
 8002b90:	d1f7      	bne.n	8002b82 <HAL_I2C_ER_IRQHandler+0x46>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002b92:	2101      	movs	r1, #1
 8002b94:	059b      	lsls	r3, r3, #22
 8002b96:	d5f4      	bpl.n	8002b82 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002b98:	09e4      	lsrs	r4, r4, #7
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002b9a:	4221      	tst	r1, r4
 8002b9c:	d1ea      	bne.n	8002b74 <HAL_I2C_ER_IRQHandler+0x38>
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002b9e:	230b      	movs	r3, #11
  tmperror = hi2c->ErrorCode;
 8002ba0:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002ba2:	420b      	tst	r3, r1
 8002ba4:	d0f1      	beq.n	8002b8a <HAL_I2C_ER_IRQHandler+0x4e>
    I2C_ITError(hi2c, tmperror);
 8002ba6:	f7ff fd4f 	bl	8002648 <I2C_ITError>
}
 8002baa:	e7ee      	b.n	8002b8a <HAL_I2C_ER_IRQHandler+0x4e>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002bac:	0a9d      	lsrs	r5, r3, #10
 8002bae:	4229      	tst	r1, r5
 8002bb0:	d0ef      	beq.n	8002b92 <HAL_I2C_ER_IRQHandler+0x56>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002bb2:	09e4      	lsrs	r4, r4, #7
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002bb4:	4221      	tst	r1, r4
 8002bb6:	d1d4      	bne.n	8002b62 <HAL_I2C_ER_IRQHandler+0x26>
 8002bb8:	e7e3      	b.n	8002b82 <HAL_I2C_ER_IRQHandler+0x46>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002bba:	0a5b      	lsrs	r3, r3, #9
 8002bbc:	4219      	tst	r1, r3
 8002bbe:	d1d9      	bne.n	8002b74 <HAL_I2C_ER_IRQHandler+0x38>
 8002bc0:	e7df      	b.n	8002b82 <HAL_I2C_ER_IRQHandler+0x46>
 8002bc2:	46c0      	nop			; (mov r8, r8)

08002bc4 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8002bc4:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bca:	2541      	movs	r5, #65	; 0x41
 8002bcc:	5d43      	ldrb	r3, [r0, r5]
{
 8002bce:	000a      	movs	r2, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bd0:	b2de      	uxtb	r6, r3
 8002bd2:	2b20      	cmp	r3, #32
 8002bd4:	d11b      	bne.n	8002c0e <HAL_I2CEx_ConfigAnalogFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bd6:	2740      	movs	r7, #64	; 0x40
 8002bd8:	5dc3      	ldrb	r3, [r0, r7]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d017      	beq.n	8002c0e <HAL_I2CEx_ConfigAnalogFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bde:	2101      	movs	r1, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002be0:	2324      	movs	r3, #36	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8002be2:	468c      	mov	ip, r1
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002be4:	5543      	strb	r3, [r0, r5]
    __HAL_I2C_DISABLE(hi2c);
 8002be6:	6803      	ldr	r3, [r0, #0]
 8002be8:	681c      	ldr	r4, [r3, #0]
 8002bea:	438c      	bics	r4, r1
 8002bec:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002bee:	681c      	ldr	r4, [r3, #0]
 8002bf0:	4908      	ldr	r1, [pc, #32]	; (8002c14 <HAL_I2CEx_ConfigAnalogFilter+0x4c>)
 8002bf2:	400c      	ands	r4, r1
 8002bf4:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002bf6:	6819      	ldr	r1, [r3, #0]
 8002bf8:	4311      	orrs	r1, r2
 8002bfa:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bfc:	4661      	mov	r1, ip
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c04:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002c06:	5546      	strb	r6, [r0, r5]
    __HAL_UNLOCK(hi2c);
 8002c08:	55c3      	strb	r3, [r0, r7]

    return HAL_OK;
 8002c0a:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8002c0e:	2002      	movs	r0, #2
 8002c10:	e7fc      	b.n	8002c0c <HAL_I2CEx_ConfigAnalogFilter+0x44>
 8002c12:	46c0      	nop			; (mov r8, r8)
 8002c14:	ffffefff 	.word	0xffffefff

08002c18 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c18:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c1a:	2541      	movs	r5, #65	; 0x41
 8002c1c:	5d43      	ldrb	r3, [r0, r5]
 8002c1e:	b2de      	uxtb	r6, r3
 8002c20:	2b20      	cmp	r3, #32
 8002c22:	d11a      	bne.n	8002c5a <HAL_I2CEx_ConfigDigitalFilter+0x42>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c24:	2740      	movs	r7, #64	; 0x40
 8002c26:	5dc3      	ldrb	r3, [r0, r7]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d016      	beq.n	8002c5a <HAL_I2CEx_ConfigDigitalFilter+0x42>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c2c:	2324      	movs	r3, #36	; 0x24
 8002c2e:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c30:	3b23      	subs	r3, #35	; 0x23
 8002c32:	469c      	mov	ip, r3
 8002c34:	6804      	ldr	r4, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c36:	0209      	lsls	r1, r1, #8
    __HAL_I2C_DISABLE(hi2c);
 8002c38:	6822      	ldr	r2, [r4, #0]
 8002c3a:	439a      	bics	r2, r3
 8002c3c:	6022      	str	r2, [r4, #0]
    tmpreg = hi2c->Instance->CR1;
 8002c3e:	6822      	ldr	r2, [r4, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8002c40:	4b07      	ldr	r3, [pc, #28]	; (8002c60 <HAL_I2CEx_ConfigDigitalFilter+0x48>)
 8002c42:	401a      	ands	r2, r3
    tmpreg |= DigitalFilter << 8U;
 8002c44:	4311      	orrs	r1, r2

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;

    __HAL_I2C_ENABLE(hi2c);
 8002c46:	4662      	mov	r2, ip
    hi2c->Instance->CR1 = tmpreg;
 8002c48:	6021      	str	r1, [r4, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002c4a:	6823      	ldr	r3, [r4, #0]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	6023      	str	r3, [r4, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c50:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002c52:	5546      	strb	r6, [r0, r5]
    __HAL_UNLOCK(hi2c);
 8002c54:	55c3      	strb	r3, [r0, r7]

    return HAL_OK;
 8002c56:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8002c5a:	2002      	movs	r0, #2
 8002c5c:	e7fc      	b.n	8002c58 <HAL_I2CEx_ConfigDigitalFilter+0x40>
 8002c5e:	46c0      	nop			; (mov r8, r8)
 8002c60:	fffff0ff 	.word	0xfffff0ff

08002c64 <HAL_PWR_EnableWakeUpPin>:
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
  /* Enable the EWUPx pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8002c64:	4a02      	ldr	r2, [pc, #8]	; (8002c70 <HAL_PWR_EnableWakeUpPin+0xc>)
 8002c66:	6853      	ldr	r3, [r2, #4]
 8002c68:	4303      	orrs	r3, r0
 8002c6a:	6053      	str	r3, [r2, #4]
}
 8002c6c:	4770      	bx	lr
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	40007000 	.word	0x40007000

08002c74 <HAL_PWR_EnterSTANDBYMode>:
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8002c74:	2102      	movs	r1, #2
 8002c76:	4a05      	ldr	r2, [pc, #20]	; (8002c8c <HAL_PWR_EnterSTANDBYMode+0x18>)
 8002c78:	6813      	ldr	r3, [r2, #0]
 8002c7a:	430b      	orrs	r3, r1
 8002c7c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8002c7e:	4a04      	ldr	r2, [pc, #16]	; (8002c90 <HAL_PWR_EnterSTANDBYMode+0x1c>)
 8002c80:	3102      	adds	r1, #2
 8002c82:	6913      	ldr	r3, [r2, #16]
 8002c84:	430b      	orrs	r3, r1
 8002c86:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8002c88:	bf30      	wfi
}
 8002c8a:	4770      	bx	lr
 8002c8c:	40007000 	.word	0x40007000
 8002c90:	e000ed00 	.word	0xe000ed00

08002c94 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c94:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8002c96:	491c      	ldr	r1, [pc, #112]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x74>)
{
 8002c98:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8002c9a:	68ca      	ldr	r2, [r1, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d00b      	beq.n	8002cba <HAL_RCC_GetSysClockFreq+0x26>
 8002ca2:	2b0c      	cmp	r3, #12
 8002ca4:	d014      	beq.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x3c>
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d009      	beq.n	8002cbe <HAL_RCC_GetSysClockFreq+0x2a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002caa:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002cac:	684b      	ldr	r3, [r1, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002cae:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002cb0:	041b      	lsls	r3, r3, #16
 8002cb2:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	4098      	lsls	r0, r3
      break;
    }
  }
  return sysclockfreq;
}
 8002cb8:	bd10      	pop	{r4, pc}
  switch (tmpreg & RCC_CFGR_SWS)
 8002cba:	4814      	ldr	r0, [pc, #80]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x78>)
 8002cbc:	e7fc      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x24>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002cbe:	6808      	ldr	r0, [r1, #0]
        sysclockfreq =  HSI_VALUE;
 8002cc0:	4b13      	ldr	r3, [pc, #76]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002cc2:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8002cc4:	17c0      	asrs	r0, r0, #31
 8002cc6:	4018      	ands	r0, r3
 8002cc8:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x80>)
 8002cca:	469c      	mov	ip, r3
 8002ccc:	4460      	add	r0, ip
 8002cce:	e7f3      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x24>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002cd0:	0293      	lsls	r3, r2, #10
 8002cd2:	4811      	ldr	r0, [pc, #68]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x84>)
 8002cd4:	0f1b      	lsrs	r3, r3, #28
 8002cd6:	5cc0      	ldrb	r0, [r0, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002cd8:	0212      	lsls	r2, r2, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cda:	68cb      	ldr	r3, [r1, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002cdc:	0f94      	lsrs	r4, r2, #30
 8002cde:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ce0:	03db      	lsls	r3, r3, #15
 8002ce2:	d40c      	bmi.n	8002cfe <HAL_RCC_GetSysClockFreq+0x6a>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002ce4:	680b      	ldr	r3, [r1, #0]
 8002ce6:	06db      	lsls	r3, r3, #27
 8002ce8:	d50b      	bpl.n	8002d02 <HAL_RCC_GetSysClockFreq+0x6e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002cea:	4a0c      	ldr	r2, [pc, #48]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x88>)
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002cec:	2300      	movs	r3, #0
 8002cee:	2100      	movs	r1, #0
 8002cf0:	f7fd fbb2 	bl	8000458 <__aeabi_lmul>
 8002cf4:	0022      	movs	r2, r4
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f7fd fb8e 	bl	8000418 <__aeabi_uldivmod>
 8002cfc:	e7dc      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x24>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002cfe:	4a03      	ldr	r2, [pc, #12]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x78>)
 8002d00:	e7f4      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x58>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002d02:	4a04      	ldr	r2, [pc, #16]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x80>)
 8002d04:	e7f2      	b.n	8002cec <HAL_RCC_GetSysClockFreq+0x58>
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	007a1200 	.word	0x007a1200
 8002d10:	ff48e500 	.word	0xff48e500
 8002d14:	00f42400 	.word	0x00f42400
 8002d18:	0800ade8 	.word	0x0800ade8
 8002d1c:	003d0900 	.word	0x003d0900

08002d20 <HAL_RCC_OscConfig>:
{
 8002d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d22:	46d6      	mov	lr, sl
 8002d24:	464f      	mov	r7, r9
 8002d26:	4646      	mov	r6, r8
 8002d28:	b5c0      	push	{r6, r7, lr}
 8002d2a:	0004      	movs	r4, r0
 8002d2c:	b082      	sub	sp, #8
  if(RCC_OscInitStruct == NULL)
 8002d2e:	2800      	cmp	r0, #0
 8002d30:	d100      	bne.n	8002d34 <HAL_RCC_OscConfig+0x14>
 8002d32:	e147      	b.n	8002fc4 <HAL_RCC_OscConfig+0x2a4>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d34:	4bc9      	ldr	r3, [pc, #804]	; (800305c <HAL_RCC_OscConfig+0x33c>)
 8002d36:	250c      	movs	r5, #12
 8002d38:	68da      	ldr	r2, [r3, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d3a:	68de      	ldr	r6, [r3, #12]
 8002d3c:	2380      	movs	r3, #128	; 0x80
 8002d3e:	025b      	lsls	r3, r3, #9
 8002d40:	401e      	ands	r6, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d42:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d44:	4015      	ands	r5, r2
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d46:	07da      	lsls	r2, r3, #31
 8002d48:	d533      	bpl.n	8002db2 <HAL_RCC_OscConfig+0x92>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d4a:	2d08      	cmp	r5, #8
 8002d4c:	d100      	bne.n	8002d50 <HAL_RCC_OscConfig+0x30>
 8002d4e:	e130      	b.n	8002fb2 <HAL_RCC_OscConfig+0x292>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d50:	2d0c      	cmp	r5, #12
 8002d52:	d100      	bne.n	8002d56 <HAL_RCC_OscConfig+0x36>
 8002d54:	e12a      	b.n	8002fac <HAL_RCC_OscConfig+0x28c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d56:	2280      	movs	r2, #128	; 0x80
 8002d58:	6863      	ldr	r3, [r4, #4]
 8002d5a:	0252      	lsls	r2, r2, #9
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d100      	bne.n	8002d62 <HAL_RCC_OscConfig+0x42>
 8002d60:	e162      	b.n	8003028 <HAL_RCC_OscConfig+0x308>
 8002d62:	21a0      	movs	r1, #160	; 0xa0
 8002d64:	02c9      	lsls	r1, r1, #11
 8002d66:	428b      	cmp	r3, r1
 8002d68:	d100      	bne.n	8002d6c <HAL_RCC_OscConfig+0x4c>
 8002d6a:	e247      	b.n	80031fc <HAL_RCC_OscConfig+0x4dc>
 8002d6c:	4fbb      	ldr	r7, [pc, #748]	; (800305c <HAL_RCC_OscConfig+0x33c>)
 8002d6e:	48bc      	ldr	r0, [pc, #752]	; (8003060 <HAL_RCC_OscConfig+0x340>)
 8002d70:	6839      	ldr	r1, [r7, #0]
 8002d72:	4001      	ands	r1, r0
 8002d74:	6039      	str	r1, [r7, #0]
 8002d76:	6839      	ldr	r1, [r7, #0]
 8002d78:	400a      	ands	r2, r1
 8002d7a:	9201      	str	r2, [sp, #4]
 8002d7c:	9a01      	ldr	r2, [sp, #4]
 8002d7e:	49b9      	ldr	r1, [pc, #740]	; (8003064 <HAL_RCC_OscConfig+0x344>)
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	400a      	ands	r2, r1
 8002d84:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d000      	beq.n	8002d8c <HAL_RCC_OscConfig+0x6c>
 8002d8a:	e151      	b.n	8003030 <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 8002d8c:	f7fe fb54 	bl	8001438 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	029b      	lsls	r3, r3, #10
        tickstart = HAL_GetTick();
 8002d94:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d96:	4699      	mov	r9, r3
 8002d98:	e006      	b.n	8002da8 <HAL_RCC_OscConfig+0x88>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d9a:	f7fe fb4d 	bl	8001438 <HAL_GetTick>
 8002d9e:	4643      	mov	r3, r8
 8002da0:	1ac0      	subs	r0, r0, r3
 8002da2:	2864      	cmp	r0, #100	; 0x64
 8002da4:	d900      	bls.n	8002da8 <HAL_RCC_OscConfig+0x88>
 8002da6:	e1ce      	b.n	8003146 <HAL_RCC_OscConfig+0x426>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002da8:	464a      	mov	r2, r9
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	4213      	tst	r3, r2
 8002dae:	d1f4      	bne.n	8002d9a <HAL_RCC_OscConfig+0x7a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db0:	6823      	ldr	r3, [r4, #0]
 8002db2:	079a      	lsls	r2, r3, #30
 8002db4:	d527      	bpl.n	8002e06 <HAL_RCC_OscConfig+0xe6>
    hsi_state = RCC_OscInitStruct->HSIState;
 8002db6:	68e3      	ldr	r3, [r4, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002db8:	2d04      	cmp	r5, #4
 8002dba:	d100      	bne.n	8002dbe <HAL_RCC_OscConfig+0x9e>
 8002dbc:	e16d      	b.n	800309a <HAL_RCC_OscConfig+0x37a>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002dbe:	2d0c      	cmp	r5, #12
 8002dc0:	d100      	bne.n	8002dc4 <HAL_RCC_OscConfig+0xa4>
 8002dc2:	e167      	b.n	8003094 <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002dc4:	4ea5      	ldr	r6, [pc, #660]	; (800305c <HAL_RCC_OscConfig+0x33c>)
      if(hsi_state != RCC_HSI_OFF)
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d100      	bne.n	8002dcc <HAL_RCC_OscConfig+0xac>
 8002dca:	e1d3      	b.n	8003174 <HAL_RCC_OscConfig+0x454>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002dcc:	2109      	movs	r1, #9
 8002dce:	6832      	ldr	r2, [r6, #0]
 8002dd0:	438a      	bics	r2, r1
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002dd6:	f7fe fb2f 	bl	8001438 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dda:	2304      	movs	r3, #4
        tickstart = HAL_GetTick();
 8002ddc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dde:	4698      	mov	r8, r3
 8002de0:	e005      	b.n	8002dee <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002de2:	f7fe fb29 	bl	8001438 <HAL_GetTick>
 8002de6:	1bc0      	subs	r0, r0, r7
 8002de8:	2802      	cmp	r0, #2
 8002dea:	d900      	bls.n	8002dee <HAL_RCC_OscConfig+0xce>
 8002dec:	e1ab      	b.n	8003146 <HAL_RCC_OscConfig+0x426>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dee:	4642      	mov	r2, r8
 8002df0:	6833      	ldr	r3, [r6, #0]
 8002df2:	421a      	tst	r2, r3
 8002df4:	d0f5      	beq.n	8002de2 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df6:	6872      	ldr	r2, [r6, #4]
 8002df8:	6923      	ldr	r3, [r4, #16]
 8002dfa:	499b      	ldr	r1, [pc, #620]	; (8003068 <HAL_RCC_OscConfig+0x348>)
 8002dfc:	021b      	lsls	r3, r3, #8
 8002dfe:	400a      	ands	r2, r1
 8002e00:	4313      	orrs	r3, r2
 8002e02:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e04:	6823      	ldr	r3, [r4, #0]
 8002e06:	06da      	lsls	r2, r3, #27
 8002e08:	d52b      	bpl.n	8002e62 <HAL_RCC_OscConfig+0x142>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e0a:	2d00      	cmp	r5, #0
 8002e0c:	d100      	bne.n	8002e10 <HAL_RCC_OscConfig+0xf0>
 8002e0e:	e0e0      	b.n	8002fd2 <HAL_RCC_OscConfig+0x2b2>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e10:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_MSI_ENABLE();
 8002e12:	4e92      	ldr	r6, [pc, #584]	; (800305c <HAL_RCC_OscConfig+0x33c>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d100      	bne.n	8002e1a <HAL_RCC_OscConfig+0xfa>
 8002e18:	e1c1      	b.n	800319e <HAL_RCC_OscConfig+0x47e>
        __HAL_RCC_MSI_ENABLE();
 8002e1a:	2380      	movs	r3, #128	; 0x80
 8002e1c:	6832      	ldr	r2, [r6, #0]
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	4313      	orrs	r3, r2
 8002e22:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002e24:	f7fe fb08 	bl	8001438 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e28:	2380      	movs	r3, #128	; 0x80
 8002e2a:	009b      	lsls	r3, r3, #2
        tickstart = HAL_GetTick();
 8002e2c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e2e:	4698      	mov	r8, r3
 8002e30:	e005      	b.n	8002e3e <HAL_RCC_OscConfig+0x11e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e32:	f7fe fb01 	bl	8001438 <HAL_GetTick>
 8002e36:	1bc0      	subs	r0, r0, r7
 8002e38:	2802      	cmp	r0, #2
 8002e3a:	d900      	bls.n	8002e3e <HAL_RCC_OscConfig+0x11e>
 8002e3c:	e183      	b.n	8003146 <HAL_RCC_OscConfig+0x426>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002e3e:	4642      	mov	r2, r8
 8002e40:	6833      	ldr	r3, [r6, #0]
 8002e42:	4213      	tst	r3, r2
 8002e44:	d0f5      	beq.n	8002e32 <HAL_RCC_OscConfig+0x112>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e46:	6873      	ldr	r3, [r6, #4]
 8002e48:	4a88      	ldr	r2, [pc, #544]	; (800306c <HAL_RCC_OscConfig+0x34c>)
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	6073      	str	r3, [r6, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e52:	6872      	ldr	r2, [r6, #4]
 8002e54:	6a23      	ldr	r3, [r4, #32]
 8002e56:	0212      	lsls	r2, r2, #8
 8002e58:	061b      	lsls	r3, r3, #24
 8002e5a:	0a12      	lsrs	r2, r2, #8
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e60:	6823      	ldr	r3, [r4, #0]
 8002e62:	071a      	lsls	r2, r3, #28
 8002e64:	d519      	bpl.n	8002e9a <HAL_RCC_OscConfig+0x17a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e66:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8002e68:	4e7c      	ldr	r6, [pc, #496]	; (800305c <HAL_RCC_OscConfig+0x33c>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d100      	bne.n	8002e70 <HAL_RCC_OscConfig+0x150>
 8002e6e:	e16c      	b.n	800314a <HAL_RCC_OscConfig+0x42a>
      __HAL_RCC_LSI_ENABLE();
 8002e70:	2201      	movs	r2, #1
 8002e72:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8002e74:	4313      	orrs	r3, r2
 8002e76:	6533      	str	r3, [r6, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002e78:	f7fe fade 	bl	8001438 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e7c:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8002e7e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e80:	4698      	mov	r8, r3
 8002e82:	e005      	b.n	8002e90 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e84:	f7fe fad8 	bl	8001438 <HAL_GetTick>
 8002e88:	1bc0      	subs	r0, r0, r7
 8002e8a:	2802      	cmp	r0, #2
 8002e8c:	d900      	bls.n	8002e90 <HAL_RCC_OscConfig+0x170>
 8002e8e:	e15a      	b.n	8003146 <HAL_RCC_OscConfig+0x426>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e90:	4642      	mov	r2, r8
 8002e92:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8002e94:	421a      	tst	r2, r3
 8002e96:	d0f5      	beq.n	8002e84 <HAL_RCC_OscConfig+0x164>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e98:	6823      	ldr	r3, [r4, #0]
 8002e9a:	075a      	lsls	r2, r3, #29
 8002e9c:	d543      	bpl.n	8002f26 <HAL_RCC_OscConfig+0x206>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e9e:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002ea0:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ea2:	4a6e      	ldr	r2, [pc, #440]	; (800305c <HAL_RCC_OscConfig+0x33c>)
 8002ea4:	055b      	lsls	r3, r3, #21
 8002ea6:	6b91      	ldr	r1, [r2, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8002ea8:	4682      	mov	sl, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eaa:	4219      	tst	r1, r3
 8002eac:	d104      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eae:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002eb0:	430b      	orrs	r3, r1
 8002eb2:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	469a      	mov	sl, r3
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb8:	2780      	movs	r7, #128	; 0x80
 8002eba:	4e6d      	ldr	r6, [pc, #436]	; (8003070 <HAL_RCC_OscConfig+0x350>)
 8002ebc:	007f      	lsls	r7, r7, #1
 8002ebe:	6833      	ldr	r3, [r6, #0]
 8002ec0:	423b      	tst	r3, r7
 8002ec2:	d100      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x1a6>
 8002ec4:	e12f      	b.n	8003126 <HAL_RCC_OscConfig+0x406>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ec6:	2280      	movs	r2, #128	; 0x80
 8002ec8:	68a3      	ldr	r3, [r4, #8]
 8002eca:	0052      	lsls	r2, r2, #1
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d100      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x1b2>
 8002ed0:	e1d9      	b.n	8003286 <HAL_RCC_OscConfig+0x566>
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d100      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x1b8>
 8002ed6:	e10a      	b.n	80030ee <HAL_RCC_OscConfig+0x3ce>
 8002ed8:	21a0      	movs	r1, #160	; 0xa0
 8002eda:	00c9      	lsls	r1, r1, #3
 8002edc:	428b      	cmp	r3, r1
 8002ede:	d100      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x1c2>
 8002ee0:	e1f3      	b.n	80032ca <HAL_RCC_OscConfig+0x5aa>
 8002ee2:	4b5e      	ldr	r3, [pc, #376]	; (800305c <HAL_RCC_OscConfig+0x33c>)
 8002ee4:	4963      	ldr	r1, [pc, #396]	; (8003074 <HAL_RCC_OscConfig+0x354>)
 8002ee6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ee8:	400a      	ands	r2, r1
 8002eea:	651a      	str	r2, [r3, #80]	; 0x50
 8002eec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002eee:	4962      	ldr	r1, [pc, #392]	; (8003078 <HAL_RCC_OscConfig+0x358>)
 8002ef0:	400a      	ands	r2, r1
 8002ef2:	651a      	str	r2, [r3, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002ef4:	f7fe faa0 	bl	8001438 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ef8:	2780      	movs	r7, #128	; 0x80
 8002efa:	4b58      	ldr	r3, [pc, #352]	; (800305c <HAL_RCC_OscConfig+0x33c>)
      tickstart = HAL_GetTick();
 8002efc:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002efe:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f00:	4b5e      	ldr	r3, [pc, #376]	; (800307c <HAL_RCC_OscConfig+0x35c>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f02:	00bf      	lsls	r7, r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f04:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f06:	e005      	b.n	8002f14 <HAL_RCC_OscConfig+0x1f4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f08:	f7fe fa96 	bl	8001438 <HAL_GetTick>
 8002f0c:	1b80      	subs	r0, r0, r6
 8002f0e:	4548      	cmp	r0, r9
 8002f10:	d900      	bls.n	8002f14 <HAL_RCC_OscConfig+0x1f4>
 8002f12:	e118      	b.n	8003146 <HAL_RCC_OscConfig+0x426>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f14:	4643      	mov	r3, r8
 8002f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f18:	423b      	tst	r3, r7
 8002f1a:	d0f5      	beq.n	8002f08 <HAL_RCC_OscConfig+0x1e8>
    if(pwrclkchanged == SET)
 8002f1c:	4653      	mov	r3, sl
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d100      	bne.n	8002f24 <HAL_RCC_OscConfig+0x204>
 8002f22:	e175      	b.n	8003210 <HAL_RCC_OscConfig+0x4f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f24:	6823      	ldr	r3, [r4, #0]
 8002f26:	069b      	lsls	r3, r3, #26
 8002f28:	d521      	bpl.n	8002f6e <HAL_RCC_OscConfig+0x24e>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f2a:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_HSI48_ENABLE();
 8002f2c:	4e4b      	ldr	r6, [pc, #300]	; (800305c <HAL_RCC_OscConfig+0x33c>)
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d100      	bne.n	8002f34 <HAL_RCC_OscConfig+0x214>
 8002f32:	e14a      	b.n	80031ca <HAL_RCC_OscConfig+0x4aa>
        __HAL_RCC_HSI48_ENABLE();
 8002f34:	2101      	movs	r1, #1
 8002f36:	68b2      	ldr	r2, [r6, #8]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	60b2      	str	r2, [r6, #8]
 8002f3c:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8002f3e:	4a50      	ldr	r2, [pc, #320]	; (8003080 <HAL_RCC_OscConfig+0x360>)
 8002f40:	430b      	orrs	r3, r1
 8002f42:	6373      	str	r3, [r6, #52]	; 0x34
 8002f44:	2380      	movs	r3, #128	; 0x80
 8002f46:	6a11      	ldr	r1, [r2, #32]
 8002f48:	019b      	lsls	r3, r3, #6
 8002f4a:	430b      	orrs	r3, r1
 8002f4c:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8002f4e:	f7fe fa73 	bl	8001438 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f52:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 8002f54:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f56:	4698      	mov	r8, r3
 8002f58:	e005      	b.n	8002f66 <HAL_RCC_OscConfig+0x246>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f5a:	f7fe fa6d 	bl	8001438 <HAL_GetTick>
 8002f5e:	1bc0      	subs	r0, r0, r7
 8002f60:	2802      	cmp	r0, #2
 8002f62:	d900      	bls.n	8002f66 <HAL_RCC_OscConfig+0x246>
 8002f64:	e0ef      	b.n	8003146 <HAL_RCC_OscConfig+0x426>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f66:	4642      	mov	r2, r8
 8002f68:	68b3      	ldr	r3, [r6, #8]
 8002f6a:	421a      	tst	r2, r3
 8002f6c:	d0f5      	beq.n	8002f5a <HAL_RCC_OscConfig+0x23a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d019      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x288>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f74:	2d0c      	cmp	r5, #12
 8002f76:	d100      	bne.n	8002f7a <HAL_RCC_OscConfig+0x25a>
 8002f78:	e18a      	b.n	8003290 <HAL_RCC_OscConfig+0x570>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d100      	bne.n	8002f80 <HAL_RCC_OscConfig+0x260>
 8002f7e:	e14e      	b.n	800321e <HAL_RCC_OscConfig+0x4fe>
        __HAL_RCC_PLL_DISABLE();
 8002f80:	4c36      	ldr	r4, [pc, #216]	; (800305c <HAL_RCC_OscConfig+0x33c>)
 8002f82:	4a40      	ldr	r2, [pc, #256]	; (8003084 <HAL_RCC_OscConfig+0x364>)
 8002f84:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f86:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002f88:	4013      	ands	r3, r2
 8002f8a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002f8c:	f7fe fa54 	bl	8001438 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f90:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8002f92:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f94:	e005      	b.n	8002fa2 <HAL_RCC_OscConfig+0x282>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f96:	f7fe fa4f 	bl	8001438 <HAL_GetTick>
 8002f9a:	1b40      	subs	r0, r0, r5
 8002f9c:	2802      	cmp	r0, #2
 8002f9e:	d900      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x282>
 8002fa0:	e0d1      	b.n	8003146 <HAL_RCC_OscConfig+0x426>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002fa2:	6823      	ldr	r3, [r4, #0]
 8002fa4:	4233      	tst	r3, r6
 8002fa6:	d1f6      	bne.n	8002f96 <HAL_RCC_OscConfig+0x276>
  return HAL_OK;
 8002fa8:	2000      	movs	r0, #0
 8002faa:	e00c      	b.n	8002fc6 <HAL_RCC_OscConfig+0x2a6>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fac:	2e00      	cmp	r6, #0
 8002fae:	d100      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x292>
 8002fb0:	e6d1      	b.n	8002d56 <HAL_RCC_OscConfig+0x36>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb2:	4a2a      	ldr	r2, [pc, #168]	; (800305c <HAL_RCC_OscConfig+0x33c>)
 8002fb4:	6812      	ldr	r2, [r2, #0]
 8002fb6:	0392      	lsls	r2, r2, #14
 8002fb8:	d400      	bmi.n	8002fbc <HAL_RCC_OscConfig+0x29c>
 8002fba:	e6fa      	b.n	8002db2 <HAL_RCC_OscConfig+0x92>
 8002fbc:	6862      	ldr	r2, [r4, #4]
 8002fbe:	2a00      	cmp	r2, #0
 8002fc0:	d000      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x2a4>
 8002fc2:	e6f6      	b.n	8002db2 <HAL_RCC_OscConfig+0x92>
        return HAL_ERROR;
 8002fc4:	2001      	movs	r0, #1
}
 8002fc6:	b002      	add	sp, #8
 8002fc8:	bce0      	pop	{r5, r6, r7}
 8002fca:	46ba      	mov	sl, r7
 8002fcc:	46b1      	mov	r9, r6
 8002fce:	46a8      	mov	r8, r5
 8002fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fd2:	4b22      	ldr	r3, [pc, #136]	; (800305c <HAL_RCC_OscConfig+0x33c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	059b      	lsls	r3, r3, #22
 8002fd8:	d502      	bpl.n	8002fe0 <HAL_RCC_OscConfig+0x2c0>
 8002fda:	69e3      	ldr	r3, [r4, #28]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d0f1      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fe0:	4a1e      	ldr	r2, [pc, #120]	; (800305c <HAL_RCC_OscConfig+0x33c>)
 8002fe2:	4822      	ldr	r0, [pc, #136]	; (800306c <HAL_RCC_OscConfig+0x34c>)
 8002fe4:	6851      	ldr	r1, [r2, #4]
 8002fe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002fe8:	4001      	ands	r1, r0
 8002fea:	4319      	orrs	r1, r3
 8002fec:	6051      	str	r1, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fee:	6850      	ldr	r0, [r2, #4]
 8002ff0:	6a21      	ldr	r1, [r4, #32]
 8002ff2:	0200      	lsls	r0, r0, #8
 8002ff4:	0a00      	lsrs	r0, r0, #8
 8002ff6:	0609      	lsls	r1, r1, #24
 8002ff8:	4301      	orrs	r1, r0
 8002ffa:	6051      	str	r1, [r2, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002ffc:	68d1      	ldr	r1, [r2, #12]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002ffe:	2280      	movs	r2, #128	; 0x80
 8003000:	0b5b      	lsrs	r3, r3, #13
 8003002:	3301      	adds	r3, #1
 8003004:	0212      	lsls	r2, r2, #8
 8003006:	409a      	lsls	r2, r3
 8003008:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800300a:	060a      	lsls	r2, r1, #24
 800300c:	491e      	ldr	r1, [pc, #120]	; (8003088 <HAL_RCC_OscConfig+0x368>)
 800300e:	0f12      	lsrs	r2, r2, #28
 8003010:	5c8a      	ldrb	r2, [r1, r2]
 8003012:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003014:	4a1d      	ldr	r2, [pc, #116]	; (800308c <HAL_RCC_OscConfig+0x36c>)
 8003016:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8003018:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <HAL_RCC_OscConfig+0x370>)
 800301a:	6818      	ldr	r0, [r3, #0]
 800301c:	f7fe f9c6 	bl	80013ac <HAL_InitTick>
        if(status != HAL_OK)
 8003020:	2800      	cmp	r0, #0
 8003022:	d1d0      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x2a6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003024:	6823      	ldr	r3, [r4, #0]
 8003026:	e71c      	b.n	8002e62 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003028:	490c      	ldr	r1, [pc, #48]	; (800305c <HAL_RCC_OscConfig+0x33c>)
 800302a:	680a      	ldr	r2, [r1, #0]
 800302c:	4313      	orrs	r3, r2
 800302e:	600b      	str	r3, [r1, #0]
        tickstart = HAL_GetTick();
 8003030:	f7fe fa02 	bl	8001438 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003034:	4b09      	ldr	r3, [pc, #36]	; (800305c <HAL_RCC_OscConfig+0x33c>)
        tickstart = HAL_GetTick();
 8003036:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003038:	4699      	mov	r9, r3
 800303a:	2380      	movs	r3, #128	; 0x80
 800303c:	029b      	lsls	r3, r3, #10
 800303e:	4698      	mov	r8, r3
 8003040:	e004      	b.n	800304c <HAL_RCC_OscConfig+0x32c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003042:	f7fe f9f9 	bl	8001438 <HAL_GetTick>
 8003046:	1bc0      	subs	r0, r0, r7
 8003048:	2864      	cmp	r0, #100	; 0x64
 800304a:	d87c      	bhi.n	8003146 <HAL_RCC_OscConfig+0x426>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800304c:	464b      	mov	r3, r9
 800304e:	4642      	mov	r2, r8
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4213      	tst	r3, r2
 8003054:	d0f5      	beq.n	8003042 <HAL_RCC_OscConfig+0x322>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003056:	6823      	ldr	r3, [r4, #0]
 8003058:	e6ab      	b.n	8002db2 <HAL_RCC_OscConfig+0x92>
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	40021000 	.word	0x40021000
 8003060:	fffeffff 	.word	0xfffeffff
 8003064:	fffbffff 	.word	0xfffbffff
 8003068:	ffffe0ff 	.word	0xffffe0ff
 800306c:	ffff1fff 	.word	0xffff1fff
 8003070:	40007000 	.word	0x40007000
 8003074:	fffffeff 	.word	0xfffffeff
 8003078:	fffffbff 	.word	0xfffffbff
 800307c:	00001388 	.word	0x00001388
 8003080:	40010000 	.word	0x40010000
 8003084:	feffffff 	.word	0xfeffffff
 8003088:	0800add0 	.word	0x0800add0
 800308c:	20000000 	.word	0x20000000
 8003090:	20000008 	.word	0x20000008
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003094:	2e00      	cmp	r6, #0
 8003096:	d000      	beq.n	800309a <HAL_RCC_OscConfig+0x37a>
 8003098:	e694      	b.n	8002dc4 <HAL_RCC_OscConfig+0xa4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800309a:	4a91      	ldr	r2, [pc, #580]	; (80032e0 <HAL_RCC_OscConfig+0x5c0>)
 800309c:	6812      	ldr	r2, [r2, #0]
 800309e:	0752      	lsls	r2, r2, #29
 80030a0:	d502      	bpl.n	80030a8 <HAL_RCC_OscConfig+0x388>
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d100      	bne.n	80030a8 <HAL_RCC_OscConfig+0x388>
 80030a6:	e78d      	b.n	8002fc4 <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a8:	4e8d      	ldr	r6, [pc, #564]	; (80032e0 <HAL_RCC_OscConfig+0x5c0>)
 80030aa:	6922      	ldr	r2, [r4, #16]
 80030ac:	6871      	ldr	r1, [r6, #4]
 80030ae:	488d      	ldr	r0, [pc, #564]	; (80032e4 <HAL_RCC_OscConfig+0x5c4>)
 80030b0:	0212      	lsls	r2, r2, #8
 80030b2:	4001      	ands	r1, r0
 80030b4:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80030b6:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b8:	6072      	str	r2, [r6, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80030ba:	6832      	ldr	r2, [r6, #0]
 80030bc:	438a      	bics	r2, r1
 80030be:	4313      	orrs	r3, r2
 80030c0:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030c2:	f7ff fde7 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 80030c6:	68f3      	ldr	r3, [r6, #12]
 80030c8:	4a87      	ldr	r2, [pc, #540]	; (80032e8 <HAL_RCC_OscConfig+0x5c8>)
 80030ca:	061b      	lsls	r3, r3, #24
 80030cc:	0f1b      	lsrs	r3, r3, #28
 80030ce:	5cd3      	ldrb	r3, [r2, r3]
 80030d0:	40d8      	lsrs	r0, r3
 80030d2:	4b86      	ldr	r3, [pc, #536]	; (80032ec <HAL_RCC_OscConfig+0x5cc>)
 80030d4:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 80030d6:	4b86      	ldr	r3, [pc, #536]	; (80032f0 <HAL_RCC_OscConfig+0x5d0>)
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	f7fe f967 	bl	80013ac <HAL_InitTick>
      if(status != HAL_OK)
 80030de:	2800      	cmp	r0, #0
 80030e0:	d000      	beq.n	80030e4 <HAL_RCC_OscConfig+0x3c4>
 80030e2:	e770      	b.n	8002fc6 <HAL_RCC_OscConfig+0x2a6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030e4:	6823      	ldr	r3, [r4, #0]
 80030e6:	06da      	lsls	r2, r3, #27
 80030e8:	d400      	bmi.n	80030ec <HAL_RCC_OscConfig+0x3cc>
 80030ea:	e6ba      	b.n	8002e62 <HAL_RCC_OscConfig+0x142>
 80030ec:	e68d      	b.n	8002e0a <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030ee:	4e7c      	ldr	r6, [pc, #496]	; (80032e0 <HAL_RCC_OscConfig+0x5c0>)
 80030f0:	4a80      	ldr	r2, [pc, #512]	; (80032f4 <HAL_RCC_OscConfig+0x5d4>)
 80030f2:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80030f4:	4013      	ands	r3, r2
 80030f6:	6533      	str	r3, [r6, #80]	; 0x50
 80030f8:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80030fa:	4a7f      	ldr	r2, [pc, #508]	; (80032f8 <HAL_RCC_OscConfig+0x5d8>)
 80030fc:	4013      	ands	r3, r2
 80030fe:	6533      	str	r3, [r6, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003100:	f7fe f99a 	bl	8001438 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003104:	2380      	movs	r3, #128	; 0x80
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800310a:	4b7c      	ldr	r3, [pc, #496]	; (80032fc <HAL_RCC_OscConfig+0x5dc>)
      tickstart = HAL_GetTick();
 800310c:	0007      	movs	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800310e:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003110:	e004      	b.n	800311c <HAL_RCC_OscConfig+0x3fc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003112:	f7fe f991 	bl	8001438 <HAL_GetTick>
 8003116:	1bc0      	subs	r0, r0, r7
 8003118:	4548      	cmp	r0, r9
 800311a:	d814      	bhi.n	8003146 <HAL_RCC_OscConfig+0x426>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800311c:	4642      	mov	r2, r8
 800311e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8003120:	4213      	tst	r3, r2
 8003122:	d1f6      	bne.n	8003112 <HAL_RCC_OscConfig+0x3f2>
 8003124:	e6fa      	b.n	8002f1c <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003126:	6833      	ldr	r3, [r6, #0]
 8003128:	433b      	orrs	r3, r7
 800312a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800312c:	f7fe f984 	bl	8001438 <HAL_GetTick>
 8003130:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003132:	6833      	ldr	r3, [r6, #0]
 8003134:	423b      	tst	r3, r7
 8003136:	d000      	beq.n	800313a <HAL_RCC_OscConfig+0x41a>
 8003138:	e6c5      	b.n	8002ec6 <HAL_RCC_OscConfig+0x1a6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800313a:	f7fe f97d 	bl	8001438 <HAL_GetTick>
 800313e:	4643      	mov	r3, r8
 8003140:	1ac0      	subs	r0, r0, r3
 8003142:	2864      	cmp	r0, #100	; 0x64
 8003144:	d9f5      	bls.n	8003132 <HAL_RCC_OscConfig+0x412>
            return HAL_TIMEOUT;
 8003146:	2003      	movs	r0, #3
 8003148:	e73d      	b.n	8002fc6 <HAL_RCC_OscConfig+0x2a6>
      __HAL_RCC_LSI_DISABLE();
 800314a:	2201      	movs	r2, #1
 800314c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800314e:	4393      	bics	r3, r2
 8003150:	6533      	str	r3, [r6, #80]	; 0x50
      tickstart = HAL_GetTick();
 8003152:	f7fe f971 	bl	8001438 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003156:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8003158:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800315a:	4698      	mov	r8, r3
 800315c:	e004      	b.n	8003168 <HAL_RCC_OscConfig+0x448>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800315e:	f7fe f96b 	bl	8001438 <HAL_GetTick>
 8003162:	1bc0      	subs	r0, r0, r7
 8003164:	2802      	cmp	r0, #2
 8003166:	d8ee      	bhi.n	8003146 <HAL_RCC_OscConfig+0x426>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003168:	4642      	mov	r2, r8
 800316a:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800316c:	421a      	tst	r2, r3
 800316e:	d1f6      	bne.n	800315e <HAL_RCC_OscConfig+0x43e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003170:	6823      	ldr	r3, [r4, #0]
 8003172:	e692      	b.n	8002e9a <HAL_RCC_OscConfig+0x17a>
        __HAL_RCC_HSI_DISABLE();
 8003174:	2201      	movs	r2, #1
 8003176:	6833      	ldr	r3, [r6, #0]
 8003178:	4393      	bics	r3, r2
 800317a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800317c:	f7fe f95c 	bl	8001438 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003180:	2304      	movs	r3, #4
        tickstart = HAL_GetTick();
 8003182:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003184:	4698      	mov	r8, r3
 8003186:	e004      	b.n	8003192 <HAL_RCC_OscConfig+0x472>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003188:	f7fe f956 	bl	8001438 <HAL_GetTick>
 800318c:	1bc0      	subs	r0, r0, r7
 800318e:	2802      	cmp	r0, #2
 8003190:	d8d9      	bhi.n	8003146 <HAL_RCC_OscConfig+0x426>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003192:	4642      	mov	r2, r8
 8003194:	6833      	ldr	r3, [r6, #0]
 8003196:	421a      	tst	r2, r3
 8003198:	d1f6      	bne.n	8003188 <HAL_RCC_OscConfig+0x468>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800319a:	6823      	ldr	r3, [r4, #0]
 800319c:	e7a3      	b.n	80030e6 <HAL_RCC_OscConfig+0x3c6>
        __HAL_RCC_MSI_DISABLE();
 800319e:	6833      	ldr	r3, [r6, #0]
 80031a0:	4a54      	ldr	r2, [pc, #336]	; (80032f4 <HAL_RCC_OscConfig+0x5d4>)
 80031a2:	4013      	ands	r3, r2
 80031a4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80031a6:	f7fe f947 	bl	8001438 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80031aa:	2380      	movs	r3, #128	; 0x80
 80031ac:	009b      	lsls	r3, r3, #2
        tickstart = HAL_GetTick();
 80031ae:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80031b0:	4698      	mov	r8, r3
 80031b2:	e004      	b.n	80031be <HAL_RCC_OscConfig+0x49e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031b4:	f7fe f940 	bl	8001438 <HAL_GetTick>
 80031b8:	1bc0      	subs	r0, r0, r7
 80031ba:	2802      	cmp	r0, #2
 80031bc:	d8c3      	bhi.n	8003146 <HAL_RCC_OscConfig+0x426>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80031be:	4642      	mov	r2, r8
 80031c0:	6833      	ldr	r3, [r6, #0]
 80031c2:	4213      	tst	r3, r2
 80031c4:	d1f6      	bne.n	80031b4 <HAL_RCC_OscConfig+0x494>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031c6:	6823      	ldr	r3, [r4, #0]
 80031c8:	e64b      	b.n	8002e62 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI48_DISABLE();
 80031ca:	2201      	movs	r2, #1
 80031cc:	68b3      	ldr	r3, [r6, #8]
 80031ce:	494c      	ldr	r1, [pc, #304]	; (8003300 <HAL_RCC_OscConfig+0x5e0>)
 80031d0:	4393      	bics	r3, r2
 80031d2:	4a4c      	ldr	r2, [pc, #304]	; (8003304 <HAL_RCC_OscConfig+0x5e4>)
 80031d4:	60b3      	str	r3, [r6, #8]
 80031d6:	6a13      	ldr	r3, [r2, #32]
 80031d8:	400b      	ands	r3, r1
 80031da:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80031dc:	f7fe f92c 	bl	8001438 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80031e0:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 80031e2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80031e4:	4698      	mov	r8, r3
 80031e6:	e004      	b.n	80031f2 <HAL_RCC_OscConfig+0x4d2>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031e8:	f7fe f926 	bl	8001438 <HAL_GetTick>
 80031ec:	1bc0      	subs	r0, r0, r7
 80031ee:	2802      	cmp	r0, #2
 80031f0:	d8a9      	bhi.n	8003146 <HAL_RCC_OscConfig+0x426>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80031f2:	4642      	mov	r2, r8
 80031f4:	68b3      	ldr	r3, [r6, #8]
 80031f6:	421a      	tst	r2, r3
 80031f8:	d1f6      	bne.n	80031e8 <HAL_RCC_OscConfig+0x4c8>
 80031fa:	e6b8      	b.n	8002f6e <HAL_RCC_OscConfig+0x24e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031fc:	2180      	movs	r1, #128	; 0x80
 80031fe:	4b38      	ldr	r3, [pc, #224]	; (80032e0 <HAL_RCC_OscConfig+0x5c0>)
 8003200:	02c9      	lsls	r1, r1, #11
 8003202:	6818      	ldr	r0, [r3, #0]
 8003204:	4301      	orrs	r1, r0
 8003206:	6019      	str	r1, [r3, #0]
 8003208:	6819      	ldr	r1, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800320e:	e70f      	b.n	8003030 <HAL_RCC_OscConfig+0x310>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003210:	4a33      	ldr	r2, [pc, #204]	; (80032e0 <HAL_RCC_OscConfig+0x5c0>)
 8003212:	493d      	ldr	r1, [pc, #244]	; (8003308 <HAL_RCC_OscConfig+0x5e8>)
 8003214:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003216:	400b      	ands	r3, r1
 8003218:	6393      	str	r3, [r2, #56]	; 0x38
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800321a:	6823      	ldr	r3, [r4, #0]
 800321c:	e683      	b.n	8002f26 <HAL_RCC_OscConfig+0x206>
        __HAL_RCC_PLL_DISABLE();
 800321e:	4d30      	ldr	r5, [pc, #192]	; (80032e0 <HAL_RCC_OscConfig+0x5c0>)
 8003220:	4a3a      	ldr	r2, [pc, #232]	; (800330c <HAL_RCC_OscConfig+0x5ec>)
 8003222:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003224:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003226:	4013      	ands	r3, r2
 8003228:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800322a:	f7fe f905 	bl	8001438 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800322e:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8003230:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003232:	e004      	b.n	800323e <HAL_RCC_OscConfig+0x51e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003234:	f7fe f900 	bl	8001438 <HAL_GetTick>
 8003238:	1b80      	subs	r0, r0, r6
 800323a:	2802      	cmp	r0, #2
 800323c:	d883      	bhi.n	8003146 <HAL_RCC_OscConfig+0x426>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800323e:	682b      	ldr	r3, [r5, #0]
 8003240:	423b      	tst	r3, r7
 8003242:	d1f7      	bne.n	8003234 <HAL_RCC_OscConfig+0x514>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003244:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003246:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003248:	68ea      	ldr	r2, [r5, #12]
 800324a:	430b      	orrs	r3, r1
 800324c:	4930      	ldr	r1, [pc, #192]	; (8003310 <HAL_RCC_OscConfig+0x5f0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800324e:	4e24      	ldr	r6, [pc, #144]	; (80032e0 <HAL_RCC_OscConfig+0x5c0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003250:	400a      	ands	r2, r1
 8003252:	4313      	orrs	r3, r2
 8003254:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003256:	4313      	orrs	r3, r2
 8003258:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800325a:	2380      	movs	r3, #128	; 0x80
 800325c:	682a      	ldr	r2, [r5, #0]
 800325e:	045b      	lsls	r3, r3, #17
 8003260:	4313      	orrs	r3, r2
 8003262:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003264:	f7fe f8e8 	bl	8001438 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003268:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 800326a:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800326c:	04ad      	lsls	r5, r5, #18
 800326e:	e005      	b.n	800327c <HAL_RCC_OscConfig+0x55c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003270:	f7fe f8e2 	bl	8001438 <HAL_GetTick>
 8003274:	1b00      	subs	r0, r0, r4
 8003276:	2802      	cmp	r0, #2
 8003278:	d900      	bls.n	800327c <HAL_RCC_OscConfig+0x55c>
 800327a:	e764      	b.n	8003146 <HAL_RCC_OscConfig+0x426>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800327c:	6833      	ldr	r3, [r6, #0]
 800327e:	422b      	tst	r3, r5
 8003280:	d0f6      	beq.n	8003270 <HAL_RCC_OscConfig+0x550>
  return HAL_OK;
 8003282:	2000      	movs	r0, #0
 8003284:	e69f      	b.n	8002fc6 <HAL_RCC_OscConfig+0x2a6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003286:	4a16      	ldr	r2, [pc, #88]	; (80032e0 <HAL_RCC_OscConfig+0x5c0>)
 8003288:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800328a:	430b      	orrs	r3, r1
 800328c:	6513      	str	r3, [r2, #80]	; 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800328e:	e631      	b.n	8002ef4 <HAL_RCC_OscConfig+0x1d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003290:	2b01      	cmp	r3, #1
 8003292:	d100      	bne.n	8003296 <HAL_RCC_OscConfig+0x576>
 8003294:	e696      	b.n	8002fc4 <HAL_RCC_OscConfig+0x2a4>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003296:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8003298:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <HAL_RCC_OscConfig+0x5c0>)
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800329a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        pll_config = RCC->CFGR;
 800329c:	68db      	ldr	r3, [r3, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800329e:	0252      	lsls	r2, r2, #9
        return HAL_ERROR;
 80032a0:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a2:	401a      	ands	r2, r3
 80032a4:	428a      	cmp	r2, r1
 80032a6:	d000      	beq.n	80032aa <HAL_RCC_OscConfig+0x58a>
 80032a8:	e68d      	b.n	8002fc6 <HAL_RCC_OscConfig+0x2a6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80032aa:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ac:	6b21      	ldr	r1, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80032ae:	0392      	lsls	r2, r2, #14
 80032b0:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b2:	428a      	cmp	r2, r1
 80032b4:	d000      	beq.n	80032b8 <HAL_RCC_OscConfig+0x598>
 80032b6:	e686      	b.n	8002fc6 <HAL_RCC_OscConfig+0x2a6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80032b8:	20c0      	movs	r0, #192	; 0xc0
 80032ba:	0400      	lsls	r0, r0, #16
 80032bc:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80032be:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80032c0:	1a18      	subs	r0, r3, r0
 80032c2:	1e43      	subs	r3, r0, #1
 80032c4:	4198      	sbcs	r0, r3
        return HAL_ERROR;
 80032c6:	b2c0      	uxtb	r0, r0
 80032c8:	e67d      	b.n	8002fc6 <HAL_RCC_OscConfig+0x2a6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ca:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <HAL_RCC_OscConfig+0x5c0>)
 80032cc:	3901      	subs	r1, #1
 80032ce:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80032d0:	39ff      	subs	r1, #255	; 0xff
 80032d2:	4301      	orrs	r1, r0
 80032d4:	6519      	str	r1, [r3, #80]	; 0x50
 80032d6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80032d8:	430a      	orrs	r2, r1
 80032da:	651a      	str	r2, [r3, #80]	; 0x50
 80032dc:	e60a      	b.n	8002ef4 <HAL_RCC_OscConfig+0x1d4>
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	40021000 	.word	0x40021000
 80032e4:	ffffe0ff 	.word	0xffffe0ff
 80032e8:	0800add0 	.word	0x0800add0
 80032ec:	20000000 	.word	0x20000000
 80032f0:	20000008 	.word	0x20000008
 80032f4:	fffffeff 	.word	0xfffffeff
 80032f8:	fffffbff 	.word	0xfffffbff
 80032fc:	00001388 	.word	0x00001388
 8003300:	ffffdfff 	.word	0xffffdfff
 8003304:	40010000 	.word	0x40010000
 8003308:	efffffff 	.word	0xefffffff
 800330c:	feffffff 	.word	0xfeffffff
 8003310:	ff02ffff 	.word	0xff02ffff

08003314 <HAL_RCC_ClockConfig>:
{
 8003314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003316:	46ce      	mov	lr, r9
 8003318:	4647      	mov	r7, r8
 800331a:	0005      	movs	r5, r0
 800331c:	000c      	movs	r4, r1
 800331e:	b580      	push	{r7, lr}
  if(RCC_ClkInitStruct == NULL)
 8003320:	2800      	cmp	r0, #0
 8003322:	d066      	beq.n	80033f2 <HAL_RCC_ClockConfig+0xde>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003324:	2201      	movs	r2, #1
 8003326:	4e6a      	ldr	r6, [pc, #424]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003328:	6833      	ldr	r3, [r6, #0]
 800332a:	4013      	ands	r3, r2
 800332c:	428b      	cmp	r3, r1
 800332e:	d362      	bcc.n	80033f6 <HAL_RCC_ClockConfig+0xe2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003330:	682b      	ldr	r3, [r5, #0]
 8003332:	079a      	lsls	r2, r3, #30
 8003334:	d506      	bpl.n	8003344 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003336:	20f0      	movs	r0, #240	; 0xf0
 8003338:	4966      	ldr	r1, [pc, #408]	; (80034d4 <HAL_RCC_ClockConfig+0x1c0>)
 800333a:	68ca      	ldr	r2, [r1, #12]
 800333c:	4382      	bics	r2, r0
 800333e:	68a8      	ldr	r0, [r5, #8]
 8003340:	4302      	orrs	r2, r0
 8003342:	60ca      	str	r2, [r1, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003344:	07db      	lsls	r3, r3, #31
 8003346:	d52d      	bpl.n	80033a4 <HAL_RCC_ClockConfig+0x90>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003348:	4b62      	ldr	r3, [pc, #392]	; (80034d4 <HAL_RCC_ClockConfig+0x1c0>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800334a:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800334c:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800334e:	2a02      	cmp	r2, #2
 8003350:	d04d      	beq.n	80033ee <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003352:	2a03      	cmp	r2, #3
 8003354:	d100      	bne.n	8003358 <HAL_RCC_ClockConfig+0x44>
 8003356:	e06f      	b.n	8003438 <HAL_RCC_ClockConfig+0x124>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003358:	2a01      	cmp	r2, #1
 800335a:	d100      	bne.n	800335e <HAL_RCC_ClockConfig+0x4a>
 800335c:	e0a3      	b.n	80034a6 <HAL_RCC_ClockConfig+0x192>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800335e:	059b      	lsls	r3, r3, #22
 8003360:	d547      	bpl.n	80033f2 <HAL_RCC_ClockConfig+0xde>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003362:	2103      	movs	r1, #3
 8003364:	4e5b      	ldr	r6, [pc, #364]	; (80034d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003366:	68f3      	ldr	r3, [r6, #12]
 8003368:	438b      	bics	r3, r1
 800336a:	4313      	orrs	r3, r2
 800336c:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 800336e:	f7fe f863 	bl	8001438 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003372:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8003374:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003376:	2b02      	cmp	r3, #2
 8003378:	d100      	bne.n	800337c <HAL_RCC_ClockConfig+0x68>
 800337a:	e074      	b.n	8003466 <HAL_RCC_ClockConfig+0x152>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800337c:	2b03      	cmp	r3, #3
 800337e:	d100      	bne.n	8003382 <HAL_RCC_ClockConfig+0x6e>
 8003380:	e081      	b.n	8003486 <HAL_RCC_ClockConfig+0x172>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003382:	2b01      	cmp	r3, #1
 8003384:	d100      	bne.n	8003388 <HAL_RCC_ClockConfig+0x74>
 8003386:	e093      	b.n	80034b0 <HAL_RCC_ClockConfig+0x19c>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003388:	230c      	movs	r3, #12
 800338a:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800338c:	4b52      	ldr	r3, [pc, #328]	; (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 800338e:	4699      	mov	r9, r3
 8003390:	e004      	b.n	800339c <HAL_RCC_ClockConfig+0x88>
 8003392:	f7fe f851 	bl	8001438 <HAL_GetTick>
 8003396:	1bc0      	subs	r0, r0, r7
 8003398:	4548      	cmp	r0, r9
 800339a:	d842      	bhi.n	8003422 <HAL_RCC_ClockConfig+0x10e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800339c:	4642      	mov	r2, r8
 800339e:	68f3      	ldr	r3, [r6, #12]
 80033a0:	421a      	tst	r2, r3
 80033a2:	d1f6      	bne.n	8003392 <HAL_RCC_ClockConfig+0x7e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033a4:	2201      	movs	r2, #1
 80033a6:	4e4a      	ldr	r6, [pc, #296]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033a8:	6833      	ldr	r3, [r6, #0]
 80033aa:	4013      	ands	r3, r2
 80033ac:	42a3      	cmp	r3, r4
 80033ae:	d847      	bhi.n	8003440 <HAL_RCC_ClockConfig+0x12c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b0:	682b      	ldr	r3, [r5, #0]
 80033b2:	075a      	lsls	r2, r3, #29
 80033b4:	d506      	bpl.n	80033c4 <HAL_RCC_ClockConfig+0xb0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033b6:	4947      	ldr	r1, [pc, #284]	; (80034d4 <HAL_RCC_ClockConfig+0x1c0>)
 80033b8:	4848      	ldr	r0, [pc, #288]	; (80034dc <HAL_RCC_ClockConfig+0x1c8>)
 80033ba:	68ca      	ldr	r2, [r1, #12]
 80033bc:	4002      	ands	r2, r0
 80033be:	68e8      	ldr	r0, [r5, #12]
 80033c0:	4302      	orrs	r2, r0
 80033c2:	60ca      	str	r2, [r1, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c4:	071b      	lsls	r3, r3, #28
 80033c6:	d42e      	bmi.n	8003426 <HAL_RCC_ClockConfig+0x112>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033c8:	f7ff fc64 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 80033cc:	4b41      	ldr	r3, [pc, #260]	; (80034d4 <HAL_RCC_ClockConfig+0x1c0>)
 80033ce:	4a44      	ldr	r2, [pc, #272]	; (80034e0 <HAL_RCC_ClockConfig+0x1cc>)
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	061b      	lsls	r3, r3, #24
 80033d4:	0f1b      	lsrs	r3, r3, #28
 80033d6:	5cd3      	ldrb	r3, [r2, r3]
 80033d8:	40d8      	lsrs	r0, r3
 80033da:	4b42      	ldr	r3, [pc, #264]	; (80034e4 <HAL_RCC_ClockConfig+0x1d0>)
 80033dc:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80033de:	4b42      	ldr	r3, [pc, #264]	; (80034e8 <HAL_RCC_ClockConfig+0x1d4>)
 80033e0:	6818      	ldr	r0, [r3, #0]
 80033e2:	f7fd ffe3 	bl	80013ac <HAL_InitTick>
}
 80033e6:	bcc0      	pop	{r6, r7}
 80033e8:	46b9      	mov	r9, r7
 80033ea:	46b0      	mov	r8, r6
 80033ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80033ee:	039b      	lsls	r3, r3, #14
 80033f0:	d4b7      	bmi.n	8003362 <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 80033f2:	2001      	movs	r0, #1
 80033f4:	e7f7      	b.n	80033e6 <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f6:	6833      	ldr	r3, [r6, #0]
 80033f8:	4393      	bics	r3, r2
 80033fa:	430b      	orrs	r3, r1
 80033fc:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80033fe:	f7fe f81b 	bl	8001438 <HAL_GetTick>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003402:	2301      	movs	r3, #1
 8003404:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003406:	4b34      	ldr	r3, [pc, #208]	; (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
    tickstart = HAL_GetTick();
 8003408:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800340a:	4699      	mov	r9, r3
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800340c:	4642      	mov	r2, r8
 800340e:	6833      	ldr	r3, [r6, #0]
 8003410:	4013      	ands	r3, r2
 8003412:	42a3      	cmp	r3, r4
 8003414:	d100      	bne.n	8003418 <HAL_RCC_ClockConfig+0x104>
 8003416:	e78b      	b.n	8003330 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003418:	f7fe f80e 	bl	8001438 <HAL_GetTick>
 800341c:	1bc0      	subs	r0, r0, r7
 800341e:	4548      	cmp	r0, r9
 8003420:	d9f4      	bls.n	800340c <HAL_RCC_ClockConfig+0xf8>
        return HAL_TIMEOUT;
 8003422:	2003      	movs	r0, #3
 8003424:	e7df      	b.n	80033e6 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003426:	482b      	ldr	r0, [pc, #172]	; (80034d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003428:	692b      	ldr	r3, [r5, #16]
 800342a:	68c1      	ldr	r1, [r0, #12]
 800342c:	4a2f      	ldr	r2, [pc, #188]	; (80034ec <HAL_RCC_ClockConfig+0x1d8>)
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	400a      	ands	r2, r1
 8003432:	4313      	orrs	r3, r2
 8003434:	60c3      	str	r3, [r0, #12]
 8003436:	e7c7      	b.n	80033c8 <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003438:	019b      	lsls	r3, r3, #6
 800343a:	d492      	bmi.n	8003362 <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 800343c:	2001      	movs	r0, #1
 800343e:	e7d2      	b.n	80033e6 <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003440:	6833      	ldr	r3, [r6, #0]
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003442:	2701      	movs	r7, #1
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003444:	4393      	bics	r3, r2
 8003446:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003448:	f7fd fff6 	bl	8001438 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800344c:	4b22      	ldr	r3, [pc, #136]	; (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
    tickstart = HAL_GetTick();
 800344e:	0004      	movs	r4, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003450:	4698      	mov	r8, r3
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003452:	6833      	ldr	r3, [r6, #0]
 8003454:	421f      	tst	r7, r3
 8003456:	d0ab      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003458:	f7fd ffee 	bl	8001438 <HAL_GetTick>
 800345c:	1b00      	subs	r0, r0, r4
 800345e:	4540      	cmp	r0, r8
 8003460:	d9f7      	bls.n	8003452 <HAL_RCC_ClockConfig+0x13e>
        return HAL_TIMEOUT;
 8003462:	2003      	movs	r0, #3
 8003464:	e7bf      	b.n	80033e6 <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003466:	330a      	adds	r3, #10
 8003468:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800346a:	4b1b      	ldr	r3, [pc, #108]	; (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 800346c:	4699      	mov	r9, r3
 800346e:	e004      	b.n	800347a <HAL_RCC_ClockConfig+0x166>
 8003470:	f7fd ffe2 	bl	8001438 <HAL_GetTick>
 8003474:	1bc0      	subs	r0, r0, r7
 8003476:	4548      	cmp	r0, r9
 8003478:	d8d3      	bhi.n	8003422 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800347a:	4642      	mov	r2, r8
 800347c:	68f3      	ldr	r3, [r6, #12]
 800347e:	4013      	ands	r3, r2
 8003480:	2b08      	cmp	r3, #8
 8003482:	d1f5      	bne.n	8003470 <HAL_RCC_ClockConfig+0x15c>
 8003484:	e78e      	b.n	80033a4 <HAL_RCC_ClockConfig+0x90>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003486:	3309      	adds	r3, #9
 8003488:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800348a:	4b13      	ldr	r3, [pc, #76]	; (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 800348c:	4699      	mov	r9, r3
 800348e:	e004      	b.n	800349a <HAL_RCC_ClockConfig+0x186>
 8003490:	f7fd ffd2 	bl	8001438 <HAL_GetTick>
 8003494:	1bc0      	subs	r0, r0, r7
 8003496:	4548      	cmp	r0, r9
 8003498:	d8c3      	bhi.n	8003422 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800349a:	4642      	mov	r2, r8
 800349c:	68f3      	ldr	r3, [r6, #12]
 800349e:	4013      	ands	r3, r2
 80034a0:	2b0c      	cmp	r3, #12
 80034a2:	d1f5      	bne.n	8003490 <HAL_RCC_ClockConfig+0x17c>
 80034a4:	e77e      	b.n	80033a4 <HAL_RCC_ClockConfig+0x90>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034a6:	075b      	lsls	r3, r3, #29
 80034a8:	d500      	bpl.n	80034ac <HAL_RCC_ClockConfig+0x198>
 80034aa:	e75a      	b.n	8003362 <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 80034ac:	2001      	movs	r0, #1
 80034ae:	e79a      	b.n	80033e6 <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80034b0:	330b      	adds	r3, #11
 80034b2:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b4:	4b08      	ldr	r3, [pc, #32]	; (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 80034b6:	4699      	mov	r9, r3
 80034b8:	e004      	b.n	80034c4 <HAL_RCC_ClockConfig+0x1b0>
 80034ba:	f7fd ffbd 	bl	8001438 <HAL_GetTick>
 80034be:	1bc0      	subs	r0, r0, r7
 80034c0:	4548      	cmp	r0, r9
 80034c2:	d8ae      	bhi.n	8003422 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80034c4:	4642      	mov	r2, r8
 80034c6:	68f3      	ldr	r3, [r6, #12]
 80034c8:	4013      	ands	r3, r2
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d1f5      	bne.n	80034ba <HAL_RCC_ClockConfig+0x1a6>
 80034ce:	e769      	b.n	80033a4 <HAL_RCC_ClockConfig+0x90>
 80034d0:	40022000 	.word	0x40022000
 80034d4:	40021000 	.word	0x40021000
 80034d8:	00001388 	.word	0x00001388
 80034dc:	fffff8ff 	.word	0xfffff8ff
 80034e0:	0800add0 	.word	0x0800add0
 80034e4:	20000000 	.word	0x20000000
 80034e8:	20000008 	.word	0x20000008
 80034ec:	ffffc7ff 	.word	0xffffc7ff

080034f0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034f0:	4b04      	ldr	r3, [pc, #16]	; (8003504 <HAL_RCC_GetPCLK1Freq+0x14>)
 80034f2:	4a05      	ldr	r2, [pc, #20]	; (8003508 <HAL_RCC_GetPCLK1Freq+0x18>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	055b      	lsls	r3, r3, #21
 80034f8:	0f5b      	lsrs	r3, r3, #29
 80034fa:	5cd3      	ldrb	r3, [r2, r3]
 80034fc:	4a03      	ldr	r2, [pc, #12]	; (800350c <HAL_RCC_GetPCLK1Freq+0x1c>)
 80034fe:	6810      	ldr	r0, [r2, #0]
 8003500:	40d8      	lsrs	r0, r3
}
 8003502:	4770      	bx	lr
 8003504:	40021000 	.word	0x40021000
 8003508:	0800ade0 	.word	0x0800ade0
 800350c:	20000000 	.word	0x20000000

08003510 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003510:	4b04      	ldr	r3, [pc, #16]	; (8003524 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003512:	4a05      	ldr	r2, [pc, #20]	; (8003528 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	049b      	lsls	r3, r3, #18
 8003518:	0f5b      	lsrs	r3, r3, #29
 800351a:	5cd3      	ldrb	r3, [r2, r3]
 800351c:	4a03      	ldr	r2, [pc, #12]	; (800352c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800351e:	6810      	ldr	r0, [r2, #0]
 8003520:	40d8      	lsrs	r0, r3
}
 8003522:	4770      	bx	lr
 8003524:	40021000 	.word	0x40021000
 8003528:	0800ade0 	.word	0x0800ade0
 800352c:	20000000 	.word	0x20000000

08003530 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003530:	2282      	movs	r2, #130	; 0x82
{
 8003532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003534:	46ce      	mov	lr, r9
 8003536:	4647      	mov	r7, r8
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003538:	6803      	ldr	r3, [r0, #0]
 800353a:	0112      	lsls	r2, r2, #4
{
 800353c:	0004      	movs	r4, r0
 800353e:	b580      	push	{r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003540:	4213      	tst	r3, r2
 8003542:	d068      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xe6>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003544:	2380      	movs	r3, #128	; 0x80
 8003546:	4a97      	ldr	r2, [pc, #604]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003548:	055b      	lsls	r3, r3, #21
 800354a:	6b91      	ldr	r1, [r2, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 800354c:	2700      	movs	r7, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800354e:	4219      	tst	r1, r3
 8003550:	d100      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8003552:	e09b      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x15c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003554:	2680      	movs	r6, #128	; 0x80
 8003556:	4d94      	ldr	r5, [pc, #592]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003558:	0076      	lsls	r6, r6, #1
 800355a:	682b      	ldr	r3, [r5, #0]
 800355c:	4233      	tst	r3, r6
 800355e:	d100      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003560:	e09f      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x172>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003562:	4b90      	ldr	r3, [pc, #576]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003564:	21c0      	movs	r1, #192	; 0xc0
 8003566:	681a      	ldr	r2, [r3, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003568:	6863      	ldr	r3, [r4, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800356a:	0389      	lsls	r1, r1, #14
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800356c:	0018      	movs	r0, r3
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800356e:	400a      	ands	r2, r1
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003570:	4008      	ands	r0, r1
 8003572:	4290      	cmp	r0, r2
 8003574:	d100      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8003576:	e0e2      	b.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x20e>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003578:	22c0      	movs	r2, #192	; 0xc0
 800357a:	0019      	movs	r1, r3
 800357c:	0292      	lsls	r2, r2, #10
 800357e:	4011      	ands	r1, r2
 8003580:	4291      	cmp	r1, r2
 8003582:	d100      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003584:	e104      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x260>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003586:	4887      	ldr	r0, [pc, #540]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003588:	22c0      	movs	r2, #192	; 0xc0
 800358a:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800358c:	0292      	lsls	r2, r2, #10
 800358e:	000d      	movs	r5, r1
 8003590:	4015      	ands	r5, r2

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003592:	4211      	tst	r1, r2
 8003594:	d100      	bne.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003596:	e0a9      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x1bc>
 8003598:	4013      	ands	r3, r2
 800359a:	42ab      	cmp	r3, r5
 800359c:	d100      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x70>
 800359e:	e0d4      	b.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x21a>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80035a0:	2120      	movs	r1, #32
 80035a2:	000a      	movs	r2, r1
 80035a4:	6823      	ldr	r3, [r4, #0]
 80035a6:	401a      	ands	r2, r3
 80035a8:	4219      	tst	r1, r3
 80035aa:	d100      	bne.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
 80035ac:	e0ce      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x21c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80035ae:	6d06      	ldr	r6, [r0, #80]	; 0x50

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035b0:	6d05      	ldr	r5, [r0, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80035b2:	497e      	ldr	r1, [pc, #504]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
      __HAL_RCC_BACKUPRESET_FORCE();
 80035b4:	46ac      	mov	ip, r5
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80035b6:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_FORCE();
 80035b8:	2580      	movs	r5, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80035ba:	4688      	mov	r8, r1
      __HAL_RCC_BACKUPRESET_FORCE();
 80035bc:	4661      	mov	r1, ip
 80035be:	032d      	lsls	r5, r5, #12
 80035c0:	430d      	orrs	r5, r1
 80035c2:	6505      	str	r5, [r0, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035c4:	6d05      	ldr	r5, [r0, #80]	; 0x50
 80035c6:	497a      	ldr	r1, [pc, #488]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80035c8:	400d      	ands	r5, r1

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80035ca:	4641      	mov	r1, r8
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035cc:	6505      	str	r5, [r0, #80]	; 0x50
      RCC->CSR = temp_reg;
 80035ce:	6501      	str	r1, [r0, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80035d0:	05f1      	lsls	r1, r6, #23
 80035d2:	d500      	bpl.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 80035d4:	e077      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80035d6:	0519      	lsls	r1, r3, #20
 80035d8:	d400      	bmi.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xac>
 80035da:	e090      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80035dc:	21c0      	movs	r1, #192	; 0xc0
 80035de:	68a0      	ldr	r0, [r4, #8]
 80035e0:	0289      	lsls	r1, r1, #10
 80035e2:	4001      	ands	r1, r0
 80035e4:	25c0      	movs	r5, #192	; 0xc0
 80035e6:	02ad      	lsls	r5, r5, #10
 80035e8:	42a9      	cmp	r1, r5
 80035ea:	d10a      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0xd2>
 80035ec:	4d6d      	ldr	r5, [pc, #436]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80035ee:	4e71      	ldr	r6, [pc, #452]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80035f0:	46ac      	mov	ip, r5
 80035f2:	682d      	ldr	r5, [r5, #0]
 80035f4:	4035      	ands	r5, r6
 80035f6:	26c0      	movs	r6, #192	; 0xc0
 80035f8:	03b6      	lsls	r6, r6, #14
 80035fa:	4030      	ands	r0, r6
 80035fc:	4328      	orrs	r0, r5
 80035fe:	4665      	mov	r5, ip
 8003600:	6028      	str	r0, [r5, #0]
 8003602:	4d68      	ldr	r5, [pc, #416]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003604:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8003606:	4301      	orrs	r1, r0
 8003608:	6529      	str	r1, [r5, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800360a:	2a00      	cmp	r2, #0
 800360c:	d000      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xe0>
 800360e:	e076      	b.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003610:	2f01      	cmp	r7, #1
 8003612:	d100      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xe6>
 8003614:	e08a      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003616:	07da      	lsls	r2, r3, #31
 8003618:	d506      	bpl.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800361a:	2003      	movs	r0, #3
 800361c:	4961      	ldr	r1, [pc, #388]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 800361e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8003620:	4382      	bics	r2, r0
 8003622:	68e0      	ldr	r0, [r4, #12]
 8003624:	4302      	orrs	r2, r0
 8003626:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003628:	079a      	lsls	r2, r3, #30
 800362a:	d506      	bpl.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800362c:	200c      	movs	r0, #12
 800362e:	495d      	ldr	r1, [pc, #372]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003630:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8003632:	4382      	bics	r2, r0
 8003634:	6920      	ldr	r0, [r4, #16]
 8003636:	4302      	orrs	r2, r0
 8003638:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800363a:	075a      	lsls	r2, r3, #29
 800363c:	d506      	bpl.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800363e:	4959      	ldr	r1, [pc, #356]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003640:	485d      	ldr	r0, [pc, #372]	; (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003642:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8003644:	4002      	ands	r2, r0
 8003646:	6960      	ldr	r0, [r4, #20]
 8003648:	4302      	orrs	r2, r0
 800364a:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800364c:	071a      	lsls	r2, r3, #28
 800364e:	d506      	bpl.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003650:	4954      	ldr	r1, [pc, #336]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003652:	485a      	ldr	r0, [pc, #360]	; (80037bc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003654:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8003656:	4002      	ands	r2, r0
 8003658:	69a0      	ldr	r0, [r4, #24]
 800365a:	4302      	orrs	r2, r0
 800365c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800365e:	065a      	lsls	r2, r3, #25
 8003660:	d506      	bpl.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003662:	4950      	ldr	r1, [pc, #320]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003664:	4856      	ldr	r0, [pc, #344]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003666:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8003668:	4002      	ands	r2, r0
 800366a:	6a20      	ldr	r0, [r4, #32]
 800366c:	4302      	orrs	r2, r0
 800366e:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8003670:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003672:	061b      	lsls	r3, r3, #24
 8003674:	d506      	bpl.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x154>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003676:	4a4b      	ldr	r2, [pc, #300]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003678:	4952      	ldr	r1, [pc, #328]	; (80037c4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800367a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800367c:	400b      	ands	r3, r1
 800367e:	69e1      	ldr	r1, [r4, #28]
 8003680:	430b      	orrs	r3, r1
 8003682:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8003684:	bcc0      	pop	{r6, r7}
 8003686:	46b9      	mov	r9, r7
 8003688:	46b0      	mov	r8, r6
 800368a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368c:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_PWR_CLK_ENABLE();
 800368e:	6b91      	ldr	r1, [r2, #56]	; 0x38
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003690:	4d45      	ldr	r5, [pc, #276]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x278>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8003692:	430b      	orrs	r3, r1
 8003694:	6393      	str	r3, [r2, #56]	; 0x38
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003696:	682b      	ldr	r3, [r5, #0]
 8003698:	0076      	lsls	r6, r6, #1
      pwrclkchanged = SET;
 800369a:	3701      	adds	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369c:	4233      	tst	r3, r6
 800369e:	d000      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 80036a0:	e75f      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x32>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036a2:	682b      	ldr	r3, [r5, #0]
 80036a4:	4333      	orrs	r3, r6
 80036a6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80036a8:	f7fd fec6 	bl	8001438 <HAL_GetTick>
 80036ac:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ae:	682b      	ldr	r3, [r5, #0]
 80036b0:	4233      	tst	r3, r6
 80036b2:	d000      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80036b4:	e755      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036b6:	f7fd febf 	bl	8001438 <HAL_GetTick>
 80036ba:	4643      	mov	r3, r8
 80036bc:	1ac0      	subs	r0, r0, r3
 80036be:	2864      	cmp	r0, #100	; 0x64
 80036c0:	d9f5      	bls.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x17e>
          return HAL_TIMEOUT;
 80036c2:	2003      	movs	r0, #3
 80036c4:	e7de      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x154>
        tickstart = HAL_GetTick();
 80036c6:	f7fd feb7 	bl	8001438 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036ca:	2680      	movs	r6, #128	; 0x80
 80036cc:	4b35      	ldr	r3, [pc, #212]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
        tickstart = HAL_GetTick();
 80036ce:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036d0:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036d2:	4b3d      	ldr	r3, [pc, #244]	; (80037c8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036d4:	00b6      	lsls	r6, r6, #2
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036d6:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036d8:	e004      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036da:	f7fd fead 	bl	8001438 <HAL_GetTick>
 80036de:	1b40      	subs	r0, r0, r5
 80036e0:	4548      	cmp	r0, r9
 80036e2:	d8ee      	bhi.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036e4:	4643      	mov	r3, r8
 80036e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e8:	4233      	tst	r3, r6
 80036ea:	d0f6      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80036ec:	6823      	ldr	r3, [r4, #0]
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036ee:	2220      	movs	r2, #32
 80036f0:	401a      	ands	r2, r3
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80036f2:	0519      	lsls	r1, r3, #20
 80036f4:	d500      	bpl.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80036f6:	e771      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xac>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036f8:	2a00      	cmp	r2, #0
 80036fa:	d100      	bne.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80036fc:	e788      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036fe:	6861      	ldr	r1, [r4, #4]
 8003700:	20c0      	movs	r0, #192	; 0xc0
 8003702:	000a      	movs	r2, r1
 8003704:	0280      	lsls	r0, r0, #10
 8003706:	4002      	ands	r2, r0
 8003708:	4282      	cmp	r2, r0
 800370a:	d108      	bne.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800370c:	4d25      	ldr	r5, [pc, #148]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 800370e:	4e29      	ldr	r6, [pc, #164]	; (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003710:	6828      	ldr	r0, [r5, #0]
 8003712:	4030      	ands	r0, r6
 8003714:	26c0      	movs	r6, #192	; 0xc0
 8003716:	03b6      	lsls	r6, r6, #14
 8003718:	4031      	ands	r1, r6
 800371a:	4301      	orrs	r1, r0
 800371c:	6029      	str	r1, [r5, #0]
 800371e:	4921      	ldr	r1, [pc, #132]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003720:	6d08      	ldr	r0, [r1, #80]	; 0x50
 8003722:	4302      	orrs	r2, r0
 8003724:	650a      	str	r2, [r1, #80]	; 0x50
    if(pwrclkchanged == SET)
 8003726:	2f01      	cmp	r7, #1
 8003728:	d000      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 800372a:	e774      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_PWR_CLK_DISABLE();
 800372c:	491d      	ldr	r1, [pc, #116]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 800372e:	4827      	ldr	r0, [pc, #156]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003730:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 8003732:	4002      	ands	r2, r0
 8003734:	638a      	str	r2, [r1, #56]	; 0x38
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003736:	07da      	lsls	r2, r3, #31
 8003738:	d400      	bmi.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800373a:	e775      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 800373c:	e76d      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xea>
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800373e:	68a2      	ldr	r2, [r4, #8]
 8003740:	4011      	ands	r1, r2
 8003742:	4281      	cmp	r1, r0
 8003744:	d000      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003746:	e717      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8003748:	e71d      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x56>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800374a:	6823      	ldr	r3, [r4, #0]
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800374c:	21c0      	movs	r1, #192	; 0xc0
 800374e:	68a0      	ldr	r0, [r4, #8]
 8003750:	0289      	lsls	r1, r1, #10
 8003752:	4001      	ands	r1, r0
 8003754:	42a9      	cmp	r1, r5
 8003756:	d0ca      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x1be>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003758:	051a      	lsls	r2, r3, #20
 800375a:	d520      	bpl.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x26e>
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800375c:	4a11      	ldr	r2, [pc, #68]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 800375e:	6d15      	ldr	r5, [r2, #80]	; 0x50
 8003760:	46ac      	mov	ip, r5
 8003762:	4666      	mov	r6, ip
 8003764:	4d11      	ldr	r5, [pc, #68]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003766:	4035      	ands	r5, r6
      __HAL_RCC_BACKUPRESET_FORCE();
 8003768:	6d16      	ldr	r6, [r2, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800376a:	46a9      	mov	r9, r5
      __HAL_RCC_BACKUPRESET_FORCE();
 800376c:	46b0      	mov	r8, r6
 800376e:	2680      	movs	r6, #128	; 0x80
 8003770:	4645      	mov	r5, r8
 8003772:	0336      	lsls	r6, r6, #12
 8003774:	432e      	orrs	r6, r5
 8003776:	6516      	str	r6, [r2, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003778:	6d16      	ldr	r6, [r2, #80]	; 0x50
 800377a:	4d0d      	ldr	r5, [pc, #52]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800377c:	402e      	ands	r6, r5
      RCC->CSR = temp_reg;
 800377e:	464d      	mov	r5, r9
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003780:	6516      	str	r6, [r2, #80]	; 0x50
      RCC->CSR = temp_reg;
 8003782:	6515      	str	r5, [r2, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003784:	4662      	mov	r2, ip
 8003786:	05d2      	lsls	r2, r2, #23
 8003788:	d49d      	bmi.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800378a:	2220      	movs	r2, #32
 800378c:	401a      	ands	r2, r3
 800378e:	e729      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003790:	4a04      	ldr	r2, [pc, #16]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	0392      	lsls	r2, r2, #14
 8003796:	d400      	bmi.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003798:	e6f5      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x56>
          return HAL_ERROR;
 800379a:	2001      	movs	r0, #1
 800379c:	e772      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x154>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800379e:	2220      	movs	r2, #32
 80037a0:	401a      	ands	r2, r3
 80037a2:	e732      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0xda>
 80037a4:	40021000 	.word	0x40021000
 80037a8:	40007000 	.word	0x40007000
 80037ac:	fffcffff 	.word	0xfffcffff
 80037b0:	fff7ffff 	.word	0xfff7ffff
 80037b4:	ffcfffff 	.word	0xffcfffff
 80037b8:	fffff3ff 	.word	0xfffff3ff
 80037bc:	ffffcfff 	.word	0xffffcfff
 80037c0:	fbffffff 	.word	0xfbffffff
 80037c4:	fff3ffff 	.word	0xfff3ffff
 80037c8:	00001388 	.word	0x00001388
 80037cc:	efffffff 	.word	0xefffffff

080037d0 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80037d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037d2:	46c6      	mov	lr, r8
 80037d4:	b500      	push	{lr}
 80037d6:	001d      	movs	r5, r3
 80037d8:	0016      	movs	r6, r2
 80037da:	b082      	sub	sp, #8
 80037dc:	000c      	movs	r4, r1
 80037de:	0007      	movs	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037e0:	f7fd fe2a 	bl	8001438 <HAL_GetTick>
 80037e4:	19ad      	adds	r5, r5, r6
 80037e6:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 80037e8:	f7fd fe26 	bl	8001438 <HAL_GetTick>
 80037ec:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80037ee:	4b29      	ldr	r3, [pc, #164]	; (8003894 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xc4>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	015b      	lsls	r3, r3, #5
 80037f4:	0d1b      	lsrs	r3, r3, #20
 80037f6:	436b      	muls	r3, r5
 80037f8:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037fa:	6839      	ldr	r1, [r7, #0]
 80037fc:	1c73      	adds	r3, r6, #1
 80037fe:	d108      	bne.n	8003812 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x42>
 8003800:	688b      	ldr	r3, [r1, #8]
 8003802:	4023      	ands	r3, r4
 8003804:	42a3      	cmp	r3, r4
 8003806:	d0fb      	beq.n	8003800 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x30>
      }
      count--;
    }
  }

  return HAL_OK;
 8003808:	2000      	movs	r0, #0
}
 800380a:	b002      	add	sp, #8
 800380c:	bc80      	pop	{r7}
 800380e:	46b8      	mov	r8, r7
 8003810:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003812:	688b      	ldr	r3, [r1, #8]
 8003814:	4023      	ands	r3, r4
 8003816:	429c      	cmp	r4, r3
 8003818:	d1f6      	bne.n	8003808 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800381a:	f7fd fe0d 	bl	8001438 <HAL_GetTick>
 800381e:	4643      	mov	r3, r8
 8003820:	1ac0      	subs	r0, r0, r3
 8003822:	42a8      	cmp	r0, r5
 8003824:	d208      	bcs.n	8003838 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
      if (count == 0U)
 8003826:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8003828:	1e5a      	subs	r2, r3, #1
 800382a:	4193      	sbcs	r3, r2
 800382c:	425b      	negs	r3, r3
 800382e:	401d      	ands	r5, r3
      count--;
 8003830:	9b01      	ldr	r3, [sp, #4]
 8003832:	3b01      	subs	r3, #1
 8003834:	9301      	str	r3, [sp, #4]
 8003836:	e7e0      	b.n	80037fa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003838:	21e0      	movs	r1, #224	; 0xe0
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	438a      	bics	r2, r1
 8003840:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003842:	2282      	movs	r2, #130	; 0x82
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	0052      	lsls	r2, r2, #1
 8003848:	4291      	cmp	r1, r2
 800384a:	d014      	beq.n	8003876 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa6>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800384c:	2180      	movs	r1, #128	; 0x80
 800384e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003850:	0189      	lsls	r1, r1, #6
 8003852:	428a      	cmp	r2, r1
 8003854:	d007      	beq.n	8003866 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x96>
        hspi->State = HAL_SPI_STATE_READY;
 8003856:	2351      	movs	r3, #81	; 0x51
 8003858:	2201      	movs	r2, #1
 800385a:	54fa      	strb	r2, [r7, r3]
        __HAL_UNLOCK(hspi);
 800385c:	2200      	movs	r2, #0
 800385e:	3b01      	subs	r3, #1
 8003860:	2003      	movs	r0, #3
 8003862:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 8003864:	e7d1      	b.n	800380a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3a>
          SPI_RESET_CRC(hspi);
 8003866:	6819      	ldr	r1, [r3, #0]
 8003868:	480b      	ldr	r0, [pc, #44]	; (8003898 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xc8>)
 800386a:	4001      	ands	r1, r0
 800386c:	6019      	str	r1, [r3, #0]
 800386e:	6819      	ldr	r1, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	e7ef      	b.n	8003856 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x86>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003876:	2180      	movs	r1, #128	; 0x80
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	0209      	lsls	r1, r1, #8
 800387c:	428a      	cmp	r2, r1
 800387e:	d003      	beq.n	8003888 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003880:	2180      	movs	r1, #128	; 0x80
 8003882:	00c9      	lsls	r1, r1, #3
 8003884:	428a      	cmp	r2, r1
 8003886:	d1e1      	bne.n	800384c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7c>
          __HAL_SPI_DISABLE(hspi);
 8003888:	2140      	movs	r1, #64	; 0x40
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	438a      	bics	r2, r1
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	e7dc      	b.n	800384c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7c>
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	20000000 	.word	0x20000000
 8003898:	ffffdfff 	.word	0xffffdfff

0800389c <HAL_SPI_Init>:
{
 800389c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800389e:	46ce      	mov	lr, r9
 80038a0:	4647      	mov	r7, r8
 80038a2:	0004      	movs	r4, r0
 80038a4:	b580      	push	{r7, lr}
  if (hspi == NULL)
 80038a6:	2800      	cmp	r0, #0
 80038a8:	d06a      	beq.n	8003980 <HAL_SPI_Init+0xe4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038aa:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80038ac:	2800      	cmp	r0, #0
 80038ae:	d04f      	beq.n	8003950 <HAL_SPI_Init+0xb4>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038b0:	2300      	movs	r3, #0
 80038b2:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038b4:	6163      	str	r3, [r4, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038b6:	2300      	movs	r3, #0
 80038b8:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80038ba:	3351      	adds	r3, #81	; 0x51
 80038bc:	5ce3      	ldrb	r3, [r4, r3]
 80038be:	2600      	movs	r6, #0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d052      	beq.n	800396a <HAL_SPI_Init+0xce>
  hspi->State = HAL_SPI_STATE_BUSY;
 80038c4:	2351      	movs	r3, #81	; 0x51
 80038c6:	4698      	mov	r8, r3
 80038c8:	4642      	mov	r2, r8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038ca:	2784      	movs	r7, #132	; 0x84
  hspi->State = HAL_SPI_STATE_BUSY;
 80038cc:	3b4f      	subs	r3, #79	; 0x4f
 80038ce:	54a3      	strb	r3, [r4, r2]
  __HAL_SPI_DISABLE(hspi);
 80038d0:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038d2:	6865      	ldr	r5, [r4, #4]
  __HAL_SPI_DISABLE(hspi);
 80038d4:	6811      	ldr	r1, [r2, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80038d6:	469c      	mov	ip, r3
  __HAL_SPI_DISABLE(hspi);
 80038d8:	333e      	adds	r3, #62	; 0x3e
 80038da:	4399      	bics	r1, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038dc:	33c4      	adds	r3, #196	; 0xc4
 80038de:	402b      	ands	r3, r5
 80038e0:	68a5      	ldr	r5, [r4, #8]
 80038e2:	023f      	lsls	r7, r7, #8
 80038e4:	402f      	ands	r7, r5
 80038e6:	433b      	orrs	r3, r7
 80038e8:	2780      	movs	r7, #128	; 0x80
 80038ea:	68e5      	ldr	r5, [r4, #12]
 80038ec:	013f      	lsls	r7, r7, #4
 80038ee:	402f      	ands	r7, r5
 80038f0:	433b      	orrs	r3, r7
 80038f2:	4667      	mov	r7, ip
 80038f4:	6925      	ldr	r5, [r4, #16]
  __HAL_SPI_DISABLE(hspi);
 80038f6:	6011      	str	r1, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038f8:	402f      	ands	r7, r5
 80038fa:	2501      	movs	r5, #1
 80038fc:	46a9      	mov	r9, r5
 80038fe:	433b      	orrs	r3, r7
 8003900:	464f      	mov	r7, r9
 8003902:	6965      	ldr	r5, [r4, #20]
 8003904:	69a1      	ldr	r1, [r4, #24]
 8003906:	403d      	ands	r5, r7
 8003908:	432b      	orrs	r3, r5
 800390a:	2580      	movs	r5, #128	; 0x80
 800390c:	00ad      	lsls	r5, r5, #2
 800390e:	400d      	ands	r5, r1
 8003910:	432b      	orrs	r3, r5
 8003912:	2538      	movs	r5, #56	; 0x38
 8003914:	69e7      	ldr	r7, [r4, #28]
 8003916:	403d      	ands	r5, r7
 8003918:	432b      	orrs	r3, r5
 800391a:	2580      	movs	r5, #128	; 0x80
 800391c:	6a27      	ldr	r7, [r4, #32]
 800391e:	403d      	ands	r5, r7
 8003920:	432b      	orrs	r3, r5
 8003922:	4333      	orrs	r3, r6
 8003924:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003926:	0c0b      	lsrs	r3, r1, #16
 8003928:	2104      	movs	r1, #4
 800392a:	4019      	ands	r1, r3
 800392c:	2310      	movs	r3, #16
 800392e:	4018      	ands	r0, r3
 8003930:	4308      	orrs	r0, r1
 8003932:	6050      	str	r0, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003934:	69d3      	ldr	r3, [r2, #28]
 8003936:	4913      	ldr	r1, [pc, #76]	; (8003984 <HAL_SPI_Init+0xe8>)
  return HAL_OK;
 8003938:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800393a:	400b      	ands	r3, r1
 800393c:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800393e:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8003940:	464a      	mov	r2, r9
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003942:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003944:	4643      	mov	r3, r8
 8003946:	54e2      	strb	r2, [r4, r3]
}
 8003948:	bcc0      	pop	{r6, r7}
 800394a:	46b9      	mov	r9, r7
 800394c:	46b0      	mov	r8, r6
 800394e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003950:	2382      	movs	r3, #130	; 0x82
 8003952:	6862      	ldr	r2, [r4, #4]
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	429a      	cmp	r2, r3
 8003958:	d0ad      	beq.n	80038b6 <HAL_SPI_Init+0x1a>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800395a:	2300      	movs	r3, #0
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800395c:	61e0      	str	r0, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800395e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003960:	3351      	adds	r3, #81	; 0x51
 8003962:	5ce3      	ldrb	r3, [r4, r3]
 8003964:	2600      	movs	r6, #0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1ac      	bne.n	80038c4 <HAL_SPI_Init+0x28>
    hspi->Lock = HAL_UNLOCKED;
 800396a:	3350      	adds	r3, #80	; 0x50
 800396c:	54e6      	strb	r6, [r4, r3]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800396e:	2680      	movs	r6, #128	; 0x80
    HAL_SPI_MspInit(hspi);
 8003970:	0020      	movs	r0, r4
 8003972:	f7fd fbef 	bl	8001154 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003976:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003978:	01b6      	lsls	r6, r6, #6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800397a:	6a60      	ldr	r0, [r4, #36]	; 0x24
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800397c:	401e      	ands	r6, r3
 800397e:	e7a1      	b.n	80038c4 <HAL_SPI_Init+0x28>
    return HAL_ERROR;
 8003980:	2001      	movs	r0, #1
 8003982:	e7e1      	b.n	8003948 <HAL_SPI_Init+0xac>
 8003984:	fffff7ff 	.word	0xfffff7ff

08003988 <HAL_SPI_Transmit>:
{
 8003988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800398a:	464f      	mov	r7, r9
 800398c:	46d6      	mov	lr, sl
 800398e:	4646      	mov	r6, r8
 8003990:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 8003992:	2350      	movs	r3, #80	; 0x50
{
 8003994:	b5c0      	push	{r6, r7, lr}
 8003996:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8003998:	5cc2      	ldrb	r2, [r0, r3]
{
 800399a:	0004      	movs	r4, r0
 800399c:	000f      	movs	r7, r1
 800399e:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 80039a0:	2a01      	cmp	r2, #1
 80039a2:	d100      	bne.n	80039a6 <HAL_SPI_Transmit+0x1e>
 80039a4:	e08b      	b.n	8003abe <HAL_SPI_Transmit+0x136>
 80039a6:	2201      	movs	r2, #1
 80039a8:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80039aa:	f7fd fd45 	bl	8001438 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80039ae:	2251      	movs	r2, #81	; 0x51
 80039b0:	5ca3      	ldrb	r3, [r4, r2]
  tickstart = HAL_GetTick();
 80039b2:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80039b4:	b2de      	uxtb	r6, r3
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d00a      	beq.n	80039d0 <HAL_SPI_Transmit+0x48>
    errorcode = HAL_BUSY;
 80039ba:	2602      	movs	r6, #2
  __HAL_UNLOCK(hspi);
 80039bc:	2350      	movs	r3, #80	; 0x50
 80039be:	2200      	movs	r2, #0
 80039c0:	54e2      	strb	r2, [r4, r3]
}
 80039c2:	0030      	movs	r0, r6
 80039c4:	b002      	add	sp, #8
 80039c6:	bce0      	pop	{r5, r6, r7}
 80039c8:	46ba      	mov	sl, r7
 80039ca:	46b1      	mov	r9, r6
 80039cc:	46a8      	mov	r8, r5
 80039ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 80039d0:	2f00      	cmp	r7, #0
 80039d2:	d0f3      	beq.n	80039bc <HAL_SPI_Transmit+0x34>
 80039d4:	464b      	mov	r3, r9
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0f0      	beq.n	80039bc <HAL_SPI_Transmit+0x34>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039da:	2303      	movs	r3, #3
 80039dc:	54a3      	strb	r3, [r4, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039de:	2300      	movs	r3, #0
  hspi->TxXferSize  = Size;
 80039e0:	464a      	mov	r2, r9
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039e2:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039e4:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 80039e6:	86e2      	strh	r2, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 80039e8:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80039ea:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80039ec:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 80039ee:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039f0:	2380      	movs	r3, #128	; 0x80
  hspi->TxXferSize  = Size;
 80039f2:	86a2      	strh	r2, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039f4:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039f6:	6327      	str	r7, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039f8:	021b      	lsls	r3, r3, #8
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d061      	beq.n	8003ac2 <HAL_SPI_Transmit+0x13a>
    __HAL_SPI_DISABLE(hspi);
 80039fe:	6822      	ldr	r2, [r4, #0]
 8003a00:	0010      	movs	r0, r2
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a02:	2340      	movs	r3, #64	; 0x40
 8003a04:	6811      	ldr	r1, [r2, #0]
 8003a06:	420b      	tst	r3, r1
 8003a08:	d102      	bne.n	8003a10 <HAL_SPI_Transmit+0x88>
    __HAL_SPI_ENABLE(hspi);
 8003a0a:	6811      	ldr	r1, [r2, #0]
 8003a0c:	430b      	orrs	r3, r1
 8003a0e:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a10:	2380      	movs	r3, #128	; 0x80
 8003a12:	68e1      	ldr	r1, [r4, #12]
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	4299      	cmp	r1, r3
 8003a18:	d100      	bne.n	8003a1c <HAL_SPI_Transmit+0x94>
 8003a1a:	e08c      	b.n	8003b36 <HAL_SPI_Transmit+0x1ae>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a1c:	6863      	ldr	r3, [r4, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d077      	beq.n	8003b12 <HAL_SPI_Transmit+0x18a>
 8003a22:	464b      	mov	r3, r9
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d074      	beq.n	8003b12 <HAL_SPI_Transmit+0x18a>
    while (hspi->TxXferCount > 0U)
 8003a28:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d017      	beq.n	8003a5e <HAL_SPI_Transmit+0xd6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a2e:	2202      	movs	r2, #2
 8003a30:	2d00      	cmp	r5, #0
 8003a32:	d100      	bne.n	8003a36 <HAL_SPI_Transmit+0xae>
 8003a34:	e0d9      	b.n	8003bea <HAL_SPI_Transmit+0x262>
 8003a36:	2702      	movs	r7, #2
 8003a38:	1c6b      	adds	r3, r5, #1
 8003a3a:	d15b      	bne.n	8003af4 <HAL_SPI_Transmit+0x16c>
 8003a3c:	6823      	ldr	r3, [r4, #0]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	4217      	tst	r7, r2
 8003a42:	d070      	beq.n	8003b26 <HAL_SPI_Transmit+0x19e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a44:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003a46:	7812      	ldrb	r2, [r2, #0]
 8003a48:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8003a4a:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003a4e:	3901      	subs	r1, #1
 8003a50:	b289      	uxth	r1, r1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a52:	3301      	adds	r3, #1
        hspi->TxXferCount--;
 8003a54:	86e1      	strh	r1, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a56:	6323      	str	r3, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8003a58:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1ee      	bne.n	8003a3c <HAL_SPI_Transmit+0xb4>
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a5e:	6863      	ldr	r3, [r4, #4]
 8003a60:	469a      	mov	sl, r3
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003a62:	4b76      	ldr	r3, [pc, #472]	; (8003c3c <HAL_SPI_Transmit+0x2b4>)
 8003a64:	4976      	ldr	r1, [pc, #472]	; (8003c40 <HAL_SPI_Transmit+0x2b8>)
 8003a66:	6818      	ldr	r0, [r3, #0]
 8003a68:	f7fc fb60 	bl	800012c <__udivsi3>
 8003a6c:	0142      	lsls	r2, r0, #5
 8003a6e:	1a12      	subs	r2, r2, r0
 8003a70:	0093      	lsls	r3, r2, #2
 8003a72:	181b      	adds	r3, r3, r0
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	9301      	str	r3, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a78:	2382      	movs	r3, #130	; 0x82
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003a7a:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	459a      	cmp	sl, r3
 8003a80:	d107      	bne.n	8003a92 <HAL_SPI_Transmit+0x10a>
 8003a82:	e0b9      	b.n	8003bf8 <HAL_SPI_Transmit+0x270>
      count--;
 8003a84:	9b01      	ldr	r3, [sp, #4]
 8003a86:	3b01      	subs	r3, #1
 8003a88:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003a8a:	6823      	ldr	r3, [r4, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	421a      	tst	r2, r3
 8003a90:	d002      	beq.n	8003a98 <HAL_SPI_Transmit+0x110>
      if (count == 0U)
 8003a92:	9b01      	ldr	r3, [sp, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1f5      	bne.n	8003a84 <HAL_SPI_Transmit+0xfc>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a98:	68a3      	ldr	r3, [r4, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d106      	bne.n	8003aac <HAL_SPI_Transmit+0x124>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	6823      	ldr	r3, [r4, #0]
 8003aa2:	68da      	ldr	r2, [r3, #12]
 8003aa4:	9200      	str	r2, [sp, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	9b00      	ldr	r3, [sp, #0]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003aac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d000      	beq.n	8003ab4 <HAL_SPI_Transmit+0x12c>
 8003ab2:	e783      	b.n	80039bc <HAL_SPI_Transmit+0x34>
    hspi->State = HAL_SPI_STATE_READY;
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	3351      	adds	r3, #81	; 0x51
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ab8:	2600      	movs	r6, #0
    hspi->State = HAL_SPI_STATE_READY;
 8003aba:	54e2      	strb	r2, [r4, r3]
 8003abc:	e77e      	b.n	80039bc <HAL_SPI_Transmit+0x34>
  __HAL_LOCK(hspi);
 8003abe:	2602      	movs	r6, #2
 8003ac0:	e77f      	b.n	80039c2 <HAL_SPI_Transmit+0x3a>
    __HAL_SPI_DISABLE(hspi);
 8003ac2:	2140      	movs	r1, #64	; 0x40
 8003ac4:	6822      	ldr	r2, [r4, #0]
 8003ac6:	6813      	ldr	r3, [r2, #0]
 8003ac8:	0010      	movs	r0, r2
 8003aca:	438b      	bics	r3, r1
 8003acc:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8003ace:	2380      	movs	r3, #128	; 0x80
 8003ad0:	6811      	ldr	r1, [r2, #0]
 8003ad2:	01db      	lsls	r3, r3, #7
 8003ad4:	430b      	orrs	r3, r1
 8003ad6:	6013      	str	r3, [r2, #0]
 8003ad8:	e793      	b.n	8003a02 <HAL_SPI_Transmit+0x7a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ada:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003adc:	7812      	ldrb	r2, [r2, #0]
 8003ade:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ae0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003ae6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003aee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0b4      	beq.n	8003a5e <HAL_SPI_Transmit+0xd6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003af4:	6823      	ldr	r3, [r4, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	4217      	tst	r7, r2
 8003afa:	d1ee      	bne.n	8003ada <HAL_SPI_Transmit+0x152>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003afc:	f7fd fc9c 	bl	8001438 <HAL_GetTick>
 8003b00:	4643      	mov	r3, r8
 8003b02:	1ac0      	subs	r0, r0, r3
 8003b04:	4285      	cmp	r5, r0
 8003b06:	d8f2      	bhi.n	8003aee <HAL_SPI_Transmit+0x166>
          hspi->State = HAL_SPI_STATE_READY;
 8003b08:	2351      	movs	r3, #81	; 0x51
 8003b0a:	2201      	movs	r2, #1
          errorcode = HAL_TIMEOUT;
 8003b0c:	2603      	movs	r6, #3
          hspi->State = HAL_SPI_STATE_READY;
 8003b0e:	54e2      	strb	r2, [r4, r3]
          goto error;
 8003b10:	e754      	b.n	80039bc <HAL_SPI_Transmit+0x34>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b12:	783b      	ldrb	r3, [r7, #0]
 8003b14:	7313      	strb	r3, [r2, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b18:	3301      	adds	r3, #1
 8003b1a:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003b1c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	86e3      	strh	r3, [r4, #54]	; 0x36
 8003b24:	e780      	b.n	8003a28 <HAL_SPI_Transmit+0xa0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b26:	f7fd fc87 	bl	8001438 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8003b2a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d000      	beq.n	8003b32 <HAL_SPI_Transmit+0x1aa>
 8003b30:	e784      	b.n	8003a3c <HAL_SPI_Transmit+0xb4>
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b32:	6863      	ldr	r3, [r4, #4]
 8003b34:	e794      	b.n	8003a60 <HAL_SPI_Transmit+0xd8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b36:	6863      	ldr	r3, [r4, #4]
 8003b38:	469a      	mov	sl, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d143      	bne.n	8003bc6 <HAL_SPI_Transmit+0x23e>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b3e:	8839      	ldrh	r1, [r7, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b40:	3702      	adds	r7, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b42:	60d1      	str	r1, [r2, #12]
      hspi->TxXferCount--;
 8003b44:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b46:	6327      	str	r7, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003b48:	3901      	subs	r1, #1
 8003b4a:	b289      	uxth	r1, r1
 8003b4c:	86e1      	strh	r1, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003b4e:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8003b50:	2900      	cmp	r1, #0
 8003b52:	d100      	bne.n	8003b56 <HAL_SPI_Transmit+0x1ce>
 8003b54:	e785      	b.n	8003a62 <HAL_SPI_Transmit+0xda>
 8003b56:	2d00      	cmp	r5, #0
 8003b58:	d05d      	beq.n	8003c16 <HAL_SPI_Transmit+0x28e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b5a:	2702      	movs	r7, #2
 8003b5c:	1c6b      	adds	r3, r5, #1
 8003b5e:	d128      	bne.n	8003bb2 <HAL_SPI_Transmit+0x22a>
 8003b60:	6893      	ldr	r3, [r2, #8]
 8003b62:	421f      	tst	r7, r3
 8003b64:	d00f      	beq.n	8003b86 <HAL_SPI_Transmit+0x1fe>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b68:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b6a:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b6c:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b6e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003b70:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003b72:	3b01      	subs	r3, #1
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003b78:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d100      	bne.n	8003b80 <HAL_SPI_Transmit+0x1f8>
 8003b7e:	e76e      	b.n	8003a5e <HAL_SPI_Transmit+0xd6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b80:	6893      	ldr	r3, [r2, #8]
 8003b82:	421f      	tst	r7, r3
 8003b84:	d1ef      	bne.n	8003b66 <HAL_SPI_Transmit+0x1de>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b86:	f7fd fc57 	bl	8001438 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8003b8a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d100      	bne.n	8003b92 <HAL_SPI_Transmit+0x20a>
 8003b90:	e765      	b.n	8003a5e <HAL_SPI_Transmit+0xd6>
 8003b92:	6822      	ldr	r2, [r4, #0]
 8003b94:	e7e4      	b.n	8003b60 <HAL_SPI_Transmit+0x1d8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b96:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b98:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b9a:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b9c:	60c2      	str	r2, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b9e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003ba0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003ba8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d100      	bne.n	8003bb0 <HAL_SPI_Transmit+0x228>
 8003bae:	e756      	b.n	8003a5e <HAL_SPI_Transmit+0xd6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bb0:	6820      	ldr	r0, [r4, #0]
 8003bb2:	6883      	ldr	r3, [r0, #8]
 8003bb4:	421f      	tst	r7, r3
 8003bb6:	d1ee      	bne.n	8003b96 <HAL_SPI_Transmit+0x20e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bb8:	f7fd fc3e 	bl	8001438 <HAL_GetTick>
 8003bbc:	4643      	mov	r3, r8
 8003bbe:	1ac0      	subs	r0, r0, r3
 8003bc0:	4285      	cmp	r5, r0
 8003bc2:	d9a1      	bls.n	8003b08 <HAL_SPI_Transmit+0x180>
 8003bc4:	e7f0      	b.n	8003ba8 <HAL_SPI_Transmit+0x220>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bc6:	4649      	mov	r1, r9
 8003bc8:	2901      	cmp	r1, #1
 8003bca:	d1c0      	bne.n	8003b4e <HAL_SPI_Transmit+0x1c6>
 8003bcc:	e7b7      	b.n	8003b3e <HAL_SPI_Transmit+0x1b6>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003bd0:	7809      	ldrb	r1, [r1, #0]
 8003bd2:	7319      	strb	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bd4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003bda:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003be2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d100      	bne.n	8003bea <HAL_SPI_Transmit+0x262>
 8003be8:	e739      	b.n	8003a5e <HAL_SPI_Transmit+0xd6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	6899      	ldr	r1, [r3, #8]
 8003bee:	420a      	tst	r2, r1
 8003bf0:	d1ed      	bne.n	8003bce <HAL_SPI_Transmit+0x246>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bf2:	f7fd fc21 	bl	8001438 <HAL_GetTick>
 8003bf6:	e787      	b.n	8003b08 <HAL_SPI_Transmit+0x180>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bf8:	4643      	mov	r3, r8
 8003bfa:	002a      	movs	r2, r5
 8003bfc:	2180      	movs	r1, #128	; 0x80
 8003bfe:	0020      	movs	r0, r4
 8003c00:	f7ff fde6 	bl	80037d0 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003c04:	2800      	cmp	r0, #0
 8003c06:	d100      	bne.n	8003c0a <HAL_SPI_Transmit+0x282>
 8003c08:	e746      	b.n	8003a98 <HAL_SPI_Transmit+0x110>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c12:	6562      	str	r2, [r4, #84]	; 0x54
 8003c14:	e740      	b.n	8003a98 <HAL_SPI_Transmit+0x110>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c16:	2002      	movs	r0, #2
 8003c18:	e00c      	b.n	8003c34 <HAL_SPI_Transmit+0x2ac>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c1a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003c1c:	880f      	ldrh	r7, [r1, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c1e:	3102      	adds	r1, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c20:	60d7      	str	r7, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c22:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003c24:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8003c26:	3901      	subs	r1, #1
 8003c28:	b289      	uxth	r1, r1
 8003c2a:	86e1      	strh	r1, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003c2c:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8003c2e:	2900      	cmp	r1, #0
 8003c30:	d100      	bne.n	8003c34 <HAL_SPI_Transmit+0x2ac>
 8003c32:	e715      	b.n	8003a60 <HAL_SPI_Transmit+0xd8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c34:	6891      	ldr	r1, [r2, #8]
 8003c36:	4208      	tst	r0, r1
 8003c38:	d1ef      	bne.n	8003c1a <HAL_SPI_Transmit+0x292>
 8003c3a:	e7da      	b.n	8003bf2 <HAL_SPI_Transmit+0x26a>
 8003c3c:	20000000 	.word	0x20000000
 8003c40:	016e3600 	.word	0x016e3600

08003c44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c46:	4657      	mov	r7, sl
 8003c48:	464e      	mov	r6, r9
 8003c4a:	4645      	mov	r5, r8
 8003c4c:	46de      	mov	lr, fp
 8003c4e:	b5e0      	push	{r5, r6, r7, lr}
 8003c50:	001e      	movs	r6, r3
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c52:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 8003c54:	0005      	movs	r5, r0
 8003c56:	000f      	movs	r7, r1
 8003c58:	0014      	movs	r4, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003c5a:	2b20      	cmp	r3, #32
 8003c5c:	d000      	beq.n	8003c60 <HAL_UART_Transmit+0x1c>
 8003c5e:	e0a8      	b.n	8003db2 <HAL_UART_Transmit+0x16e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c60:	2900      	cmp	r1, #0
 8003c62:	d04a      	beq.n	8003cfa <HAL_UART_Transmit+0xb6>
 8003c64:	2a00      	cmp	r2, #0
 8003c66:	d048      	beq.n	8003cfa <HAL_UART_Transmit+0xb6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c68:	2380      	movs	r3, #128	; 0x80
 8003c6a:	6882      	ldr	r2, [r0, #8]
 8003c6c:	015b      	lsls	r3, r3, #5
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d104      	bne.n	8003c7c <HAL_UART_Transmit+0x38>
 8003c72:	6903      	ldr	r3, [r0, #16]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_UART_Transmit+0x38>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003c78:	07cb      	lsls	r3, r1, #31
 8003c7a:	d43e      	bmi.n	8003cfa <HAL_UART_Transmit+0xb6>
      {
        return  HAL_ERROR;
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	2384      	movs	r3, #132	; 0x84
 8003c80:	50ea      	str	r2, [r5, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c82:	3b63      	subs	r3, #99	; 0x63
 8003c84:	67eb      	str	r3, [r5, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c86:	f7fd fbd7 	bl	8001438 <HAL_GetTick>

    huart->TxXferSize  = Size;
 8003c8a:	2350      	movs	r3, #80	; 0x50
      pdata16bits = (const uint16_t *) pData;
    }
    else
    {
      pdata8bits  = pData;
      pdata16bits = NULL;
 8003c8c:	2200      	movs	r2, #0
    huart->TxXferSize  = Size;
 8003c8e:	52ec      	strh	r4, [r5, r3]
    huart->TxXferCount = Size;
 8003c90:	3302      	adds	r3, #2
 8003c92:	52ec      	strh	r4, [r5, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c94:	2380      	movs	r3, #128	; 0x80
      pdata16bits = NULL;
 8003c96:	4692      	mov	sl, r2
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c98:	68aa      	ldr	r2, [r5, #8]
    tickstart = HAL_GetTick();
 8003c9a:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c9c:	015b      	lsls	r3, r3, #5
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d100      	bne.n	8003ca4 <HAL_UART_Transmit+0x60>
 8003ca2:	e0a3      	b.n	8003dec <HAL_UART_Transmit+0x1a8>
    }

    while (huart->TxXferCount > 0U)
 8003ca4:	2352      	movs	r3, #82	; 0x52
 8003ca6:	5aeb      	ldrh	r3, [r5, r3]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d100      	bne.n	8003cae <HAL_UART_Transmit+0x6a>
 8003cac:	e0d6      	b.n	8003e5c <HAL_UART_Transmit+0x218>
      {

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cae:	2204      	movs	r2, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cb0:	2480      	movs	r4, #128	; 0x80
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cb2:	4691      	mov	r9, r2
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cb4:	682b      	ldr	r3, [r5, #0]
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003cb6:	2208      	movs	r2, #8
 8003cb8:	4693      	mov	fp, r2
 8003cba:	1c72      	adds	r2, r6, #1
 8003cbc:	d124      	bne.n	8003d08 <HAL_UART_Transmit+0xc4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cbe:	69da      	ldr	r2, [r3, #28]
 8003cc0:	4214      	tst	r4, r2
 8003cc2:	d0fc      	beq.n	8003cbe <HAL_UART_Transmit+0x7a>
      if (pdata8bits == NULL)
 8003cc4:	2f00      	cmp	r7, #0
 8003cc6:	d06b      	beq.n	8003da0 <HAL_UART_Transmit+0x15c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cc8:	783a      	ldrb	r2, [r7, #0]
        pdata8bits++;
 8003cca:	3701      	adds	r7, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ccc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 8003cce:	2152      	movs	r1, #82	; 0x52
 8003cd0:	5a6a      	ldrh	r2, [r5, r1]
 8003cd2:	3a01      	subs	r2, #1
 8003cd4:	b292      	uxth	r2, r2
 8003cd6:	526a      	strh	r2, [r5, r1]
    while (huart->TxXferCount > 0U)
 8003cd8:	5a6a      	ldrh	r2, [r5, r1]
 8003cda:	2a00      	cmp	r2, #0
 8003cdc:	d1eb      	bne.n	8003cb6 <HAL_UART_Transmit+0x72>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cde:	2204      	movs	r2, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ce0:	2440      	movs	r4, #64	; 0x40
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ce2:	4691      	mov	r9, r2
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ce4:	2708      	movs	r7, #8
 8003ce6:	1c72      	adds	r2, r6, #1
 8003ce8:	d165      	bne.n	8003db6 <HAL_UART_Transmit+0x172>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cea:	2140      	movs	r1, #64	; 0x40
 8003cec:	69da      	ldr	r2, [r3, #28]
 8003cee:	4211      	tst	r1, r2
 8003cf0:	d0fc      	beq.n	8003cec <HAL_UART_Transmit+0xa8>
    huart->gState = HAL_UART_STATE_READY;
 8003cf2:	2320      	movs	r3, #32
    return HAL_OK;
 8003cf4:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 8003cf6:	67eb      	str	r3, [r5, #124]	; 0x7c
    return HAL_OK;
 8003cf8:	e000      	b.n	8003cfc <HAL_UART_Transmit+0xb8>
      return  HAL_ERROR;
 8003cfa:	2001      	movs	r0, #1
}
 8003cfc:	bcf0      	pop	{r4, r5, r6, r7}
 8003cfe:	46bb      	mov	fp, r7
 8003d00:	46b2      	mov	sl, r6
 8003d02:	46a9      	mov	r9, r5
 8003d04:	46a0      	mov	r8, r4
 8003d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d08:	69da      	ldr	r2, [r3, #28]
 8003d0a:	4214      	tst	r4, r2
 8003d0c:	d1da      	bne.n	8003cc4 <HAL_UART_Transmit+0x80>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d0e:	f7fd fb93 	bl	8001438 <HAL_GetTick>
 8003d12:	4643      	mov	r3, r8
 8003d14:	1ac0      	subs	r0, r0, r3
 8003d16:	4286      	cmp	r6, r0
 8003d18:	d33e      	bcc.n	8003d98 <HAL_UART_Transmit+0x154>
 8003d1a:	2e00      	cmp	r6, #0
 8003d1c:	d03c      	beq.n	8003d98 <HAL_UART_Transmit+0x154>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d1e:	4649      	mov	r1, r9
 8003d20:	682b      	ldr	r3, [r5, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	4211      	tst	r1, r2
 8003d26:	d0c8      	beq.n	8003cba <HAL_UART_Transmit+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d28:	4659      	mov	r1, fp
 8003d2a:	69da      	ldr	r2, [r3, #28]
 8003d2c:	4211      	tst	r1, r2
 8003d2e:	d164      	bne.n	8003dfa <HAL_UART_Transmit+0x1b6>
           /* Process Unlocked */
           __HAL_UNLOCK(huart);

           return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d30:	2280      	movs	r2, #128	; 0x80
 8003d32:	69d9      	ldr	r1, [r3, #28]
 8003d34:	0112      	lsls	r2, r2, #4
 8003d36:	4211      	tst	r1, r2
 8003d38:	d0bf      	beq.n	8003cba <HAL_UART_Transmit+0x76>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d3a:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d3c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d40:	2201      	movs	r2, #1
 8003d42:	f382 8810 	msr	PRIMASK, r2
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d46:	6829      	ldr	r1, [r5, #0]
 8003d48:	4c46      	ldr	r4, [pc, #280]	; (8003e64 <HAL_UART_Transmit+0x220>)
 8003d4a:	680b      	ldr	r3, [r1, #0]
 8003d4c:	4023      	ands	r3, r4
 8003d4e:	600b      	str	r3, [r1, #0]
 8003d50:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d54:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d58:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d5c:	6829      	ldr	r1, [r5, #0]
 8003d5e:	688b      	ldr	r3, [r1, #8]
 8003d60:	4393      	bics	r3, r2
 8003d62:	608b      	str	r3, [r1, #8]
 8003d64:	f380 8810 	msr	PRIMASK, r0

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d68:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d10a      	bne.n	8003d84 <HAL_UART_Transmit+0x140>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d6e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d72:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d76:	2010      	movs	r0, #16
 8003d78:	682a      	ldr	r2, [r5, #0]
 8003d7a:	6813      	ldr	r3, [r2, #0]
 8003d7c:	4383      	bics	r3, r0
 8003d7e:	6013      	str	r3, [r2, #0]
 8003d80:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d84:	2220      	movs	r2, #32
 8003d86:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d88:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003d8a:	50ea      	str	r2, [r5, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	662b      	str	r3, [r5, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d90:	66ab      	str	r3, [r5, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d92:	506a      	str	r2, [r5, r1]
          __HAL_UNLOCK(huart);
 8003d94:	3258      	adds	r2, #88	; 0x58
 8003d96:	54ab      	strb	r3, [r5, r2]
      huart->gState = HAL_UART_STATE_READY;
 8003d98:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8003d9a:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 8003d9c:	67eb      	str	r3, [r5, #124]	; 0x7c
      return HAL_TIMEOUT;
 8003d9e:	e7ad      	b.n	8003cfc <HAL_UART_Transmit+0xb8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003da0:	4652      	mov	r2, sl
 8003da2:	8812      	ldrh	r2, [r2, #0]
 8003da4:	05d2      	lsls	r2, r2, #23
 8003da6:	0dd2      	lsrs	r2, r2, #23
 8003da8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003daa:	2202      	movs	r2, #2
 8003dac:	4694      	mov	ip, r2
 8003dae:	44e2      	add	sl, ip
      huart->TxXferCount--;
 8003db0:	e78d      	b.n	8003cce <HAL_UART_Transmit+0x8a>
    return HAL_BUSY;
 8003db2:	2002      	movs	r0, #2
 8003db4:	e7a2      	b.n	8003cfc <HAL_UART_Transmit+0xb8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	421c      	tst	r4, r3
 8003dba:	d19a      	bne.n	8003cf2 <HAL_UART_Transmit+0xae>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dbc:	f7fd fb3c 	bl	8001438 <HAL_GetTick>
 8003dc0:	4643      	mov	r3, r8
 8003dc2:	1ac0      	subs	r0, r0, r3
 8003dc4:	4286      	cmp	r6, r0
 8003dc6:	d3e7      	bcc.n	8003d98 <HAL_UART_Transmit+0x154>
 8003dc8:	2e00      	cmp	r6, #0
 8003dca:	d0e5      	beq.n	8003d98 <HAL_UART_Transmit+0x154>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dcc:	4649      	mov	r1, r9
 8003dce:	682b      	ldr	r3, [r5, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	4211      	tst	r1, r2
 8003dd4:	d100      	bne.n	8003dd8 <HAL_UART_Transmit+0x194>
 8003dd6:	e786      	b.n	8003ce6 <HAL_UART_Transmit+0xa2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003dd8:	69da      	ldr	r2, [r3, #28]
 8003dda:	4217      	tst	r7, r2
 8003ddc:	d140      	bne.n	8003e60 <HAL_UART_Transmit+0x21c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dde:	2280      	movs	r2, #128	; 0x80
 8003de0:	69d9      	ldr	r1, [r3, #28]
 8003de2:	0112      	lsls	r2, r2, #4
 8003de4:	4211      	tst	r1, r2
 8003de6:	d100      	bne.n	8003dea <HAL_UART_Transmit+0x1a6>
 8003de8:	e77d      	b.n	8003ce6 <HAL_UART_Transmit+0xa2>
 8003dea:	e7a6      	b.n	8003d3a <HAL_UART_Transmit+0xf6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dec:	692b      	ldr	r3, [r5, #16]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d000      	beq.n	8003df4 <HAL_UART_Transmit+0x1b0>
 8003df2:	e757      	b.n	8003ca4 <HAL_UART_Transmit+0x60>
 8003df4:	46ba      	mov	sl, r7
      pdata8bits  = NULL;
 8003df6:	2700      	movs	r7, #0
 8003df8:	e754      	b.n	8003ca4 <HAL_UART_Transmit+0x60>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003dfa:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dfc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e00:	2201      	movs	r2, #1
 8003e02:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e06:	6829      	ldr	r1, [r5, #0]
 8003e08:	4c16      	ldr	r4, [pc, #88]	; (8003e64 <HAL_UART_Transmit+0x220>)
 8003e0a:	680b      	ldr	r3, [r1, #0]
 8003e0c:	4023      	ands	r3, r4
 8003e0e:	600b      	str	r3, [r1, #0]
 8003e10:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e14:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e18:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e1c:	6829      	ldr	r1, [r5, #0]
 8003e1e:	688b      	ldr	r3, [r1, #8]
 8003e20:	4393      	bics	r3, r2
 8003e22:	608b      	str	r3, [r1, #8]
 8003e24:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e28:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d10a      	bne.n	8003e44 <HAL_UART_Transmit+0x200>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e2e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e32:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e36:	2010      	movs	r0, #16
 8003e38:	682a      	ldr	r2, [r5, #0]
 8003e3a:	6813      	ldr	r3, [r2, #0]
 8003e3c:	4383      	bics	r3, r0
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8003e44:	2380      	movs	r3, #128	; 0x80
 8003e46:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e48:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8003e4a:	50ea      	str	r2, [r5, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e4c:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e4e:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e50:	662b      	str	r3, [r5, #96]	; 0x60
  huart->RxISR = NULL;
 8003e52:	66ab      	str	r3, [r5, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e54:	50a9      	str	r1, [r5, r2]
           __HAL_UNLOCK(huart);
 8003e56:	3a0c      	subs	r2, #12
 8003e58:	54ab      	strb	r3, [r5, r2]
           return HAL_ERROR;
 8003e5a:	e79d      	b.n	8003d98 <HAL_UART_Transmit+0x154>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e5c:	682b      	ldr	r3, [r5, #0]
 8003e5e:	e73e      	b.n	8003cde <HAL_UART_Transmit+0x9a>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e60:	621f      	str	r7, [r3, #32]
 8003e62:	e7cb      	b.n	8003dfc <HAL_UART_Transmit+0x1b8>
 8003e64:	fffffedf 	.word	0xfffffedf

08003e68 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e68:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8003e6a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e6c:	07da      	lsls	r2, r3, #31
 8003e6e:	d506      	bpl.n	8003e7e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e70:	6801      	ldr	r1, [r0, #0]
 8003e72:	4c28      	ldr	r4, [pc, #160]	; (8003f14 <UART_AdvFeatureConfig+0xac>)
 8003e74:	684a      	ldr	r2, [r1, #4]
 8003e76:	4022      	ands	r2, r4
 8003e78:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003e7a:	4322      	orrs	r2, r4
 8003e7c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e7e:	079a      	lsls	r2, r3, #30
 8003e80:	d506      	bpl.n	8003e90 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e82:	6801      	ldr	r1, [r0, #0]
 8003e84:	4c24      	ldr	r4, [pc, #144]	; (8003f18 <UART_AdvFeatureConfig+0xb0>)
 8003e86:	684a      	ldr	r2, [r1, #4]
 8003e88:	4022      	ands	r2, r4
 8003e8a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003e8c:	4322      	orrs	r2, r4
 8003e8e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e90:	075a      	lsls	r2, r3, #29
 8003e92:	d506      	bpl.n	8003ea2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e94:	6801      	ldr	r1, [r0, #0]
 8003e96:	4c21      	ldr	r4, [pc, #132]	; (8003f1c <UART_AdvFeatureConfig+0xb4>)
 8003e98:	684a      	ldr	r2, [r1, #4]
 8003e9a:	4022      	ands	r2, r4
 8003e9c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003e9e:	4322      	orrs	r2, r4
 8003ea0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ea2:	071a      	lsls	r2, r3, #28
 8003ea4:	d506      	bpl.n	8003eb4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ea6:	6801      	ldr	r1, [r0, #0]
 8003ea8:	4c1d      	ldr	r4, [pc, #116]	; (8003f20 <UART_AdvFeatureConfig+0xb8>)
 8003eaa:	684a      	ldr	r2, [r1, #4]
 8003eac:	4022      	ands	r2, r4
 8003eae:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003eb0:	4322      	orrs	r2, r4
 8003eb2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003eb4:	06da      	lsls	r2, r3, #27
 8003eb6:	d506      	bpl.n	8003ec6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003eb8:	6801      	ldr	r1, [r0, #0]
 8003eba:	4c1a      	ldr	r4, [pc, #104]	; (8003f24 <UART_AdvFeatureConfig+0xbc>)
 8003ebc:	688a      	ldr	r2, [r1, #8]
 8003ebe:	4022      	ands	r2, r4
 8003ec0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003ec2:	4322      	orrs	r2, r4
 8003ec4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ec6:	069a      	lsls	r2, r3, #26
 8003ec8:	d506      	bpl.n	8003ed8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003eca:	6801      	ldr	r1, [r0, #0]
 8003ecc:	4c16      	ldr	r4, [pc, #88]	; (8003f28 <UART_AdvFeatureConfig+0xc0>)
 8003ece:	688a      	ldr	r2, [r1, #8]
 8003ed0:	4022      	ands	r2, r4
 8003ed2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003ed4:	4322      	orrs	r2, r4
 8003ed6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ed8:	065a      	lsls	r2, r3, #25
 8003eda:	d50a      	bpl.n	8003ef2 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003edc:	6801      	ldr	r1, [r0, #0]
 8003ede:	4d13      	ldr	r5, [pc, #76]	; (8003f2c <UART_AdvFeatureConfig+0xc4>)
 8003ee0:	684a      	ldr	r2, [r1, #4]
 8003ee2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003ee4:	402a      	ands	r2, r5
 8003ee6:	4322      	orrs	r2, r4
 8003ee8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003eea:	2280      	movs	r2, #128	; 0x80
 8003eec:	0352      	lsls	r2, r2, #13
 8003eee:	4294      	cmp	r4, r2
 8003ef0:	d009      	beq.n	8003f06 <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ef2:	061b      	lsls	r3, r3, #24
 8003ef4:	d506      	bpl.n	8003f04 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ef6:	6802      	ldr	r2, [r0, #0]
 8003ef8:	490d      	ldr	r1, [pc, #52]	; (8003f30 <UART_AdvFeatureConfig+0xc8>)
 8003efa:	6853      	ldr	r3, [r2, #4]
 8003efc:	400b      	ands	r3, r1
 8003efe:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003f00:	430b      	orrs	r3, r1
 8003f02:	6053      	str	r3, [r2, #4]
}
 8003f04:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f06:	684a      	ldr	r2, [r1, #4]
 8003f08:	4c0a      	ldr	r4, [pc, #40]	; (8003f34 <UART_AdvFeatureConfig+0xcc>)
 8003f0a:	4022      	ands	r2, r4
 8003f0c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003f0e:	4322      	orrs	r2, r4
 8003f10:	604a      	str	r2, [r1, #4]
 8003f12:	e7ee      	b.n	8003ef2 <UART_AdvFeatureConfig+0x8a>
 8003f14:	fffdffff 	.word	0xfffdffff
 8003f18:	fffeffff 	.word	0xfffeffff
 8003f1c:	fffbffff 	.word	0xfffbffff
 8003f20:	ffff7fff 	.word	0xffff7fff
 8003f24:	ffffefff 	.word	0xffffefff
 8003f28:	ffffdfff 	.word	0xffffdfff
 8003f2c:	ffefffff 	.word	0xffefffff
 8003f30:	fff7ffff 	.word	0xfff7ffff
 8003f34:	ff9fffff 	.word	0xff9fffff

08003f38 <UART_CheckIdleState>:
{
 8003f38:	b5f0      	push	{r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f3a:	2384      	movs	r3, #132	; 0x84
 8003f3c:	2200      	movs	r2, #0
{
 8003f3e:	46c6      	mov	lr, r8
 8003f40:	0004      	movs	r4, r0
 8003f42:	b500      	push	{lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f44:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8003f46:	f7fd fa77 	bl	8001438 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f4a:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003f4c:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	0712      	lsls	r2, r2, #28
 8003f52:	d40f      	bmi.n	8003f74 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	0752      	lsls	r2, r2, #29
 8003f58:	d43e      	bmi.n	8003fd8 <UART_CheckIdleState+0xa0>
  huart->gState = HAL_UART_STATE_READY;
 8003f5a:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;
 8003f5c:	2280      	movs	r2, #128	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8003f5e:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f60:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f62:	2300      	movs	r3, #0
  return HAL_OK;
 8003f64:	2000      	movs	r0, #0
  __HAL_UNLOCK(huart);
 8003f66:	3a08      	subs	r2, #8
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f68:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f6a:	6663      	str	r3, [r4, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8003f6c:	54a3      	strb	r3, [r4, r2]
}
 8003f6e:	bc80      	pop	{r7}
 8003f70:	46b8      	mov	r8, r7
 8003f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f74:	69da      	ldr	r2, [r3, #28]
 8003f76:	0292      	lsls	r2, r2, #10
 8003f78:	d4ec      	bmi.n	8003f54 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f7a:	2680      	movs	r6, #128	; 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f7c:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f7e:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f80:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f82:	04b6      	lsls	r6, r6, #18
 8003f84:	e010      	b.n	8003fa8 <UART_CheckIdleState+0x70>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f86:	6823      	ldr	r3, [r4, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	4217      	tst	r7, r2
 8003f8c:	d009      	beq.n	8003fa2 <UART_CheckIdleState+0x6a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f8e:	4641      	mov	r1, r8
 8003f90:	69da      	ldr	r2, [r3, #28]
 8003f92:	4211      	tst	r1, r2
 8003f94:	d15e      	bne.n	8004054 <UART_CheckIdleState+0x11c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f96:	2280      	movs	r2, #128	; 0x80
 8003f98:	69d9      	ldr	r1, [r3, #28]
 8003f9a:	0112      	lsls	r2, r2, #4
 8003f9c:	4211      	tst	r1, r2
 8003f9e:	d000      	beq.n	8003fa2 <UART_CheckIdleState+0x6a>
 8003fa0:	e089      	b.n	80040b6 <UART_CheckIdleState+0x17e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fa2:	69da      	ldr	r2, [r3, #28]
 8003fa4:	0292      	lsls	r2, r2, #10
 8003fa6:	d4d5      	bmi.n	8003f54 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fa8:	f7fd fa46 	bl	8001438 <HAL_GetTick>
 8003fac:	1b40      	subs	r0, r0, r5
 8003fae:	42b0      	cmp	r0, r6
 8003fb0:	d3e9      	bcc.n	8003f86 <UART_CheckIdleState+0x4e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fb2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003fbc:	2080      	movs	r0, #128	; 0x80
 8003fbe:	6822      	ldr	r2, [r4, #0]
 8003fc0:	6813      	ldr	r3, [r2, #0]
 8003fc2:	4383      	bics	r3, r0
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8003fca:	2320      	movs	r3, #32
      __HAL_UNLOCK(huart);
 8003fcc:	2200      	movs	r2, #0
      huart->gState = HAL_UART_STATE_READY;
 8003fce:	67e3      	str	r3, [r4, #124]	; 0x7c
      __HAL_UNLOCK(huart);
 8003fd0:	3358      	adds	r3, #88	; 0x58
 8003fd2:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8003fd4:	387d      	subs	r0, #125	; 0x7d
 8003fd6:	e7ca      	b.n	8003f6e <UART_CheckIdleState+0x36>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	025b      	lsls	r3, r3, #9
 8003fdc:	d4bd      	bmi.n	8003f5a <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fde:	2680      	movs	r6, #128	; 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fe0:	2308      	movs	r3, #8
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fe2:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fe4:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fe6:	04b6      	lsls	r6, r6, #18
 8003fe8:	e011      	b.n	800400e <UART_CheckIdleState+0xd6>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	4217      	tst	r7, r2
 8003ff0:	d00a      	beq.n	8004008 <UART_CheckIdleState+0xd0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ff2:	4641      	mov	r1, r8
 8003ff4:	69da      	ldr	r2, [r3, #28]
 8003ff6:	4211      	tst	r1, r2
 8003ff8:	d000      	beq.n	8003ffc <UART_CheckIdleState+0xc4>
 8003ffa:	e08c      	b.n	8004116 <UART_CheckIdleState+0x1de>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ffc:	2280      	movs	r2, #128	; 0x80
 8003ffe:	69d9      	ldr	r1, [r3, #28]
 8004000:	0112      	lsls	r2, r2, #4
 8004002:	4211      	tst	r1, r2
 8004004:	d000      	beq.n	8004008 <UART_CheckIdleState+0xd0>
 8004006:	e0b7      	b.n	8004178 <UART_CheckIdleState+0x240>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	025b      	lsls	r3, r3, #9
 800400c:	d4a5      	bmi.n	8003f5a <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400e:	f7fd fa13 	bl	8001438 <HAL_GetTick>
 8004012:	1b40      	subs	r0, r0, r5
 8004014:	42b0      	cmp	r0, r6
 8004016:	d3e8      	bcc.n	8003fea <UART_CheckIdleState+0xb2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004018:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800401c:	2201      	movs	r2, #1
 800401e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004022:	6821      	ldr	r1, [r4, #0]
 8004024:	4d6c      	ldr	r5, [pc, #432]	; (80041d8 <UART_CheckIdleState+0x2a0>)
 8004026:	680b      	ldr	r3, [r1, #0]
 8004028:	402b      	ands	r3, r5
 800402a:	600b      	str	r3, [r1, #0]
 800402c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004030:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004034:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004038:	6821      	ldr	r1, [r4, #0]
 800403a:	688b      	ldr	r3, [r1, #8]
 800403c:	4393      	bics	r3, r2
 800403e:	608b      	str	r3, [r1, #8]
 8004040:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8004044:	2380      	movs	r3, #128	; 0x80
 8004046:	321f      	adds	r2, #31
 8004048:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 800404a:	2200      	movs	r2, #0
 800404c:	3b08      	subs	r3, #8
      return HAL_TIMEOUT;
 800404e:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8004050:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8004052:	e78c      	b.n	8003f6e <UART_CheckIdleState+0x36>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004054:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004056:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800405a:	2201      	movs	r2, #1
 800405c:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004060:	6821      	ldr	r1, [r4, #0]
 8004062:	4d5d      	ldr	r5, [pc, #372]	; (80041d8 <UART_CheckIdleState+0x2a0>)
 8004064:	680b      	ldr	r3, [r1, #0]
 8004066:	402b      	ands	r3, r5
 8004068:	600b      	str	r3, [r1, #0]
 800406a:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800406e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004072:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004076:	6821      	ldr	r1, [r4, #0]
 8004078:	688b      	ldr	r3, [r1, #8]
 800407a:	4393      	bics	r3, r2
 800407c:	608b      	str	r3, [r1, #8]
 800407e:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004082:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004084:	2b01      	cmp	r3, #1
 8004086:	d10a      	bne.n	800409e <UART_CheckIdleState+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004088:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800408c:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004090:	2010      	movs	r0, #16
 8004092:	6822      	ldr	r2, [r4, #0]
 8004094:	6813      	ldr	r3, [r2, #0]
 8004096:	4383      	bics	r3, r0
 8004098:	6013      	str	r3, [r2, #0]
 800409a:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 800409e:	2380      	movs	r3, #128	; 0x80
 80040a0:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040a2:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80040a4:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a6:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040a8:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040aa:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 80040ac:	66a3      	str	r3, [r4, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040ae:	50a1      	str	r1, [r4, r2]
           __HAL_UNLOCK(huart);
 80040b0:	3a0c      	subs	r2, #12
 80040b2:	54a3      	strb	r3, [r4, r2]
           return HAL_ERROR;
 80040b4:	e77d      	b.n	8003fb2 <UART_CheckIdleState+0x7a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040b6:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040b8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040bc:	2201      	movs	r2, #1
 80040be:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040c2:	6821      	ldr	r1, [r4, #0]
 80040c4:	4d44      	ldr	r5, [pc, #272]	; (80041d8 <UART_CheckIdleState+0x2a0>)
 80040c6:	680b      	ldr	r3, [r1, #0]
 80040c8:	402b      	ands	r3, r5
 80040ca:	600b      	str	r3, [r1, #0]
 80040cc:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040d0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d4:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d8:	6821      	ldr	r1, [r4, #0]
 80040da:	688b      	ldr	r3, [r1, #8]
 80040dc:	4393      	bics	r3, r2
 80040de:	608b      	str	r3, [r1, #8]
 80040e0:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040e4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d10a      	bne.n	8004100 <UART_CheckIdleState+0x1c8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ea:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ee:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040f2:	2010      	movs	r0, #16
 80040f4:	6822      	ldr	r2, [r4, #0]
 80040f6:	6813      	ldr	r3, [r2, #0]
 80040f8:	4383      	bics	r3, r0
 80040fa:	6013      	str	r3, [r2, #0]
 80040fc:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004100:	2220      	movs	r2, #32
 8004102:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004104:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004106:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004108:	2300      	movs	r3, #0
 800410a:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 800410c:	66a3      	str	r3, [r4, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800410e:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 8004110:	3258      	adds	r2, #88	; 0x58
 8004112:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 8004114:	e74d      	b.n	8003fb2 <UART_CheckIdleState+0x7a>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004116:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004118:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800411c:	2201      	movs	r2, #1
 800411e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004122:	6821      	ldr	r1, [r4, #0]
 8004124:	4d2c      	ldr	r5, [pc, #176]	; (80041d8 <UART_CheckIdleState+0x2a0>)
 8004126:	680b      	ldr	r3, [r1, #0]
 8004128:	402b      	ands	r3, r5
 800412a:	600b      	str	r3, [r1, #0]
 800412c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004130:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004134:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004138:	6821      	ldr	r1, [r4, #0]
 800413a:	688b      	ldr	r3, [r1, #8]
 800413c:	4393      	bics	r3, r2
 800413e:	608b      	str	r3, [r1, #8]
 8004140:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004144:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004146:	2b01      	cmp	r3, #1
 8004148:	d10a      	bne.n	8004160 <UART_CheckIdleState+0x228>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800414a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800414e:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004152:	2010      	movs	r0, #16
 8004154:	6822      	ldr	r2, [r4, #0]
 8004156:	6813      	ldr	r3, [r2, #0]
 8004158:	4383      	bics	r3, r0
 800415a:	6013      	str	r3, [r2, #0]
 800415c:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8004160:	2380      	movs	r3, #128	; 0x80
 8004162:	2220      	movs	r2, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004164:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004166:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004168:	2300      	movs	r3, #0
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800416a:	3264      	adds	r2, #100	; 0x64
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800416c:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 800416e:	66a3      	str	r3, [r4, #104]	; 0x68
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004170:	50a1      	str	r1, [r4, r2]
           __HAL_UNLOCK(huart);
 8004172:	3a0c      	subs	r2, #12
 8004174:	54a3      	strb	r3, [r4, r2]
           return HAL_ERROR;
 8004176:	e74f      	b.n	8004018 <UART_CheckIdleState+0xe0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004178:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800417a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800417e:	2201      	movs	r2, #1
 8004180:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004184:	6821      	ldr	r1, [r4, #0]
 8004186:	4d14      	ldr	r5, [pc, #80]	; (80041d8 <UART_CheckIdleState+0x2a0>)
 8004188:	680b      	ldr	r3, [r1, #0]
 800418a:	402b      	ands	r3, r5
 800418c:	600b      	str	r3, [r1, #0]
 800418e:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004192:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004196:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800419a:	6821      	ldr	r1, [r4, #0]
 800419c:	688b      	ldr	r3, [r1, #8]
 800419e:	4393      	bics	r3, r2
 80041a0:	608b      	str	r3, [r1, #8]
 80041a2:	f380 8810 	msr	PRIMASK, r0
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041a6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d10a      	bne.n	80041c2 <UART_CheckIdleState+0x28a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ac:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b0:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041b4:	2010      	movs	r0, #16
 80041b6:	6822      	ldr	r2, [r4, #0]
 80041b8:	6813      	ldr	r3, [r2, #0]
 80041ba:	4383      	bics	r3, r0
 80041bc:	6013      	str	r3, [r2, #0]
 80041be:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 80041c2:	2220      	movs	r2, #32
 80041c4:	2380      	movs	r3, #128	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041c6:	2184      	movs	r1, #132	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80041c8:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ca:	2300      	movs	r3, #0
 80041cc:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxISR = NULL;
 80041ce:	66a3      	str	r3, [r4, #104]	; 0x68
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041d0:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 80041d2:	3258      	adds	r2, #88	; 0x58
 80041d4:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 80041d6:	e71f      	b.n	8004018 <UART_CheckIdleState+0xe0>
 80041d8:	fffffedf 	.word	0xfffffedf

080041dc <HAL_UART_Init>:
{
 80041dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041de:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80041e0:	d100      	bne.n	80041e4 <HAL_UART_Init+0x8>
 80041e2:	e0d3      	b.n	800438c <HAL_UART_Init+0x1b0>
  if (huart->gState == HAL_UART_STATE_RESET)
 80041e4:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d057      	beq.n	800429a <HAL_UART_Init+0xbe>
  huart->gState = HAL_UART_STATE_BUSY;
 80041ea:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80041ec:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80041ee:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 80041f0:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041f2:	6925      	ldr	r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	438a      	bics	r2, r1
 80041f8:	601a      	str	r2, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041fa:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041fc:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041fe:	432a      	orrs	r2, r5
 8004200:	6965      	ldr	r5, [r4, #20]
 8004202:	69e1      	ldr	r1, [r4, #28]
 8004204:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004206:	4d8c      	ldr	r5, [pc, #560]	; (8004438 <HAL_UART_Init+0x25c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004208:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800420a:	4028      	ands	r0, r5
 800420c:	4302      	orrs	r2, r0
 800420e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	488a      	ldr	r0, [pc, #552]	; (800443c <HAL_UART_Init+0x260>)
 8004214:	4002      	ands	r2, r0
 8004216:	68e0      	ldr	r0, [r4, #12]
 8004218:	4302      	orrs	r2, r0
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800421a:	4889      	ldr	r0, [pc, #548]	; (8004440 <HAL_UART_Init+0x264>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800421c:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800421e:	69a2      	ldr	r2, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004220:	4283      	cmp	r3, r0
 8004222:	d03f      	beq.n	80042a4 <HAL_UART_Init+0xc8>
    tmpreg |= huart->Init.OneBitSampling;
 8004224:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004226:	6898      	ldr	r0, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8004228:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800422a:	4d86      	ldr	r5, [pc, #536]	; (8004444 <HAL_UART_Init+0x268>)
 800422c:	4028      	ands	r0, r5
 800422e:	4302      	orrs	r2, r0
 8004230:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004232:	4a85      	ldr	r2, [pc, #532]	; (8004448 <HAL_UART_Init+0x26c>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d008      	beq.n	800424a <HAL_UART_Init+0x6e>
 8004238:	4a84      	ldr	r2, [pc, #528]	; (800444c <HAL_UART_Init+0x270>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d100      	bne.n	8004240 <HAL_UART_Init+0x64>
 800423e:	e0a7      	b.n	8004390 <HAL_UART_Init+0x1b4>
  huart->RxISR = NULL;
 8004240:	2300      	movs	r3, #0
    return HAL_ERROR;
 8004242:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8004244:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8004246:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 8004248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800424a:	4b81      	ldr	r3, [pc, #516]	; (8004450 <HAL_UART_Init+0x274>)
 800424c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800424e:	2303      	movs	r3, #3
 8004250:	4013      	ands	r3, r2
 8004252:	3b01      	subs	r3, #1
 8004254:	2b02      	cmp	r3, #2
 8004256:	d961      	bls.n	800431c <HAL_UART_Init+0x140>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004258:	2380      	movs	r3, #128	; 0x80
 800425a:	021b      	lsls	r3, r3, #8
 800425c:	4299      	cmp	r1, r3
 800425e:	d100      	bne.n	8004262 <HAL_UART_Init+0x86>
 8004260:	e0e3      	b.n	800442a <HAL_UART_Init+0x24e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004262:	f7ff f955 	bl	8003510 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8004266:	2800      	cmp	r0, #0
 8004268:	d177      	bne.n	800435a <HAL_UART_Init+0x17e>
  huart->RxISR = NULL;
 800426a:	2300      	movs	r3, #0
 800426c:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800426e:	66e3      	str	r3, [r4, #108]	; 0x6c
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004270:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004272:	2b00      	cmp	r3, #0
 8004274:	d000      	beq.n	8004278 <HAL_UART_Init+0x9c>
 8004276:	e085      	b.n	8004384 <HAL_UART_Init+0x1a8>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004278:	6823      	ldr	r3, [r4, #0]
 800427a:	4976      	ldr	r1, [pc, #472]	; (8004454 <HAL_UART_Init+0x278>)
 800427c:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800427e:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004280:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004282:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004284:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	438a      	bics	r2, r1
 800428a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	3929      	subs	r1, #41	; 0x29
 8004290:	430a      	orrs	r2, r1
 8004292:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004294:	f7ff fe50 	bl	8003f38 <UART_CheckIdleState>
 8004298:	e7d6      	b.n	8004248 <HAL_UART_Init+0x6c>
    huart->Lock = HAL_UNLOCKED;
 800429a:	2278      	movs	r2, #120	; 0x78
 800429c:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 800429e:	f7fd f82b 	bl	80012f8 <HAL_UART_MspInit>
 80042a2:	e7a2      	b.n	80041ea <HAL_UART_Init+0xe>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042a4:	6899      	ldr	r1, [r3, #8]
 80042a6:	4867      	ldr	r0, [pc, #412]	; (8004444 <HAL_UART_Init+0x268>)
 80042a8:	4001      	ands	r1, r0
 80042aa:	430a      	orrs	r2, r1
 80042ac:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042ae:	22c0      	movs	r2, #192	; 0xc0
 80042b0:	2180      	movs	r1, #128	; 0x80
 80042b2:	4867      	ldr	r0, [pc, #412]	; (8004450 <HAL_UART_Init+0x274>)
 80042b4:	0112      	lsls	r2, r2, #4
 80042b6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80042b8:	0109      	lsls	r1, r1, #4
 80042ba:	4013      	ands	r3, r2
 80042bc:	428b      	cmp	r3, r1
 80042be:	d071      	beq.n	80043a4 <HAL_UART_Init+0x1c8>
 80042c0:	d80a      	bhi.n	80042d8 <HAL_UART_Init+0xfc>
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d06b      	beq.n	800439e <HAL_UART_Init+0x1c2>
 80042c6:	2280      	movs	r2, #128	; 0x80
 80042c8:	00d2      	lsls	r2, r2, #3
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d1b8      	bne.n	8004240 <HAL_UART_Init+0x64>
        pclk = HAL_RCC_GetSysClockFreq();
 80042ce:	f7fe fce1 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80042d2:	2800      	cmp	r0, #0
 80042d4:	d0c9      	beq.n	800426a <HAL_UART_Init+0x8e>
 80042d6:	e003      	b.n	80042e0 <HAL_UART_Init+0x104>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042d8:	4293      	cmp	r3, r2
 80042da:	d1b1      	bne.n	8004240 <HAL_UART_Init+0x64>
 80042dc:	2080      	movs	r0, #128	; 0x80
 80042de:	0200      	lsls	r0, r0, #8
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042e0:	6865      	ldr	r5, [r4, #4]
 80042e2:	006b      	lsls	r3, r5, #1
 80042e4:	195b      	adds	r3, r3, r5
 80042e6:	4283      	cmp	r3, r0
 80042e8:	d8aa      	bhi.n	8004240 <HAL_UART_Init+0x64>
          (pclk > (4096U * huart->Init.BaudRate)))
 80042ea:	032b      	lsls	r3, r5, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042ec:	4298      	cmp	r0, r3
 80042ee:	d8a7      	bhi.n	8004240 <HAL_UART_Init+0x64>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80042f0:	2700      	movs	r7, #0
 80042f2:	0e03      	lsrs	r3, r0, #24
 80042f4:	0202      	lsls	r2, r0, #8
 80042f6:	086e      	lsrs	r6, r5, #1
 80042f8:	1992      	adds	r2, r2, r6
 80042fa:	417b      	adcs	r3, r7
 80042fc:	0010      	movs	r0, r2
 80042fe:	0019      	movs	r1, r3
 8004300:	002a      	movs	r2, r5
 8004302:	2300      	movs	r3, #0
 8004304:	f7fc f888 	bl	8000418 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004308:	4b53      	ldr	r3, [pc, #332]	; (8004458 <HAL_UART_Init+0x27c>)
 800430a:	18c2      	adds	r2, r0, r3
 800430c:	4b53      	ldr	r3, [pc, #332]	; (800445c <HAL_UART_Init+0x280>)
 800430e:	429a      	cmp	r2, r3
 8004310:	d896      	bhi.n	8004240 <HAL_UART_Init+0x64>
          huart->Instance->BRR = usartdiv;
 8004312:	6823      	ldr	r3, [r4, #0]
 8004314:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 8004316:	66a7      	str	r7, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8004318:	66e7      	str	r7, [r4, #108]	; 0x6c
  return ret;
 800431a:	e7a9      	b.n	8004270 <HAL_UART_Init+0x94>
 800431c:	4a50      	ldr	r2, [pc, #320]	; (8004460 <HAL_UART_Init+0x284>)
 800431e:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004320:	2280      	movs	r2, #128	; 0x80
 8004322:	0212      	lsls	r2, r2, #8
 8004324:	4291      	cmp	r1, r2
 8004326:	d04c      	beq.n	80043c2 <HAL_UART_Init+0x1e6>
    switch (clocksource)
 8004328:	2b08      	cmp	r3, #8
 800432a:	d900      	bls.n	800432e <HAL_UART_Init+0x152>
 800432c:	e788      	b.n	8004240 <HAL_UART_Init+0x64>
 800432e:	4a4d      	ldr	r2, [pc, #308]	; (8004464 <HAL_UART_Init+0x288>)
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	58d3      	ldr	r3, [r2, r3]
 8004334:	469f      	mov	pc, r3
        pclk = HAL_RCC_GetPCLK1Freq();
 8004336:	f7ff f8db 	bl	80034f0 <HAL_RCC_GetPCLK1Freq>
        break;
 800433a:	e794      	b.n	8004266 <HAL_UART_Init+0x8a>
        pclk = HAL_RCC_GetSysClockFreq();
 800433c:	f7fe fcaa 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
        break;
 8004340:	e791      	b.n	8004266 <HAL_UART_Init+0x8a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004342:	2010      	movs	r0, #16
 8004344:	4b42      	ldr	r3, [pc, #264]	; (8004450 <HAL_UART_Init+0x274>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800434a:	4243      	negs	r3, r0
 800434c:	4158      	adcs	r0, r3
 800434e:	4b46      	ldr	r3, [pc, #280]	; (8004468 <HAL_UART_Init+0x28c>)
 8004350:	4240      	negs	r0, r0
 8004352:	4018      	ands	r0, r3
 8004354:	4b45      	ldr	r3, [pc, #276]	; (800446c <HAL_UART_Init+0x290>)
 8004356:	469c      	mov	ip, r3
 8004358:	4460      	add	r0, ip
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800435a:	6863      	ldr	r3, [r4, #4]
 800435c:	6861      	ldr	r1, [r4, #4]
 800435e:	085b      	lsrs	r3, r3, #1
 8004360:	1818      	adds	r0, r3, r0
 8004362:	f7fb fee3 	bl	800012c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004366:	0002      	movs	r2, r0
 8004368:	4b41      	ldr	r3, [pc, #260]	; (8004470 <HAL_UART_Init+0x294>)
 800436a:	3a10      	subs	r2, #16
 800436c:	429a      	cmp	r2, r3
 800436e:	d900      	bls.n	8004372 <HAL_UART_Init+0x196>
 8004370:	e766      	b.n	8004240 <HAL_UART_Init+0x64>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 8004376:	2300      	movs	r3, #0
 8004378:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800437a:	66e3      	str	r3, [r4, #108]	; 0x6c
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800437c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800437e:	2b00      	cmp	r3, #0
 8004380:	d100      	bne.n	8004384 <HAL_UART_Init+0x1a8>
 8004382:	e779      	b.n	8004278 <HAL_UART_Init+0x9c>
    UART_AdvFeatureConfig(huart);
 8004384:	0020      	movs	r0, r4
 8004386:	f7ff fd6f 	bl	8003e68 <UART_AdvFeatureConfig>
 800438a:	e775      	b.n	8004278 <HAL_UART_Init+0x9c>
    return HAL_ERROR;
 800438c:	2001      	movs	r0, #1
 800438e:	e75b      	b.n	8004248 <HAL_UART_Init+0x6c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004390:	4b2f      	ldr	r3, [pc, #188]	; (8004450 <HAL_UART_Init+0x274>)
 8004392:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004394:	230c      	movs	r3, #12
 8004396:	4013      	ands	r3, r2
 8004398:	4a36      	ldr	r2, [pc, #216]	; (8004474 <HAL_UART_Init+0x298>)
 800439a:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 800439c:	e7c0      	b.n	8004320 <HAL_UART_Init+0x144>
        pclk = HAL_RCC_GetPCLK1Freq();
 800439e:	f7ff f8a7 	bl	80034f0 <HAL_RCC_GetPCLK1Freq>
        break;
 80043a2:	e796      	b.n	80042d2 <HAL_UART_Init+0xf6>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043a4:	6803      	ldr	r3, [r0, #0]
 80043a6:	2010      	movs	r0, #16
 80043a8:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80043aa:	4243      	negs	r3, r0
 80043ac:	4158      	adcs	r0, r3
 80043ae:	4b2e      	ldr	r3, [pc, #184]	; (8004468 <HAL_UART_Init+0x28c>)
 80043b0:	4240      	negs	r0, r0
 80043b2:	4018      	ands	r0, r3
 80043b4:	4b2d      	ldr	r3, [pc, #180]	; (800446c <HAL_UART_Init+0x290>)
 80043b6:	469c      	mov	ip, r3
 80043b8:	4460      	add	r0, ip
 80043ba:	e791      	b.n	80042e0 <HAL_UART_Init+0x104>
    switch (clocksource)
 80043bc:	2080      	movs	r0, #128	; 0x80
 80043be:	0200      	lsls	r0, r0, #8
 80043c0:	e7cb      	b.n	800435a <HAL_UART_Init+0x17e>
    switch (clocksource)
 80043c2:	2b08      	cmp	r3, #8
 80043c4:	d900      	bls.n	80043c8 <HAL_UART_Init+0x1ec>
 80043c6:	e73b      	b.n	8004240 <HAL_UART_Init+0x64>
 80043c8:	4a2b      	ldr	r2, [pc, #172]	; (8004478 <HAL_UART_Init+0x29c>)
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	58d3      	ldr	r3, [r2, r3]
 80043ce:	469f      	mov	pc, r3
        pclk = HAL_RCC_GetSysClockFreq();
 80043d0:	f7fe fc60 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80043d4:	2800      	cmp	r0, #0
 80043d6:	d100      	bne.n	80043da <HAL_UART_Init+0x1fe>
 80043d8:	e747      	b.n	800426a <HAL_UART_Init+0x8e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043da:	0040      	lsls	r0, r0, #1
 80043dc:	6863      	ldr	r3, [r4, #4]
 80043de:	6861      	ldr	r1, [r4, #4]
 80043e0:	085b      	lsrs	r3, r3, #1
 80043e2:	1818      	adds	r0, r3, r0
 80043e4:	f7fb fea2 	bl	800012c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043e8:	0002      	movs	r2, r0
 80043ea:	4b21      	ldr	r3, [pc, #132]	; (8004470 <HAL_UART_Init+0x294>)
 80043ec:	3a10      	subs	r2, #16
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d900      	bls.n	80043f4 <HAL_UART_Init+0x218>
 80043f2:	e725      	b.n	8004240 <HAL_UART_Init+0x64>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043f4:	4b21      	ldr	r3, [pc, #132]	; (800447c <HAL_UART_Init+0x2a0>)
        huart->Instance->BRR = brrtemp;
 80043f6:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043f8:	4003      	ands	r3, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043fa:	0700      	lsls	r0, r0, #28
 80043fc:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 80043fe:	4318      	orrs	r0, r3
  huart->RxISR = NULL;
 8004400:	2300      	movs	r3, #0
        huart->Instance->BRR = brrtemp;
 8004402:	60d0      	str	r0, [r2, #12]
  huart->RxISR = NULL;
 8004404:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8004406:	66e3      	str	r3, [r4, #108]	; 0x6c
  return ret;
 8004408:	e732      	b.n	8004270 <HAL_UART_Init+0x94>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800440a:	2010      	movs	r0, #16
 800440c:	4b10      	ldr	r3, [pc, #64]	; (8004450 <HAL_UART_Init+0x274>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4018      	ands	r0, r3
 8004412:	4243      	negs	r3, r0
 8004414:	4158      	adcs	r0, r3
 8004416:	4b1a      	ldr	r3, [pc, #104]	; (8004480 <HAL_UART_Init+0x2a4>)
 8004418:	4240      	negs	r0, r0
 800441a:	4018      	ands	r0, r3
 800441c:	4b19      	ldr	r3, [pc, #100]	; (8004484 <HAL_UART_Init+0x2a8>)
 800441e:	469c      	mov	ip, r3
 8004420:	4460      	add	r0, ip
 8004422:	e7db      	b.n	80043dc <HAL_UART_Init+0x200>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004424:	f7ff f864 	bl	80034f0 <HAL_RCC_GetPCLK1Freq>
        break;
 8004428:	e7d4      	b.n	80043d4 <HAL_UART_Init+0x1f8>
        pclk = HAL_RCC_GetPCLK2Freq();
 800442a:	f7ff f871 	bl	8003510 <HAL_RCC_GetPCLK2Freq>
        break;
 800442e:	e7d1      	b.n	80043d4 <HAL_UART_Init+0x1f8>
    switch (clocksource)
 8004430:	2080      	movs	r0, #128	; 0x80
 8004432:	0240      	lsls	r0, r0, #9
 8004434:	e7d2      	b.n	80043dc <HAL_UART_Init+0x200>
 8004436:	46c0      	nop			; (mov r8, r8)
 8004438:	efff69f3 	.word	0xefff69f3
 800443c:	ffffcfff 	.word	0xffffcfff
 8004440:	40004800 	.word	0x40004800
 8004444:	fffff4ff 	.word	0xfffff4ff
 8004448:	40013800 	.word	0x40013800
 800444c:	40004400 	.word	0x40004400
 8004450:	40021000 	.word	0x40021000
 8004454:	ffffb7ff 	.word	0xffffb7ff
 8004458:	fffffd00 	.word	0xfffffd00
 800445c:	000ffcff 	.word	0x000ffcff
 8004460:	0800ae3c 	.word	0x0800ae3c
 8004464:	0800adf4 	.word	0x0800adf4
 8004468:	00b71b00 	.word	0x00b71b00
 800446c:	003d0900 	.word	0x003d0900
 8004470:	0000ffef 	.word	0x0000ffef
 8004474:	0800ae40 	.word	0x0800ae40
 8004478:	0800ae18 	.word	0x0800ae18
 800447c:	0000fff0 	.word	0x0000fff0
 8004480:	016e3600 	.word	0x016e3600
 8004484:	007a1200 	.word	0x007a1200

08004488 <DEV_SPI_WriteByte>:
#include "DEV_Config.h"
//#include "stm32f1xx_hal_spi.h"

extern SPI_HandleTypeDef hspi1;
void DEV_SPI_WriteByte(UBYTE value)
{
 8004488:	b500      	push	{lr}
 800448a:	b083      	sub	sp, #12
 800448c:	466b      	mov	r3, sp
 800448e:	1dd9      	adds	r1, r3, #7
	HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 8004490:	23fa      	movs	r3, #250	; 0xfa
{
 8004492:	7008      	strb	r0, [r1, #0]
	HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 8004494:	2201      	movs	r2, #1
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4802      	ldr	r0, [pc, #8]	; (80044a4 <DEV_SPI_WriteByte+0x1c>)
 800449a:	f7ff fa75 	bl	8003988 <HAL_SPI_Transmit>
}
 800449e:	b003      	add	sp, #12
 80044a0:	bd00      	pop	{pc}
 80044a2:	46c0      	nop			; (mov r8, r8)
 80044a4:	2000128c 	.word	0x2000128c

080044a8 <Paint_SetPixel.part.0>:
parameter:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
 80044a8:	b570      	push	{r4, r5, r6, lr}
        Debug("Exceeding display boundaries\r\n");
        return;
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 80044aa:	4c45      	ldr	r4, [pc, #276]	; (80045c0 <Paint_SetPixel.part.0+0x118>)
 80044ac:	89e3      	ldrh	r3, [r4, #14]
 80044ae:	2bb4      	cmp	r3, #180	; 0xb4
 80044b0:	d043      	beq.n	800453a <Paint_SetPixel.part.0+0x92>
 80044b2:	d820      	bhi.n	80044f6 <Paint_SetPixel.part.0+0x4e>
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d006      	beq.n	80044c6 <Paint_SetPixel.part.0+0x1e>
 80044b8:	2b5a      	cmp	r3, #90	; 0x5a
 80044ba:	d11b      	bne.n	80044f4 <Paint_SetPixel.part.0+0x4c>
    case 0:
        X = Xpoint;
        Y = Ypoint;  
        break;
    case 90:
        X = Paint.WidthMemory - Ypoint - 1;
 80044bc:	8923      	ldrh	r3, [r4, #8]
 80044be:	3b01      	subs	r3, #1
 80044c0:	1a5b      	subs	r3, r3, r1
        Y = Xpoint;
 80044c2:	0001      	movs	r1, r0
        X = Paint.WidthMemory - Ypoint - 1;
 80044c4:	b298      	uxth	r0, r3
        break;
    default:
        return;
    }
    
    switch(Paint.Mirror) {
 80044c6:	8a23      	ldrh	r3, [r4, #16]
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d020      	beq.n	800450e <Paint_SetPixel.part.0+0x66>
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d829      	bhi.n	8004524 <Paint_SetPixel.part.0+0x7c>
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d020      	beq.n	8004516 <Paint_SetPixel.part.0+0x6e>
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 80044d4:	8923      	ldrh	r3, [r4, #8]
 80044d6:	1e5d      	subs	r5, r3, #1
 80044d8:	1a28      	subs	r0, r5, r0
 80044da:	b280      	uxth	r0, r0
        break;
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 80044dc:	4283      	cmp	r3, r0
 80044de:	d31d      	bcc.n	800451c <Paint_SetPixel.part.0+0x74>
 80044e0:	8963      	ldrh	r3, [r4, #10]
 80044e2:	428b      	cmp	r3, r1
 80044e4:	d31a      	bcc.n	800451c <Paint_SetPixel.part.0+0x74>
        Debug("Exceeding display boundaries\r\n");
        return;
    }
    
    if(Paint.Scale == 2){
 80044e6:	8ae3      	ldrh	r3, [r4, #22]
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d042      	beq.n	8004572 <Paint_SetPixel.part.0+0xca>
        UBYTE Rdata = Paint.Image[Addr];
        if(Color == BLACK)
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
    }else if(Paint.Scale == 4){
 80044ec:	2b04      	cmp	r3, #4
 80044ee:	d02d      	beq.n	800454c <Paint_SetPixel.part.0+0xa4>
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
        UBYTE Rdata = Paint.Image[Addr];

        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
    }else if(Paint.Scale == 7){
 80044f0:	2b07      	cmp	r3, #7
 80044f2:	d052      	beq.n	800459a <Paint_SetPixel.part.0+0xf2>
		UBYTE Rdata = Paint.Image[Addr];
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
		//printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
		}
}
 80044f4:	bd70      	pop	{r4, r5, r6, pc}
    switch(Paint.Rotate) {
 80044f6:	2587      	movs	r5, #135	; 0x87
 80044f8:	006d      	lsls	r5, r5, #1
 80044fa:	42ab      	cmp	r3, r5
 80044fc:	d1fa      	bne.n	80044f4 <Paint_SetPixel.part.0+0x4c>
        Y = Paint.HeightMemory - Xpoint - 1;
 80044fe:	8963      	ldrh	r3, [r4, #10]
 8004500:	3b01      	subs	r3, #1
 8004502:	1a1b      	subs	r3, r3, r0
        X = Ypoint;
 8004504:	0008      	movs	r0, r1
        Y = Paint.HeightMemory - Xpoint - 1;
 8004506:	b299      	uxth	r1, r3
    switch(Paint.Mirror) {
 8004508:	8a23      	ldrh	r3, [r4, #16]
 800450a:	2b02      	cmp	r3, #2
 800450c:	d1de      	bne.n	80044cc <Paint_SetPixel.part.0+0x24>
        Y = Paint.HeightMemory - Y - 1;
 800450e:	8963      	ldrh	r3, [r4, #10]
 8004510:	3b01      	subs	r3, #1
 8004512:	1a59      	subs	r1, r3, r1
 8004514:	b289      	uxth	r1, r1
        X = Paint.WidthMemory - Ypoint - 1;
 8004516:	8923      	ldrh	r3, [r4, #8]
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8004518:	4283      	cmp	r3, r0
 800451a:	d2e1      	bcs.n	80044e0 <Paint_SetPixel.part.0+0x38>
        Debug("Exceeding display boundaries\r\n");
 800451c:	4829      	ldr	r0, [pc, #164]	; (80045c4 <Paint_SetPixel.part.0+0x11c>)
 800451e:	f005 fc17 	bl	8009d50 <puts>
        return;
 8004522:	e7e7      	b.n	80044f4 <Paint_SetPixel.part.0+0x4c>
    switch(Paint.Mirror) {
 8004524:	2b03      	cmp	r3, #3
 8004526:	d1e5      	bne.n	80044f4 <Paint_SetPixel.part.0+0x4c>
        X = Paint.WidthMemory - X - 1;
 8004528:	8923      	ldrh	r3, [r4, #8]
 800452a:	1e5d      	subs	r5, r3, #1
 800452c:	1a28      	subs	r0, r5, r0
        Y = Paint.HeightMemory - Y - 1;
 800452e:	8965      	ldrh	r5, [r4, #10]
        X = Paint.WidthMemory - X - 1;
 8004530:	b280      	uxth	r0, r0
        Y = Paint.HeightMemory - Y - 1;
 8004532:	3d01      	subs	r5, #1
 8004534:	1a69      	subs	r1, r5, r1
 8004536:	b289      	uxth	r1, r1
        break;
 8004538:	e7d0      	b.n	80044dc <Paint_SetPixel.part.0+0x34>
        X = Paint.WidthMemory - Xpoint - 1;
 800453a:	8923      	ldrh	r3, [r4, #8]
 800453c:	3b01      	subs	r3, #1
 800453e:	1a18      	subs	r0, r3, r0
        Y = Paint.HeightMemory - Ypoint - 1;
 8004540:	8963      	ldrh	r3, [r4, #10]
        X = Paint.WidthMemory - Xpoint - 1;
 8004542:	b280      	uxth	r0, r0
        Y = Paint.HeightMemory - Ypoint - 1;
 8004544:	3b01      	subs	r3, #1
 8004546:	1a59      	subs	r1, r3, r1
 8004548:	b289      	uxth	r1, r1
        break;
 800454a:	e7bc      	b.n	80044c6 <Paint_SetPixel.part.0+0x1e>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 800454c:	8a63      	ldrh	r3, [r4, #18]
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 800454e:	26c0      	movs	r6, #192	; 0xc0
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 8004550:	4359      	muls	r1, r3
 8004552:	0883      	lsrs	r3, r0, #2
 8004554:	b29b      	uxth	r3, r3
 8004556:	18c9      	adds	r1, r1, r3
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8004558:	2303      	movs	r3, #3
 800455a:	4018      	ands	r0, r3
 800455c:	0040      	lsls	r0, r0, #1
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 800455e:	401a      	ands	r2, r3
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8004560:	4106      	asrs	r6, r0
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8004562:	0192      	lsls	r2, r2, #6
 8004564:	4102      	asrs	r2, r0
        UBYTE Rdata = Paint.Image[Addr];
 8004566:	6825      	ldr	r5, [r4, #0]
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8004568:	5c6c      	ldrb	r4, [r5, r1]
 800456a:	43b4      	bics	r4, r6
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 800456c:	4322      	orrs	r2, r4
 800456e:	546a      	strb	r2, [r5, r1]
 8004570:	e7c0      	b.n	80044f4 <Paint_SetPixel.part.0+0x4c>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 8004572:	8a63      	ldrh	r3, [r4, #18]
 8004574:	4359      	muls	r1, r3
 8004576:	08c3      	lsrs	r3, r0, #3
 8004578:	b29b      	uxth	r3, r3
 800457a:	18c9      	adds	r1, r1, r3
        UBYTE Rdata = Paint.Image[Addr];
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	185c      	adds	r4, r3, r1
 8004580:	5c59      	ldrb	r1, [r3, r1]
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 8004582:	2307      	movs	r3, #7
 8004584:	4018      	ands	r0, r3
 8004586:	3379      	adds	r3, #121	; 0x79
 8004588:	4103      	asrs	r3, r0
        if(Color == BLACK)
 800458a:	2a00      	cmp	r2, #0
 800458c:	d102      	bne.n	8004594 <Paint_SetPixel.part.0+0xec>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 800458e:	4399      	bics	r1, r3
 8004590:	7021      	strb	r1, [r4, #0]
 8004592:	e7af      	b.n	80044f4 <Paint_SetPixel.part.0+0x4c>
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8004594:	430b      	orrs	r3, r1
 8004596:	7023      	strb	r3, [r4, #0]
 8004598:	e7ac      	b.n	80044f4 <Paint_SetPixel.part.0+0x4c>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 800459a:	8a63      	ldrh	r3, [r4, #18]
		UBYTE Rdata = Paint.Image[Addr];
 800459c:	6825      	ldr	r5, [r4, #0]
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 800459e:	4359      	muls	r1, r3
 80045a0:	0843      	lsrs	r3, r0, #1
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	18c9      	adds	r1, r1, r3
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 80045a6:	2301      	movs	r3, #1
 80045a8:	24f0      	movs	r4, #240	; 0xf0
 80045aa:	4018      	ands	r0, r3
 80045ac:	0080      	lsls	r0, r0, #2
 80045ae:	4104      	asrs	r4, r0
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 80045b0:	0112      	lsls	r2, r2, #4
 80045b2:	4102      	asrs	r2, r0
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 80045b4:	5c6b      	ldrb	r3, [r5, r1]
 80045b6:	43a3      	bics	r3, r4
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 80045b8:	431a      	orrs	r2, r3
 80045ba:	546a      	strb	r2, [r5, r1]
 80045bc:	e79a      	b.n	80044f4 <Paint_SetPixel.part.0+0x4c>
 80045be:	46c0      	nop			; (mov r8, r8)
 80045c0:	20001374 	.word	0x20001374
 80045c4:	0800c19c 	.word	0x0800c19c

080045c8 <Paint_DrawChar.part.0>:
    Acsii_Char       ：To display the English characters
    Font             ：A structure pointer that displays a character size
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
 80045c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ca:	4657      	mov	r7, sl
 80045cc:	46de      	mov	lr, fp
 80045ce:	4645      	mov	r5, r8
 80045d0:	464e      	mov	r6, r9
 80045d2:	469b      	mov	fp, r3
 80045d4:	b5e0      	push	{r5, r6, r7, lr}
 80045d6:	b085      	sub	sp, #20
 80045d8:	ab0e      	add	r3, sp, #56	; 0x38
 80045da:	881b      	ldrh	r3, [r3, #0]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
        return;
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 80045dc:	2707      	movs	r7, #7
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
 80045de:	9301      	str	r3, [sp, #4]
 80045e0:	ab0f      	add	r3, sp, #60	; 0x3c
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	9002      	str	r0, [sp, #8]
 80045e6:	469a      	mov	sl, r3
    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 80045e8:	465b      	mov	r3, fp
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
 80045ea:	9103      	str	r1, [sp, #12]
 80045ec:	000c      	movs	r4, r1
    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 80045ee:	88d9      	ldrh	r1, [r3, #6]
 80045f0:	889b      	ldrh	r3, [r3, #4]
 80045f2:	3a20      	subs	r2, #32
 80045f4:	401f      	ands	r7, r3
 80045f6:	1e78      	subs	r0, r7, #1
 80045f8:	4187      	sbcs	r7, r0
 80045fa:	08d8      	lsrs	r0, r3, #3
 80045fc:	1838      	adds	r0, r7, r0
 80045fe:	0017      	movs	r7, r2
    const unsigned char *ptr = &Font->table[Char_Offset];
 8004600:	465a      	mov	r2, fp
 8004602:	6812      	ldr	r2, [r2, #0]
    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8004604:	434f      	muls	r7, r1
    const unsigned char *ptr = &Font->table[Char_Offset];
 8004606:	4694      	mov	ip, r2
    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 8004608:	4347      	muls	r7, r0

    for (Page = 0; Page < Font->Height; Page ++ ) {
 800460a:	46a0      	mov	r8, r4
    const unsigned char *ptr = &Font->table[Char_Offset];
 800460c:	4467      	add	r7, ip
    for (Page = 0; Page < Font->Height; Page ++ ) {
 800460e:	2900      	cmp	r1, #0
 8004610:	d059      	beq.n	80046c6 <Paint_DrawChar.part.0+0xfe>
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8004612:	4a30      	ldr	r2, [pc, #192]	; (80046d4 <Paint_DrawChar.part.0+0x10c>)
 8004614:	4691      	mov	r9, r2
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8004616:	2b00      	cmp	r3, #0
 8004618:	d055      	beq.n	80046c6 <Paint_DrawChar.part.0+0xfe>
 800461a:	2500      	movs	r5, #0
 800461c:	9e02      	ldr	r6, [sp, #8]
 800461e:	e01d      	b.n	800465c <Paint_DrawChar.part.0+0x94>
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
                if (*ptr & (0x80 >> (Column % 8)))
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 8004620:	2380      	movs	r3, #128	; 0x80
 8004622:	4123      	asrs	r3, r4
 8004624:	783a      	ldrb	r2, [r7, #0]
 8004626:	4213      	tst	r3, r2
 8004628:	d02c      	beq.n	8004684 <Paint_DrawChar.part.0+0xbc>
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 800462a:	464b      	mov	r3, r9
 800462c:	889b      	ldrh	r3, [r3, #4]
 800462e:	42b3      	cmp	r3, r6
 8004630:	d322      	bcc.n	8004678 <Paint_DrawChar.part.0+0xb0>
 8004632:	464b      	mov	r3, r9
 8004634:	88db      	ldrh	r3, [r3, #6]
 8004636:	4543      	cmp	r3, r8
 8004638:	d31e      	bcc.n	8004678 <Paint_DrawChar.part.0+0xb0>
 800463a:	9a01      	ldr	r2, [sp, #4]
 800463c:	4641      	mov	r1, r8
 800463e:	0030      	movs	r0, r6
 8004640:	f7ff ff32 	bl	80044a8 <Paint_SetPixel.part.0>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8004644:	465b      	mov	r3, fp
 8004646:	889b      	ldrh	r3, [r3, #4]
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
                ptr++;
 8004648:	3c07      	subs	r4, #7
 800464a:	4262      	negs	r2, r4
 800464c:	4154      	adcs	r4, r2
        for (Column = 0; Column < Font->Width; Column ++ ) {
 800464e:	3501      	adds	r5, #1
 8004650:	3601      	adds	r6, #1
 8004652:	b2ad      	uxth	r5, r5
                ptr++;
 8004654:	193f      	adds	r7, r7, r4
        for (Column = 0; Column < Font->Width; Column ++ ) {
 8004656:	b2b6      	uxth	r6, r6
 8004658:	429d      	cmp	r5, r3
 800465a:	d222      	bcs.n	80046a2 <Paint_DrawChar.part.0+0xda>
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 800465c:	2407      	movs	r4, #7
 800465e:	4652      	mov	r2, sl
 8004660:	402c      	ands	r4, r5
 8004662:	2aff      	cmp	r2, #255	; 0xff
 8004664:	d1dc      	bne.n	8004620 <Paint_DrawChar.part.0+0x58>
                if (*ptr & (0x80 >> (Column % 8)))
 8004666:	3a7f      	subs	r2, #127	; 0x7f
 8004668:	4122      	asrs	r2, r4
 800466a:	7839      	ldrb	r1, [r7, #0]
 800466c:	420a      	tst	r2, r1
 800466e:	d0eb      	beq.n	8004648 <Paint_DrawChar.part.0+0x80>
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8004670:	4b18      	ldr	r3, [pc, #96]	; (80046d4 <Paint_DrawChar.part.0+0x10c>)
 8004672:	889a      	ldrh	r2, [r3, #4]
 8004674:	42b2      	cmp	r2, r6
 8004676:	d2dd      	bcs.n	8004634 <Paint_DrawChar.part.0+0x6c>
        Debug("Exceeding display boundaries\r\n");
 8004678:	4817      	ldr	r0, [pc, #92]	; (80046d8 <Paint_DrawChar.part.0+0x110>)
 800467a:	f005 fb69 	bl	8009d50 <puts>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 800467e:	465b      	mov	r3, fp
 8004680:	889b      	ldrh	r3, [r3, #4]
        return;
 8004682:	e7e1      	b.n	8004648 <Paint_DrawChar.part.0+0x80>
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8004684:	464b      	mov	r3, r9
 8004686:	889b      	ldrh	r3, [r3, #4]
 8004688:	42b3      	cmp	r3, r6
 800468a:	d3f5      	bcc.n	8004678 <Paint_DrawChar.part.0+0xb0>
 800468c:	464b      	mov	r3, r9
 800468e:	88db      	ldrh	r3, [r3, #6]
 8004690:	4652      	mov	r2, sl
 8004692:	4543      	cmp	r3, r8
 8004694:	d2d2      	bcs.n	800463c <Paint_DrawChar.part.0+0x74>
        Debug("Exceeding display boundaries\r\n");
 8004696:	4810      	ldr	r0, [pc, #64]	; (80046d8 <Paint_DrawChar.part.0+0x110>)
 8004698:	f005 fb5a 	bl	8009d50 <puts>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 800469c:	465b      	mov	r3, fp
 800469e:	889b      	ldrh	r3, [r3, #4]
 80046a0:	e7d2      	b.n	8004648 <Paint_DrawChar.part.0+0x80>
        }// Write a line
        if (Font->Width % 8 != 0)
 80046a2:	075a      	lsls	r2, r3, #29
 80046a4:	d000      	beq.n	80046a8 <Paint_DrawChar.part.0+0xe0>
            ptr++;
 80046a6:	3701      	adds	r7, #1
    for (Page = 0; Page < Font->Height; Page ++ ) {
 80046a8:	465a      	mov	r2, fp
 80046aa:	88d1      	ldrh	r1, [r2, #6]
 80046ac:	4642      	mov	r2, r8
 80046ae:	9803      	ldr	r0, [sp, #12]
 80046b0:	1a12      	subs	r2, r2, r0
 80046b2:	3201      	adds	r2, #1
 80046b4:	b292      	uxth	r2, r2
 80046b6:	4291      	cmp	r1, r2
 80046b8:	d905      	bls.n	80046c6 <Paint_DrawChar.part.0+0xfe>
 80046ba:	4642      	mov	r2, r8
 80046bc:	3201      	adds	r2, #1
 80046be:	b292      	uxth	r2, r2
 80046c0:	4690      	mov	r8, r2
        for (Column = 0; Column < Font->Width; Column ++ ) {
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1a9      	bne.n	800461a <Paint_DrawChar.part.0+0x52>
    }// Write all
}
 80046c6:	b005      	add	sp, #20
 80046c8:	bcf0      	pop	{r4, r5, r6, r7}
 80046ca:	46bb      	mov	fp, r7
 80046cc:	46b2      	mov	sl, r6
 80046ce:	46a9      	mov	r9, r5
 80046d0:	46a0      	mov	r8, r4
 80046d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046d4:	20001374 	.word	0x20001374
 80046d8:	0800c19c 	.word	0x0800c19c

080046dc <Paint_NewImage>:
{
 80046dc:	b530      	push	{r4, r5, lr}
 80046de:	ac03      	add	r4, sp, #12
 80046e0:	8825      	ldrh	r5, [r4, #0]
    Paint.Image = image;
 80046e2:	4c0e      	ldr	r4, [pc, #56]	; (800471c <Paint_NewImage+0x40>)
 80046e4:	6020      	str	r0, [r4, #0]
	Paint.Scale = 2;
 80046e6:	2002      	movs	r0, #2
    Paint.WidthMemory = Width;
 80046e8:	8121      	strh	r1, [r4, #8]
    Paint.HeightMemory = Height;
 80046ea:	8162      	strh	r2, [r4, #10]
    Paint.Color = Color;    
 80046ec:	81a5      	strh	r5, [r4, #12]
	Paint.Scale = 2;
 80046ee:	82e0      	strh	r0, [r4, #22]
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 80046f0:	0748      	lsls	r0, r1, #29
 80046f2:	d10f      	bne.n	8004714 <Paint_NewImage+0x38>
 80046f4:	08c8      	lsrs	r0, r1, #3
 80046f6:	8260      	strh	r0, [r4, #18]
    Paint.Mirror = MIRROR_NONE;
 80046f8:	2000      	movs	r0, #0
    Paint.HeightByte = Height;    
 80046fa:	82a2      	strh	r2, [r4, #20]
    Paint.Rotate = Rotate;
 80046fc:	81e3      	strh	r3, [r4, #14]
    Paint.Mirror = MIRROR_NONE;
 80046fe:	8220      	strh	r0, [r4, #16]
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8004700:	2b00      	cmp	r3, #0
 8004702:	d004      	beq.n	800470e <Paint_NewImage+0x32>
 8004704:	2bb4      	cmp	r3, #180	; 0xb4
 8004706:	d002      	beq.n	800470e <Paint_NewImage+0x32>
 8004708:	000b      	movs	r3, r1
        Paint.Width = Height;
 800470a:	0011      	movs	r1, r2
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800470c:	001a      	movs	r2, r3
}
 800470e:	80e2      	strh	r2, [r4, #6]
 8004710:	80a1      	strh	r1, [r4, #4]
 8004712:	bd30      	pop	{r4, r5, pc}
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 8004714:	08c8      	lsrs	r0, r1, #3
 8004716:	3001      	adds	r0, #1
 8004718:	b280      	uxth	r0, r0
 800471a:	e7ec      	b.n	80046f6 <Paint_NewImage+0x1a>
 800471c:	20001374 	.word	0x20001374

08004720 <Paint_SelectImage>:
    Paint.Image = image;
 8004720:	4b01      	ldr	r3, [pc, #4]	; (8004728 <Paint_SelectImage+0x8>)
 8004722:	6018      	str	r0, [r3, #0]
}
 8004724:	4770      	bx	lr
 8004726:	46c0      	nop			; (mov r8, r8)
 8004728:	20001374 	.word	0x20001374

0800472c <Paint_SetRotate>:
{
 800472c:	b510      	push	{r4, lr}
 800472e:	1e04      	subs	r4, r0, #0
    if(Rotate == ROTATE_0 || Rotate == ROTATE_90 || Rotate == ROTATE_180 || Rotate == ROTATE_270) {
 8004730:	d007      	beq.n	8004742 <Paint_SetRotate+0x16>
 8004732:	285a      	cmp	r0, #90	; 0x5a
 8004734:	d005      	beq.n	8004742 <Paint_SetRotate+0x16>
 8004736:	28b4      	cmp	r0, #180	; 0xb4
 8004738:	d003      	beq.n	8004742 <Paint_SetRotate+0x16>
 800473a:	2387      	movs	r3, #135	; 0x87
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	4298      	cmp	r0, r3
 8004740:	d106      	bne.n	8004750 <Paint_SetRotate+0x24>
        Debug("Set image Rotate %d\r\n", Rotate);
 8004742:	0021      	movs	r1, r4
 8004744:	4804      	ldr	r0, [pc, #16]	; (8004758 <Paint_SetRotate+0x2c>)
 8004746:	f005 fa77 	bl	8009c38 <iprintf>
        Paint.Rotate = Rotate;
 800474a:	4b04      	ldr	r3, [pc, #16]	; (800475c <Paint_SetRotate+0x30>)
 800474c:	81dc      	strh	r4, [r3, #14]
}
 800474e:	bd10      	pop	{r4, pc}
        Debug("rotate = 0, 90, 180, 270\r\n");
 8004750:	4803      	ldr	r0, [pc, #12]	; (8004760 <Paint_SetRotate+0x34>)
 8004752:	f005 fafd 	bl	8009d50 <puts>
}
 8004756:	e7fa      	b.n	800474e <Paint_SetRotate+0x22>
 8004758:	0800c290 	.word	0x0800c290
 800475c:	20001374 	.word	0x20001374
 8004760:	0800c2b0 	.word	0x0800c2b0

08004764 <Paint_Clear>:
{
 8004764:	b530      	push	{r4, r5, lr}
	if(Paint.Scale == 2) {
 8004766:	492c      	ldr	r1, [pc, #176]	; (8004818 <Paint_Clear+0xb4>)
 8004768:	8acb      	ldrh	r3, [r1, #22]
 800476a:	2b02      	cmp	r3, #2
 800476c:	d022      	beq.n	80047b4 <Paint_Clear+0x50>
    }else if(Paint.Scale == 4) {
 800476e:	2b04      	cmp	r3, #4
 8004770:	d002      	beq.n	8004778 <Paint_Clear+0x14>
	}else if(Paint.Scale == 7) {
 8004772:	2b07      	cmp	r3, #7
 8004774:	d036      	beq.n	80047e4 <Paint_Clear+0x80>
}
 8004776:	bd30      	pop	{r4, r5, pc}
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 8004778:	8a8b      	ldrh	r3, [r1, #20]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0fb      	beq.n	8004776 <Paint_Clear+0x12>
 800477e:	2400      	movs	r4, #0
				Paint.Image[Addr] = (Color<<6)|(Color<<4)|(Color<<2)|Color;
 8004780:	0185      	lsls	r5, r0, #6
 8004782:	0103      	lsls	r3, r0, #4
 8004784:	431d      	orrs	r5, r3
 8004786:	4305      	orrs	r5, r0
 8004788:	0080      	lsls	r0, r0, #2
 800478a:	4305      	orrs	r5, r0
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 800478c:	8a4a      	ldrh	r2, [r1, #18]
				Paint.Image[Addr] = (Color<<6)|(Color<<4)|(Color<<2)|Color;
 800478e:	b2ed      	uxtb	r5, r5
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8004790:	2a00      	cmp	r2, #0
 8004792:	d0f0      	beq.n	8004776 <Paint_Clear+0x12>
 8004794:	2300      	movs	r3, #0
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 8004796:	4362      	muls	r2, r4
				Paint.Image[Addr] = (Color<<6)|(Color<<4)|(Color<<2)|Color;
 8004798:	6808      	ldr	r0, [r1, #0]
 800479a:	18c0      	adds	r0, r0, r3
 800479c:	5485      	strb	r5, [r0, r2]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 800479e:	3301      	adds	r3, #1
 80047a0:	8a4a      	ldrh	r2, [r1, #18]
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d8f6      	bhi.n	8004796 <Paint_Clear+0x32>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80047a8:	3401      	adds	r4, #1
 80047aa:	8a8b      	ldrh	r3, [r1, #20]
 80047ac:	b2a4      	uxth	r4, r4
 80047ae:	42a3      	cmp	r3, r4
 80047b0:	d8ee      	bhi.n	8004790 <Paint_Clear+0x2c>
 80047b2:	e7e0      	b.n	8004776 <Paint_Clear+0x12>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80047b4:	8a8b      	ldrh	r3, [r1, #20]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0dd      	beq.n	8004776 <Paint_Clear+0x12>
 80047ba:	2400      	movs	r4, #0
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 80047bc:	8a4a      	ldrh	r2, [r1, #18]
				Paint.Image[Addr] = Color;
 80047be:	b2c5      	uxtb	r5, r0
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 80047c0:	2a00      	cmp	r2, #0
 80047c2:	d0d8      	beq.n	8004776 <Paint_Clear+0x12>
 80047c4:	2300      	movs	r3, #0
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 80047c6:	4362      	muls	r2, r4
				Paint.Image[Addr] = Color;
 80047c8:	6808      	ldr	r0, [r1, #0]
 80047ca:	18c0      	adds	r0, r0, r3
 80047cc:	5485      	strb	r5, [r0, r2]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 80047ce:	3301      	adds	r3, #1
 80047d0:	8a4a      	ldrh	r2, [r1, #18]
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d8f6      	bhi.n	80047c6 <Paint_Clear+0x62>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80047d8:	3401      	adds	r4, #1
 80047da:	8a8b      	ldrh	r3, [r1, #20]
 80047dc:	b2a4      	uxth	r4, r4
 80047de:	42a3      	cmp	r3, r4
 80047e0:	d8ee      	bhi.n	80047c0 <Paint_Clear+0x5c>
 80047e2:	e7c8      	b.n	8004776 <Paint_Clear+0x12>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 80047e4:	8a8b      	ldrh	r3, [r1, #20]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d0c5      	beq.n	8004776 <Paint_Clear+0x12>
 80047ea:	2400      	movs	r4, #0
				Paint.Image[Addr] = (Color<<4)|Color;
 80047ec:	0105      	lsls	r5, r0, #4
 80047ee:	4305      	orrs	r5, r0
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 80047f0:	8a4a      	ldrh	r2, [r1, #18]
				Paint.Image[Addr] = (Color<<4)|Color;
 80047f2:	b2ed      	uxtb	r5, r5
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 80047f4:	2a00      	cmp	r2, #0
 80047f6:	d0be      	beq.n	8004776 <Paint_Clear+0x12>
 80047f8:	2300      	movs	r3, #0
				UDOUBLE Addr = X + Y*Paint.WidthByte;
 80047fa:	4362      	muls	r2, r4
				Paint.Image[Addr] = (Color<<4)|Color;
 80047fc:	6808      	ldr	r0, [r1, #0]
 80047fe:	18c0      	adds	r0, r0, r3
 8004800:	5485      	strb	r5, [r0, r2]
			for (UWORD X = 0; X < Paint.WidthByte; X++ ) {
 8004802:	3301      	adds	r3, #1
 8004804:	8a4a      	ldrh	r2, [r1, #18]
 8004806:	b29b      	uxth	r3, r3
 8004808:	429a      	cmp	r2, r3
 800480a:	d8f6      	bhi.n	80047fa <Paint_Clear+0x96>
		for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800480c:	3401      	adds	r4, #1
 800480e:	8a8b      	ldrh	r3, [r1, #20]
 8004810:	b2a4      	uxth	r4, r4
 8004812:	42a3      	cmp	r3, r4
 8004814:	d8ee      	bhi.n	80047f4 <Paint_Clear+0x90>
 8004816:	e7ae      	b.n	8004776 <Paint_Clear+0x12>
 8004818:	20001374 	.word	0x20001374

0800481c <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800481c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800481e:	4657      	mov	r7, sl
 8004820:	464e      	mov	r6, r9
 8004822:	4645      	mov	r5, r8
 8004824:	46de      	mov	lr, fp
 8004826:	b5e0      	push	{r5, r6, r7, lr}
 8004828:	b085      	sub	sp, #20
 800482a:	001f      	movs	r7, r3
 800482c:	ab0e      	add	r3, sp, #56	; 0x38
 800482e:	881b      	ldrh	r3, [r3, #0]
 8004830:	468a      	mov	sl, r1
 8004832:	9302      	str	r3, [sp, #8]
 8004834:	ab0f      	add	r3, sp, #60	; 0x3c
 8004836:	881b      	ldrh	r3, [r3, #0]
 8004838:	4681      	mov	r9, r0
 800483a:	9303      	str	r3, [sp, #12]
    UWORD Xpoint = Xstart;
    UWORD Ypoint = Ystart;

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 800483c:	4b23      	ldr	r3, [pc, #140]	; (80048cc <Paint_DrawString_EN+0xb0>)
{
 800483e:	0016      	movs	r6, r2
    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 8004840:	8899      	ldrh	r1, [r3, #4]
 8004842:	4698      	mov	r8, r3
 8004844:	4281      	cmp	r1, r0
 8004846:	d333      	bcc.n	80048b0 <Paint_DrawString_EN+0x94>
 8004848:	88d8      	ldrh	r0, [r3, #6]
 800484a:	4550      	cmp	r0, sl
 800484c:	d330      	bcc.n	80048b0 <Paint_DrawString_EN+0x94>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
        return;
    }

    while (* pString != '\0') {
 800484e:	7812      	ldrb	r2, [r2, #0]
 8004850:	2a00      	cmp	r2, #0
 8004852:	d030      	beq.n	80048b6 <Paint_DrawString_EN+0x9a>
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8004854:	88bb      	ldrh	r3, [r7, #4]
 8004856:	4655      	mov	r5, sl
 8004858:	469c      	mov	ip, r3
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 800485a:	4b1d      	ldr	r3, [pc, #116]	; (80048d0 <Paint_DrawString_EN+0xb4>)
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 800485c:	464c      	mov	r4, r9
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 800485e:	469b      	mov	fp, r3
 8004860:	4663      	mov	r3, ip
 8004862:	e01d      	b.n	80048a0 <Paint_DrawString_EN+0x84>
            Xpoint = Xstart;
            Ypoint += Font->Height;
 8004864:	88fb      	ldrh	r3, [r7, #6]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 8004866:	18eb      	adds	r3, r5, r3
 8004868:	4283      	cmp	r3, r0
 800486a:	dd01      	ble.n	8004870 <Paint_DrawString_EN+0x54>
 800486c:	4655      	mov	r5, sl
 800486e:	464c      	mov	r4, r9
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8004870:	428c      	cmp	r4, r1
 8004872:	d827      	bhi.n	80048c4 <Paint_DrawString_EN+0xa8>
 8004874:	4285      	cmp	r5, r0
 8004876:	d825      	bhi.n	80048c4 <Paint_DrawString_EN+0xa8>
 8004878:	9b02      	ldr	r3, [sp, #8]
 800487a:	0029      	movs	r1, r5
 800487c:	9301      	str	r3, [sp, #4]
 800487e:	9b03      	ldr	r3, [sp, #12]
 8004880:	0020      	movs	r0, r4
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	003b      	movs	r3, r7
 8004886:	f7ff fe9f 	bl	80045c8 <Paint_DrawChar.part.0>

        //The next character of the address
        pString ++;

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 800488a:	88bb      	ldrh	r3, [r7, #4]
    while (* pString != '\0') {
 800488c:	7872      	ldrb	r2, [r6, #1]
        Xpoint += Font->Width;
 800488e:	18e4      	adds	r4, r4, r3
        pString ++;
 8004890:	3601      	adds	r6, #1
        Xpoint += Font->Width;
 8004892:	b2a4      	uxth	r4, r4
    while (* pString != '\0') {
 8004894:	2a00      	cmp	r2, #0
 8004896:	d00e      	beq.n	80048b6 <Paint_DrawString_EN+0x9a>
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 8004898:	4641      	mov	r1, r8
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 800489a:	4640      	mov	r0, r8
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 800489c:	8889      	ldrh	r1, [r1, #4]
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 800489e:	88c0      	ldrh	r0, [r0, #6]
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 80048a0:	18e3      	adds	r3, r4, r3
 80048a2:	428b      	cmp	r3, r1
 80048a4:	ddde      	ble.n	8004864 <Paint_DrawString_EN+0x48>
            Ypoint += Font->Height;
 80048a6:	88fb      	ldrh	r3, [r7, #6]
 80048a8:	464c      	mov	r4, r9
 80048aa:	195d      	adds	r5, r3, r5
 80048ac:	b2ad      	uxth	r5, r5
 80048ae:	e7da      	b.n	8004866 <Paint_DrawString_EN+0x4a>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 80048b0:	4808      	ldr	r0, [pc, #32]	; (80048d4 <Paint_DrawString_EN+0xb8>)
 80048b2:	f005 fa4d 	bl	8009d50 <puts>
    }
}
 80048b6:	b005      	add	sp, #20
 80048b8:	bcf0      	pop	{r4, r5, r6, r7}
 80048ba:	46bb      	mov	fp, r7
 80048bc:	46b2      	mov	sl, r6
 80048be:	46a9      	mov	r9, r5
 80048c0:	46a0      	mov	r8, r4
 80048c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 80048c4:	4658      	mov	r0, fp
 80048c6:	f005 fa43 	bl	8009d50 <puts>
        return;
 80048ca:	e7de      	b.n	800488a <Paint_DrawString_EN+0x6e>
 80048cc:	20001374 	.word	0x20001374
 80048d0:	0800c304 	.word	0x0800c304
 80048d4:	0800c344 	.word	0x0800c344

080048d8 <Paint_DrawBitMap_Paste>:
    flipColor: Whether the color is reversed
info:
    Use this function to paste image data into a buffer
******************************************************************************/
void Paint_DrawBitMap_Paste(const unsigned char* image_buffer, UWORD xStart, UWORD yStart, UWORD imageWidth, UWORD imageHeight, UBYTE flipColor)
{
 80048d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048da:	46de      	mov	lr, fp
 80048dc:	4657      	mov	r7, sl
 80048de:	464e      	mov	r6, r9
 80048e0:	4645      	mov	r5, r8
 80048e2:	b5e0      	push	{r5, r6, r7, lr}
 80048e4:	b08b      	sub	sp, #44	; 0x2c
 80048e6:	9006      	str	r0, [sp, #24]
 80048e8:	0018      	movs	r0, r3
 80048ea:	9301      	str	r3, [sp, #4]
 80048ec:	ab14      	add	r3, sp, #80	; 0x50
 80048ee:	9208      	str	r2, [sp, #32]
 80048f0:	881a      	ldrh	r2, [r3, #0]
 80048f2:	ab15      	add	r3, sp, #84	; 0x54
 80048f4:	9107      	str	r1, [sp, #28]
 80048f6:	7819      	ldrb	r1, [r3, #0]
 80048f8:	9205      	str	r2, [sp, #20]
 80048fa:	9102      	str	r1, [sp, #8]
    UBYTE color, srcImage;
    UWORD x, y;
    UWORD width = (imageWidth%8==0 ? imageWidth/8 : imageWidth/8+1);
 80048fc:	0741      	lsls	r1, r0, #29
 80048fe:	d000      	beq.n	8004902 <Paint_DrawBitMap_Paste+0x2a>
 8004900:	e09b      	b.n	8004a3a <Paint_DrawBitMap_Paste+0x162>
 8004902:	08c3      	lsrs	r3, r0, #3
 8004904:	9309      	str	r3, [sp, #36]	; 0x24

    for (y = 0; y < imageHeight; y++) {
 8004906:	2a00      	cmp	r2, #0
 8004908:	d100      	bne.n	800490c <Paint_DrawBitMap_Paste+0x34>
 800490a:	e08f      	b.n	8004a2c <Paint_DrawBitMap_Paste+0x154>
 800490c:	2800      	cmp	r0, #0
 800490e:	d100      	bne.n	8004912 <Paint_DrawBitMap_Paste+0x3a>
 8004910:	e08c      	b.n	8004a2c <Paint_DrawBitMap_Paste+0x154>
    switch(Paint.Rotate) {
 8004912:	2300      	movs	r3, #0
 8004914:	9304      	str	r3, [sp, #16]
        Debug("Exceeding display boundaries\r\n");
 8004916:	4b7d      	ldr	r3, [pc, #500]	; (8004b0c <Paint_DrawBitMap_Paste+0x234>)
 8004918:	4e7d      	ldr	r6, [pc, #500]	; (8004b10 <Paint_DrawBitMap_Paste+0x238>)
 800491a:	9303      	str	r3, [sp, #12]
            srcImage = image_buffer[y*width + x/8];
            if(flipColor)
                color = (((srcImage<<(x%8) & 0x80) == 0) ? 1 : 0);
            else
                color = (((srcImage<<(x%8) & 0x80) == 0) ? 0 : 1);
            Paint_SetPixel(x+xStart, y+yStart, color);
 800491c:	9a04      	ldr	r2, [sp, #16]
 800491e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004920:	4694      	mov	ip, r2
 8004922:	4353      	muls	r3, r2
 8004924:	9a06      	ldr	r2, [sp, #24]
 8004926:	9f08      	ldr	r7, [sp, #32]
 8004928:	4692      	mov	sl, r2
 800492a:	449a      	add	sl, r3
                color = (((srcImage<<(x%8) & 0x80) == 0) ? 0 : 1);
 800492c:	2307      	movs	r3, #7
            Paint_SetPixel(x+xStart, y+yStart, color);
 800492e:	4467      	add	r7, ip
                color = (((srcImage<<(x%8) & 0x80) == 0) ? 0 : 1);
 8004930:	4698      	mov	r8, r3
 8004932:	3b06      	subs	r3, #6
        for (x = 0; x < imageWidth; x++) {
 8004934:	2400      	movs	r4, #0
                color = (((srcImage<<(x%8) & 0x80) == 0) ? 0 : 1);
 8004936:	4699      	mov	r9, r3
            Paint_SetPixel(x+xStart, y+yStart, color);
 8004938:	9d07      	ldr	r5, [sp, #28]
 800493a:	b2bf      	uxth	r7, r7
 800493c:	e054      	b.n	80049e8 <Paint_DrawBitMap_Paste+0x110>
                color = (((srcImage<<(x%8) & 0x80) == 0) ? 1 : 0);
 800493e:	4642      	mov	r2, r8
 8004940:	4022      	ands	r2, r4
 8004942:	4093      	lsls	r3, r2
 8004944:	464a      	mov	r2, r9
 8004946:	09db      	lsrs	r3, r3, #7
 8004948:	439a      	bics	r2, r3
 800494a:	9200      	str	r2, [sp, #0]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 800494c:	88b2      	ldrh	r2, [r6, #4]
 800494e:	42aa      	cmp	r2, r5
 8004950:	d35a      	bcc.n	8004a08 <Paint_DrawBitMap_Paste+0x130>
 8004952:	88f2      	ldrh	r2, [r6, #6]
 8004954:	42ba      	cmp	r2, r7
 8004956:	d357      	bcc.n	8004a08 <Paint_DrawBitMap_Paste+0x130>
    switch(Paint.Rotate) {
 8004958:	89f2      	ldrh	r2, [r6, #14]
 800495a:	2ab4      	cmp	r2, #180	; 0xb4
 800495c:	d100      	bne.n	8004960 <Paint_DrawBitMap_Paste+0x88>
 800495e:	e09a      	b.n	8004a96 <Paint_DrawBitMap_Paste+0x1be>
 8004960:	d900      	bls.n	8004964 <Paint_DrawBitMap_Paste+0x8c>
 8004962:	e072      	b.n	8004a4a <Paint_DrawBitMap_Paste+0x172>
 8004964:	2a00      	cmp	r2, #0
 8004966:	d100      	bne.n	800496a <Paint_DrawBitMap_Paste+0x92>
 8004968:	e092      	b.n	8004a90 <Paint_DrawBitMap_Paste+0x1b8>
 800496a:	2a5a      	cmp	r2, #90	; 0x5a
 800496c:	d135      	bne.n	80049da <Paint_DrawBitMap_Paste+0x102>
        break;
 800496e:	0028      	movs	r0, r5
        X = Paint.WidthMemory - Ypoint - 1;
 8004970:	8931      	ldrh	r1, [r6, #8]
 8004972:	3901      	subs	r1, #1
 8004974:	1bc9      	subs	r1, r1, r7
 8004976:	b289      	uxth	r1, r1
    switch(Paint.Mirror) {
 8004978:	8a32      	ldrh	r2, [r6, #16]
 800497a:	2a02      	cmp	r2, #2
 800497c:	d100      	bne.n	8004980 <Paint_DrawBitMap_Paste+0xa8>
 800497e:	e071      	b.n	8004a64 <Paint_DrawBitMap_Paste+0x18c>
 8004980:	2a02      	cmp	r2, #2
 8004982:	d900      	bls.n	8004986 <Paint_DrawBitMap_Paste+0xae>
 8004984:	e074      	b.n	8004a70 <Paint_DrawBitMap_Paste+0x198>
 8004986:	2a00      	cmp	r2, #0
 8004988:	d100      	bne.n	800498c <Paint_DrawBitMap_Paste+0xb4>
 800498a:	e06f      	b.n	8004a6c <Paint_DrawBitMap_Paste+0x194>
        X = Paint.WidthMemory - X - 1;
 800498c:	8932      	ldrh	r2, [r6, #8]
 800498e:	1e53      	subs	r3, r2, #1
 8004990:	1a59      	subs	r1, r3, r1
 8004992:	b289      	uxth	r1, r1
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8004994:	4291      	cmp	r1, r2
 8004996:	d837      	bhi.n	8004a08 <Paint_DrawBitMap_Paste+0x130>
 8004998:	8972      	ldrh	r2, [r6, #10]
 800499a:	4282      	cmp	r2, r0
 800499c:	d334      	bcc.n	8004a08 <Paint_DrawBitMap_Paste+0x130>
    if(Paint.Scale == 2){
 800499e:	8af2      	ldrh	r2, [r6, #22]
 80049a0:	2a02      	cmp	r2, #2
 80049a2:	d100      	bne.n	80049a6 <Paint_DrawBitMap_Paste+0xce>
 80049a4:	e080      	b.n	8004aa8 <Paint_DrawBitMap_Paste+0x1d0>
    }else if(Paint.Scale == 4){
 80049a6:	2a04      	cmp	r2, #4
 80049a8:	d100      	bne.n	80049ac <Paint_DrawBitMap_Paste+0xd4>
 80049aa:	e091      	b.n	8004ad0 <Paint_DrawBitMap_Paste+0x1f8>
    }else if(Paint.Scale == 7){
 80049ac:	2a07      	cmp	r2, #7
 80049ae:	d114      	bne.n	80049da <Paint_DrawBitMap_Paste+0x102>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 80049b0:	8a72      	ldrh	r2, [r6, #18]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 80049b2:	464b      	mov	r3, r9
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 80049b4:	4350      	muls	r0, r2
 80049b6:	084a      	lsrs	r2, r1, #1
 80049b8:	b292      	uxth	r2, r2
 80049ba:	1882      	adds	r2, r0, r2
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 80049bc:	20f0      	movs	r0, #240	; 0xf0
 80049be:	4019      	ands	r1, r3
 80049c0:	0089      	lsls	r1, r1, #2
 80049c2:	4108      	asrs	r0, r1
 80049c4:	4684      	mov	ip, r0
 80049c6:	6833      	ldr	r3, [r6, #0]
 80049c8:	5c98      	ldrb	r0, [r3, r2]
 80049ca:	4663      	mov	r3, ip
 80049cc:	4398      	bics	r0, r3
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 80049ce:	9b00      	ldr	r3, [sp, #0]
 80049d0:	011b      	lsls	r3, r3, #4
 80049d2:	410b      	asrs	r3, r1
 80049d4:	4318      	orrs	r0, r3
 80049d6:	6833      	ldr	r3, [r6, #0]
 80049d8:	5498      	strb	r0, [r3, r2]
        for (x = 0; x < imageWidth; x++) {
 80049da:	3401      	adds	r4, #1
 80049dc:	9b01      	ldr	r3, [sp, #4]
 80049de:	3501      	adds	r5, #1
 80049e0:	b2a4      	uxth	r4, r4
 80049e2:	b2ad      	uxth	r5, r5
 80049e4:	42a3      	cmp	r3, r4
 80049e6:	d019      	beq.n	8004a1c <Paint_DrawBitMap_Paste+0x144>
            srcImage = image_buffer[y*width + x/8];
 80049e8:	4652      	mov	r2, sl
 80049ea:	08e3      	lsrs	r3, r4, #3
 80049ec:	5cd3      	ldrb	r3, [r2, r3]
            if(flipColor)
 80049ee:	9a02      	ldr	r2, [sp, #8]
 80049f0:	2a00      	cmp	r2, #0
 80049f2:	d1a4      	bne.n	800493e <Paint_DrawBitMap_Paste+0x66>
                color = (((srcImage<<(x%8) & 0x80) == 0) ? 0 : 1);
 80049f4:	4642      	mov	r2, r8
 80049f6:	4022      	ands	r2, r4
 80049f8:	4093      	lsls	r3, r2
 80049fa:	464a      	mov	r2, r9
 80049fc:	09db      	lsrs	r3, r3, #7
 80049fe:	4013      	ands	r3, r2
 8004a00:	9300      	str	r3, [sp, #0]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8004a02:	88b2      	ldrh	r2, [r6, #4]
 8004a04:	42aa      	cmp	r2, r5
 8004a06:	d2a4      	bcs.n	8004952 <Paint_DrawBitMap_Paste+0x7a>
        Debug("Exceeding display boundaries\r\n");
 8004a08:	9803      	ldr	r0, [sp, #12]
 8004a0a:	f005 f9a1 	bl	8009d50 <puts>
        for (x = 0; x < imageWidth; x++) {
 8004a0e:	3401      	adds	r4, #1
 8004a10:	9b01      	ldr	r3, [sp, #4]
 8004a12:	3501      	adds	r5, #1
 8004a14:	b2a4      	uxth	r4, r4
 8004a16:	b2ad      	uxth	r5, r5
 8004a18:	42a3      	cmp	r3, r4
 8004a1a:	d1e5      	bne.n	80049e8 <Paint_DrawBitMap_Paste+0x110>
    for (y = 0; y < imageHeight; y++) {
 8004a1c:	9b04      	ldr	r3, [sp, #16]
 8004a1e:	9a05      	ldr	r2, [sp, #20]
 8004a20:	3301      	adds	r3, #1
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	9304      	str	r3, [sp, #16]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d900      	bls.n	8004a2c <Paint_DrawBitMap_Paste+0x154>
 8004a2a:	e777      	b.n	800491c <Paint_DrawBitMap_Paste+0x44>
        }
    }
}
 8004a2c:	b00b      	add	sp, #44	; 0x2c
 8004a2e:	bcf0      	pop	{r4, r5, r6, r7}
 8004a30:	46bb      	mov	fp, r7
 8004a32:	46b2      	mov	sl, r6
 8004a34:	46a9      	mov	r9, r5
 8004a36:	46a0      	mov	r8, r4
 8004a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    UWORD width = (imageWidth%8==0 ? imageWidth/8 : imageWidth/8+1);
 8004a3a:	08c3      	lsrs	r3, r0, #3
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	9309      	str	r3, [sp, #36]	; 0x24
    for (y = 0; y < imageHeight; y++) {
 8004a40:	9b05      	ldr	r3, [sp, #20]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d000      	beq.n	8004a48 <Paint_DrawBitMap_Paste+0x170>
 8004a46:	e764      	b.n	8004912 <Paint_DrawBitMap_Paste+0x3a>
 8004a48:	e7f0      	b.n	8004a2c <Paint_DrawBitMap_Paste+0x154>
    switch(Paint.Rotate) {
 8004a4a:	2187      	movs	r1, #135	; 0x87
 8004a4c:	0049      	lsls	r1, r1, #1
 8004a4e:	428a      	cmp	r2, r1
 8004a50:	d1c3      	bne.n	80049da <Paint_DrawBitMap_Paste+0x102>
        Y = Paint.HeightMemory - Xpoint - 1;
 8004a52:	8970      	ldrh	r0, [r6, #10]
    switch(Paint.Mirror) {
 8004a54:	8a32      	ldrh	r2, [r6, #16]
        Y = Paint.HeightMemory - Xpoint - 1;
 8004a56:	3801      	subs	r0, #1
 8004a58:	1b40      	subs	r0, r0, r5
        break;
 8004a5a:	0039      	movs	r1, r7
        Y = Paint.HeightMemory - Xpoint - 1;
 8004a5c:	b280      	uxth	r0, r0
    switch(Paint.Mirror) {
 8004a5e:	2a02      	cmp	r2, #2
 8004a60:	d000      	beq.n	8004a64 <Paint_DrawBitMap_Paste+0x18c>
 8004a62:	e78d      	b.n	8004980 <Paint_DrawBitMap_Paste+0xa8>
        Y = Paint.HeightMemory - Y - 1;
 8004a64:	8972      	ldrh	r2, [r6, #10]
 8004a66:	3a01      	subs	r2, #1
 8004a68:	1a10      	subs	r0, r2, r0
 8004a6a:	b280      	uxth	r0, r0
        X = Paint.WidthMemory - Ypoint - 1;
 8004a6c:	8932      	ldrh	r2, [r6, #8]
        break;
 8004a6e:	e791      	b.n	8004994 <Paint_DrawBitMap_Paste+0xbc>
    switch(Paint.Mirror) {
 8004a70:	2a03      	cmp	r2, #3
 8004a72:	d1b2      	bne.n	80049da <Paint_DrawBitMap_Paste+0x102>
        X = Paint.WidthMemory - X - 1;
 8004a74:	8932      	ldrh	r2, [r6, #8]
 8004a76:	1e53      	subs	r3, r2, #1
 8004a78:	1a59      	subs	r1, r3, r1
        Y = Paint.HeightMemory - Y - 1;
 8004a7a:	8973      	ldrh	r3, [r6, #10]
        X = Paint.WidthMemory - X - 1;
 8004a7c:	b289      	uxth	r1, r1
        Y = Paint.HeightMemory - Y - 1;
 8004a7e:	469c      	mov	ip, r3
 8004a80:	2301      	movs	r3, #1
 8004a82:	425b      	negs	r3, r3
 8004a84:	469b      	mov	fp, r3
 8004a86:	44dc      	add	ip, fp
 8004a88:	4663      	mov	r3, ip
 8004a8a:	1a18      	subs	r0, r3, r0
 8004a8c:	b280      	uxth	r0, r0
        break;
 8004a8e:	e781      	b.n	8004994 <Paint_DrawBitMap_Paste+0xbc>
    switch(Paint.Rotate) {
 8004a90:	0038      	movs	r0, r7
 8004a92:	0029      	movs	r1, r5
 8004a94:	e770      	b.n	8004978 <Paint_DrawBitMap_Paste+0xa0>
        X = Paint.WidthMemory - Xpoint - 1;
 8004a96:	8931      	ldrh	r1, [r6, #8]
        Y = Paint.HeightMemory - Ypoint - 1;
 8004a98:	8970      	ldrh	r0, [r6, #10]
        X = Paint.WidthMemory - Xpoint - 1;
 8004a9a:	3901      	subs	r1, #1
        Y = Paint.HeightMemory - Ypoint - 1;
 8004a9c:	3801      	subs	r0, #1
        X = Paint.WidthMemory - Xpoint - 1;
 8004a9e:	1b49      	subs	r1, r1, r5
        Y = Paint.HeightMemory - Ypoint - 1;
 8004aa0:	1bc0      	subs	r0, r0, r7
        X = Paint.WidthMemory - Xpoint - 1;
 8004aa2:	b289      	uxth	r1, r1
        Y = Paint.HeightMemory - Ypoint - 1;
 8004aa4:	b280      	uxth	r0, r0
        break;
 8004aa6:	e767      	b.n	8004978 <Paint_DrawBitMap_Paste+0xa0>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 8004aa8:	8a72      	ldrh	r2, [r6, #18]
 8004aaa:	4350      	muls	r0, r2
 8004aac:	08ca      	lsrs	r2, r1, #3
 8004aae:	b292      	uxth	r2, r2
 8004ab0:	1880      	adds	r0, r0, r2
        UBYTE Rdata = Paint.Image[Addr];
 8004ab2:	6832      	ldr	r2, [r6, #0]
 8004ab4:	1813      	adds	r3, r2, r0
 8004ab6:	469c      	mov	ip, r3
        if(Color == BLACK)
 8004ab8:	9b00      	ldr	r3, [sp, #0]
        UBYTE Rdata = Paint.Image[Addr];
 8004aba:	5c12      	ldrb	r2, [r2, r0]
        if(Color == BLACK)
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d11d      	bne.n	8004afc <Paint_DrawBitMap_Paste+0x224>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 8004ac0:	4643      	mov	r3, r8
 8004ac2:	4019      	ands	r1, r3
 8004ac4:	2380      	movs	r3, #128	; 0x80
 8004ac6:	410b      	asrs	r3, r1
 8004ac8:	439a      	bics	r2, r3
 8004aca:	4663      	mov	r3, ip
 8004acc:	701a      	strb	r2, [r3, #0]
 8004ace:	e784      	b.n	80049da <Paint_DrawBitMap_Paste+0x102>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 8004ad0:	8a72      	ldrh	r2, [r6, #18]
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8004ad2:	6833      	ldr	r3, [r6, #0]
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 8004ad4:	4350      	muls	r0, r2
 8004ad6:	088a      	lsrs	r2, r1, #2
 8004ad8:	b292      	uxth	r2, r2
 8004ada:	1882      	adds	r2, r0, r2
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8004adc:	2003      	movs	r0, #3
 8004ade:	4001      	ands	r1, r0
 8004ae0:	0049      	lsls	r1, r1, #1
 8004ae2:	30bd      	adds	r0, #189	; 0xbd
 8004ae4:	4108      	asrs	r0, r1
 8004ae6:	4684      	mov	ip, r0
 8004ae8:	5c98      	ldrb	r0, [r3, r2]
 8004aea:	4663      	mov	r3, ip
 8004aec:	4398      	bics	r0, r3
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8004aee:	9b00      	ldr	r3, [sp, #0]
 8004af0:	019b      	lsls	r3, r3, #6
 8004af2:	410b      	asrs	r3, r1
 8004af4:	6831      	ldr	r1, [r6, #0]
 8004af6:	4303      	orrs	r3, r0
 8004af8:	548b      	strb	r3, [r1, r2]
 8004afa:	e76e      	b.n	80049da <Paint_DrawBitMap_Paste+0x102>
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8004afc:	4643      	mov	r3, r8
 8004afe:	4019      	ands	r1, r3
 8004b00:	2380      	movs	r3, #128	; 0x80
 8004b02:	410b      	asrs	r3, r1
 8004b04:	431a      	orrs	r2, r3
 8004b06:	4663      	mov	r3, ip
 8004b08:	701a      	strb	r2, [r3, #0]
 8004b0a:	e766      	b.n	80049da <Paint_DrawBitMap_Paste+0x102>
 8004b0c:	0800c19c 	.word	0x0800c19c
 8004b10:	20001374 	.word	0x20001374

08004b14 <Paint_DrawQR_Paste>:
info:
    Use this function to paste image data into a buffer
******************************************************************************/
//void Paint_DrawQR_Paste(const char* xdata, uint8_t xStart, uint8_t yStart)
void Paint_DrawQR_Paste(uint8_t* xdata, uint8_t xStart, uint8_t yStart)
{
 8004b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b16:	46de      	mov	lr, fp
 8004b18:	4657      	mov	r7, sl
 8004b1a:	4645      	mov	r5, r8
 8004b1c:	464e      	mov	r6, r9
	// Create the QR code
	  uint8_t qrcode[qrcodegen_BUFFER_LEN_MAX];
	  uint8_t tempBuffer[qrcodegen_BUFFER_LEN_MAX];
	  int qrErrorLevel = qrcodegen_Ecc_LOW;

	  qrcodegen_encodeText((char*)xdata, tempBuffer, qrcode,
 8004b1e:	2300      	movs	r3, #0
{
 8004b20:	b5e0      	push	{r5, r6, r7, lr}
 8004b22:	4c9b      	ldr	r4, [pc, #620]	; (8004d90 <Paint_DrawQR_Paste+0x27c>)
 8004b24:	44a5      	add	sp, r4
	  qrcodegen_encodeText((char*)xdata, tempBuffer, qrcode,
 8004b26:	9303      	str	r3, [sp, #12]
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	9302      	str	r3, [sp, #8]
 8004b2c:	330b      	adds	r3, #11
 8004b2e:	9301      	str	r3, [sp, #4]
 8004b30:	3b09      	subs	r3, #9
{
 8004b32:	9107      	str	r1, [sp, #28]
 8004b34:	920b      	str	r2, [sp, #44]	; 0x2c
	  qrcodegen_encodeText((char*)xdata, tempBuffer, qrcode,
 8004b36:	9300      	str	r3, [sp, #0]
 8004b38:	aa0c      	add	r2, sp, #48	; 0x30
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	a972      	add	r1, sp, #456	; 0x1c8
 8004b3e:	f004 fb2b 	bl	8009198 <qrcodegen_encodeText>
				qrErrorLevel, qrcodegen_VERSION_MIN, qrcodegen_VERSION_MAX, qrcodegen_Mask_AUTO, false);

	  // QR Code block characteristics will depend on the display:
	  // QR code needs a "quiet zone" of background color around it, hence the offset:
	  uint8_t offset = 3;
	  uint8_t blockSize = (Paint.Width - xStart - (offset * 2)) / qrcodegen_getSize(qrcode);
 8004b42:	a80c      	add	r0, sp, #48	; 0x30
 8004b44:	f003 fede 	bl	8008904 <qrcodegen_getSize>
	  blockSize=1;

	  // read the bytes of the QR code and set the blocks light or dark, accordingly:
	  // vertical loop:
	  for (uint8_t y = 0; y < qrcodegen_getSize(qrcode); y++) {
 8004b48:	2303      	movs	r3, #3
 8004b4a:	9306      	str	r3, [sp, #24]
 8004b4c:	9c06      	ldr	r4, [sp, #24]
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 8004b4e:	4b91      	ldr	r3, [pc, #580]	; (8004d94 <Paint_DrawQR_Paste+0x280>)
	  for (uint8_t y = 0; y < qrcodegen_getSize(qrcode); y++) {
 8004b50:	a80c      	add	r0, sp, #48	; 0x30
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 8004b52:	469b      	mov	fp, r3
	  for (uint8_t y = 0; y < qrcodegen_getSize(qrcode); y++) {
 8004b54:	1ee3      	subs	r3, r4, #3
 8004b56:	b2dd      	uxtb	r5, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8004b58:	4f8f      	ldr	r7, [pc, #572]	; (8004d98 <Paint_DrawQR_Paste+0x284>)
	  for (uint8_t y = 0; y < qrcodegen_getSize(qrcode); y++) {
 8004b5a:	9505      	str	r5, [sp, #20]
 8004b5c:	f003 fed2 	bl	8008904 <qrcodegen_getSize>
 8004b60:	4285      	cmp	r5, r0
 8004b62:	db00      	blt.n	8004b66 <Paint_DrawQR_Paste+0x52>
 8004b64:	e0f4      	b.n	8004d50 <Paint_DrawQR_Paste+0x23c>
	      if (blockValue == 1) {
	        blockColor = BLACK;
	      }
	      //display.fillRect(blockX, blockY, blockSize, blockSize, blockColor);
	      //Paint_DrawPoint(blockX+xStart, blockY+yStart, blockColor, DOT_PIXEL_1X1, DOT_FILL_AROUND);
	      Paint_DrawRectangle(blockX+xStart, blockY+yStart, blockX+xStart+blockSize, blockY+yStart+blockSize, blockColor, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8004b66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b68:	469c      	mov	ip, r3
	    for (uint8_t x = 0; x < qrcodegen_getSize(qrcode); x++) {
 8004b6a:	2300      	movs	r3, #0
	      Paint_DrawRectangle(blockX+xStart, blockY+yStart, blockX+xStart+blockSize, blockY+yStart+blockSize, blockColor, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8004b6c:	4464      	add	r4, ip
	    for (uint8_t x = 0; x < qrcodegen_getSize(qrcode); x++) {
 8004b6e:	4698      	mov	r8, r3
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 8004b70:	1e63      	subs	r3, r4, #1
 8004b72:	b29b      	uxth	r3, r3
	      Paint_DrawRectangle(blockX+xStart, blockY+yStart, blockX+xStart+blockSize, blockY+yStart+blockSize, blockColor, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8004b74:	0026      	movs	r6, r4
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 8004b76:	469a      	mov	sl, r3
 8004b78:	e003      	b.n	8004b82 <Paint_DrawQR_Paste+0x6e>
	    for (uint8_t x = 0; x < qrcodegen_getSize(qrcode); x++) {
 8004b7a:	4643      	mov	r3, r8
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	4698      	mov	r8, r3
 8004b82:	a80c      	add	r0, sp, #48	; 0x30
 8004b84:	f003 febe 	bl	8008904 <qrcodegen_getSize>
 8004b88:	4580      	cmp	r8, r0
 8004b8a:	db00      	blt.n	8004b8e <Paint_DrawQR_Paste+0x7a>
 8004b8c:	e0d2      	b.n	8004d34 <Paint_DrawQR_Paste+0x220>
	      uint8_t blockValue = qrcodegen_getModule(qrcode, x, y);
 8004b8e:	9a05      	ldr	r2, [sp, #20]
 8004b90:	4641      	mov	r1, r8
 8004b92:	a80c      	add	r0, sp, #48	; 0x30
 8004b94:	f003 fece 	bl	8008934 <qrcodegen_getModule>
	      uint8_t blockX = (x * blockSize) + offset;
 8004b98:	4643      	mov	r3, r8
 8004b9a:	1cdc      	adds	r4, r3, #3
	      Paint_DrawRectangle(blockX+xStart, blockY+yStart, blockX+xStart+blockSize, blockY+yStart+blockSize, blockColor, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8004b9c:	9b07      	ldr	r3, [sp, #28]
 8004b9e:	b2e4      	uxtb	r4, r4
 8004ba0:	469c      	mov	ip, r3
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8004ba2:	88ba      	ldrh	r2, [r7, #4]
	      Paint_DrawRectangle(blockX+xStart, blockY+yStart, blockX+xStart+blockSize, blockY+yStart+blockSize, blockColor, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8004ba4:	4464      	add	r4, ip
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8004ba6:	4294      	cmp	r4, r2
 8004ba8:	d900      	bls.n	8004bac <Paint_DrawQR_Paste+0x98>
 8004baa:	e084      	b.n	8004cb6 <Paint_DrawQR_Paste+0x1a2>
 8004bac:	88fb      	ldrh	r3, [r7, #6]
 8004bae:	429e      	cmp	r6, r3
 8004bb0:	d900      	bls.n	8004bb4 <Paint_DrawQR_Paste+0xa0>
 8004bb2:	e080      	b.n	8004cb6 <Paint_DrawQR_Paste+0x1a2>
	      Paint_DrawRectangle(blockX+xStart, blockY+yStart, blockX+xStart+blockSize, blockY+yStart+blockSize, blockColor, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8004bb4:	1c61      	adds	r1, r4, #1
 8004bb6:	9104      	str	r1, [sp, #16]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 8004bb8:	4291      	cmp	r1, r2
 8004bba:	d900      	bls.n	8004bbe <Paint_DrawQR_Paste+0xaa>
 8004bbc:	e07b      	b.n	8004cb6 <Paint_DrawQR_Paste+0x1a2>
	      Paint_DrawRectangle(blockX+xStart, blockY+yStart, blockX+xStart+blockSize, blockY+yStart+blockSize, blockColor, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8004bbe:	1c71      	adds	r1, r6, #1
        Xend > Paint.Width || Yend > Paint.Height) {
 8004bc0:	b289      	uxth	r1, r1
 8004bc2:	4299      	cmp	r1, r3
 8004bc4:	d900      	bls.n	8004bc8 <Paint_DrawQR_Paste+0xb4>
 8004bc6:	e076      	b.n	8004cb6 <Paint_DrawQR_Paste+0x1a2>
	      if (blockValue == 1) {
 8004bc8:	2301      	movs	r3, #1
 8004bca:	4043      	eors	r3, r0
 8004bcc:	425b      	negs	r3, r3
 8004bce:	b2d9      	uxtb	r1, r3
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 8004bd0:	010b      	lsls	r3, r1, #4
 8004bd2:	930a      	str	r3, [sp, #40]	; 0x28
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	400b      	ands	r3, r1
 8004bd8:	019b      	lsls	r3, r3, #6
 8004bda:	9309      	str	r3, [sp, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8004bdc:	9b04      	ldr	r3, [sp, #16]
	      if (blockValue == 1) {
 8004bde:	9108      	str	r1, [sp, #32]
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 8004be0:	1b1d      	subs	r5, r3, r4
 8004be2:	17eb      	asrs	r3, r5, #31
 8004be4:	18ed      	adds	r5, r5, r3
 8004be6:	405d      	eors	r5, r3
        if (2 * Esp >= dy) {
 8004be8:	006b      	lsls	r3, r5, #1
 8004bea:	4699      	mov	r9, r3
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8004bec:	4294      	cmp	r4, r2
 8004bee:	d83c      	bhi.n	8004c6a <Paint_DrawQR_Paste+0x156>
 8004bf0:	88f9      	ldrh	r1, [r7, #6]
 8004bf2:	428e      	cmp	r6, r1
 8004bf4:	d839      	bhi.n	8004c6a <Paint_DrawQR_Paste+0x156>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 8004bf6:	2c00      	cmp	r4, #0
 8004bf8:	d02f      	beq.n	8004c5a <Paint_DrawQR_Paste+0x146>
 8004bfa:	2e00      	cmp	r6, #0
 8004bfc:	d02a      	beq.n	8004c54 <Paint_DrawQR_Paste+0x140>
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 8004bfe:	1e63      	subs	r3, r4, #1
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	4650      	mov	r0, sl
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d33e      	bcc.n	8004c86 <Paint_DrawQR_Paste+0x172>
 8004c08:	4551      	cmp	r1, sl
 8004c0a:	d33c      	bcc.n	8004c86 <Paint_DrawQR_Paste+0x172>
    switch(Paint.Rotate) {
 8004c0c:	89fa      	ldrh	r2, [r7, #14]
 8004c0e:	2ab4      	cmp	r2, #180	; 0xb4
 8004c10:	d055      	beq.n	8004cbe <Paint_DrawQR_Paste+0x1aa>
 8004c12:	d83c      	bhi.n	8004c8e <Paint_DrawQR_Paste+0x17a>
 8004c14:	2a00      	cmp	r2, #0
 8004c16:	d059      	beq.n	8004ccc <Paint_DrawQR_Paste+0x1b8>
 8004c18:	2a5a      	cmp	r2, #90	; 0x5a
 8004c1a:	d11b      	bne.n	8004c54 <Paint_DrawQR_Paste+0x140>
        X = Paint.WidthMemory - Ypoint - 1;
 8004c1c:	893a      	ldrh	r2, [r7, #8]
 8004c1e:	0018      	movs	r0, r3
 8004c20:	1b92      	subs	r2, r2, r6
 8004c22:	b293      	uxth	r3, r2
    switch(Paint.Mirror) {
 8004c24:	8a3a      	ldrh	r2, [r7, #16]
 8004c26:	2a01      	cmp	r2, #1
 8004c28:	d056      	beq.n	8004cd8 <Paint_DrawQR_Paste+0x1c4>
 8004c2a:	d905      	bls.n	8004c38 <Paint_DrawQR_Paste+0x124>
 8004c2c:	2a02      	cmp	r2, #2
 8004c2e:	d137      	bne.n	8004ca0 <Paint_DrawQR_Paste+0x18c>
        Y = Paint.HeightMemory - Y - 1;
 8004c30:	897a      	ldrh	r2, [r7, #10]
 8004c32:	3a01      	subs	r2, #1
 8004c34:	1a10      	subs	r0, r2, r0
 8004c36:	b280      	uxth	r0, r0
        X = Paint.WidthMemory - Ypoint - 1;
 8004c38:	893a      	ldrh	r2, [r7, #8]
    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d323      	bcc.n	8004c86 <Paint_DrawQR_Paste+0x172>
 8004c3e:	897a      	ldrh	r2, [r7, #10]
 8004c40:	4282      	cmp	r2, r0
 8004c42:	d320      	bcc.n	8004c86 <Paint_DrawQR_Paste+0x172>
    if(Paint.Scale == 2){
 8004c44:	8afa      	ldrh	r2, [r7, #22]
 8004c46:	2a02      	cmp	r2, #2
 8004c48:	d04e      	beq.n	8004ce8 <Paint_DrawQR_Paste+0x1d4>
    }else if(Paint.Scale == 4){
 8004c4a:	2a04      	cmp	r2, #4
 8004c4c:	d05e      	beq.n	8004d0c <Paint_DrawQR_Paste+0x1f8>
    }else if(Paint.Scale == 7){
 8004c4e:	2a07      	cmp	r2, #7
 8004c50:	d100      	bne.n	8004c54 <Paint_DrawQR_Paste+0x140>
 8004c52:	e08d      	b.n	8004d70 <Paint_DrawQR_Paste+0x25c>
            if (Xpoint == Xend)
 8004c54:	9b04      	ldr	r3, [sp, #16]
 8004c56:	42a3      	cmp	r3, r4
 8004c58:	d08f      	beq.n	8004b7a <Paint_DrawQR_Paste+0x66>
            Xpoint += XAddway;
 8004c5a:	3401      	adds	r4, #1
 8004c5c:	b2a4      	uxth	r4, r4
        if (2 * Esp <= dx) {
 8004c5e:	454d      	cmp	r5, r9
 8004c60:	db00      	blt.n	8004c64 <Paint_DrawQR_Paste+0x150>
 8004c62:	e78a      	b.n	8004b7a <Paint_DrawQR_Paste+0x66>
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 8004c64:	88ba      	ldrh	r2, [r7, #4]
 8004c66:	4294      	cmp	r4, r2
 8004c68:	d9c2      	bls.n	8004bf0 <Paint_DrawQR_Paste+0xdc>
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 8004c6a:	4658      	mov	r0, fp
 8004c6c:	f005 f870 	bl	8009d50 <puts>
				printf("Xpoint = %d , Paint.Width = %d  \r\n ",Xpoint,Paint.Width);
 8004c70:	0021      	movs	r1, r4
 8004c72:	88ba      	ldrh	r2, [r7, #4]
 8004c74:	4849      	ldr	r0, [pc, #292]	; (8004d9c <Paint_DrawQR_Paste+0x288>)
 8004c76:	f004 ffdf 	bl	8009c38 <iprintf>
				printf("Ypoint = %d , Paint.Height = %d  \r\n ",Ypoint,Paint.Height);
 8004c7a:	0031      	movs	r1, r6
 8004c7c:	88fa      	ldrh	r2, [r7, #6]
 8004c7e:	4848      	ldr	r0, [pc, #288]	; (8004da0 <Paint_DrawQR_Paste+0x28c>)
 8004c80:	f004 ffda 	bl	8009c38 <iprintf>
        return;
 8004c84:	e7e6      	b.n	8004c54 <Paint_DrawQR_Paste+0x140>
        Debug("Exceeding display boundaries\r\n");
 8004c86:	4847      	ldr	r0, [pc, #284]	; (8004da4 <Paint_DrawQR_Paste+0x290>)
 8004c88:	f005 f862 	bl	8009d50 <puts>
        return;
 8004c8c:	e7e2      	b.n	8004c54 <Paint_DrawQR_Paste+0x140>
    switch(Paint.Rotate) {
 8004c8e:	2387      	movs	r3, #135	; 0x87
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d1de      	bne.n	8004c54 <Paint_DrawQR_Paste+0x140>
        Y = Paint.HeightMemory - Xpoint - 1;
 8004c96:	8978      	ldrh	r0, [r7, #10]
 8004c98:	4653      	mov	r3, sl
 8004c9a:	1b00      	subs	r0, r0, r4
 8004c9c:	b280      	uxth	r0, r0
 8004c9e:	e7c1      	b.n	8004c24 <Paint_DrawQR_Paste+0x110>
    switch(Paint.Mirror) {
 8004ca0:	2a03      	cmp	r2, #3
 8004ca2:	d1d7      	bne.n	8004c54 <Paint_DrawQR_Paste+0x140>
        X = Paint.WidthMemory - X - 1;
 8004ca4:	893a      	ldrh	r2, [r7, #8]
 8004ca6:	1e51      	subs	r1, r2, #1
 8004ca8:	1acb      	subs	r3, r1, r3
        Y = Paint.HeightMemory - Y - 1;
 8004caa:	8979      	ldrh	r1, [r7, #10]
        X = Paint.WidthMemory - X - 1;
 8004cac:	b29b      	uxth	r3, r3
        Y = Paint.HeightMemory - Y - 1;
 8004cae:	3901      	subs	r1, #1
 8004cb0:	1a08      	subs	r0, r1, r0
 8004cb2:	b280      	uxth	r0, r0
        break;
 8004cb4:	e7c1      	b.n	8004c3a <Paint_DrawQR_Paste+0x126>
        Debug("Input exceeds the normal display range\r\n");
 8004cb6:	483c      	ldr	r0, [pc, #240]	; (8004da8 <Paint_DrawQR_Paste+0x294>)
 8004cb8:	f005 f84a 	bl	8009d50 <puts>
        return;
 8004cbc:	e75d      	b.n	8004b7a <Paint_DrawQR_Paste+0x66>
        X = Paint.WidthMemory - Xpoint - 1;
 8004cbe:	893b      	ldrh	r3, [r7, #8]
        Y = Paint.HeightMemory - Ypoint - 1;
 8004cc0:	8978      	ldrh	r0, [r7, #10]
        X = Paint.WidthMemory - Xpoint - 1;
 8004cc2:	1b1b      	subs	r3, r3, r4
        Y = Paint.HeightMemory - Ypoint - 1;
 8004cc4:	1b80      	subs	r0, r0, r6
        X = Paint.WidthMemory - Xpoint - 1;
 8004cc6:	b29b      	uxth	r3, r3
        Y = Paint.HeightMemory - Ypoint - 1;
 8004cc8:	b280      	uxth	r0, r0
        break;
 8004cca:	e7ab      	b.n	8004c24 <Paint_DrawQR_Paste+0x110>
    switch(Paint.Mirror) {
 8004ccc:	8a3a      	ldrh	r2, [r7, #16]
 8004cce:	2a02      	cmp	r2, #2
 8004cd0:	d0ae      	beq.n	8004c30 <Paint_DrawQR_Paste+0x11c>
 8004cd2:	d806      	bhi.n	8004ce2 <Paint_DrawQR_Paste+0x1ce>
 8004cd4:	2a00      	cmp	r2, #0
 8004cd6:	d0af      	beq.n	8004c38 <Paint_DrawQR_Paste+0x124>
        X = Paint.WidthMemory - X - 1;
 8004cd8:	893a      	ldrh	r2, [r7, #8]
 8004cda:	1e51      	subs	r1, r2, #1
 8004cdc:	1acb      	subs	r3, r1, r3
 8004cde:	b29b      	uxth	r3, r3
        break;
 8004ce0:	e7ab      	b.n	8004c3a <Paint_DrawQR_Paste+0x126>
    switch(Paint.Mirror) {
 8004ce2:	2a03      	cmp	r2, #3
 8004ce4:	d1b6      	bne.n	8004c54 <Paint_DrawQR_Paste+0x140>
 8004ce6:	e7dd      	b.n	8004ca4 <Paint_DrawQR_Paste+0x190>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 8004ce8:	8a7a      	ldrh	r2, [r7, #18]
        UBYTE Rdata = Paint.Image[Addr];
 8004cea:	6839      	ldr	r1, [r7, #0]
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 8004cec:	4350      	muls	r0, r2
 8004cee:	08da      	lsrs	r2, r3, #3
 8004cf0:	b292      	uxth	r2, r2
 8004cf2:	1880      	adds	r0, r0, r2
        UBYTE Rdata = Paint.Image[Addr];
 8004cf4:	180a      	adds	r2, r1, r0
 8004cf6:	5c09      	ldrb	r1, [r1, r0]
        if(Color == BLACK)
 8004cf8:	9808      	ldr	r0, [sp, #32]
 8004cfa:	2800      	cmp	r0, #0
 8004cfc:	d131      	bne.n	8004d62 <Paint_DrawQR_Paste+0x24e>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 8004cfe:	3007      	adds	r0, #7
 8004d00:	4018      	ands	r0, r3
 8004d02:	2380      	movs	r3, #128	; 0x80
 8004d04:	4103      	asrs	r3, r0
 8004d06:	4399      	bics	r1, r3
 8004d08:	7011      	strb	r1, [r2, #0]
 8004d0a:	e7a3      	b.n	8004c54 <Paint_DrawQR_Paste+0x140>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 8004d0c:	8a7a      	ldrh	r2, [r7, #18]
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8004d0e:	2103      	movs	r1, #3
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 8004d10:	4350      	muls	r0, r2
 8004d12:	089a      	lsrs	r2, r3, #2
 8004d14:	b292      	uxth	r2, r2
 8004d16:	1880      	adds	r0, r0, r2
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 8004d18:	22c0      	movs	r2, #192	; 0xc0
 8004d1a:	400b      	ands	r3, r1
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	411a      	asrs	r2, r3
 8004d20:	6839      	ldr	r1, [r7, #0]
 8004d22:	5c09      	ldrb	r1, [r1, r0]
 8004d24:	4391      	bics	r1, r2
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8004d26:	9a09      	ldr	r2, [sp, #36]	; 0x24
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 8004d28:	411a      	asrs	r2, r3
 8004d2a:	0013      	movs	r3, r2
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	430b      	orrs	r3, r1
 8004d30:	5413      	strb	r3, [r2, r0]
 8004d32:	e78f      	b.n	8004c54 <Paint_DrawQR_Paste+0x140>
	  for (uint8_t y = 0; y < qrcodegen_getSize(qrcode); y++) {
 8004d34:	9b06      	ldr	r3, [sp, #24]
 8004d36:	a80c      	add	r0, sp, #48	; 0x30
 8004d38:	3301      	adds	r3, #1
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	001c      	movs	r4, r3
 8004d3e:	9306      	str	r3, [sp, #24]
 8004d40:	1ee3      	subs	r3, r4, #3
 8004d42:	b2dd      	uxtb	r5, r3
 8004d44:	9505      	str	r5, [sp, #20]
 8004d46:	f003 fddd 	bl	8008904 <qrcodegen_getSize>
 8004d4a:	4285      	cmp	r5, r0
 8004d4c:	da00      	bge.n	8004d50 <Paint_DrawQR_Paste+0x23c>
 8004d4e:	e70a      	b.n	8004b66 <Paint_DrawQR_Paste+0x52>
	    }
	  }
}
 8004d50:	23d9      	movs	r3, #217	; 0xd9
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	449d      	add	sp, r3
 8004d56:	bcf0      	pop	{r4, r5, r6, r7}
 8004d58:	46bb      	mov	fp, r7
 8004d5a:	46b2      	mov	sl, r6
 8004d5c:	46a9      	mov	r9, r5
 8004d5e:	46a0      	mov	r8, r4
 8004d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8004d62:	2007      	movs	r0, #7
 8004d64:	4018      	ands	r0, r3
 8004d66:	2380      	movs	r3, #128	; 0x80
 8004d68:	4103      	asrs	r3, r0
 8004d6a:	430b      	orrs	r3, r1
 8004d6c:	7013      	strb	r3, [r2, #0]
 8004d6e:	e771      	b.n	8004c54 <Paint_DrawQR_Paste+0x140>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 8004d70:	8a7a      	ldrh	r2, [r7, #18]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 8004d72:	2101      	movs	r1, #1
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 8004d74:	4350      	muls	r0, r2
 8004d76:	085a      	lsrs	r2, r3, #1
 8004d78:	b292      	uxth	r2, r2
 8004d7a:	1880      	adds	r0, r0, r2
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 8004d7c:	22f0      	movs	r2, #240	; 0xf0
 8004d7e:	400b      	ands	r3, r1
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	411a      	asrs	r2, r3
 8004d84:	6839      	ldr	r1, [r7, #0]
 8004d86:	5c09      	ldrb	r1, [r1, r0]
 8004d88:	4391      	bics	r1, r2
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 8004d8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d8c:	e7cc      	b.n	8004d28 <Paint_DrawQR_Paste+0x214>
 8004d8e:	46c0      	nop			; (mov r8, r8)
 8004d90:	fffffc9c 	.word	0xfffffc9c
 8004d94:	0800c204 	.word	0x0800c204
 8004d98:	20001374 	.word	0x20001374
 8004d9c:	0800c244 	.word	0x0800c244
 8004da0:	0800c268 	.word	0x0800c268
 8004da4:	0800c19c 	.word	0x0800c19c
 8004da8:	0800c2d4 	.word	0x0800c2d4

08004dac <EPD_SetFullReg>:
parameter:
     Reg : Command register
******************************************************************************/
static void EPD_SendCommand(UBYTE Reg)
{
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8004dac:	2180      	movs	r1, #128	; 0x80
/******************************************************************************
function :	LUT download
parameter:
******************************************************************************/
static void EPD_SetFullReg(void)
{
 8004dae:	b570      	push	{r4, r5, r6, lr}
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8004db0:	2200      	movs	r2, #0
 8004db2:	489b      	ldr	r0, [pc, #620]	; (8005020 <EPD_SetFullReg+0x274>)
 8004db4:	0109      	lsls	r1, r1, #4
 8004db6:	f7fc fd89 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8004dba:	2180      	movs	r1, #128	; 0x80
 8004dbc:	20a0      	movs	r0, #160	; 0xa0
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	0209      	lsls	r1, r1, #8
 8004dc2:	05c0      	lsls	r0, r0, #23
 8004dc4:	f7fc fd82 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 8004dc8:	2050      	movs	r0, #80	; 0x50
 8004dca:	f7ff fb5d 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8004dce:	2180      	movs	r1, #128	; 0x80
 8004dd0:	20a0      	movs	r0, #160	; 0xa0
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	0209      	lsls	r1, r1, #8
 8004dd6:	05c0      	lsls	r0, r0, #23
 8004dd8:	f7fc fd78 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8004ddc:	2180      	movs	r1, #128	; 0x80
 8004dde:	2201      	movs	r2, #1
 8004de0:	488f      	ldr	r0, [pc, #572]	; (8005020 <EPD_SetFullReg+0x274>)
 8004de2:	0109      	lsls	r1, r1, #4
 8004de4:	f7fc fd72 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8004de8:	2180      	movs	r1, #128	; 0x80
 8004dea:	20a0      	movs	r0, #160	; 0xa0
 8004dec:	2200      	movs	r2, #0
 8004dee:	0209      	lsls	r1, r1, #8
 8004df0:	05c0      	lsls	r0, r0, #23
 8004df2:	f7fc fd6b 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8004df6:	20b7      	movs	r0, #183	; 0xb7
 8004df8:	f7ff fb46 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8004dfc:	2180      	movs	r1, #128	; 0x80
 8004dfe:	20a0      	movs	r0, #160	; 0xa0
 8004e00:	2201      	movs	r2, #1
 8004e02:	0209      	lsls	r1, r1, #8
 8004e04:	05c0      	lsls	r0, r0, #23
 8004e06:	f7fc fd61 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8004e0a:	2180      	movs	r1, #128	; 0x80
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	4884      	ldr	r0, [pc, #528]	; (8005020 <EPD_SetFullReg+0x274>)
 8004e10:	0109      	lsls	r1, r1, #4
 8004e12:	f7fc fd5b 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8004e16:	2180      	movs	r1, #128	; 0x80
 8004e18:	20a0      	movs	r0, #160	; 0xa0
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	0209      	lsls	r1, r1, #8
 8004e1e:	05c0      	lsls	r0, r0, #23
 8004e20:	f7fc fd54 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 8004e24:	2020      	movs	r0, #32
 8004e26:	f7ff fb2f 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8004e2a:	2180      	movs	r1, #128	; 0x80
 8004e2c:	20a0      	movs	r0, #160	; 0xa0
 8004e2e:	2201      	movs	r2, #1
 8004e30:	0209      	lsls	r1, r1, #8
 8004e32:	05c0      	lsls	r0, r0, #23
 8004e34:	f7fc fd4a 	bl	80018cc <HAL_GPIO_WritePin>
    EPD_SendCommand(0X50);			//VCOM AND DATA INTERVAL SETTING
    EPD_SendData(0xb7);		//WBmode:VBDF 17|D7 VBDW 97 VBDB 57		WBRmode:VBDF F7 VBDW 77 VBDB 37  VBDR B7

    unsigned int count;
    EPD_SendCommand(0x20);
    for(count=0; count<44; count++) {
 8004e38:	4c7a      	ldr	r4, [pc, #488]	; (8005024 <EPD_SetFullReg+0x278>)
 8004e3a:	0026      	movs	r6, r4
 8004e3c:	362c      	adds	r6, #44	; 0x2c
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8004e3e:	2180      	movs	r1, #128	; 0x80
 8004e40:	2201      	movs	r2, #1
 8004e42:	4877      	ldr	r0, [pc, #476]	; (8005020 <EPD_SetFullReg+0x274>)
 8004e44:	0109      	lsls	r1, r1, #4
        EPD_SendData(lut_vcomDC[count]);
 8004e46:	7825      	ldrb	r5, [r4, #0]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8004e48:	f7fc fd40 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8004e4c:	2180      	movs	r1, #128	; 0x80
 8004e4e:	20a0      	movs	r0, #160	; 0xa0
 8004e50:	2200      	movs	r2, #0
 8004e52:	0209      	lsls	r1, r1, #8
 8004e54:	05c0      	lsls	r0, r0, #23
 8004e56:	f7fc fd39 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8004e5a:	0028      	movs	r0, r5
 8004e5c:	f7ff fb14 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8004e60:	2180      	movs	r1, #128	; 0x80
 8004e62:	20a0      	movs	r0, #160	; 0xa0
 8004e64:	2201      	movs	r2, #1
 8004e66:	0209      	lsls	r1, r1, #8
 8004e68:	05c0      	lsls	r0, r0, #23
    for(count=0; count<44; count++) {
 8004e6a:	3401      	adds	r4, #1
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8004e6c:	f7fc fd2e 	bl	80018cc <HAL_GPIO_WritePin>
    for(count=0; count<44; count++) {
 8004e70:	42b4      	cmp	r4, r6
 8004e72:	d1e4      	bne.n	8004e3e <EPD_SetFullReg+0x92>
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8004e74:	2180      	movs	r1, #128	; 0x80
 8004e76:	2200      	movs	r2, #0
 8004e78:	4869      	ldr	r0, [pc, #420]	; (8005020 <EPD_SetFullReg+0x274>)
 8004e7a:	0109      	lsls	r1, r1, #4
 8004e7c:	f7fc fd26 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8004e80:	2180      	movs	r1, #128	; 0x80
 8004e82:	20a0      	movs	r0, #160	; 0xa0
 8004e84:	2200      	movs	r2, #0
 8004e86:	0209      	lsls	r1, r1, #8
 8004e88:	05c0      	lsls	r0, r0, #23
 8004e8a:	f7fc fd1f 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 8004e8e:	2021      	movs	r0, #33	; 0x21
 8004e90:	f7ff fafa 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8004e94:	2180      	movs	r1, #128	; 0x80
 8004e96:	20a0      	movs	r0, #160	; 0xa0
 8004e98:	2201      	movs	r2, #1
 8004e9a:	0209      	lsls	r1, r1, #8
 8004e9c:	05c0      	lsls	r0, r0, #23
 8004e9e:	f7fc fd15 	bl	80018cc <HAL_GPIO_WritePin>
    }

    EPD_SendCommand(0x21);
    for(count=0; count<42; count++) {
 8004ea2:	4c61      	ldr	r4, [pc, #388]	; (8005028 <EPD_SetFullReg+0x27c>)
 8004ea4:	0026      	movs	r6, r4
 8004ea6:	362a      	adds	r6, #42	; 0x2a
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8004ea8:	2180      	movs	r1, #128	; 0x80
 8004eaa:	2201      	movs	r2, #1
 8004eac:	485c      	ldr	r0, [pc, #368]	; (8005020 <EPD_SetFullReg+0x274>)
 8004eae:	0109      	lsls	r1, r1, #4
        EPD_SendData(lut_ww[count]);
 8004eb0:	7825      	ldrb	r5, [r4, #0]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8004eb2:	f7fc fd0b 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8004eb6:	2180      	movs	r1, #128	; 0x80
 8004eb8:	20a0      	movs	r0, #160	; 0xa0
 8004eba:	2200      	movs	r2, #0
 8004ebc:	0209      	lsls	r1, r1, #8
 8004ebe:	05c0      	lsls	r0, r0, #23
 8004ec0:	f7fc fd04 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8004ec4:	0028      	movs	r0, r5
 8004ec6:	f7ff fadf 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8004eca:	2180      	movs	r1, #128	; 0x80
 8004ecc:	20a0      	movs	r0, #160	; 0xa0
 8004ece:	2201      	movs	r2, #1
 8004ed0:	0209      	lsls	r1, r1, #8
 8004ed2:	05c0      	lsls	r0, r0, #23
    for(count=0; count<42; count++) {
 8004ed4:	3401      	adds	r4, #1
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8004ed6:	f7fc fcf9 	bl	80018cc <HAL_GPIO_WritePin>
    for(count=0; count<42; count++) {
 8004eda:	42b4      	cmp	r4, r6
 8004edc:	d1e4      	bne.n	8004ea8 <EPD_SetFullReg+0xfc>
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8004ede:	2180      	movs	r1, #128	; 0x80
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	484f      	ldr	r0, [pc, #316]	; (8005020 <EPD_SetFullReg+0x274>)
 8004ee4:	0109      	lsls	r1, r1, #4
 8004ee6:	f7fc fcf1 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8004eea:	2180      	movs	r1, #128	; 0x80
 8004eec:	20a0      	movs	r0, #160	; 0xa0
 8004eee:	2200      	movs	r2, #0
 8004ef0:	0209      	lsls	r1, r1, #8
 8004ef2:	05c0      	lsls	r0, r0, #23
 8004ef4:	f7fc fcea 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 8004ef8:	2022      	movs	r0, #34	; 0x22
 8004efa:	f7ff fac5 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8004efe:	2180      	movs	r1, #128	; 0x80
 8004f00:	20a0      	movs	r0, #160	; 0xa0
 8004f02:	2201      	movs	r2, #1
 8004f04:	0209      	lsls	r1, r1, #8
 8004f06:	05c0      	lsls	r0, r0, #23
 8004f08:	f7fc fce0 	bl	80018cc <HAL_GPIO_WritePin>
    }

    EPD_SendCommand(0x22);
    for(count=0; count<42; count++) {
 8004f0c:	4c47      	ldr	r4, [pc, #284]	; (800502c <EPD_SetFullReg+0x280>)
 8004f0e:	0026      	movs	r6, r4
 8004f10:	362a      	adds	r6, #42	; 0x2a
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8004f12:	2180      	movs	r1, #128	; 0x80
 8004f14:	2201      	movs	r2, #1
 8004f16:	4842      	ldr	r0, [pc, #264]	; (8005020 <EPD_SetFullReg+0x274>)
 8004f18:	0109      	lsls	r1, r1, #4
        EPD_SendData(lut_bw[count]);
 8004f1a:	7825      	ldrb	r5, [r4, #0]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8004f1c:	f7fc fcd6 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8004f20:	2180      	movs	r1, #128	; 0x80
 8004f22:	20a0      	movs	r0, #160	; 0xa0
 8004f24:	2200      	movs	r2, #0
 8004f26:	0209      	lsls	r1, r1, #8
 8004f28:	05c0      	lsls	r0, r0, #23
 8004f2a:	f7fc fccf 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8004f2e:	0028      	movs	r0, r5
 8004f30:	f7ff faaa 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8004f34:	2180      	movs	r1, #128	; 0x80
 8004f36:	20a0      	movs	r0, #160	; 0xa0
 8004f38:	2201      	movs	r2, #1
 8004f3a:	0209      	lsls	r1, r1, #8
 8004f3c:	05c0      	lsls	r0, r0, #23
    for(count=0; count<42; count++) {
 8004f3e:	3401      	adds	r4, #1
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8004f40:	f7fc fcc4 	bl	80018cc <HAL_GPIO_WritePin>
    for(count=0; count<42; count++) {
 8004f44:	42b4      	cmp	r4, r6
 8004f46:	d1e4      	bne.n	8004f12 <EPD_SetFullReg+0x166>
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8004f48:	2180      	movs	r1, #128	; 0x80
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	4834      	ldr	r0, [pc, #208]	; (8005020 <EPD_SetFullReg+0x274>)
 8004f4e:	0109      	lsls	r1, r1, #4
 8004f50:	f7fc fcbc 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8004f54:	2180      	movs	r1, #128	; 0x80
 8004f56:	20a0      	movs	r0, #160	; 0xa0
 8004f58:	2200      	movs	r2, #0
 8004f5a:	0209      	lsls	r1, r1, #8
 8004f5c:	05c0      	lsls	r0, r0, #23
 8004f5e:	f7fc fcb5 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 8004f62:	2023      	movs	r0, #35	; 0x23
 8004f64:	f7ff fa90 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8004f68:	2180      	movs	r1, #128	; 0x80
 8004f6a:	20a0      	movs	r0, #160	; 0xa0
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	0209      	lsls	r1, r1, #8
 8004f70:	05c0      	lsls	r0, r0, #23
 8004f72:	f7fc fcab 	bl	80018cc <HAL_GPIO_WritePin>
    }

    EPD_SendCommand(0x23);
    for(count=0; count<42; count++) {
 8004f76:	4c2e      	ldr	r4, [pc, #184]	; (8005030 <EPD_SetFullReg+0x284>)
 8004f78:	0026      	movs	r6, r4
 8004f7a:	362a      	adds	r6, #42	; 0x2a
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8004f7c:	2180      	movs	r1, #128	; 0x80
 8004f7e:	2201      	movs	r2, #1
 8004f80:	4827      	ldr	r0, [pc, #156]	; (8005020 <EPD_SetFullReg+0x274>)
 8004f82:	0109      	lsls	r1, r1, #4
        EPD_SendData(lut_wb[count]);
 8004f84:	7825      	ldrb	r5, [r4, #0]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8004f86:	f7fc fca1 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8004f8a:	2180      	movs	r1, #128	; 0x80
 8004f8c:	20a0      	movs	r0, #160	; 0xa0
 8004f8e:	2200      	movs	r2, #0
 8004f90:	0209      	lsls	r1, r1, #8
 8004f92:	05c0      	lsls	r0, r0, #23
 8004f94:	f7fc fc9a 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8004f98:	0028      	movs	r0, r5
 8004f9a:	f7ff fa75 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8004f9e:	2180      	movs	r1, #128	; 0x80
 8004fa0:	20a0      	movs	r0, #160	; 0xa0
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	0209      	lsls	r1, r1, #8
 8004fa6:	05c0      	lsls	r0, r0, #23
    for(count=0; count<42; count++) {
 8004fa8:	3401      	adds	r4, #1
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8004faa:	f7fc fc8f 	bl	80018cc <HAL_GPIO_WritePin>
    for(count=0; count<42; count++) {
 8004fae:	42b4      	cmp	r4, r6
 8004fb0:	d1e4      	bne.n	8004f7c <EPD_SetFullReg+0x1d0>
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8004fb2:	2180      	movs	r1, #128	; 0x80
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	481a      	ldr	r0, [pc, #104]	; (8005020 <EPD_SetFullReg+0x274>)
 8004fb8:	0109      	lsls	r1, r1, #4
 8004fba:	f7fc fc87 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8004fbe:	2180      	movs	r1, #128	; 0x80
 8004fc0:	20a0      	movs	r0, #160	; 0xa0
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	0209      	lsls	r1, r1, #8
 8004fc6:	05c0      	lsls	r0, r0, #23
 8004fc8:	f7fc fc80 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 8004fcc:	2024      	movs	r0, #36	; 0x24
 8004fce:	f7ff fa5b 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8004fd2:	2180      	movs	r1, #128	; 0x80
 8004fd4:	20a0      	movs	r0, #160	; 0xa0
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	0209      	lsls	r1, r1, #8
 8004fda:	05c0      	lsls	r0, r0, #23
 8004fdc:	f7fc fc76 	bl	80018cc <HAL_GPIO_WritePin>
    }

    EPD_SendCommand(0x24);
    for(count=0; count<42; count++) {
 8004fe0:	4c14      	ldr	r4, [pc, #80]	; (8005034 <EPD_SetFullReg+0x288>)
 8004fe2:	0026      	movs	r6, r4
 8004fe4:	362a      	adds	r6, #42	; 0x2a
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8004fe6:	2180      	movs	r1, #128	; 0x80
 8004fe8:	2201      	movs	r2, #1
 8004fea:	480d      	ldr	r0, [pc, #52]	; (8005020 <EPD_SetFullReg+0x274>)
 8004fec:	0109      	lsls	r1, r1, #4
        EPD_SendData(lut_bb[count]);
 8004fee:	7825      	ldrb	r5, [r4, #0]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8004ff0:	f7fc fc6c 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8004ff4:	2180      	movs	r1, #128	; 0x80
 8004ff6:	20a0      	movs	r0, #160	; 0xa0
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	0209      	lsls	r1, r1, #8
 8004ffc:	05c0      	lsls	r0, r0, #23
 8004ffe:	f7fc fc65 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8005002:	0028      	movs	r0, r5
 8005004:	f7ff fa40 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8005008:	2180      	movs	r1, #128	; 0x80
 800500a:	20a0      	movs	r0, #160	; 0xa0
 800500c:	2201      	movs	r2, #1
 800500e:	0209      	lsls	r1, r1, #8
 8005010:	05c0      	lsls	r0, r0, #23
    for(count=0; count<42; count++) {
 8005012:	3401      	adds	r4, #1
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8005014:	f7fc fc5a 	bl	80018cc <HAL_GPIO_WritePin>
    for(count=0; count<42; count++) {
 8005018:	42b4      	cmp	r4, r6
 800501a:	d1e4      	bne.n	8004fe6 <EPD_SetFullReg+0x23a>
    }
}
 800501c:	bd70      	pop	{r4, r5, r6, pc}
 800501e:	46c0      	nop			; (mov r8, r8)
 8005020:	50000400 	.word	0x50000400
 8005024:	0800c3e0 	.word	0x0800c3e0
 8005028:	0800c438 	.word	0x0800c438
 800502c:	0800c3b4 	.word	0x0800c3b4
 8005030:	0800c40c 	.word	0x0800c40c
 8005034:	0800c388 	.word	0x0800c388

08005038 <EPD_Init>:
/******************************************************************************
function :	Initialize the e-Paper register
parameter:
******************************************************************************/
UBYTE EPD_Init()
{
 8005038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    DEV_Digital_Write(EPD_DC_PIN, 0);
 800503a:	2780      	movs	r7, #128	; 0x80
    DEV_Digital_Write(EPD_CS_PIN, 0);
 800503c:	2580      	movs	r5, #128	; 0x80
 800503e:	24a0      	movs	r4, #160	; 0xa0
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8005040:	4ed4      	ldr	r6, [pc, #848]	; (8005394 <EPD_Init+0x35c>)
 8005042:	2201      	movs	r2, #1
 8005044:	0030      	movs	r0, r6
 8005046:	2104      	movs	r1, #4
 8005048:	f7fc fc40 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Delay_ms(20);
 800504c:	2014      	movs	r0, #20
 800504e:	f7fc f9f9 	bl	8001444 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 0);
 8005052:	0030      	movs	r0, r6
 8005054:	2200      	movs	r2, #0
 8005056:	2104      	movs	r1, #4
 8005058:	f7fc fc38 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Delay_ms(200);
 800505c:	20c8      	movs	r0, #200	; 0xc8
 800505e:	f7fc f9f1 	bl	8001444 <HAL_Delay>
    DEV_Digital_Write(EPD_RST_PIN, 1);
 8005062:	0030      	movs	r0, r6
 8005064:	2201      	movs	r2, #1
 8005066:	2104      	movs	r1, #4
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8005068:	013f      	lsls	r7, r7, #4
    DEV_Digital_Write(EPD_RST_PIN, 1);
 800506a:	f7fc fc2f 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Delay_ms(20);
 800506e:	2014      	movs	r0, #20
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8005070:	022d      	lsls	r5, r5, #8
 8005072:	05e4      	lsls	r4, r4, #23
    DEV_Delay_ms(20);
 8005074:	f7fc f9e6 	bl	8001444 <HAL_Delay>
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8005078:	0039      	movs	r1, r7
 800507a:	0030      	movs	r0, r6
 800507c:	2200      	movs	r2, #0
 800507e:	f7fc fc25 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8005082:	0029      	movs	r1, r5
 8005084:	2200      	movs	r2, #0
 8005086:	0020      	movs	r0, r4
 8005088:	f7fc fc20 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 800508c:	2006      	movs	r0, #6
 800508e:	f7ff f9fb 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8005092:	0029      	movs	r1, r5
 8005094:	2201      	movs	r2, #1
 8005096:	0020      	movs	r0, r4
 8005098:	f7fc fc18 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_DC_PIN, 1);
 800509c:	0039      	movs	r1, r7
 800509e:	0030      	movs	r0, r6
 80050a0:	2201      	movs	r2, #1
 80050a2:	f7fc fc13 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80050a6:	0029      	movs	r1, r5
 80050a8:	2200      	movs	r2, #0
 80050aa:	0020      	movs	r0, r4
 80050ac:	f7fc fc0e 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 80050b0:	2017      	movs	r0, #23
 80050b2:	f7ff f9e9 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80050b6:	0029      	movs	r1, r5
 80050b8:	2201      	movs	r2, #1
 80050ba:	0020      	movs	r0, r4
 80050bc:	f7fc fc06 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_DC_PIN, 1);
 80050c0:	0039      	movs	r1, r7
 80050c2:	0030      	movs	r0, r6
 80050c4:	2201      	movs	r2, #1
 80050c6:	f7fc fc01 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80050ca:	0029      	movs	r1, r5
 80050cc:	2200      	movs	r2, #0
 80050ce:	0020      	movs	r0, r4
 80050d0:	f7fc fbfc 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 80050d4:	2017      	movs	r0, #23
 80050d6:	f7ff f9d7 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80050da:	0029      	movs	r1, r5
 80050dc:	2201      	movs	r2, #1
 80050de:	0020      	movs	r0, r4
 80050e0:	f7fc fbf4 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_DC_PIN, 1);
 80050e4:	0039      	movs	r1, r7
 80050e6:	0030      	movs	r0, r6
 80050e8:	2201      	movs	r2, #1
 80050ea:	f7fc fbef 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80050ee:	0029      	movs	r1, r5
 80050f0:	2200      	movs	r2, #0
 80050f2:	0020      	movs	r0, r4
 80050f4:	f7fc fbea 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 80050f8:	2017      	movs	r0, #23
 80050fa:	f7ff f9c5 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80050fe:	0029      	movs	r1, r5
 8005100:	2201      	movs	r2, #1
 8005102:	0020      	movs	r0, r4
 8005104:	f7fc fbe2 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8005108:	0039      	movs	r1, r7
 800510a:	0030      	movs	r0, r6
 800510c:	2200      	movs	r2, #0
 800510e:	f7fc fbdd 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8005112:	0029      	movs	r1, r5
 8005114:	2200      	movs	r2, #0
 8005116:	0020      	movs	r0, r4
 8005118:	f7fc fbd8 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 800511c:	2001      	movs	r0, #1
 800511e:	f7ff f9b3 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8005122:	0029      	movs	r1, r5
 8005124:	2201      	movs	r2, #1
 8005126:	0020      	movs	r0, r4
 8005128:	f7fc fbd0 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_DC_PIN, 1);
 800512c:	0039      	movs	r1, r7
 800512e:	0030      	movs	r0, r6
 8005130:	2201      	movs	r2, #1
 8005132:	f7fc fbcb 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8005136:	0029      	movs	r1, r5
 8005138:	2200      	movs	r2, #0
 800513a:	0020      	movs	r0, r4
 800513c:	f7fc fbc6 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8005140:	2003      	movs	r0, #3
 8005142:	f7ff f9a1 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8005146:	0029      	movs	r1, r5
 8005148:	2201      	movs	r2, #1
 800514a:	0020      	movs	r0, r4
 800514c:	f7fc fbbe 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8005150:	0039      	movs	r1, r7
 8005152:	0030      	movs	r0, r6
 8005154:	2201      	movs	r2, #1
 8005156:	f7fc fbb9 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 800515a:	0029      	movs	r1, r5
 800515c:	2200      	movs	r2, #0
 800515e:	0020      	movs	r0, r4
 8005160:	f7fc fbb4 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8005164:	2000      	movs	r0, #0
 8005166:	f7ff f98f 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 800516a:	0029      	movs	r1, r5
 800516c:	2201      	movs	r2, #1
 800516e:	0020      	movs	r0, r4
 8005170:	f7fc fbac 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8005174:	0039      	movs	r1, r7
 8005176:	0030      	movs	r0, r6
 8005178:	2201      	movs	r2, #1
 800517a:	f7fc fba7 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 800517e:	0029      	movs	r1, r5
 8005180:	2200      	movs	r2, #0
 8005182:	0020      	movs	r0, r4
 8005184:	f7fc fba2 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8005188:	202b      	movs	r0, #43	; 0x2b
 800518a:	f7ff f97d 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 800518e:	0029      	movs	r1, r5
 8005190:	2201      	movs	r2, #1
 8005192:	0020      	movs	r0, r4
 8005194:	f7fc fb9a 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8005198:	0039      	movs	r1, r7
 800519a:	0030      	movs	r0, r6
 800519c:	2201      	movs	r2, #1
 800519e:	f7fc fb95 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80051a2:	0029      	movs	r1, r5
 80051a4:	2200      	movs	r2, #0
 80051a6:	0020      	movs	r0, r4
 80051a8:	f7fc fb90 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 80051ac:	202b      	movs	r0, #43	; 0x2b
 80051ae:	f7ff f96b 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80051b2:	0029      	movs	r1, r5
 80051b4:	2201      	movs	r2, #1
 80051b6:	0020      	movs	r0, r4
 80051b8:	f7fc fb88 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_DC_PIN, 1);
 80051bc:	0039      	movs	r1, r7
 80051be:	0030      	movs	r0, r6
 80051c0:	2201      	movs	r2, #1
 80051c2:	f7fc fb83 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80051c6:	0029      	movs	r1, r5
 80051c8:	2200      	movs	r2, #0
 80051ca:	0020      	movs	r0, r4
 80051cc:	f7fc fb7e 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 80051d0:	2003      	movs	r0, #3
 80051d2:	f7ff f959 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80051d6:	0029      	movs	r1, r5
 80051d8:	2201      	movs	r2, #1
 80051da:	0020      	movs	r0, r4
 80051dc:	f7fc fb76 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_DC_PIN, 0);
 80051e0:	0039      	movs	r1, r7
 80051e2:	0030      	movs	r0, r6
 80051e4:	2200      	movs	r2, #0
 80051e6:	f7fc fb71 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80051ea:	0029      	movs	r1, r5
 80051ec:	2200      	movs	r2, #0
 80051ee:	0020      	movs	r0, r4
 80051f0:	f7fc fb6c 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 80051f4:	2004      	movs	r0, #4
 80051f6:	f7ff f947 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80051fa:	0029      	movs	r1, r5
 80051fc:	2201      	movs	r2, #1
 80051fe:	0020      	movs	r0, r4
 8005200:	f7fc fb64 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8005204:	0039      	movs	r1, r7
 8005206:	0030      	movs	r0, r6
 8005208:	2200      	movs	r2, #0
 800520a:	f7fc fb5f 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 800520e:	0029      	movs	r1, r5
 8005210:	2200      	movs	r2, #0
 8005212:	0020      	movs	r0, r4
 8005214:	f7fc fb5a 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 8005218:	2000      	movs	r0, #0
 800521a:	f7ff f935 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 800521e:	0029      	movs	r1, r5
 8005220:	2201      	movs	r2, #1
 8005222:	0020      	movs	r0, r4
 8005224:	f7fc fb52 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8005228:	0039      	movs	r1, r7
 800522a:	0030      	movs	r0, r6
 800522c:	2201      	movs	r2, #1
 800522e:	f7fc fb4d 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8005232:	0029      	movs	r1, r5
 8005234:	2200      	movs	r2, #0
 8005236:	0020      	movs	r0, r4
 8005238:	f7fc fb48 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 800523c:	20bf      	movs	r0, #191	; 0xbf
 800523e:	f7ff f923 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8005242:	0029      	movs	r1, r5
 8005244:	2201      	movs	r2, #1
 8005246:	0020      	movs	r0, r4
 8005248:	f7fc fb40 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_DC_PIN, 1);
 800524c:	0039      	movs	r1, r7
 800524e:	0030      	movs	r0, r6
 8005250:	2201      	movs	r2, #1
 8005252:	f7fc fb3b 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8005256:	0029      	movs	r1, r5
 8005258:	2200      	movs	r2, #0
 800525a:	0020      	movs	r0, r4
 800525c:	f7fc fb36 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8005260:	200e      	movs	r0, #14
 8005262:	f7ff f911 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8005266:	0029      	movs	r1, r5
 8005268:	2201      	movs	r2, #1
 800526a:	0020      	movs	r0, r4
 800526c:	f7fc fb2e 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8005270:	0039      	movs	r1, r7
 8005272:	0030      	movs	r0, r6
 8005274:	2200      	movs	r2, #0
 8005276:	f7fc fb29 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 800527a:	0029      	movs	r1, r5
 800527c:	2200      	movs	r2, #0
 800527e:	0020      	movs	r0, r4
 8005280:	f7fc fb24 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 8005284:	2030      	movs	r0, #48	; 0x30
 8005286:	f7ff f8ff 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 800528a:	0029      	movs	r1, r5
 800528c:	2201      	movs	r2, #1
 800528e:	0020      	movs	r0, r4
 8005290:	f7fc fb1c 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8005294:	0039      	movs	r1, r7
 8005296:	0030      	movs	r0, r6
 8005298:	2201      	movs	r2, #1
 800529a:	f7fc fb17 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 800529e:	0029      	movs	r1, r5
 80052a0:	2200      	movs	r2, #0
 80052a2:	0020      	movs	r0, r4
 80052a4:	f7fc fb12 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 80052a8:	203a      	movs	r0, #58	; 0x3a
 80052aa:	f7ff f8ed 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80052ae:	0029      	movs	r1, r5
 80052b0:	2201      	movs	r2, #1
 80052b2:	0020      	movs	r0, r4
 80052b4:	f7fc fb0a 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_DC_PIN, 0);
 80052b8:	0039      	movs	r1, r7
 80052ba:	0030      	movs	r0, r6
 80052bc:	2200      	movs	r2, #0
 80052be:	f7fc fb05 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80052c2:	0029      	movs	r1, r5
 80052c4:	2200      	movs	r2, #0
 80052c6:	0020      	movs	r0, r4
 80052c8:	f7fc fb00 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 80052cc:	2061      	movs	r0, #97	; 0x61
 80052ce:	f7ff f8db 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80052d2:	0029      	movs	r1, r5
 80052d4:	2201      	movs	r2, #1
 80052d6:	0020      	movs	r0, r4
 80052d8:	f7fc faf8 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_DC_PIN, 1);
 80052dc:	0039      	movs	r1, r7
 80052de:	0030      	movs	r0, r6
 80052e0:	2201      	movs	r2, #1
 80052e2:	f7fc faf3 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80052e6:	0029      	movs	r1, r5
 80052e8:	2200      	movs	r2, #0
 80052ea:	0020      	movs	r0, r4
 80052ec:	f7fc faee 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 80052f0:	2068      	movs	r0, #104	; 0x68
 80052f2:	f7ff f8c9 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80052f6:	0029      	movs	r1, r5
 80052f8:	2201      	movs	r2, #1
 80052fa:	0020      	movs	r0, r4
 80052fc:	f7fc fae6 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8005300:	0039      	movs	r1, r7
 8005302:	0030      	movs	r0, r6
 8005304:	2201      	movs	r2, #1
 8005306:	f7fc fae1 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 800530a:	0029      	movs	r1, r5
 800530c:	2200      	movs	r2, #0
 800530e:	0020      	movs	r0, r4
 8005310:	f7fc fadc 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8005314:	2000      	movs	r0, #0
 8005316:	f7ff f8b7 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 800531a:	0029      	movs	r1, r5
 800531c:	2201      	movs	r2, #1
 800531e:	0020      	movs	r0, r4
 8005320:	f7fc fad4 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8005324:	0039      	movs	r1, r7
 8005326:	0030      	movs	r0, r6
 8005328:	2201      	movs	r2, #1
 800532a:	f7fc facf 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 800532e:	0029      	movs	r1, r5
 8005330:	2200      	movs	r2, #0
 8005332:	0020      	movs	r0, r4
 8005334:	f7fc faca 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8005338:	20d4      	movs	r0, #212	; 0xd4
 800533a:	f7ff f8a5 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 800533e:	0029      	movs	r1, r5
 8005340:	2201      	movs	r2, #1
 8005342:	0020      	movs	r0, r4
 8005344:	f7fc fac2 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8005348:	0039      	movs	r1, r7
 800534a:	0030      	movs	r0, r6
 800534c:	2200      	movs	r2, #0
 800534e:	f7fc fabd 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8005352:	0029      	movs	r1, r5
 8005354:	2200      	movs	r2, #0
 8005356:	0020      	movs	r0, r4
 8005358:	f7fc fab8 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 800535c:	2082      	movs	r0, #130	; 0x82
 800535e:	f7ff f893 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8005362:	0029      	movs	r1, r5
 8005364:	2201      	movs	r2, #1
 8005366:	0020      	movs	r0, r4
 8005368:	f7fc fab0 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_DC_PIN, 1);
 800536c:	0039      	movs	r1, r7
 800536e:	0030      	movs	r0, r6
 8005370:	2201      	movs	r2, #1
 8005372:	f7fc faab 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8005376:	0029      	movs	r1, r5
 8005378:	2200      	movs	r2, #0
 800537a:	0020      	movs	r0, r4
 800537c:	f7fc faa6 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8005380:	2028      	movs	r0, #40	; 0x28
 8005382:	f7ff f881 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8005386:	0029      	movs	r1, r5
 8005388:	2201      	movs	r2, #1
 800538a:	0020      	movs	r0, r4
 800538c:	f7fc fa9e 	bl	80018cc <HAL_GPIO_WritePin>

    EPD_SendCommand(0x82);	//vcom_DC setting
    EPD_SendData(0x28);
    
    return 0;
}
 8005390:	2000      	movs	r0, #0
 8005392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005394:	50000400 	.word	0x50000400

08005398 <EPD_Clear>:
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8005398:	2180      	movs	r1, #128	; 0x80
/******************************************************************************
function :	Clear screen
parameter:
******************************************************************************/
void EPD_Clear(void)
{
 800539a:	b570      	push	{r4, r5, r6, lr}
    DEV_Digital_Write(EPD_DC_PIN, 0);
 800539c:	2200      	movs	r2, #0
 800539e:	4845      	ldr	r0, [pc, #276]	; (80054b4 <EPD_Clear+0x11c>)
 80053a0:	0109      	lsls	r1, r1, #4
 80053a2:	f7fc fa93 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80053a6:	2180      	movs	r1, #128	; 0x80
 80053a8:	20a0      	movs	r0, #160	; 0xa0
 80053aa:	2200      	movs	r2, #0
 80053ac:	0209      	lsls	r1, r1, #8
 80053ae:	05c0      	lsls	r0, r0, #23
 80053b0:	f7fc fa8c 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 80053b4:	2010      	movs	r0, #16
 80053b6:	f7ff f867 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80053ba:	2180      	movs	r1, #128	; 0x80
 80053bc:	20a0      	movs	r0, #160	; 0xa0
 80053be:	2201      	movs	r2, #1
 80053c0:	0209      	lsls	r1, r1, #8
 80053c2:	05c0      	lsls	r0, r0, #23
 80053c4:	f7fc fa82 	bl	80018cc <HAL_GPIO_WritePin>
 80053c8:	25d4      	movs	r5, #212	; 0xd4
{
 80053ca:	240d      	movs	r4, #13
    DEV_Digital_Write(EPD_DC_PIN, 1);
 80053cc:	2180      	movs	r1, #128	; 0x80
 80053ce:	2201      	movs	r2, #1
 80053d0:	4838      	ldr	r0, [pc, #224]	; (80054b4 <EPD_Clear+0x11c>)
 80053d2:	0109      	lsls	r1, r1, #4
 80053d4:	f7fc fa7a 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80053d8:	2180      	movs	r1, #128	; 0x80
 80053da:	20a0      	movs	r0, #160	; 0xa0
 80053dc:	2200      	movs	r2, #0
 80053de:	0209      	lsls	r1, r1, #8
 80053e0:	05c0      	lsls	r0, r0, #23
 80053e2:	f7fc fa73 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 80053e6:	2000      	movs	r0, #0
 80053e8:	f7ff f84e 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80053ec:	2180      	movs	r1, #128	; 0x80
 80053ee:	20a0      	movs	r0, #160	; 0xa0
    Width = (EPD_WIDTH % 8 == 0)? (EPD_WIDTH / 8 ): (EPD_WIDTH / 8 + 1);
    Height = EPD_HEIGHT;

    EPD_SendCommand(0x10);
    for (UWORD j = 0; j < Height; j++) {
        for (UWORD i = 0; i < Width; i++) {
 80053f0:	3c01      	subs	r4, #1
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80053f2:	2201      	movs	r2, #1
 80053f4:	0209      	lsls	r1, r1, #8
 80053f6:	05c0      	lsls	r0, r0, #23
        for (UWORD i = 0; i < Width; i++) {
 80053f8:	b2a4      	uxth	r4, r4
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80053fa:	f7fc fa67 	bl	80018cc <HAL_GPIO_WritePin>
        for (UWORD i = 0; i < Width; i++) {
 80053fe:	2c00      	cmp	r4, #0
 8005400:	d1e4      	bne.n	80053cc <EPD_Clear+0x34>
    for (UWORD j = 0; j < Height; j++) {
 8005402:	3d01      	subs	r5, #1
 8005404:	b2ad      	uxth	r5, r5
 8005406:	2d00      	cmp	r5, #0
 8005408:	d1df      	bne.n	80053ca <EPD_Clear+0x32>
    DEV_Digital_Write(EPD_DC_PIN, 0);
 800540a:	2180      	movs	r1, #128	; 0x80
 800540c:	2200      	movs	r2, #0
 800540e:	4829      	ldr	r0, [pc, #164]	; (80054b4 <EPD_Clear+0x11c>)
 8005410:	0109      	lsls	r1, r1, #4
 8005412:	f7fc fa5b 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8005416:	2180      	movs	r1, #128	; 0x80
 8005418:	20a0      	movs	r0, #160	; 0xa0
 800541a:	2200      	movs	r2, #0
 800541c:	0209      	lsls	r1, r1, #8
 800541e:	05c0      	lsls	r0, r0, #23
 8005420:	f7fc fa54 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 8005424:	2013      	movs	r0, #19
 8005426:	f7ff f82f 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 800542a:	2180      	movs	r1, #128	; 0x80
 800542c:	20a0      	movs	r0, #160	; 0xa0
 800542e:	2201      	movs	r2, #1
 8005430:	0209      	lsls	r1, r1, #8
 8005432:	05c0      	lsls	r0, r0, #23
 8005434:	f7fc fa4a 	bl	80018cc <HAL_GPIO_WritePin>
 8005438:	25d4      	movs	r5, #212	; 0xd4
 800543a:	240d      	movs	r4, #13
    DEV_Digital_Write(EPD_DC_PIN, 1);
 800543c:	2180      	movs	r1, #128	; 0x80
 800543e:	2201      	movs	r2, #1
 8005440:	481c      	ldr	r0, [pc, #112]	; (80054b4 <EPD_Clear+0x11c>)
 8005442:	0109      	lsls	r1, r1, #4
 8005444:	f7fc fa42 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8005448:	2180      	movs	r1, #128	; 0x80
 800544a:	20a0      	movs	r0, #160	; 0xa0
 800544c:	2200      	movs	r2, #0
 800544e:	0209      	lsls	r1, r1, #8
 8005450:	05c0      	lsls	r0, r0, #23
 8005452:	f7fc fa3b 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8005456:	20ff      	movs	r0, #255	; 0xff
 8005458:	f7ff f816 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 800545c:	2180      	movs	r1, #128	; 0x80
 800545e:	20a0      	movs	r0, #160	; 0xa0
        }
    }

    EPD_SendCommand(0x13);
    for (UWORD j = 0; j < Height; j++) {
        for (UWORD i = 0; i < Width; i++) {
 8005460:	3c01      	subs	r4, #1
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8005462:	2201      	movs	r2, #1
 8005464:	0209      	lsls	r1, r1, #8
 8005466:	05c0      	lsls	r0, r0, #23
        for (UWORD i = 0; i < Width; i++) {
 8005468:	b2a4      	uxth	r4, r4
    DEV_Digital_Write(EPD_CS_PIN, 1);
 800546a:	f7fc fa2f 	bl	80018cc <HAL_GPIO_WritePin>
        for (UWORD i = 0; i < Width; i++) {
 800546e:	2c00      	cmp	r4, #0
 8005470:	d1e4      	bne.n	800543c <EPD_Clear+0xa4>
    for (UWORD j = 0; j < Height; j++) {
 8005472:	3d01      	subs	r5, #1
 8005474:	b2ad      	uxth	r5, r5
 8005476:	2d00      	cmp	r5, #0
 8005478:	d1df      	bne.n	800543a <EPD_Clear+0xa2>
            EPD_SendData(0xFF);
        }
    }

    EPD_SetFullReg();
 800547a:	f7ff fc97 	bl	8004dac <EPD_SetFullReg>
    DEV_Digital_Write(EPD_DC_PIN, 0);
 800547e:	2180      	movs	r1, #128	; 0x80
 8005480:	2200      	movs	r2, #0
 8005482:	480c      	ldr	r0, [pc, #48]	; (80054b4 <EPD_Clear+0x11c>)
 8005484:	0109      	lsls	r1, r1, #4
 8005486:	f7fc fa21 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 800548a:	2180      	movs	r1, #128	; 0x80
 800548c:	20a0      	movs	r0, #160	; 0xa0
 800548e:	2200      	movs	r2, #0
 8005490:	0209      	lsls	r1, r1, #8
 8005492:	05c0      	lsls	r0, r0, #23
 8005494:	f7fc fa1a 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 8005498:	2012      	movs	r0, #18
 800549a:	f7fe fff5 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 800549e:	2180      	movs	r1, #128	; 0x80
 80054a0:	20a0      	movs	r0, #160	; 0xa0
 80054a2:	2201      	movs	r2, #1
 80054a4:	0209      	lsls	r1, r1, #8
 80054a6:	05c0      	lsls	r0, r0, #23
 80054a8:	f7fc fa10 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Delay_ms(1);     //!!!The delay here is necessary, 200uS at least!!!
 80054ac:	2001      	movs	r0, #1
 80054ae:	f7fb ffc9 	bl	8001444 <HAL_Delay>
    EPD_TurnOnDisplay();
}
 80054b2:	bd70      	pop	{r4, r5, r6, pc}
 80054b4:	50000400 	.word	0x50000400

080054b8 <EPD_Display>:
    DEV_Digital_Write(EPD_DC_PIN, 0);
 80054b8:	2180      	movs	r1, #128	; 0x80
/******************************************************************************
function :	Sends the image buffer in RAM to e-Paper and displays
parameter:
******************************************************************************/
void EPD_Display(UBYTE *Image)
{
 80054ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    DEV_Digital_Write(EPD_DC_PIN, 0);
 80054bc:	2200      	movs	r2, #0
 80054be:	0109      	lsls	r1, r1, #4
{
 80054c0:	0007      	movs	r7, r0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 80054c2:	484a      	ldr	r0, [pc, #296]	; (80055ec <EPD_Display+0x134>)
 80054c4:	f7fc fa02 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80054c8:	2180      	movs	r1, #128	; 0x80
 80054ca:	20a0      	movs	r0, #160	; 0xa0
 80054cc:	2200      	movs	r2, #0
 80054ce:	0209      	lsls	r1, r1, #8
 80054d0:	05c0      	lsls	r0, r0, #23
 80054d2:	f7fc f9fb 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 80054d6:	2010      	movs	r0, #16
 80054d8:	f7fe ffd6 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80054dc:	2180      	movs	r1, #128	; 0x80
 80054de:	20a0      	movs	r0, #160	; 0xa0
 80054e0:	2201      	movs	r2, #1
 80054e2:	0209      	lsls	r1, r1, #8
 80054e4:	05c0      	lsls	r0, r0, #23
 80054e6:	f7fc f9f1 	bl	80018cc <HAL_GPIO_WritePin>
 80054ea:	25d4      	movs	r5, #212	; 0xd4
{
 80054ec:	240d      	movs	r4, #13
    DEV_Digital_Write(EPD_DC_PIN, 1);
 80054ee:	2180      	movs	r1, #128	; 0x80
 80054f0:	2201      	movs	r2, #1
 80054f2:	483e      	ldr	r0, [pc, #248]	; (80055ec <EPD_Display+0x134>)
 80054f4:	0109      	lsls	r1, r1, #4
 80054f6:	f7fc f9e9 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80054fa:	2180      	movs	r1, #128	; 0x80
 80054fc:	20a0      	movs	r0, #160	; 0xa0
 80054fe:	2200      	movs	r2, #0
 8005500:	0209      	lsls	r1, r1, #8
 8005502:	05c0      	lsls	r0, r0, #23
 8005504:	f7fc f9e2 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 8005508:	2000      	movs	r0, #0
 800550a:	f7fe ffbd 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 800550e:	2180      	movs	r1, #128	; 0x80
 8005510:	20a0      	movs	r0, #160	; 0xa0
    Width = (EPD_WIDTH % 8 == 0)? (EPD_WIDTH / 8 ): (EPD_WIDTH / 8 + 1);
    Height = EPD_HEIGHT;

    EPD_SendCommand(0x10);
    for (UWORD j = 0; j < Height; j++) {
        for (UWORD i = 0; i < Width; i++) {
 8005512:	3c01      	subs	r4, #1
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8005514:	2201      	movs	r2, #1
 8005516:	0209      	lsls	r1, r1, #8
 8005518:	05c0      	lsls	r0, r0, #23
        for (UWORD i = 0; i < Width; i++) {
 800551a:	b2a4      	uxth	r4, r4
    DEV_Digital_Write(EPD_CS_PIN, 1);
 800551c:	f7fc f9d6 	bl	80018cc <HAL_GPIO_WritePin>
        for (UWORD i = 0; i < Width; i++) {
 8005520:	2c00      	cmp	r4, #0
 8005522:	d1e4      	bne.n	80054ee <EPD_Display+0x36>
    for (UWORD j = 0; j < Height; j++) {
 8005524:	3d01      	subs	r5, #1
 8005526:	b2ad      	uxth	r5, r5
 8005528:	2d00      	cmp	r5, #0
 800552a:	d1df      	bne.n	80054ec <EPD_Display+0x34>
            EPD_SendData(0x00);
        }
    }
     DEV_Delay_ms(10);
 800552c:	200a      	movs	r0, #10
 800552e:	f7fb ff89 	bl	8001444 <HAL_Delay>
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8005532:	2180      	movs	r1, #128	; 0x80
 8005534:	2200      	movs	r2, #0
 8005536:	482d      	ldr	r0, [pc, #180]	; (80055ec <EPD_Display+0x134>)
 8005538:	0109      	lsls	r1, r1, #4
 800553a:	f7fc f9c7 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 800553e:	2180      	movs	r1, #128	; 0x80
 8005540:	20a0      	movs	r0, #160	; 0xa0
 8005542:	2200      	movs	r2, #0
 8005544:	0209      	lsls	r1, r1, #8
 8005546:	05c0      	lsls	r0, r0, #23
 8005548:	f7fc f9c0 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 800554c:	2013      	movs	r0, #19
 800554e:	f7fe ff9b 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8005552:	2180      	movs	r1, #128	; 0x80
 8005554:	20a0      	movs	r0, #160	; 0xa0
 8005556:	2201      	movs	r2, #1
 8005558:	0209      	lsls	r1, r1, #8
 800555a:	05c0      	lsls	r0, r0, #23
 800555c:	f7fc f9b6 	bl	80018cc <HAL_GPIO_WritePin>

    EPD_SendCommand(0x13);
    for (UWORD j = 0; j < Height; j++) {
 8005560:	4b23      	ldr	r3, [pc, #140]	; (80055f0 <EPD_Display+0x138>)
 8005562:	003e      	movs	r6, r7
 8005564:	469c      	mov	ip, r3
 8005566:	360d      	adds	r6, #13
 8005568:	4467      	add	r7, ip
        for (UWORD i = 0; i < Width; i++) {
 800556a:	0034      	movs	r4, r6
 800556c:	3c0d      	subs	r4, #13
    DEV_Digital_Write(EPD_DC_PIN, 1);
 800556e:	2180      	movs	r1, #128	; 0x80
 8005570:	2201      	movs	r2, #1
 8005572:	481e      	ldr	r0, [pc, #120]	; (80055ec <EPD_Display+0x134>)
 8005574:	0109      	lsls	r1, r1, #4
            EPD_SendData(Image[i + j * Width]);
 8005576:	7825      	ldrb	r5, [r4, #0]
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8005578:	f7fc f9a8 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 800557c:	2180      	movs	r1, #128	; 0x80
 800557e:	20a0      	movs	r0, #160	; 0xa0
 8005580:	2200      	movs	r2, #0
 8005582:	0209      	lsls	r1, r1, #8
 8005584:	05c0      	lsls	r0, r0, #23
 8005586:	f7fc f9a1 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 800558a:	0028      	movs	r0, r5
 800558c:	f7fe ff7c 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8005590:	2180      	movs	r1, #128	; 0x80
 8005592:	20a0      	movs	r0, #160	; 0xa0
 8005594:	2201      	movs	r2, #1
 8005596:	0209      	lsls	r1, r1, #8
 8005598:	05c0      	lsls	r0, r0, #23
        for (UWORD i = 0; i < Width; i++) {
 800559a:	3401      	adds	r4, #1
    DEV_Digital_Write(EPD_CS_PIN, 1);
 800559c:	f7fc f996 	bl	80018cc <HAL_GPIO_WritePin>
        for (UWORD i = 0; i < Width; i++) {
 80055a0:	42a6      	cmp	r6, r4
 80055a2:	d1e4      	bne.n	800556e <EPD_Display+0xb6>
    for (UWORD j = 0; j < Height; j++) {
 80055a4:	360d      	adds	r6, #13
 80055a6:	42b7      	cmp	r7, r6
 80055a8:	d1df      	bne.n	800556a <EPD_Display+0xb2>
        }
    }
    DEV_Delay_ms(10);
 80055aa:	200a      	movs	r0, #10
 80055ac:	f7fb ff4a 	bl	8001444 <HAL_Delay>

		EPD_SetFullReg();
 80055b0:	f7ff fbfc 	bl	8004dac <EPD_SetFullReg>
    DEV_Digital_Write(EPD_DC_PIN, 0);
 80055b4:	2180      	movs	r1, #128	; 0x80
 80055b6:	2200      	movs	r2, #0
 80055b8:	480c      	ldr	r0, [pc, #48]	; (80055ec <EPD_Display+0x134>)
 80055ba:	0109      	lsls	r1, r1, #4
 80055bc:	f7fc f986 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80055c0:	2180      	movs	r1, #128	; 0x80
 80055c2:	20a0      	movs	r0, #160	; 0xa0
 80055c4:	2200      	movs	r2, #0
 80055c6:	0209      	lsls	r1, r1, #8
 80055c8:	05c0      	lsls	r0, r0, #23
 80055ca:	f7fc f97f 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 80055ce:	2012      	movs	r0, #18
 80055d0:	f7fe ff5a 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80055d4:	2180      	movs	r1, #128	; 0x80
 80055d6:	20a0      	movs	r0, #160	; 0xa0
 80055d8:	2201      	movs	r2, #1
 80055da:	0209      	lsls	r1, r1, #8
 80055dc:	05c0      	lsls	r0, r0, #23
 80055de:	f7fc f975 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Delay_ms(1);     //!!!The delay here is necessary, 200uS at least!!!
 80055e2:	2001      	movs	r0, #1
 80055e4:	f7fb ff2e 	bl	8001444 <HAL_Delay>
    EPD_TurnOnDisplay();
}
 80055e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055ea:	46c0      	nop			; (mov r8, r8)
 80055ec:	50000400 	.word	0x50000400
 80055f0:	00000ad1 	.word	0x00000ad1

080055f4 <EPD_Sleep>:
/******************************************************************************
function :	Enter sleep mode
parameter:
******************************************************************************/
void EPD_Sleep(void)
{
 80055f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    DEV_Digital_Write(EPD_DC_PIN, 0);
 80055f6:	2780      	movs	r7, #128	; 0x80
    DEV_Digital_Write(EPD_CS_PIN, 0);
 80055f8:	2580      	movs	r5, #128	; 0x80
 80055fa:	24a0      	movs	r4, #160	; 0xa0
    DEV_Digital_Write(EPD_DC_PIN, 0);
 80055fc:	4e2f      	ldr	r6, [pc, #188]	; (80056bc <EPD_Sleep+0xc8>)
 80055fe:	013f      	lsls	r7, r7, #4
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8005600:	022d      	lsls	r5, r5, #8
 8005602:	05e4      	lsls	r4, r4, #23
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8005604:	0039      	movs	r1, r7
 8005606:	0030      	movs	r0, r6
 8005608:	2200      	movs	r2, #0
 800560a:	f7fc f95f 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 800560e:	0029      	movs	r1, r5
 8005610:	2200      	movs	r2, #0
 8005612:	0020      	movs	r0, r4
 8005614:	f7fc f95a 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 8005618:	2050      	movs	r0, #80	; 0x50
 800561a:	f7fe ff35 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 800561e:	0029      	movs	r1, r5
 8005620:	0020      	movs	r0, r4
 8005622:	2201      	movs	r2, #1
 8005624:	f7fc f952 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8005628:	0039      	movs	r1, r7
 800562a:	0030      	movs	r0, r6
 800562c:	2201      	movs	r2, #1
 800562e:	f7fc f94d 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8005632:	0029      	movs	r1, r5
 8005634:	2200      	movs	r2, #0
 8005636:	0020      	movs	r0, r4
 8005638:	f7fc f948 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 800563c:	20f7      	movs	r0, #247	; 0xf7
 800563e:	f7fe ff23 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8005642:	0029      	movs	r1, r5
 8005644:	0020      	movs	r0, r4
 8005646:	2201      	movs	r2, #1
 8005648:	f7fc f940 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_DC_PIN, 0);
 800564c:	0039      	movs	r1, r7
 800564e:	0030      	movs	r0, r6
 8005650:	2200      	movs	r2, #0
 8005652:	f7fc f93b 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 8005656:	0029      	movs	r1, r5
 8005658:	2200      	movs	r2, #0
 800565a:	0020      	movs	r0, r4
 800565c:	f7fc f936 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 8005660:	2002      	movs	r0, #2
 8005662:	f7fe ff11 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 8005666:	0029      	movs	r1, r5
 8005668:	0020      	movs	r0, r4
 800566a:	2201      	movs	r2, #1
 800566c:	f7fc f92e 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_DC_PIN, 0);
 8005670:	0039      	movs	r1, r7
 8005672:	0030      	movs	r0, r6
 8005674:	2200      	movs	r2, #0
 8005676:	f7fc f929 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 800567a:	0029      	movs	r1, r5
 800567c:	2200      	movs	r2, #0
 800567e:	0020      	movs	r0, r4
 8005680:	f7fc f924 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Reg);
 8005684:	2007      	movs	r0, #7
 8005686:	f7fe feff 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 800568a:	0029      	movs	r1, r5
 800568c:	0020      	movs	r0, r4
 800568e:	2201      	movs	r2, #1
 8005690:	f7fc f91c 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_DC_PIN, 1);
 8005694:	0039      	movs	r1, r7
 8005696:	0030      	movs	r0, r6
 8005698:	2201      	movs	r2, #1
 800569a:	f7fc f917 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_Digital_Write(EPD_CS_PIN, 0);
 800569e:	0029      	movs	r1, r5
 80056a0:	2200      	movs	r2, #0
 80056a2:	0020      	movs	r0, r4
 80056a4:	f7fc f912 	bl	80018cc <HAL_GPIO_WritePin>
    DEV_SPI_WriteByte(Data);
 80056a8:	20a5      	movs	r0, #165	; 0xa5
 80056aa:	f7fe feed 	bl	8004488 <DEV_SPI_WriteByte>
    DEV_Digital_Write(EPD_CS_PIN, 1);
 80056ae:	0029      	movs	r1, r5
 80056b0:	2201      	movs	r2, #1
 80056b2:	0020      	movs	r0, r4
 80056b4:	f7fc f90a 	bl	80018cc <HAL_GPIO_WritePin>
    EPD_SendCommand(0X50);
    EPD_SendData(0xf7);
    EPD_SendCommand(0X02);  	//power off
    EPD_SendCommand(0X07);  	//deep sleep
    EPD_SendData(0xA5);
}
 80056b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056ba:	46c0      	nop			; (mov r8, r8)
 80056bc:	50000400 	.word	0x50000400

080056c0 <finderPenaltyCountPatterns>:
}


// Can only be called immediately after a light run is added, and
// returns either 0, 1, or 2. A helper function for getPenaltyScore().
static int finderPenaltyCountPatterns(const int runHistory[7], int qrsize) {
 80056c0:	0003      	movs	r3, r0
	int n = runHistory[1];
 80056c2:	6842      	ldr	r2, [r0, #4]
	assert(n <= qrsize * 3);  (void)qrsize;
 80056c4:	0048      	lsls	r0, r1, #1
 80056c6:	1840      	adds	r0, r0, r1
static int finderPenaltyCountPatterns(const int runHistory[7], int qrsize) {
 80056c8:	b570      	push	{r4, r5, r6, lr}
	assert(n <= qrsize * 3);  (void)qrsize;
 80056ca:	4290      	cmp	r0, r2
 80056cc:	db22      	blt.n	8005714 <finderPenaltyCountPatterns+0x54>
	bool core = n > 0 && runHistory[2] == n && runHistory[3] == n * 3 && runHistory[4] == n && runHistory[5] == n;
 80056ce:	2000      	movs	r0, #0
 80056d0:	2a00      	cmp	r2, #0
 80056d2:	dd02      	ble.n	80056da <finderPenaltyCountPatterns+0x1a>
 80056d4:	6899      	ldr	r1, [r3, #8]
 80056d6:	4291      	cmp	r1, r2
 80056d8:	d000      	beq.n	80056dc <finderPenaltyCountPatterns+0x1c>
	// The maximum QR Code size is 177, hence the dark run length n <= 177.
	// Arithmetic is promoted to int, so n*4 will not overflow.
	return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0)
	     + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);
}
 80056da:	bd70      	pop	{r4, r5, r6, pc}
	bool core = n > 0 && runHistory[2] == n && runHistory[3] == n * 3 && runHistory[4] == n && runHistory[5] == n;
 80056dc:	004c      	lsls	r4, r1, #1
 80056de:	68dd      	ldr	r5, [r3, #12]
 80056e0:	1864      	adds	r4, r4, r1
 80056e2:	42a5      	cmp	r5, r4
 80056e4:	d1f9      	bne.n	80056da <finderPenaltyCountPatterns+0x1a>
 80056e6:	691c      	ldr	r4, [r3, #16]
 80056e8:	428c      	cmp	r4, r1
 80056ea:	d1f6      	bne.n	80056da <finderPenaltyCountPatterns+0x1a>
 80056ec:	6959      	ldr	r1, [r3, #20]
 80056ee:	42a1      	cmp	r1, r4
 80056f0:	d1f3      	bne.n	80056da <finderPenaltyCountPatterns+0x1a>
	return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0)
 80056f2:	681c      	ldr	r4, [r3, #0]
 80056f4:	0091      	lsls	r1, r2, #2
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	428c      	cmp	r4, r1
 80056fa:	db03      	blt.n	8005704 <finderPenaltyCountPatterns+0x44>
 80056fc:	17d8      	asrs	r0, r3, #31
 80056fe:	0fd5      	lsrs	r5, r2, #31
 8005700:	4293      	cmp	r3, r2
 8005702:	4168      	adcs	r0, r5
	     + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);
 8005704:	4299      	cmp	r1, r3
 8005706:	dce8      	bgt.n	80056da <finderPenaltyCountPatterns+0x1a>
 8005708:	17e3      	asrs	r3, r4, #31
 800570a:	0fd1      	lsrs	r1, r2, #31
 800570c:	4294      	cmp	r4, r2
 800570e:	414b      	adcs	r3, r1
 8005710:	18c0      	adds	r0, r0, r3
 8005712:	e7e2      	b.n	80056da <finderPenaltyCountPatterns+0x1a>
	assert(n <= qrsize * 3);  (void)qrsize;
 8005714:	4b02      	ldr	r3, [pc, #8]	; (8005720 <finderPenaltyCountPatterns+0x60>)
 8005716:	4a03      	ldr	r2, [pc, #12]	; (8005724 <finderPenaltyCountPatterns+0x64>)
 8005718:	4903      	ldr	r1, [pc, #12]	; (8005728 <finderPenaltyCountPatterns+0x68>)
 800571a:	4804      	ldr	r0, [pc, #16]	; (800572c <finderPenaltyCountPatterns+0x6c>)
 800571c:	f003 ff2c 	bl	8009578 <__assert_func>
 8005720:	0800e1f4 	.word	0x0800e1f4
 8005724:	0800e87c 	.word	0x0800e87c
 8005728:	000002d1 	.word	0x000002d1
 800572c:	0800e204 	.word	0x0800e204

08005730 <appendBitsToBuffer.part.0>:
	assert(0 <= numBits && numBits <= 16 && (unsigned long)val >> numBits == 0);
 8005730:	21bd      	movs	r1, #189	; 0xbd
testable void appendBitsToBuffer(unsigned int val, int numBits, uint8_t buffer[], int *bitLen) {
 8005732:	b510      	push	{r4, lr}
	assert(0 <= numBits && numBits <= 16 && (unsigned long)val >> numBits == 0);
 8005734:	4b02      	ldr	r3, [pc, #8]	; (8005740 <appendBitsToBuffer.part.0+0x10>)
 8005736:	4a03      	ldr	r2, [pc, #12]	; (8005744 <appendBitsToBuffer.part.0+0x14>)
 8005738:	4803      	ldr	r0, [pc, #12]	; (8005748 <appendBitsToBuffer.part.0+0x18>)
 800573a:	f003 ff1d 	bl	8009578 <__assert_func>
 800573e:	46c0      	nop			; (mov r8, r8)
 8005740:	0800e220 	.word	0x0800e220
 8005744:	0800e948 	.word	0x0800e948
 8005748:	0800e204 	.word	0x0800e204

0800574c <qrcodegen_getSize.part.0>:


/*---- Basic QR Code information ----*/

// Public function - see documentation comment in header file.
int qrcodegen_getSize(const uint8_t qrcode[]) {
 800574c:	b510      	push	{r4, lr}
	assert(qrcode != NULL);
	int result = qrcode[0];
	assert((qrcodegen_VERSION_MIN * 4 + 17) <= result
 800574e:	4b03      	ldr	r3, [pc, #12]	; (800575c <qrcodegen_getSize.part.0+0x10>)
 8005750:	4a03      	ldr	r2, [pc, #12]	; (8005760 <qrcodegen_getSize.part.0+0x14>)
 8005752:	4904      	ldr	r1, [pc, #16]	; (8005764 <qrcodegen_getSize.part.0+0x18>)
 8005754:	4804      	ldr	r0, [pc, #16]	; (8005768 <qrcodegen_getSize.part.0+0x1c>)
 8005756:	f003 ff0f 	bl	8009578 <__assert_func>
 800575a:	46c0      	nop			; (mov r8, r8)
 800575c:	0800e264 	.word	0x0800e264
 8005760:	0800e9cc 	.word	0x0800e9cc
 8005764:	000002f6 	.word	0x000002f6
 8005768:	0800e204 	.word	0x0800e204

0800576c <getNumDataCodewords>:
testable int getNumDataCodewords(int version, enum qrcodegen_Ecc ecl) {
 800576c:	b570      	push	{r4, r5, r6, lr}
 800576e:	0005      	movs	r5, r0
 8005770:	000e      	movs	r6, r1
	assert(0 <= e && e < 4);
 8005772:	2903      	cmp	r1, #3
 8005774:	d834      	bhi.n	80057e0 <getNumDataCodewords+0x74>
	assert(qrcodegen_VERSION_MIN <= ver && ver <= qrcodegen_VERSION_MAX);
 8005776:	1e43      	subs	r3, r0, #1
 8005778:	2b09      	cmp	r3, #9
 800577a:	d82a      	bhi.n	80057d2 <getNumDataCodewords+0x66>
	int result = (16 * ver + 128) * ver + 64;
 800577c:	0004      	movs	r4, r0
 800577e:	3408      	adds	r4, #8
 8005780:	4344      	muls	r4, r0
 8005782:	3404      	adds	r4, #4
 8005784:	0124      	lsls	r4, r4, #4
	if (ver >= 2) {
 8005786:	2801      	cmp	r0, #1
 8005788:	d013      	beq.n	80057b2 <getNumDataCodewords+0x46>
		int numAlign = ver / 7 + 2;
 800578a:	2107      	movs	r1, #7
 800578c:	f7fa fd58 	bl	8000240 <__divsi3>
 8005790:	3002      	adds	r0, #2
		result -= (25 * numAlign - 10) * numAlign - 55;
 8005792:	0083      	lsls	r3, r0, #2
 8005794:	181b      	adds	r3, r3, r0
 8005796:	009a      	lsls	r2, r3, #2
 8005798:	189b      	adds	r3, r3, r2
 800579a:	3b0a      	subs	r3, #10
 800579c:	4358      	muls	r0, r3
 800579e:	3837      	subs	r0, #55	; 0x37
 80057a0:	1a24      	subs	r4, r4, r0
		if (ver >= 7)
 80057a2:	2d06      	cmp	r5, #6
 80057a4:	dc13      	bgt.n	80057ce <getNumDataCodewords+0x62>
	assert(208 <= result && result <= 29648);
 80057a6:	0023      	movs	r3, r4
 80057a8:	22e6      	movs	r2, #230	; 0xe6
 80057aa:	3bd0      	subs	r3, #208	; 0xd0
 80057ac:	01d2      	lsls	r2, r2, #7
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d81d      	bhi.n	80057ee <getNumDataCodewords+0x82>
		- ECC_CODEWORDS_PER_BLOCK    [e][v]
 80057b2:	00b1      	lsls	r1, r6, #2
 80057b4:	1989      	adds	r1, r1, r6
 80057b6:	4b11      	ldr	r3, [pc, #68]	; (80057fc <getNumDataCodewords+0x90>)
 80057b8:	00c9      	lsls	r1, r1, #3
 80057ba:	1989      	adds	r1, r1, r6
 80057bc:	185b      	adds	r3, r3, r1
 80057be:	575a      	ldrsb	r2, [r3, r5]
		* NUM_ERROR_CORRECTION_BLOCKS[e][v];
 80057c0:	4b0f      	ldr	r3, [pc, #60]	; (8005800 <getNumDataCodewords+0x94>)
	return getNumRawDataModules(v) / 8
 80057c2:	10e4      	asrs	r4, r4, #3
		* NUM_ERROR_CORRECTION_BLOCKS[e][v];
 80057c4:	1859      	adds	r1, r3, r1
 80057c6:	5748      	ldrsb	r0, [r1, r5]
 80057c8:	4350      	muls	r0, r2
		- ECC_CODEWORDS_PER_BLOCK    [e][v]
 80057ca:	1a20      	subs	r0, r4, r0
}
 80057cc:	bd70      	pop	{r4, r5, r6, pc}
			result -= 36;
 80057ce:	3c24      	subs	r4, #36	; 0x24
 80057d0:	e7e9      	b.n	80057a6 <getNumDataCodewords+0x3a>
	assert(qrcodegen_VERSION_MIN <= ver && ver <= qrcodegen_VERSION_MAX);
 80057d2:	2158      	movs	r1, #88	; 0x58
 80057d4:	4b0b      	ldr	r3, [pc, #44]	; (8005804 <getNumDataCodewords+0x98>)
 80057d6:	4a0c      	ldr	r2, [pc, #48]	; (8005808 <getNumDataCodewords+0x9c>)
 80057d8:	480c      	ldr	r0, [pc, #48]	; (800580c <getNumDataCodewords+0xa0>)
 80057da:	31ff      	adds	r1, #255	; 0xff
 80057dc:	f003 fecc 	bl	8009578 <__assert_func>
	assert(0 <= e && e < 4);
 80057e0:	21a6      	movs	r1, #166	; 0xa6
 80057e2:	4b0b      	ldr	r3, [pc, #44]	; (8005810 <getNumDataCodewords+0xa4>)
 80057e4:	4a0b      	ldr	r2, [pc, #44]	; (8005814 <getNumDataCodewords+0xa8>)
 80057e6:	4809      	ldr	r0, [pc, #36]	; (800580c <getNumDataCodewords+0xa0>)
 80057e8:	0049      	lsls	r1, r1, #1
 80057ea:	f003 fec5 	bl	8009578 <__assert_func>
	assert(208 <= result && result <= 29648);
 80057ee:	2160      	movs	r1, #96	; 0x60
 80057f0:	4b09      	ldr	r3, [pc, #36]	; (8005818 <getNumDataCodewords+0xac>)
 80057f2:	4a05      	ldr	r2, [pc, #20]	; (8005808 <getNumDataCodewords+0x9c>)
 80057f4:	4805      	ldr	r0, [pc, #20]	; (800580c <getNumDataCodewords+0xa0>)
 80057f6:	31ff      	adds	r1, #255	; 0xff
 80057f8:	f003 febe 	bl	8009578 <__assert_func>
 80057fc:	0800e6fc 	.word	0x0800e6fc
 8005800:	0800e7a0 	.word	0x0800e7a0
 8005804:	0800e2d0 	.word	0x0800e2d0
 8005808:	0800e8fc 	.word	0x0800e8fc
 800580c:	0800e204 	.word	0x0800e204
 8005810:	0800e2c0 	.word	0x0800e2c0
 8005814:	0800e95c 	.word	0x0800e95c
 8005818:	0800e310 	.word	0x0800e310

0800581c <applyMask>:
static void applyMask(const uint8_t functionModules[], uint8_t qrcode[], enum qrcodegen_Mask mask) {
 800581c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800581e:	46de      	mov	lr, fp
 8005820:	4657      	mov	r7, sl
 8005822:	464e      	mov	r6, r9
 8005824:	4645      	mov	r5, r8
 8005826:	b5e0      	push	{r5, r6, r7, lr}
	assert(0 <= (int)mask && (int)mask <= 7);  // Disallows qrcodegen_Mask_AUTO
 8005828:	b2d3      	uxtb	r3, r2
static void applyMask(const uint8_t functionModules[], uint8_t qrcode[], enum qrcodegen_Mask mask) {
 800582a:	b087      	sub	sp, #28
 800582c:	4682      	mov	sl, r0
 800582e:	468b      	mov	fp, r1
	assert(0 <= (int)mask && (int)mask <= 7);  // Disallows qrcodegen_Mask_AUTO
 8005830:	9303      	str	r3, [sp, #12]
 8005832:	2b07      	cmp	r3, #7
 8005834:	d900      	bls.n	8005838 <applyMask+0x1c>
 8005836:	e0bd      	b.n	80059b4 <applyMask+0x198>
	assert(qrcode != NULL);
 8005838:	2900      	cmp	r1, #0
 800583a:	d100      	bne.n	800583e <applyMask+0x22>
 800583c:	e0c3      	b.n	80059c6 <applyMask+0x1aa>
	int result = qrcode[0];
 800583e:	7809      	ldrb	r1, [r1, #0]
	assert((qrcodegen_VERSION_MIN * 4 + 17) <= result
 8005840:	000b      	movs	r3, r1
 8005842:	3b15      	subs	r3, #21
	int result = qrcode[0];
 8005844:	9102      	str	r1, [sp, #8]
	assert((qrcodegen_VERSION_MIN * 4 + 17) <= result
 8005846:	2b24      	cmp	r3, #36	; 0x24
 8005848:	d900      	bls.n	800584c <applyMask+0x30>
 800584a:	e0ba      	b.n	80059c2 <applyMask+0x1a6>
	for (int y = 0; y < qrsize; y++) {
 800584c:	2500      	movs	r5, #0
 800584e:	2900      	cmp	r1, #0
 8005850:	d060      	beq.n	8005914 <applyMask+0xf8>
			switch ((int)mask) {
 8005852:	0092      	lsls	r2, r2, #2
 8005854:	4691      	mov	r9, r2
}


// Returns true iff the i'th bit of x is set to 1. Requires x >= 0 and 0 <= i <= 14.
static bool getBit(int x, int i) {
	return ((x >> i) & 1) != 0;
 8005856:	2601      	movs	r6, #1
			switch ((int)mask) {
 8005858:	4b5e      	ldr	r3, [pc, #376]	; (80059d4 <applyMask+0x1b8>)
 800585a:	4499      	add	r9, r3
				case 4:  invert = (x / 3 + y / 2) % 2 == 0;            break;
 800585c:	106b      	asrs	r3, r5, #1
 800585e:	9304      	str	r3, [sp, #16]
 8005860:	0033      	movs	r3, r6
 8005862:	2201      	movs	r2, #1
 8005864:	46a8      	mov	r8, r5
 8005866:	2700      	movs	r7, #0
		for (int x = 0; x < qrsize; x++) {
 8005868:	2400      	movs	r4, #0
 800586a:	402b      	ands	r3, r5
 800586c:	4053      	eors	r3, r2
 800586e:	b2db      	uxtb	r3, r3
 8005870:	9305      	str	r3, [sp, #20]
	int qrsize = qrcode[0];
 8005872:	4653      	mov	r3, sl
 8005874:	781b      	ldrb	r3, [r3, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005876:	001a      	movs	r2, r3
 8005878:	3a15      	subs	r2, #21
 800587a:	2a9c      	cmp	r2, #156	; 0x9c
 800587c:	d900      	bls.n	8005880 <applyMask+0x64>
 800587e:	e093      	b.n	80059a8 <applyMask+0x18c>
 8005880:	429c      	cmp	r4, r3
 8005882:	db00      	blt.n	8005886 <applyMask+0x6a>
 8005884:	e090      	b.n	80059a8 <applyMask+0x18c>
 8005886:	429d      	cmp	r5, r3
 8005888:	db00      	blt.n	800588c <applyMask+0x70>
 800588a:	e08d      	b.n	80059a8 <applyMask+0x18c>
	return getBit(qrcode[(index >> 3) + 1], index & 7);
 800588c:	2107      	movs	r1, #7
	int index = y * qrsize + x;
 800588e:	436b      	muls	r3, r5
 8005890:	191b      	adds	r3, r3, r4
	return getBit(qrcode[(index >> 3) + 1], index & 7);
 8005892:	10da      	asrs	r2, r3, #3
 8005894:	4452      	add	r2, sl
 8005896:	7852      	ldrb	r2, [r2, #1]
 8005898:	400b      	ands	r3, r1
	return ((x >> i) & 1) != 0;
 800589a:	411a      	asrs	r2, r3
			if (getModuleBounded(functionModules, x, y))
 800589c:	4216      	tst	r6, r2
 800589e:	d12e      	bne.n	80058fe <applyMask+0xe2>
			switch ((int)mask) {
 80058a0:	9b03      	ldr	r3, [sp, #12]
 80058a2:	2b07      	cmp	r3, #7
 80058a4:	d900      	bls.n	80058a8 <applyMask+0x8c>
 80058a6:	e078      	b.n	800599a <applyMask+0x17e>
 80058a8:	464b      	mov	r3, r9
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	469f      	mov	pc, r3
				case 7:  invert = ((x + y) % 2 + x * y % 3) % 2 == 0;  break;
 80058ae:	2103      	movs	r1, #3
 80058b0:	0038      	movs	r0, r7
 80058b2:	f7fa fdab 	bl	800040c <__aeabi_idivmod>
 80058b6:	4643      	mov	r3, r8
 80058b8:	4033      	ands	r3, r6
 80058ba:	185b      	adds	r3, r3, r1
 80058bc:	0031      	movs	r1, r6
 80058be:	4399      	bics	r1, r3
 80058c0:	9101      	str	r1, [sp, #4]
	int qrsize = qrcode[0];
 80058c2:	465b      	mov	r3, fp
 80058c4:	781b      	ldrb	r3, [r3, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 80058c6:	001a      	movs	r2, r3
 80058c8:	3a15      	subs	r2, #21
 80058ca:	2a9c      	cmp	r2, #156	; 0x9c
 80058cc:	d86c      	bhi.n	80059a8 <applyMask+0x18c>
 80058ce:	429c      	cmp	r4, r3
 80058d0:	da6a      	bge.n	80059a8 <applyMask+0x18c>
 80058d2:	429d      	cmp	r5, r3
 80058d4:	da68      	bge.n	80059a8 <applyMask+0x18c>
	return getBit(qrcode[(index >> 3) + 1], index & 7);
 80058d6:	4659      	mov	r1, fp
	int index = y * qrsize + x;
 80058d8:	436b      	muls	r3, r5
 80058da:	191b      	adds	r3, r3, r4
	return getBit(qrcode[(index >> 3) + 1], index & 7);
 80058dc:	10da      	asrs	r2, r3, #3
 80058de:	3201      	adds	r2, #1
 80058e0:	1888      	adds	r0, r1, r2
 80058e2:	5c8a      	ldrb	r2, [r1, r2]
 80058e4:	2107      	movs	r1, #7
 80058e6:	400b      	ands	r3, r1
	return ((x >> i) & 1) != 0;
 80058e8:	0011      	movs	r1, r2
 80058ea:	4119      	asrs	r1, r3
	if (isDark)
 80058ec:	4031      	ands	r1, r6
 80058ee:	468c      	mov	ip, r1
 80058f0:	9901      	ldr	r1, [sp, #4]
 80058f2:	4561      	cmp	r1, ip
 80058f4:	d04c      	beq.n	8005990 <applyMask+0x174>
		qrcode[byteIndex] |= 1 << bitIndex;
 80058f6:	0031      	movs	r1, r6
 80058f8:	4099      	lsls	r1, r3
 80058fa:	430a      	orrs	r2, r1
 80058fc:	7002      	strb	r2, [r0, #0]
		for (int x = 0; x < qrsize; x++) {
 80058fe:	2301      	movs	r3, #1
 8005900:	469c      	mov	ip, r3
 8005902:	9b02      	ldr	r3, [sp, #8]
 8005904:	3401      	adds	r4, #1
 8005906:	44e0      	add	r8, ip
 8005908:	197f      	adds	r7, r7, r5
 800590a:	429c      	cmp	r4, r3
 800590c:	dbb1      	blt.n	8005872 <applyMask+0x56>
	for (int y = 0; y < qrsize; y++) {
 800590e:	3501      	adds	r5, #1
 8005910:	429d      	cmp	r5, r3
 8005912:	dba3      	blt.n	800585c <applyMask+0x40>
}
 8005914:	b007      	add	sp, #28
 8005916:	bcf0      	pop	{r4, r5, r6, r7}
 8005918:	46bb      	mov	fp, r7
 800591a:	46b2      	mov	sl, r6
 800591c:	46a9      	mov	r9, r5
 800591e:	46a0      	mov	r8, r4
 8005920:	bdf0      	pop	{r4, r5, r6, r7, pc}
				case 6:  invert = (x * y % 2 + x * y % 3) % 2 == 0;    break;
 8005922:	2103      	movs	r1, #3
 8005924:	0038      	movs	r0, r7
 8005926:	f7fa fd71 	bl	800040c <__aeabi_idivmod>
 800592a:	0033      	movs	r3, r6
 800592c:	403b      	ands	r3, r7
 800592e:	185b      	adds	r3, r3, r1
 8005930:	0031      	movs	r1, r6
 8005932:	4399      	bics	r1, r3
 8005934:	9101      	str	r1, [sp, #4]
 8005936:	e7c4      	b.n	80058c2 <applyMask+0xa6>
				case 5:  invert = x * y % 2 + x * y % 3 == 0;          break;
 8005938:	2103      	movs	r1, #3
 800593a:	0038      	movs	r0, r7
 800593c:	f7fa fd66 	bl	800040c <__aeabi_idivmod>
 8005940:	0033      	movs	r3, r6
 8005942:	403b      	ands	r3, r7
 8005944:	185b      	adds	r3, r3, r1
 8005946:	425a      	negs	r2, r3
 8005948:	4153      	adcs	r3, r2
 800594a:	b2db      	uxtb	r3, r3
 800594c:	9301      	str	r3, [sp, #4]
 800594e:	e7b8      	b.n	80058c2 <applyMask+0xa6>
				case 4:  invert = (x / 3 + y / 2) % 2 == 0;            break;
 8005950:	2103      	movs	r1, #3
 8005952:	0020      	movs	r0, r4
 8005954:	f7fa fc74 	bl	8000240 <__divsi3>
 8005958:	9b04      	ldr	r3, [sp, #16]
 800595a:	0031      	movs	r1, r6
 800595c:	469c      	mov	ip, r3
 800595e:	4460      	add	r0, ip
 8005960:	4381      	bics	r1, r0
 8005962:	9101      	str	r1, [sp, #4]
 8005964:	e7ad      	b.n	80058c2 <applyMask+0xa6>
				case 1:  invert = y % 2 == 0;                          break;
 8005966:	9b05      	ldr	r3, [sp, #20]
 8005968:	9301      	str	r3, [sp, #4]
 800596a:	e7aa      	b.n	80058c2 <applyMask+0xa6>
				case 3:  invert = (x + y) % 3 == 0;                    break;
 800596c:	2103      	movs	r1, #3
 800596e:	4640      	mov	r0, r8
 8005970:	f7fa fd4c 	bl	800040c <__aeabi_idivmod>
 8005974:	424b      	negs	r3, r1
 8005976:	4159      	adcs	r1, r3
 8005978:	b2cb      	uxtb	r3, r1
 800597a:	9301      	str	r3, [sp, #4]
 800597c:	e7a1      	b.n	80058c2 <applyMask+0xa6>
				case 2:  invert = x % 3 == 0;                          break;
 800597e:	2103      	movs	r1, #3
 8005980:	0020      	movs	r0, r4
 8005982:	f7fa fd43 	bl	800040c <__aeabi_idivmod>
 8005986:	424b      	negs	r3, r1
 8005988:	4159      	adcs	r1, r3
 800598a:	b2cb      	uxtb	r3, r1
 800598c:	9301      	str	r3, [sp, #4]
 800598e:	e798      	b.n	80058c2 <applyMask+0xa6>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8005990:	0031      	movs	r1, r6
 8005992:	4099      	lsls	r1, r3
 8005994:	438a      	bics	r2, r1
 8005996:	7002      	strb	r2, [r0, #0]
 8005998:	e7b1      	b.n	80058fe <applyMask+0xe2>
				case 0:  invert = (x + y) % 2 == 0;                    break;
 800599a:	4641      	mov	r1, r8
 800599c:	2301      	movs	r3, #1
 800599e:	4031      	ands	r1, r6
 80059a0:	4059      	eors	r1, r3
 80059a2:	b2cb      	uxtb	r3, r1
 80059a4:	9301      	str	r3, [sp, #4]
 80059a6:	e78c      	b.n	80058c2 <applyMask+0xa6>
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 80059a8:	4b0b      	ldr	r3, [pc, #44]	; (80059d8 <applyMask+0x1bc>)
 80059aa:	4a0c      	ldr	r2, [pc, #48]	; (80059dc <applyMask+0x1c0>)
 80059ac:	490c      	ldr	r1, [pc, #48]	; (80059e0 <applyMask+0x1c4>)
 80059ae:	480d      	ldr	r0, [pc, #52]	; (80059e4 <applyMask+0x1c8>)
 80059b0:	f003 fde2 	bl	8009578 <__assert_func>
	assert(0 <= (int)mask && (int)mask <= 7);  // Disallows qrcodegen_Mask_AUTO
 80059b4:	2199      	movs	r1, #153	; 0x99
 80059b6:	4b0c      	ldr	r3, [pc, #48]	; (80059e8 <applyMask+0x1cc>)
 80059b8:	4a0c      	ldr	r2, [pc, #48]	; (80059ec <applyMask+0x1d0>)
 80059ba:	480a      	ldr	r0, [pc, #40]	; (80059e4 <applyMask+0x1c8>)
 80059bc:	0089      	lsls	r1, r1, #2
 80059be:	f003 fddb 	bl	8009578 <__assert_func>
 80059c2:	f7ff fec3 	bl	800574c <qrcodegen_getSize.part.0>
	assert(qrcode != NULL);
 80059c6:	21bd      	movs	r1, #189	; 0xbd
 80059c8:	4b09      	ldr	r3, [pc, #36]	; (80059f0 <applyMask+0x1d4>)
 80059ca:	4a0a      	ldr	r2, [pc, #40]	; (80059f4 <applyMask+0x1d8>)
 80059cc:	4805      	ldr	r0, [pc, #20]	; (80059e4 <applyMask+0x1c8>)
 80059ce:	0089      	lsls	r1, r1, #2
 80059d0:	f003 fdd2 	bl	8009578 <__assert_func>
 80059d4:	0800e3b8 	.word	0x0800e3b8
 80059d8:	0800e368 	.word	0x0800e368
 80059dc:	0800e8d8 	.word	0x0800e8d8
 80059e0:	00000307 	.word	0x00000307
 80059e4:	0800e204 	.word	0x0800e204
 80059e8:	0800e334 	.word	0x0800e334
 80059ec:	0800e870 	.word	0x0800e870
 80059f0:	0800e358 	.word	0x0800e358
 80059f4:	0800e9cc 	.word	0x0800e9cc

080059f8 <initializeFunctionModules>:
testable void initializeFunctionModules(int version, uint8_t qrcode[]) {
 80059f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059fa:	46de      	mov	lr, fp
 80059fc:	464e      	mov	r6, r9
 80059fe:	4645      	mov	r5, r8
 8005a00:	4657      	mov	r7, sl
	int qrsize = version * 4 + 17;
 8005a02:	0083      	lsls	r3, r0, #2
testable void initializeFunctionModules(int version, uint8_t qrcode[]) {
 8005a04:	b5e0      	push	{r5, r6, r7, lr}
	int qrsize = version * 4 + 17;
 8005a06:	001d      	movs	r5, r3
 8005a08:	3511      	adds	r5, #17
	memset(qrcode, 0, (size_t)((qrsize * qrsize + 7) / 8 + 1) * sizeof(qrcode[0]));
 8005a0a:	002a      	movs	r2, r5
testable void initializeFunctionModules(int version, uint8_t qrcode[]) {
 8005a0c:	000c      	movs	r4, r1
	memset(qrcode, 0, (size_t)((qrsize * qrsize + 7) / 8 + 1) * sizeof(qrcode[0]));
 8005a0e:	436a      	muls	r2, r5
 8005a10:	3207      	adds	r2, #7
testable void initializeFunctionModules(int version, uint8_t qrcode[]) {
 8005a12:	b08d      	sub	sp, #52	; 0x34
	memset(qrcode, 0, (size_t)((qrsize * qrsize + 7) / 8 + 1) * sizeof(qrcode[0]));
 8005a14:	10d2      	asrs	r2, r2, #3
testable void initializeFunctionModules(int version, uint8_t qrcode[]) {
 8005a16:	9009      	str	r0, [sp, #36]	; 0x24
	memset(qrcode, 0, (size_t)((qrsize * qrsize + 7) / 8 + 1) * sizeof(qrcode[0]));
 8005a18:	3201      	adds	r2, #1
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	0020      	movs	r0, r4
	int qrsize = version * 4 + 17;
 8005a1e:	9308      	str	r3, [sp, #32]
	memset(qrcode, 0, (size_t)((qrsize * qrsize + 7) / 8 + 1) * sizeof(qrcode[0]));
 8005a20:	f003 fe1e 	bl	8009660 <memset>
	qrcode[0] = (uint8_t)qrsize;
 8005a24:	b2eb      	uxtb	r3, r5
	for (int dy = 0; dy < height; dy++) {
 8005a26:	2200      	movs	r2, #0
	int bitIndex = index & 7;
 8005a28:	2607      	movs	r6, #7
		qrcode[byteIndex] |= 1 << bitIndex;
 8005a2a:	2001      	movs	r0, #1
	qrcode[0] = (uint8_t)qrsize;
 8005a2c:	7023      	strb	r3, [r4, #0]
	for (int dy = 0; dy < height; dy++) {
 8005a2e:	2d00      	cmp	r5, #0
 8005a30:	dc01      	bgt.n	8005a36 <initializeFunctionModules+0x3e>
 8005a32:	e037      	b.n	8005aa4 <initializeFunctionModules+0xac>
	int qrsize = qrcode[0];
 8005a34:	7823      	ldrb	r3, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005a36:	0019      	movs	r1, r3
 8005a38:	3915      	subs	r1, #21
 8005a3a:	b2c9      	uxtb	r1, r1
 8005a3c:	299c      	cmp	r1, #156	; 0x9c
 8005a3e:	d901      	bls.n	8005a44 <initializeFunctionModules+0x4c>
 8005a40:	f000 fc09 	bl	8006256 <initializeFunctionModules+0x85e>
 8005a44:	4293      	cmp	r3, r2
 8005a46:	dc01      	bgt.n	8005a4c <initializeFunctionModules+0x54>
 8005a48:	f000 fc05 	bl	8006256 <initializeFunctionModules+0x85e>
		qrcode[byteIndex] |= 1 << bitIndex;
 8005a4c:	0007      	movs	r7, r0
	int index = y * qrsize + x;
 8005a4e:	4353      	muls	r3, r2
 8005a50:	3306      	adds	r3, #6
	int byteIndex = (index >> 3) + 1;
 8005a52:	10d9      	asrs	r1, r3, #3
	int bitIndex = index & 7;
 8005a54:	4033      	ands	r3, r6
		qrcode[byteIndex] |= 1 << bitIndex;
 8005a56:	409f      	lsls	r7, r3
 8005a58:	003b      	movs	r3, r7
	int byteIndex = (index >> 3) + 1;
 8005a5a:	3101      	adds	r1, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005a5c:	5c67      	ldrb	r7, [r4, r1]
	for (int dy = 0; dy < height; dy++) {
 8005a5e:	3201      	adds	r2, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005a60:	433b      	orrs	r3, r7
 8005a62:	5463      	strb	r3, [r4, r1]
	for (int dy = 0; dy < height; dy++) {
 8005a64:	4295      	cmp	r5, r2
 8005a66:	d1e5      	bne.n	8005a34 <initializeFunctionModules+0x3c>
 8005a68:	2200      	movs	r2, #0
	int bitIndex = index & 7;
 8005a6a:	2607      	movs	r6, #7
		qrcode[byteIndex] |= 1 << bitIndex;
 8005a6c:	2001      	movs	r0, #1
	int qrsize = qrcode[0];
 8005a6e:	7821      	ldrb	r1, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005a70:	4291      	cmp	r1, r2
 8005a72:	dc00      	bgt.n	8005a76 <initializeFunctionModules+0x7e>
 8005a74:	e3ef      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005a76:	000b      	movs	r3, r1
 8005a78:	3b15      	subs	r3, #21
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b9c      	cmp	r3, #156	; 0x9c
 8005a7e:	d900      	bls.n	8005a82 <initializeFunctionModules+0x8a>
 8005a80:	e3e9      	b.n	8006256 <initializeFunctionModules+0x85e>
		qrcode[byteIndex] |= 1 << bitIndex;
 8005a82:	0007      	movs	r7, r0
	int index = y * qrsize + x;
 8005a84:	004b      	lsls	r3, r1, #1
 8005a86:	185b      	adds	r3, r3, r1
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	189b      	adds	r3, r3, r2
	int byteIndex = (index >> 3) + 1;
 8005a8c:	10d9      	asrs	r1, r3, #3
	int bitIndex = index & 7;
 8005a8e:	4033      	ands	r3, r6
		qrcode[byteIndex] |= 1 << bitIndex;
 8005a90:	409f      	lsls	r7, r3
 8005a92:	003b      	movs	r3, r7
	int byteIndex = (index >> 3) + 1;
 8005a94:	3101      	adds	r1, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005a96:	5c67      	ldrb	r7, [r4, r1]
		for (int dx = 0; dx < width; dx++)
 8005a98:	3201      	adds	r2, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005a9a:	433b      	orrs	r3, r7
 8005a9c:	5463      	strb	r3, [r4, r1]
		for (int dx = 0; dx < width; dx++)
 8005a9e:	4295      	cmp	r5, r2
 8005aa0:	d1e5      	bne.n	8005a6e <initializeFunctionModules+0x76>
	int qrsize = qrcode[0];
 8005aa2:	7823      	ldrb	r3, [r4, #0]
	for (int dy = 0; dy < height; dy++) {
 8005aa4:	2200      	movs	r2, #0
	int bitIndex = index & 7;
 8005aa6:	2007      	movs	r0, #7
		qrcode[byteIndex] |= 1 << bitIndex;
 8005aa8:	2101      	movs	r1, #1
 8005aaa:	e000      	b.n	8005aae <initializeFunctionModules+0xb6>
	int qrsize = qrcode[0];
 8005aac:	7823      	ldrb	r3, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005aae:	001e      	movs	r6, r3
 8005ab0:	3e15      	subs	r6, #21
 8005ab2:	b2f6      	uxtb	r6, r6
 8005ab4:	2e9c      	cmp	r6, #156	; 0x9c
 8005ab6:	d900      	bls.n	8005aba <initializeFunctionModules+0xc2>
 8005ab8:	e3cd      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005aba:	4293      	cmp	r3, r2
 8005abc:	dc00      	bgt.n	8005ac0 <initializeFunctionModules+0xc8>
 8005abe:	e3ca      	b.n	8006256 <initializeFunctionModules+0x85e>
		qrcode[byteIndex] |= 1 << bitIndex;
 8005ac0:	000f      	movs	r7, r1
	int index = y * qrsize + x;
 8005ac2:	4353      	muls	r3, r2
	int byteIndex = (index >> 3) + 1;
 8005ac4:	10de      	asrs	r6, r3, #3
	int bitIndex = index & 7;
 8005ac6:	4003      	ands	r3, r0
		qrcode[byteIndex] |= 1 << bitIndex;
 8005ac8:	409f      	lsls	r7, r3
 8005aca:	003b      	movs	r3, r7
	int byteIndex = (index >> 3) + 1;
 8005acc:	3601      	adds	r6, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005ace:	5da7      	ldrb	r7, [r4, r6]
 8005ad0:	433b      	orrs	r3, r7
 8005ad2:	55a3      	strb	r3, [r4, r6]
	int qrsize = qrcode[0];
 8005ad4:	7823      	ldrb	r3, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005ad6:	001e      	movs	r6, r3
 8005ad8:	3e15      	subs	r6, #21
 8005ada:	b2f6      	uxtb	r6, r6
 8005adc:	2e9c      	cmp	r6, #156	; 0x9c
 8005ade:	d900      	bls.n	8005ae2 <initializeFunctionModules+0xea>
 8005ae0:	e3b9      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	dc00      	bgt.n	8005ae8 <initializeFunctionModules+0xf0>
 8005ae6:	e3b6      	b.n	8006256 <initializeFunctionModules+0x85e>
		qrcode[byteIndex] |= 1 << bitIndex;
 8005ae8:	000f      	movs	r7, r1
	int index = y * qrsize + x;
 8005aea:	4353      	muls	r3, r2
 8005aec:	3301      	adds	r3, #1
	int byteIndex = (index >> 3) + 1;
 8005aee:	10de      	asrs	r6, r3, #3
	int bitIndex = index & 7;
 8005af0:	4003      	ands	r3, r0
		qrcode[byteIndex] |= 1 << bitIndex;
 8005af2:	409f      	lsls	r7, r3
 8005af4:	003b      	movs	r3, r7
	int byteIndex = (index >> 3) + 1;
 8005af6:	3601      	adds	r6, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005af8:	5da7      	ldrb	r7, [r4, r6]
 8005afa:	433b      	orrs	r3, r7
 8005afc:	55a3      	strb	r3, [r4, r6]
	int qrsize = qrcode[0];
 8005afe:	7823      	ldrb	r3, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005b00:	001e      	movs	r6, r3
 8005b02:	3e15      	subs	r6, #21
 8005b04:	b2f6      	uxtb	r6, r6
 8005b06:	2e9c      	cmp	r6, #156	; 0x9c
 8005b08:	d900      	bls.n	8005b0c <initializeFunctionModules+0x114>
 8005b0a:	e3a4      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	dc00      	bgt.n	8005b12 <initializeFunctionModules+0x11a>
 8005b10:	e3a1      	b.n	8006256 <initializeFunctionModules+0x85e>
		qrcode[byteIndex] |= 1 << bitIndex;
 8005b12:	000f      	movs	r7, r1
	int index = y * qrsize + x;
 8005b14:	4353      	muls	r3, r2
 8005b16:	3302      	adds	r3, #2
	int byteIndex = (index >> 3) + 1;
 8005b18:	10de      	asrs	r6, r3, #3
	int bitIndex = index & 7;
 8005b1a:	4003      	ands	r3, r0
		qrcode[byteIndex] |= 1 << bitIndex;
 8005b1c:	409f      	lsls	r7, r3
 8005b1e:	003b      	movs	r3, r7
	int byteIndex = (index >> 3) + 1;
 8005b20:	3601      	adds	r6, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005b22:	5da7      	ldrb	r7, [r4, r6]
 8005b24:	433b      	orrs	r3, r7
 8005b26:	55a3      	strb	r3, [r4, r6]
	int qrsize = qrcode[0];
 8005b28:	7823      	ldrb	r3, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005b2a:	001e      	movs	r6, r3
 8005b2c:	3e15      	subs	r6, #21
 8005b2e:	b2f6      	uxtb	r6, r6
 8005b30:	2e9c      	cmp	r6, #156	; 0x9c
 8005b32:	d900      	bls.n	8005b36 <initializeFunctionModules+0x13e>
 8005b34:	e38f      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005b36:	4293      	cmp	r3, r2
 8005b38:	dc00      	bgt.n	8005b3c <initializeFunctionModules+0x144>
 8005b3a:	e38c      	b.n	8006256 <initializeFunctionModules+0x85e>
		qrcode[byteIndex] |= 1 << bitIndex;
 8005b3c:	000f      	movs	r7, r1
	int index = y * qrsize + x;
 8005b3e:	4353      	muls	r3, r2
 8005b40:	3303      	adds	r3, #3
	int byteIndex = (index >> 3) + 1;
 8005b42:	10de      	asrs	r6, r3, #3
	int bitIndex = index & 7;
 8005b44:	4003      	ands	r3, r0
		qrcode[byteIndex] |= 1 << bitIndex;
 8005b46:	409f      	lsls	r7, r3
 8005b48:	003b      	movs	r3, r7
	int byteIndex = (index >> 3) + 1;
 8005b4a:	3601      	adds	r6, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005b4c:	5da7      	ldrb	r7, [r4, r6]
 8005b4e:	433b      	orrs	r3, r7
 8005b50:	55a3      	strb	r3, [r4, r6]
	int qrsize = qrcode[0];
 8005b52:	7823      	ldrb	r3, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005b54:	001e      	movs	r6, r3
 8005b56:	3e15      	subs	r6, #21
 8005b58:	b2f6      	uxtb	r6, r6
 8005b5a:	2e9c      	cmp	r6, #156	; 0x9c
 8005b5c:	d900      	bls.n	8005b60 <initializeFunctionModules+0x168>
 8005b5e:	e37a      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005b60:	4293      	cmp	r3, r2
 8005b62:	dc00      	bgt.n	8005b66 <initializeFunctionModules+0x16e>
 8005b64:	e377      	b.n	8006256 <initializeFunctionModules+0x85e>
		qrcode[byteIndex] |= 1 << bitIndex;
 8005b66:	000f      	movs	r7, r1
	int index = y * qrsize + x;
 8005b68:	4353      	muls	r3, r2
 8005b6a:	3304      	adds	r3, #4
	int byteIndex = (index >> 3) + 1;
 8005b6c:	10de      	asrs	r6, r3, #3
	int bitIndex = index & 7;
 8005b6e:	4003      	ands	r3, r0
		qrcode[byteIndex] |= 1 << bitIndex;
 8005b70:	409f      	lsls	r7, r3
 8005b72:	003b      	movs	r3, r7
	int byteIndex = (index >> 3) + 1;
 8005b74:	3601      	adds	r6, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005b76:	5da7      	ldrb	r7, [r4, r6]
 8005b78:	433b      	orrs	r3, r7
 8005b7a:	55a3      	strb	r3, [r4, r6]
	int qrsize = qrcode[0];
 8005b7c:	7823      	ldrb	r3, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005b7e:	001e      	movs	r6, r3
 8005b80:	3e15      	subs	r6, #21
 8005b82:	b2f6      	uxtb	r6, r6
 8005b84:	2e9c      	cmp	r6, #156	; 0x9c
 8005b86:	d900      	bls.n	8005b8a <initializeFunctionModules+0x192>
 8005b88:	e365      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	dc00      	bgt.n	8005b90 <initializeFunctionModules+0x198>
 8005b8e:	e362      	b.n	8006256 <initializeFunctionModules+0x85e>
		qrcode[byteIndex] |= 1 << bitIndex;
 8005b90:	000f      	movs	r7, r1
	int index = y * qrsize + x;
 8005b92:	4353      	muls	r3, r2
 8005b94:	3305      	adds	r3, #5
	int byteIndex = (index >> 3) + 1;
 8005b96:	10de      	asrs	r6, r3, #3
	int bitIndex = index & 7;
 8005b98:	4003      	ands	r3, r0
		qrcode[byteIndex] |= 1 << bitIndex;
 8005b9a:	409f      	lsls	r7, r3
 8005b9c:	003b      	movs	r3, r7
	int byteIndex = (index >> 3) + 1;
 8005b9e:	3601      	adds	r6, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005ba0:	5da7      	ldrb	r7, [r4, r6]
 8005ba2:	433b      	orrs	r3, r7
 8005ba4:	55a3      	strb	r3, [r4, r6]
	int qrsize = qrcode[0];
 8005ba6:	7823      	ldrb	r3, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005ba8:	001e      	movs	r6, r3
 8005baa:	3e15      	subs	r6, #21
 8005bac:	b2f6      	uxtb	r6, r6
 8005bae:	2e9c      	cmp	r6, #156	; 0x9c
 8005bb0:	d900      	bls.n	8005bb4 <initializeFunctionModules+0x1bc>
 8005bb2:	e350      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	dc00      	bgt.n	8005bba <initializeFunctionModules+0x1c2>
 8005bb8:	e34d      	b.n	8006256 <initializeFunctionModules+0x85e>
		qrcode[byteIndex] |= 1 << bitIndex;
 8005bba:	000f      	movs	r7, r1
	int index = y * qrsize + x;
 8005bbc:	4353      	muls	r3, r2
 8005bbe:	3306      	adds	r3, #6
	int byteIndex = (index >> 3) + 1;
 8005bc0:	10de      	asrs	r6, r3, #3
	int bitIndex = index & 7;
 8005bc2:	4003      	ands	r3, r0
		qrcode[byteIndex] |= 1 << bitIndex;
 8005bc4:	409f      	lsls	r7, r3
 8005bc6:	003b      	movs	r3, r7
	int byteIndex = (index >> 3) + 1;
 8005bc8:	3601      	adds	r6, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005bca:	5da7      	ldrb	r7, [r4, r6]
 8005bcc:	433b      	orrs	r3, r7
 8005bce:	55a3      	strb	r3, [r4, r6]
	int qrsize = qrcode[0];
 8005bd0:	7823      	ldrb	r3, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005bd2:	001e      	movs	r6, r3
 8005bd4:	3e15      	subs	r6, #21
 8005bd6:	b2f6      	uxtb	r6, r6
 8005bd8:	2e9c      	cmp	r6, #156	; 0x9c
 8005bda:	d900      	bls.n	8005bde <initializeFunctionModules+0x1e6>
 8005bdc:	e33b      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005bde:	4293      	cmp	r3, r2
 8005be0:	dc00      	bgt.n	8005be4 <initializeFunctionModules+0x1ec>
 8005be2:	e338      	b.n	8006256 <initializeFunctionModules+0x85e>
		qrcode[byteIndex] |= 1 << bitIndex;
 8005be4:	000f      	movs	r7, r1
	int index = y * qrsize + x;
 8005be6:	4353      	muls	r3, r2
 8005be8:	3307      	adds	r3, #7
	int byteIndex = (index >> 3) + 1;
 8005bea:	10de      	asrs	r6, r3, #3
	int bitIndex = index & 7;
 8005bec:	4003      	ands	r3, r0
		qrcode[byteIndex] |= 1 << bitIndex;
 8005bee:	409f      	lsls	r7, r3
 8005bf0:	003b      	movs	r3, r7
	int byteIndex = (index >> 3) + 1;
 8005bf2:	3601      	adds	r6, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005bf4:	5da7      	ldrb	r7, [r4, r6]
 8005bf6:	433b      	orrs	r3, r7
 8005bf8:	55a3      	strb	r3, [r4, r6]
	int qrsize = qrcode[0];
 8005bfa:	7823      	ldrb	r3, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005bfc:	001e      	movs	r6, r3
 8005bfe:	3e15      	subs	r6, #21
 8005c00:	b2f6      	uxtb	r6, r6
 8005c02:	2e9c      	cmp	r6, #156	; 0x9c
 8005c04:	d900      	bls.n	8005c08 <initializeFunctionModules+0x210>
 8005c06:	e326      	b.n	8006256 <initializeFunctionModules+0x85e>
		qrcode[byteIndex] |= 1 << bitIndex;
 8005c08:	000f      	movs	r7, r1
	int index = y * qrsize + x;
 8005c0a:	4353      	muls	r3, r2
 8005c0c:	3308      	adds	r3, #8
	int byteIndex = (index >> 3) + 1;
 8005c0e:	10de      	asrs	r6, r3, #3
	int bitIndex = index & 7;
 8005c10:	4003      	ands	r3, r0
		qrcode[byteIndex] |= 1 << bitIndex;
 8005c12:	409f      	lsls	r7, r3
 8005c14:	003b      	movs	r3, r7
	int byteIndex = (index >> 3) + 1;
 8005c16:	3601      	adds	r6, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005c18:	5da7      	ldrb	r7, [r4, r6]
	for (int dy = 0; dy < height; dy++) {
 8005c1a:	3201      	adds	r2, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005c1c:	433b      	orrs	r3, r7
 8005c1e:	55a3      	strb	r3, [r4, r6]
	for (int dy = 0; dy < height; dy++) {
 8005c20:	2a09      	cmp	r2, #9
 8005c22:	d000      	beq.n	8005c26 <initializeFunctionModules+0x22e>
 8005c24:	e742      	b.n	8005aac <initializeFunctionModules+0xb4>
			setModuleBounded(qrcode, left + dx, top + dy, true);
 8005c26:	200b      	movs	r0, #11
	fillRectangle(qrsize - 8, 0, 8, 9, qrcode);
 8005c28:	9a08      	ldr	r2, [sp, #32]
			setModuleBounded(qrcode, left + dx, top + dy, true);
 8005c2a:	4684      	mov	ip, r0
 8005c2c:	0011      	movs	r1, r2
 8005c2e:	3001      	adds	r0, #1
 8005c30:	4461      	add	r1, ip
 8005c32:	4689      	mov	r9, r1
 8005c34:	4684      	mov	ip, r0
 8005c36:	0011      	movs	r1, r2
 8005c38:	3001      	adds	r0, #1
 8005c3a:	4461      	add	r1, ip
 8005c3c:	4688      	mov	r8, r1
 8005c3e:	4684      	mov	ip, r0
 8005c40:	0011      	movs	r1, r2
 8005c42:	4461      	add	r1, ip
 8005c44:	468c      	mov	ip, r1
 8005c46:	3101      	adds	r1, #1
	fillRectangle(qrsize - 8, 0, 8, 9, qrcode);
 8005c48:	0013      	movs	r3, r2
			setModuleBounded(qrcode, left + dx, top + dy, true);
 8005c4a:	0016      	movs	r6, r2
 8005c4c:	9100      	str	r1, [sp, #0]
 8005c4e:	3210      	adds	r2, #16
 8005c50:	3101      	adds	r1, #1
 8005c52:	9101      	str	r1, [sp, #4]
 8005c54:	0011      	movs	r1, r2
		qrcode[byteIndex] |= 1 << bitIndex;
 8005c56:	464f      	mov	r7, r9
	for (int dy = 0; dy < height; dy++) {
 8005c58:	2200      	movs	r2, #0
		qrcode[byteIndex] |= 1 << bitIndex;
 8005c5a:	4689      	mov	r9, r1
	fillRectangle(qrsize - 8, 0, 8, 9, qrcode);
 8005c5c:	3309      	adds	r3, #9
			setModuleBounded(qrcode, left + dx, top + dy, true);
 8005c5e:	360a      	adds	r6, #10
	int bitIndex = index & 7;
 8005c60:	3806      	subs	r0, #6
		qrcode[byteIndex] |= 1 << bitIndex;
 8005c62:	9702      	str	r7, [sp, #8]
 8005c64:	9503      	str	r5, [sp, #12]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005c66:	2115      	movs	r1, #21
 8005c68:	4249      	negs	r1, r1
 8005c6a:	468a      	mov	sl, r1
	int qrsize = qrcode[0];
 8005c6c:	7825      	ldrb	r5, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005c6e:	44aa      	add	sl, r5
 8005c70:	4651      	mov	r1, sl
 8005c72:	299c      	cmp	r1, #156	; 0x9c
 8005c74:	d900      	bls.n	8005c78 <initializeFunctionModules+0x280>
 8005c76:	e2ee      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	da00      	bge.n	8005c7e <initializeFunctionModules+0x286>
 8005c7c:	e2eb      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005c7e:	42ab      	cmp	r3, r5
 8005c80:	db00      	blt.n	8005c84 <initializeFunctionModules+0x28c>
 8005c82:	e2e8      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005c84:	4295      	cmp	r5, r2
 8005c86:	dc00      	bgt.n	8005c8a <initializeFunctionModules+0x292>
 8005c88:	e2e5      	b.n	8006256 <initializeFunctionModules+0x85e>
	int index = y * qrsize + x;
 8005c8a:	4355      	muls	r5, r2
 8005c8c:	46aa      	mov	sl, r5
 8005c8e:	449a      	add	sl, r3
	int byteIndex = (index >> 3) + 1;
 8005c90:	4651      	mov	r1, sl
 8005c92:	10cd      	asrs	r5, r1, #3
	int bitIndex = index & 7;
 8005c94:	4001      	ands	r1, r0
 8005c96:	468a      	mov	sl, r1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005c98:	2101      	movs	r1, #1
 8005c9a:	4657      	mov	r7, sl
 8005c9c:	40b9      	lsls	r1, r7
	int byteIndex = (index >> 3) + 1;
 8005c9e:	3501      	adds	r5, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005ca0:	468a      	mov	sl, r1
 8005ca2:	5d61      	ldrb	r1, [r4, r5]
 8005ca4:	468b      	mov	fp, r1
 8005ca6:	4651      	mov	r1, sl
 8005ca8:	465f      	mov	r7, fp
 8005caa:	4339      	orrs	r1, r7
 8005cac:	5561      	strb	r1, [r4, r5]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005cae:	2115      	movs	r1, #21
 8005cb0:	4249      	negs	r1, r1
 8005cb2:	468a      	mov	sl, r1
	int qrsize = qrcode[0];
 8005cb4:	7825      	ldrb	r5, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005cb6:	44aa      	add	sl, r5
 8005cb8:	4651      	mov	r1, sl
 8005cba:	299c      	cmp	r1, #156	; 0x9c
 8005cbc:	d900      	bls.n	8005cc0 <initializeFunctionModules+0x2c8>
 8005cbe:	e2ca      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005cc0:	2e00      	cmp	r6, #0
 8005cc2:	da00      	bge.n	8005cc6 <initializeFunctionModules+0x2ce>
 8005cc4:	e2c7      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005cc6:	42ae      	cmp	r6, r5
 8005cc8:	db00      	blt.n	8005ccc <initializeFunctionModules+0x2d4>
 8005cca:	e2c4      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005ccc:	4295      	cmp	r5, r2
 8005cce:	dc00      	bgt.n	8005cd2 <initializeFunctionModules+0x2da>
 8005cd0:	e2c1      	b.n	8006256 <initializeFunctionModules+0x85e>
	int index = y * qrsize + x;
 8005cd2:	4355      	muls	r5, r2
 8005cd4:	46aa      	mov	sl, r5
 8005cd6:	44b2      	add	sl, r6
	int byteIndex = (index >> 3) + 1;
 8005cd8:	4651      	mov	r1, sl
 8005cda:	10cd      	asrs	r5, r1, #3
	int bitIndex = index & 7;
 8005cdc:	4001      	ands	r1, r0
 8005cde:	468a      	mov	sl, r1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	4657      	mov	r7, sl
 8005ce4:	40b9      	lsls	r1, r7
	int byteIndex = (index >> 3) + 1;
 8005ce6:	3501      	adds	r5, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005ce8:	468a      	mov	sl, r1
 8005cea:	5d61      	ldrb	r1, [r4, r5]
 8005cec:	468b      	mov	fp, r1
 8005cee:	4651      	mov	r1, sl
 8005cf0:	465f      	mov	r7, fp
 8005cf2:	4339      	orrs	r1, r7
 8005cf4:	5561      	strb	r1, [r4, r5]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005cf6:	2115      	movs	r1, #21
 8005cf8:	4249      	negs	r1, r1
 8005cfa:	468a      	mov	sl, r1
	int qrsize = qrcode[0];
 8005cfc:	7825      	ldrb	r5, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005cfe:	44aa      	add	sl, r5
 8005d00:	4651      	mov	r1, sl
 8005d02:	299c      	cmp	r1, #156	; 0x9c
 8005d04:	d900      	bls.n	8005d08 <initializeFunctionModules+0x310>
 8005d06:	e2a6      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005d08:	9902      	ldr	r1, [sp, #8]
 8005d0a:	2900      	cmp	r1, #0
 8005d0c:	da00      	bge.n	8005d10 <initializeFunctionModules+0x318>
 8005d0e:	e2a2      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005d10:	42a9      	cmp	r1, r5
 8005d12:	db00      	blt.n	8005d16 <initializeFunctionModules+0x31e>
 8005d14:	e29f      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005d16:	4295      	cmp	r5, r2
 8005d18:	dc00      	bgt.n	8005d1c <initializeFunctionModules+0x324>
 8005d1a:	e29c      	b.n	8006256 <initializeFunctionModules+0x85e>
	int index = y * qrsize + x;
 8005d1c:	4355      	muls	r5, r2
 8005d1e:	468b      	mov	fp, r1
 8005d20:	46aa      	mov	sl, r5
 8005d22:	44da      	add	sl, fp
	int byteIndex = (index >> 3) + 1;
 8005d24:	4651      	mov	r1, sl
 8005d26:	10cd      	asrs	r5, r1, #3
	int bitIndex = index & 7;
 8005d28:	4001      	ands	r1, r0
 8005d2a:	468a      	mov	sl, r1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	4657      	mov	r7, sl
 8005d30:	40b9      	lsls	r1, r7
	int byteIndex = (index >> 3) + 1;
 8005d32:	3501      	adds	r5, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005d34:	468a      	mov	sl, r1
 8005d36:	5d61      	ldrb	r1, [r4, r5]
 8005d38:	468b      	mov	fp, r1
 8005d3a:	4651      	mov	r1, sl
 8005d3c:	465f      	mov	r7, fp
 8005d3e:	4339      	orrs	r1, r7
 8005d40:	5561      	strb	r1, [r4, r5]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005d42:	2115      	movs	r1, #21
 8005d44:	4249      	negs	r1, r1
 8005d46:	468a      	mov	sl, r1
	int qrsize = qrcode[0];
 8005d48:	7825      	ldrb	r5, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005d4a:	44aa      	add	sl, r5
 8005d4c:	4651      	mov	r1, sl
 8005d4e:	299c      	cmp	r1, #156	; 0x9c
 8005d50:	d900      	bls.n	8005d54 <initializeFunctionModules+0x35c>
 8005d52:	e280      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005d54:	4641      	mov	r1, r8
 8005d56:	2900      	cmp	r1, #0
 8005d58:	da00      	bge.n	8005d5c <initializeFunctionModules+0x364>
 8005d5a:	e27c      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005d5c:	45a8      	cmp	r8, r5
 8005d5e:	db00      	blt.n	8005d62 <initializeFunctionModules+0x36a>
 8005d60:	e279      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005d62:	4295      	cmp	r5, r2
 8005d64:	dc00      	bgt.n	8005d68 <initializeFunctionModules+0x370>
 8005d66:	e276      	b.n	8006256 <initializeFunctionModules+0x85e>
	int index = y * qrsize + x;
 8005d68:	4355      	muls	r5, r2
 8005d6a:	4445      	add	r5, r8
	int byteIndex = (index >> 3) + 1;
 8005d6c:	0029      	movs	r1, r5
	int bitIndex = index & 7;
 8005d6e:	4001      	ands	r1, r0
 8005d70:	468a      	mov	sl, r1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005d72:	2101      	movs	r1, #1
 8005d74:	4657      	mov	r7, sl
 8005d76:	40b9      	lsls	r1, r7
	int byteIndex = (index >> 3) + 1;
 8005d78:	10ed      	asrs	r5, r5, #3
 8005d7a:	3501      	adds	r5, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005d7c:	468a      	mov	sl, r1
 8005d7e:	5d61      	ldrb	r1, [r4, r5]
 8005d80:	468b      	mov	fp, r1
 8005d82:	4651      	mov	r1, sl
 8005d84:	465f      	mov	r7, fp
 8005d86:	4339      	orrs	r1, r7
 8005d88:	5561      	strb	r1, [r4, r5]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005d8a:	2115      	movs	r1, #21
 8005d8c:	4249      	negs	r1, r1
 8005d8e:	468a      	mov	sl, r1
	int qrsize = qrcode[0];
 8005d90:	7825      	ldrb	r5, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005d92:	44aa      	add	sl, r5
 8005d94:	4651      	mov	r1, sl
 8005d96:	299c      	cmp	r1, #156	; 0x9c
 8005d98:	d900      	bls.n	8005d9c <initializeFunctionModules+0x3a4>
 8005d9a:	e25c      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005d9c:	4661      	mov	r1, ip
 8005d9e:	2900      	cmp	r1, #0
 8005da0:	da00      	bge.n	8005da4 <initializeFunctionModules+0x3ac>
 8005da2:	e258      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005da4:	45ac      	cmp	ip, r5
 8005da6:	db00      	blt.n	8005daa <initializeFunctionModules+0x3b2>
 8005da8:	e255      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005daa:	4295      	cmp	r5, r2
 8005dac:	dc00      	bgt.n	8005db0 <initializeFunctionModules+0x3b8>
 8005dae:	e252      	b.n	8006256 <initializeFunctionModules+0x85e>
	int index = y * qrsize + x;
 8005db0:	4355      	muls	r5, r2
 8005db2:	4465      	add	r5, ip
	int byteIndex = (index >> 3) + 1;
 8005db4:	0029      	movs	r1, r5
	int bitIndex = index & 7;
 8005db6:	4001      	ands	r1, r0
 8005db8:	468a      	mov	sl, r1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005dba:	2101      	movs	r1, #1
 8005dbc:	4657      	mov	r7, sl
 8005dbe:	40b9      	lsls	r1, r7
	int byteIndex = (index >> 3) + 1;
 8005dc0:	10ed      	asrs	r5, r5, #3
 8005dc2:	3501      	adds	r5, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005dc4:	468a      	mov	sl, r1
 8005dc6:	5d61      	ldrb	r1, [r4, r5]
 8005dc8:	468b      	mov	fp, r1
 8005dca:	4651      	mov	r1, sl
 8005dcc:	465f      	mov	r7, fp
 8005dce:	4339      	orrs	r1, r7
 8005dd0:	5561      	strb	r1, [r4, r5]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005dd2:	2115      	movs	r1, #21
 8005dd4:	4249      	negs	r1, r1
 8005dd6:	468a      	mov	sl, r1
	int qrsize = qrcode[0];
 8005dd8:	7825      	ldrb	r5, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005dda:	44aa      	add	sl, r5
 8005ddc:	4651      	mov	r1, sl
 8005dde:	299c      	cmp	r1, #156	; 0x9c
 8005de0:	d900      	bls.n	8005de4 <initializeFunctionModules+0x3ec>
 8005de2:	e238      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005de4:	9900      	ldr	r1, [sp, #0]
 8005de6:	2900      	cmp	r1, #0
 8005de8:	da00      	bge.n	8005dec <initializeFunctionModules+0x3f4>
 8005dea:	e234      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005dec:	42a9      	cmp	r1, r5
 8005dee:	db00      	blt.n	8005df2 <initializeFunctionModules+0x3fa>
 8005df0:	e231      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005df2:	4295      	cmp	r5, r2
 8005df4:	dc00      	bgt.n	8005df8 <initializeFunctionModules+0x400>
 8005df6:	e22e      	b.n	8006256 <initializeFunctionModules+0x85e>
	int index = y * qrsize + x;
 8005df8:	468a      	mov	sl, r1
 8005dfa:	4355      	muls	r5, r2
 8005dfc:	44aa      	add	sl, r5
	int byteIndex = (index >> 3) + 1;
 8005dfe:	4651      	mov	r1, sl
 8005e00:	10cd      	asrs	r5, r1, #3
	int bitIndex = index & 7;
 8005e02:	4001      	ands	r1, r0
 8005e04:	468a      	mov	sl, r1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005e06:	2101      	movs	r1, #1
 8005e08:	4657      	mov	r7, sl
 8005e0a:	40b9      	lsls	r1, r7
	int byteIndex = (index >> 3) + 1;
 8005e0c:	3501      	adds	r5, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005e0e:	468a      	mov	sl, r1
 8005e10:	5d61      	ldrb	r1, [r4, r5]
 8005e12:	468b      	mov	fp, r1
 8005e14:	4651      	mov	r1, sl
 8005e16:	465f      	mov	r7, fp
 8005e18:	4339      	orrs	r1, r7
 8005e1a:	5561      	strb	r1, [r4, r5]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005e1c:	2115      	movs	r1, #21
 8005e1e:	4249      	negs	r1, r1
 8005e20:	468a      	mov	sl, r1
	int qrsize = qrcode[0];
 8005e22:	7825      	ldrb	r5, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005e24:	44aa      	add	sl, r5
 8005e26:	4651      	mov	r1, sl
 8005e28:	299c      	cmp	r1, #156	; 0x9c
 8005e2a:	d900      	bls.n	8005e2e <initializeFunctionModules+0x436>
 8005e2c:	e213      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005e2e:	9901      	ldr	r1, [sp, #4]
 8005e30:	2900      	cmp	r1, #0
 8005e32:	da00      	bge.n	8005e36 <initializeFunctionModules+0x43e>
 8005e34:	e20f      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005e36:	42a9      	cmp	r1, r5
 8005e38:	db00      	blt.n	8005e3c <initializeFunctionModules+0x444>
 8005e3a:	e20c      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005e3c:	4295      	cmp	r5, r2
 8005e3e:	dc00      	bgt.n	8005e42 <initializeFunctionModules+0x44a>
 8005e40:	e209      	b.n	8006256 <initializeFunctionModules+0x85e>
	int index = y * qrsize + x;
 8005e42:	468a      	mov	sl, r1
 8005e44:	4355      	muls	r5, r2
 8005e46:	44aa      	add	sl, r5
	int byteIndex = (index >> 3) + 1;
 8005e48:	4651      	mov	r1, sl
 8005e4a:	10cd      	asrs	r5, r1, #3
	int bitIndex = index & 7;
 8005e4c:	4001      	ands	r1, r0
 8005e4e:	468a      	mov	sl, r1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005e50:	2101      	movs	r1, #1
 8005e52:	4657      	mov	r7, sl
 8005e54:	40b9      	lsls	r1, r7
	int byteIndex = (index >> 3) + 1;
 8005e56:	3501      	adds	r5, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005e58:	468a      	mov	sl, r1
 8005e5a:	5d61      	ldrb	r1, [r4, r5]
 8005e5c:	468b      	mov	fp, r1
 8005e5e:	4651      	mov	r1, sl
 8005e60:	465f      	mov	r7, fp
 8005e62:	4339      	orrs	r1, r7
 8005e64:	5561      	strb	r1, [r4, r5]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005e66:	2115      	movs	r1, #21
 8005e68:	4249      	negs	r1, r1
 8005e6a:	468a      	mov	sl, r1
	int qrsize = qrcode[0];
 8005e6c:	7825      	ldrb	r5, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005e6e:	44aa      	add	sl, r5
 8005e70:	4651      	mov	r1, sl
 8005e72:	299c      	cmp	r1, #156	; 0x9c
 8005e74:	d900      	bls.n	8005e78 <initializeFunctionModules+0x480>
 8005e76:	e1ee      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005e78:	4649      	mov	r1, r9
 8005e7a:	2900      	cmp	r1, #0
 8005e7c:	da00      	bge.n	8005e80 <initializeFunctionModules+0x488>
 8005e7e:	e1ea      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005e80:	45a9      	cmp	r9, r5
 8005e82:	db00      	blt.n	8005e86 <initializeFunctionModules+0x48e>
 8005e84:	e1e7      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005e86:	4295      	cmp	r5, r2
 8005e88:	dc00      	bgt.n	8005e8c <initializeFunctionModules+0x494>
 8005e8a:	e1e4      	b.n	8006256 <initializeFunctionModules+0x85e>
	int index = y * qrsize + x;
 8005e8c:	4355      	muls	r5, r2
 8005e8e:	444d      	add	r5, r9
	int byteIndex = (index >> 3) + 1;
 8005e90:	0029      	movs	r1, r5
	int bitIndex = index & 7;
 8005e92:	4001      	ands	r1, r0
 8005e94:	468a      	mov	sl, r1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005e96:	2101      	movs	r1, #1
 8005e98:	4657      	mov	r7, sl
 8005e9a:	40b9      	lsls	r1, r7
	int byteIndex = (index >> 3) + 1;
 8005e9c:	10ed      	asrs	r5, r5, #3
 8005e9e:	3501      	adds	r5, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005ea0:	468a      	mov	sl, r1
 8005ea2:	5d61      	ldrb	r1, [r4, r5]
	for (int dy = 0; dy < height; dy++) {
 8005ea4:	3201      	adds	r2, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005ea6:	468b      	mov	fp, r1
 8005ea8:	4651      	mov	r1, sl
 8005eaa:	465f      	mov	r7, fp
 8005eac:	4339      	orrs	r1, r7
 8005eae:	5561      	strb	r1, [r4, r5]
	for (int dy = 0; dy < height; dy++) {
 8005eb0:	2a09      	cmp	r2, #9
 8005eb2:	d000      	beq.n	8005eb6 <initializeFunctionModules+0x4be>
 8005eb4:	e6d7      	b.n	8005c66 <initializeFunctionModules+0x26e>
	int bitIndex = index & 7;
 8005eb6:	2007      	movs	r0, #7
		qrcode[byteIndex] |= 1 << bitIndex;
 8005eb8:	2101      	movs	r1, #1
 8005eba:	46b4      	mov	ip, r6
 8005ebc:	9d03      	ldr	r5, [sp, #12]
	int qrsize = qrcode[0];
 8005ebe:	7822      	ldrb	r2, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005ec0:	0017      	movs	r7, r2
 8005ec2:	3f15      	subs	r7, #21
 8005ec4:	2f9c      	cmp	r7, #156	; 0x9c
 8005ec6:	d900      	bls.n	8005eca <initializeFunctionModules+0x4d2>
 8005ec8:	e1c5      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005eca:	2a00      	cmp	r2, #0
 8005ecc:	d100      	bne.n	8005ed0 <initializeFunctionModules+0x4d8>
 8005ece:	e1c2      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	db00      	blt.n	8005ed6 <initializeFunctionModules+0x4de>
 8005ed4:	e1bf      	b.n	8006256 <initializeFunctionModules+0x85e>
		qrcode[byteIndex] |= 1 << bitIndex;
 8005ed6:	000e      	movs	r6, r1
	int index = y * qrsize + x;
 8005ed8:	435a      	muls	r2, r3
	int byteIndex = (index >> 3) + 1;
 8005eda:	10d7      	asrs	r7, r2, #3
	int bitIndex = index & 7;
 8005edc:	4002      	ands	r2, r0
		qrcode[byteIndex] |= 1 << bitIndex;
 8005ede:	4096      	lsls	r6, r2
 8005ee0:	0032      	movs	r2, r6
	int byteIndex = (index >> 3) + 1;
 8005ee2:	3701      	adds	r7, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005ee4:	5de6      	ldrb	r6, [r4, r7]
 8005ee6:	4332      	orrs	r2, r6
 8005ee8:	55e2      	strb	r2, [r4, r7]
	int qrsize = qrcode[0];
 8005eea:	7822      	ldrb	r2, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005eec:	0017      	movs	r7, r2
 8005eee:	3f15      	subs	r7, #21
 8005ef0:	2f9c      	cmp	r7, #156	; 0x9c
 8005ef2:	d900      	bls.n	8005ef6 <initializeFunctionModules+0x4fe>
 8005ef4:	e1af      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005ef6:	2a01      	cmp	r2, #1
 8005ef8:	dc00      	bgt.n	8005efc <initializeFunctionModules+0x504>
 8005efa:	e1ac      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005efc:	4293      	cmp	r3, r2
 8005efe:	db00      	blt.n	8005f02 <initializeFunctionModules+0x50a>
 8005f00:	e1a9      	b.n	8006256 <initializeFunctionModules+0x85e>
		qrcode[byteIndex] |= 1 << bitIndex;
 8005f02:	000e      	movs	r6, r1
	int index = y * qrsize + x;
 8005f04:	435a      	muls	r2, r3
 8005f06:	3201      	adds	r2, #1
	int byteIndex = (index >> 3) + 1;
 8005f08:	10d7      	asrs	r7, r2, #3
	int bitIndex = index & 7;
 8005f0a:	4002      	ands	r2, r0
		qrcode[byteIndex] |= 1 << bitIndex;
 8005f0c:	4096      	lsls	r6, r2
 8005f0e:	0032      	movs	r2, r6
	int byteIndex = (index >> 3) + 1;
 8005f10:	3701      	adds	r7, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005f12:	5de6      	ldrb	r6, [r4, r7]
 8005f14:	4332      	orrs	r2, r6
 8005f16:	55e2      	strb	r2, [r4, r7]
	int qrsize = qrcode[0];
 8005f18:	7822      	ldrb	r2, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005f1a:	0017      	movs	r7, r2
 8005f1c:	3f15      	subs	r7, #21
 8005f1e:	2f9c      	cmp	r7, #156	; 0x9c
 8005f20:	d900      	bls.n	8005f24 <initializeFunctionModules+0x52c>
 8005f22:	e198      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005f24:	2a02      	cmp	r2, #2
 8005f26:	dc00      	bgt.n	8005f2a <initializeFunctionModules+0x532>
 8005f28:	e195      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	db00      	blt.n	8005f30 <initializeFunctionModules+0x538>
 8005f2e:	e192      	b.n	8006256 <initializeFunctionModules+0x85e>
		qrcode[byteIndex] |= 1 << bitIndex;
 8005f30:	000e      	movs	r6, r1
	int index = y * qrsize + x;
 8005f32:	435a      	muls	r2, r3
 8005f34:	3202      	adds	r2, #2
	int byteIndex = (index >> 3) + 1;
 8005f36:	10d7      	asrs	r7, r2, #3
	int bitIndex = index & 7;
 8005f38:	4002      	ands	r2, r0
		qrcode[byteIndex] |= 1 << bitIndex;
 8005f3a:	4096      	lsls	r6, r2
 8005f3c:	0032      	movs	r2, r6
	int byteIndex = (index >> 3) + 1;
 8005f3e:	3701      	adds	r7, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005f40:	5de6      	ldrb	r6, [r4, r7]
 8005f42:	4332      	orrs	r2, r6
 8005f44:	55e2      	strb	r2, [r4, r7]
	int qrsize = qrcode[0];
 8005f46:	7822      	ldrb	r2, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005f48:	0017      	movs	r7, r2
 8005f4a:	3f15      	subs	r7, #21
 8005f4c:	2f9c      	cmp	r7, #156	; 0x9c
 8005f4e:	d900      	bls.n	8005f52 <initializeFunctionModules+0x55a>
 8005f50:	e181      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005f52:	2a03      	cmp	r2, #3
 8005f54:	dc00      	bgt.n	8005f58 <initializeFunctionModules+0x560>
 8005f56:	e17e      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	db00      	blt.n	8005f5e <initializeFunctionModules+0x566>
 8005f5c:	e17b      	b.n	8006256 <initializeFunctionModules+0x85e>
		qrcode[byteIndex] |= 1 << bitIndex;
 8005f5e:	000e      	movs	r6, r1
	int index = y * qrsize + x;
 8005f60:	435a      	muls	r2, r3
 8005f62:	3203      	adds	r2, #3
	int byteIndex = (index >> 3) + 1;
 8005f64:	10d7      	asrs	r7, r2, #3
	int bitIndex = index & 7;
 8005f66:	4002      	ands	r2, r0
		qrcode[byteIndex] |= 1 << bitIndex;
 8005f68:	4096      	lsls	r6, r2
 8005f6a:	0032      	movs	r2, r6
	int byteIndex = (index >> 3) + 1;
 8005f6c:	3701      	adds	r7, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005f6e:	5de6      	ldrb	r6, [r4, r7]
 8005f70:	4332      	orrs	r2, r6
 8005f72:	55e2      	strb	r2, [r4, r7]
	int qrsize = qrcode[0];
 8005f74:	7822      	ldrb	r2, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005f76:	0017      	movs	r7, r2
 8005f78:	3f15      	subs	r7, #21
 8005f7a:	2f9c      	cmp	r7, #156	; 0x9c
 8005f7c:	d900      	bls.n	8005f80 <initializeFunctionModules+0x588>
 8005f7e:	e16a      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005f80:	2a04      	cmp	r2, #4
 8005f82:	dc00      	bgt.n	8005f86 <initializeFunctionModules+0x58e>
 8005f84:	e167      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005f86:	4293      	cmp	r3, r2
 8005f88:	db00      	blt.n	8005f8c <initializeFunctionModules+0x594>
 8005f8a:	e164      	b.n	8006256 <initializeFunctionModules+0x85e>
		qrcode[byteIndex] |= 1 << bitIndex;
 8005f8c:	000e      	movs	r6, r1
	int index = y * qrsize + x;
 8005f8e:	435a      	muls	r2, r3
 8005f90:	3204      	adds	r2, #4
	int byteIndex = (index >> 3) + 1;
 8005f92:	10d7      	asrs	r7, r2, #3
	int bitIndex = index & 7;
 8005f94:	4002      	ands	r2, r0
		qrcode[byteIndex] |= 1 << bitIndex;
 8005f96:	4096      	lsls	r6, r2
 8005f98:	0032      	movs	r2, r6
	int byteIndex = (index >> 3) + 1;
 8005f9a:	3701      	adds	r7, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005f9c:	5de6      	ldrb	r6, [r4, r7]
 8005f9e:	4332      	orrs	r2, r6
 8005fa0:	55e2      	strb	r2, [r4, r7]
	int qrsize = qrcode[0];
 8005fa2:	7822      	ldrb	r2, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005fa4:	0017      	movs	r7, r2
 8005fa6:	3f15      	subs	r7, #21
 8005fa8:	2f9c      	cmp	r7, #156	; 0x9c
 8005faa:	d900      	bls.n	8005fae <initializeFunctionModules+0x5b6>
 8005fac:	e153      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005fae:	2a05      	cmp	r2, #5
 8005fb0:	dc00      	bgt.n	8005fb4 <initializeFunctionModules+0x5bc>
 8005fb2:	e150      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	db00      	blt.n	8005fba <initializeFunctionModules+0x5c2>
 8005fb8:	e14d      	b.n	8006256 <initializeFunctionModules+0x85e>
		qrcode[byteIndex] |= 1 << bitIndex;
 8005fba:	000e      	movs	r6, r1
	int index = y * qrsize + x;
 8005fbc:	435a      	muls	r2, r3
 8005fbe:	3205      	adds	r2, #5
	int byteIndex = (index >> 3) + 1;
 8005fc0:	10d7      	asrs	r7, r2, #3
	int bitIndex = index & 7;
 8005fc2:	4002      	ands	r2, r0
		qrcode[byteIndex] |= 1 << bitIndex;
 8005fc4:	4096      	lsls	r6, r2
 8005fc6:	0032      	movs	r2, r6
	int byteIndex = (index >> 3) + 1;
 8005fc8:	3701      	adds	r7, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005fca:	5de6      	ldrb	r6, [r4, r7]
 8005fcc:	4332      	orrs	r2, r6
 8005fce:	55e2      	strb	r2, [r4, r7]
	int qrsize = qrcode[0];
 8005fd0:	7822      	ldrb	r2, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8005fd2:	0017      	movs	r7, r2
 8005fd4:	3f15      	subs	r7, #21
 8005fd6:	2f9c      	cmp	r7, #156	; 0x9c
 8005fd8:	d900      	bls.n	8005fdc <initializeFunctionModules+0x5e4>
 8005fda:	e13c      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005fdc:	2a06      	cmp	r2, #6
 8005fde:	dc00      	bgt.n	8005fe2 <initializeFunctionModules+0x5ea>
 8005fe0:	e139      	b.n	8006256 <initializeFunctionModules+0x85e>
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	db00      	blt.n	8005fe8 <initializeFunctionModules+0x5f0>
 8005fe6:	e136      	b.n	8006256 <initializeFunctionModules+0x85e>
		qrcode[byteIndex] |= 1 << bitIndex;
 8005fe8:	000e      	movs	r6, r1
	int index = y * qrsize + x;
 8005fea:	435a      	muls	r2, r3
 8005fec:	3206      	adds	r2, #6
	int byteIndex = (index >> 3) + 1;
 8005fee:	10d7      	asrs	r7, r2, #3
	int bitIndex = index & 7;
 8005ff0:	4002      	ands	r2, r0
		qrcode[byteIndex] |= 1 << bitIndex;
 8005ff2:	4096      	lsls	r6, r2
 8005ff4:	0032      	movs	r2, r6
	int byteIndex = (index >> 3) + 1;
 8005ff6:	3701      	adds	r7, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8005ff8:	5de6      	ldrb	r6, [r4, r7]
 8005ffa:	4332      	orrs	r2, r6
 8005ffc:	55e2      	strb	r2, [r4, r7]
	int qrsize = qrcode[0];
 8005ffe:	7822      	ldrb	r2, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006000:	0017      	movs	r7, r2
 8006002:	3f15      	subs	r7, #21
 8006004:	2f9c      	cmp	r7, #156	; 0x9c
 8006006:	d900      	bls.n	800600a <initializeFunctionModules+0x612>
 8006008:	e125      	b.n	8006256 <initializeFunctionModules+0x85e>
 800600a:	2a07      	cmp	r2, #7
 800600c:	dc00      	bgt.n	8006010 <initializeFunctionModules+0x618>
 800600e:	e122      	b.n	8006256 <initializeFunctionModules+0x85e>
 8006010:	4293      	cmp	r3, r2
 8006012:	db00      	blt.n	8006016 <initializeFunctionModules+0x61e>
 8006014:	e11f      	b.n	8006256 <initializeFunctionModules+0x85e>
		qrcode[byteIndex] |= 1 << bitIndex;
 8006016:	000e      	movs	r6, r1
	int index = y * qrsize + x;
 8006018:	435a      	muls	r2, r3
 800601a:	3207      	adds	r2, #7
	int byteIndex = (index >> 3) + 1;
 800601c:	10d7      	asrs	r7, r2, #3
	int bitIndex = index & 7;
 800601e:	4002      	ands	r2, r0
		qrcode[byteIndex] |= 1 << bitIndex;
 8006020:	4096      	lsls	r6, r2
 8006022:	0032      	movs	r2, r6
	int byteIndex = (index >> 3) + 1;
 8006024:	3701      	adds	r7, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8006026:	5de6      	ldrb	r6, [r4, r7]
 8006028:	4332      	orrs	r2, r6
 800602a:	55e2      	strb	r2, [r4, r7]
	int qrsize = qrcode[0];
 800602c:	7822      	ldrb	r2, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 800602e:	0017      	movs	r7, r2
 8006030:	3f15      	subs	r7, #21
 8006032:	2f9c      	cmp	r7, #156	; 0x9c
 8006034:	d900      	bls.n	8006038 <initializeFunctionModules+0x640>
 8006036:	e10e      	b.n	8006256 <initializeFunctionModules+0x85e>
 8006038:	2a08      	cmp	r2, #8
 800603a:	dc00      	bgt.n	800603e <initializeFunctionModules+0x646>
 800603c:	e10b      	b.n	8006256 <initializeFunctionModules+0x85e>
 800603e:	4293      	cmp	r3, r2
 8006040:	db00      	blt.n	8006044 <initializeFunctionModules+0x64c>
 8006042:	e108      	b.n	8006256 <initializeFunctionModules+0x85e>
		qrcode[byteIndex] |= 1 << bitIndex;
 8006044:	000e      	movs	r6, r1
	int index = y * qrsize + x;
 8006046:	435a      	muls	r2, r3
 8006048:	3208      	adds	r2, #8
	int byteIndex = (index >> 3) + 1;
 800604a:	10d7      	asrs	r7, r2, #3
	int bitIndex = index & 7;
 800604c:	4002      	ands	r2, r0
		qrcode[byteIndex] |= 1 << bitIndex;
 800604e:	4096      	lsls	r6, r2
 8006050:	0032      	movs	r2, r6
	int byteIndex = (index >> 3) + 1;
 8006052:	3701      	adds	r7, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8006054:	5de6      	ldrb	r6, [r4, r7]
	for (int dy = 0; dy < height; dy++) {
 8006056:	3301      	adds	r3, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8006058:	4332      	orrs	r2, r6
 800605a:	55e2      	strb	r2, [r4, r7]
	for (int dy = 0; dy < height; dy++) {
 800605c:	42ab      	cmp	r3, r5
 800605e:	d000      	beq.n	8006062 <initializeFunctionModules+0x66a>
 8006060:	e72d      	b.n	8005ebe <initializeFunctionModules+0x4c6>
	if (version == 1)
 8006062:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006064:	4666      	mov	r6, ip
 8006066:	2d01      	cmp	r5, #1
 8006068:	d100      	bne.n	800606c <initializeFunctionModules+0x674>
 800606a:	e2f5      	b.n	8006658 <initializeFunctionModules+0xc60>
	int numAlign = version / 7 + 2;
 800606c:	2107      	movs	r1, #7
 800606e:	0028      	movs	r0, r5
 8006070:	f7fa f8e6 	bl	8000240 <__divsi3>
 8006074:	1c82      	adds	r2, r0, #2
 8006076:	0007      	movs	r7, r0
	int step = (version == 32) ? 26 :
 8006078:	002b      	movs	r3, r5
	int numAlign = version / 7 + 2;
 800607a:	9203      	str	r2, [sp, #12]
	int step = (version == 32) ? 26 :
 800607c:	2d20      	cmp	r5, #32
 800607e:	d100      	bne.n	8006082 <initializeFunctionModules+0x68a>
 8006080:	e2f6      	b.n	8006670 <initializeFunctionModules+0xc78>
		(version * 4 + numAlign * 2 + 1) / (numAlign * 2 - 2) * 2;
 8006082:	4694      	mov	ip, r2
 8006084:	1c45      	adds	r5, r0, #1
 8006086:	0058      	lsls	r0, r3, #1
 8006088:	4460      	add	r0, ip
 800608a:	0040      	lsls	r0, r0, #1
 800608c:	3001      	adds	r0, #1
 800608e:	0069      	lsls	r1, r5, #1
 8006090:	f7fa f8d6 	bl	8000240 <__divsi3>
	int step = (version == 32) ? 26 :
 8006094:	0040      	lsls	r0, r0, #1
	for (int i = numAlign - 1, pos = version * 4 + 10; i >= 1; i--, pos -= step)
 8006096:	2d00      	cmp	r5, #0
 8006098:	dc00      	bgt.n	800609c <initializeFunctionModules+0x6a4>
 800609a:	e2ec      	b.n	8006676 <initializeFunctionModules+0xc7e>
 800609c:	ab0a      	add	r3, sp, #40	; 0x28
 800609e:	9307      	str	r3, [sp, #28]
 80060a0:	195b      	adds	r3, r3, r5
 80060a2:	3d01      	subs	r5, #1
		result[i] = (uint8_t)pos;
 80060a4:	701e      	strb	r6, [r3, #0]
	for (int i = numAlign - 1, pos = version * 4 + 10; i >= 1; i--, pos -= step)
 80060a6:	1a36      	subs	r6, r6, r0
 80060a8:	3b01      	subs	r3, #1
 80060aa:	2d00      	cmp	r5, #0
 80060ac:	d1f9      	bne.n	80060a2 <initializeFunctionModules+0x6aa>
	result[0] = 6;
 80060ae:	2306      	movs	r3, #6
 80060b0:	9a07      	ldr	r2, [sp, #28]
 80060b2:	7013      	strb	r3, [r2, #0]
	for (int i = 0; i < numAlign; i++) {
 80060b4:	9b03      	ldr	r3, [sp, #12]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	dc00      	bgt.n	80060bc <initializeFunctionModules+0x6c4>
 80060ba:	e0e3      	b.n	8006284 <initializeFunctionModules+0x88c>
			if (!((i == 0 && j == 0) || (i == 0 && j == numAlign - 1) || (i == numAlign - 1 && j == 0)))
 80060bc:	1c7b      	adds	r3, r7, #1
 80060be:	9304      	str	r3, [sp, #16]
 80060c0:	9b07      	ldr	r3, [sp, #28]
	int bitIndex = index & 7;
 80060c2:	2607      	movs	r6, #7
			if (!((i == 0 && j == 0) || (i == 0 && j == numAlign - 1) || (i == numAlign - 1 && j == 0)))
 80060c4:	9305      	str	r3, [sp, #20]
	for (int i = 0; i < numAlign; i++) {
 80060c6:	2300      	movs	r3, #0
 80060c8:	9302      	str	r3, [sp, #8]
 80060ca:	9b07      	ldr	r3, [sp, #28]
 80060cc:	9301      	str	r3, [sp, #4]
		for (int j = 0; j < numAlign; j++) {
 80060ce:	2300      	movs	r3, #0
 80060d0:	4699      	mov	r9, r3
 80060d2:	e00c      	b.n	80060ee <initializeFunctionModules+0x6f6>
			if (!((i == 0 && j == 0) || (i == 0 && j == numAlign - 1) || (i == numAlign - 1 && j == 0)))
 80060d4:	464b      	mov	r3, r9
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d115      	bne.n	8006106 <initializeFunctionModules+0x70e>
		for (int j = 0; j < numAlign; j++) {
 80060da:	2301      	movs	r3, #1
 80060dc:	469c      	mov	ip, r3
 80060de:	9b01      	ldr	r3, [sp, #4]
 80060e0:	44e1      	add	r9, ip
 80060e2:	3301      	adds	r3, #1
 80060e4:	9301      	str	r3, [sp, #4]
 80060e6:	9b03      	ldr	r3, [sp, #12]
 80060e8:	4599      	cmp	r9, r3
 80060ea:	d100      	bne.n	80060ee <initializeFunctionModules+0x6f6>
 80060ec:	e0c0      	b.n	8006270 <initializeFunctionModules+0x878>
			if (!((i == 0 && j == 0) || (i == 0 && j == numAlign - 1) || (i == numAlign - 1 && j == 0)))
 80060ee:	464a      	mov	r2, r9
 80060f0:	9b02      	ldr	r3, [sp, #8]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	d0f1      	beq.n	80060da <initializeFunctionModules+0x6e2>
 80060f6:	9b02      	ldr	r3, [sp, #8]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d100      	bne.n	80060fe <initializeFunctionModules+0x706>
 80060fc:	e2b3      	b.n	8006666 <initializeFunctionModules+0xc6e>
 80060fe:	9b04      	ldr	r3, [sp, #16]
 8006100:	9a02      	ldr	r2, [sp, #8]
 8006102:	4293      	cmp	r3, r2
 8006104:	d0e6      	beq.n	80060d4 <initializeFunctionModules+0x6dc>
				fillRectangle(alignPatPos[i] - 2, alignPatPos[j] - 2, 5, 5, qrcode);
 8006106:	9b05      	ldr	r3, [sp, #20]
			setModuleBounded(qrcode, left + dx, top + dy, true);
 8006108:	2201      	movs	r2, #1
				fillRectangle(alignPatPos[i] - 2, alignPatPos[j] - 2, 5, 5, qrcode);
 800610a:	781b      	ldrb	r3, [r3, #0]
			setModuleBounded(qrcode, left + dx, top + dy, true);
 800610c:	464f      	mov	r7, r9
				fillRectangle(alignPatPos[i] - 2, alignPatPos[j] - 2, 5, 5, qrcode);
 800610e:	469c      	mov	ip, r3
			setModuleBounded(qrcode, left + dx, top + dy, true);
 8006110:	4462      	add	r2, ip
 8006112:	4690      	mov	r8, r2
 8006114:	4662      	mov	r2, ip
	for (int dy = 0; dy < height; dy++) {
 8006116:	2500      	movs	r5, #0
			setModuleBounded(qrcode, left + dx, top + dy, true);
 8006118:	3202      	adds	r2, #2
 800611a:	4691      	mov	r9, r2
				fillRectangle(alignPatPos[i] - 2, alignPatPos[j] - 2, 5, 5, qrcode);
 800611c:	1e98      	subs	r0, r3, #2
			setModuleBounded(qrcode, left + dx, top + dy, true);
 800611e:	1e59      	subs	r1, r3, #1
				fillRectangle(alignPatPos[i] - 2, alignPatPos[j] - 2, 5, 5, qrcode);
 8006120:	9b01      	ldr	r3, [sp, #4]
			setModuleBounded(qrcode, left + dx, top + dy, true);
 8006122:	9706      	str	r7, [sp, #24]
				fillRectangle(alignPatPos[i] - 2, alignPatPos[j] - 2, 5, 5, qrcode);
 8006124:	781b      	ldrb	r3, [r3, #0]
			setModuleBounded(qrcode, left + dx, top + dy, true);
 8006126:	9500      	str	r5, [sp, #0]
				fillRectangle(alignPatPos[i] - 2, alignPatPos[j] - 2, 5, 5, qrcode);
 8006128:	3b02      	subs	r3, #2
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 800612a:	2715      	movs	r7, #21
 800612c:	427f      	negs	r7, r7
 800612e:	46ba      	mov	sl, r7
	int qrsize = qrcode[0];
 8006130:	7822      	ldrb	r2, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006132:	4492      	add	sl, r2
 8006134:	4657      	mov	r7, sl
 8006136:	2f9c      	cmp	r7, #156	; 0x9c
 8006138:	d900      	bls.n	800613c <initializeFunctionModules+0x744>
 800613a:	e08c      	b.n	8006256 <initializeFunctionModules+0x85e>
 800613c:	2800      	cmp	r0, #0
 800613e:	da00      	bge.n	8006142 <initializeFunctionModules+0x74a>
 8006140:	e089      	b.n	8006256 <initializeFunctionModules+0x85e>
 8006142:	4290      	cmp	r0, r2
 8006144:	db00      	blt.n	8006148 <initializeFunctionModules+0x750>
 8006146:	e086      	b.n	8006256 <initializeFunctionModules+0x85e>
 8006148:	429a      	cmp	r2, r3
 800614a:	d800      	bhi.n	800614e <initializeFunctionModules+0x756>
 800614c:	e083      	b.n	8006256 <initializeFunctionModules+0x85e>
	int index = y * qrsize + x;
 800614e:	435a      	muls	r2, r3
 8006150:	4692      	mov	sl, r2
 8006152:	4482      	add	sl, r0
	int bitIndex = index & 7;
 8006154:	4657      	mov	r7, sl
 8006156:	4037      	ands	r7, r6
	int byteIndex = (index >> 3) + 1;
 8006158:	4652      	mov	r2, sl
	int bitIndex = index & 7;
 800615a:	46ba      	mov	sl, r7
		qrcode[byteIndex] |= 1 << bitIndex;
 800615c:	2701      	movs	r7, #1
 800615e:	4655      	mov	r5, sl
 8006160:	40af      	lsls	r7, r5
	int byteIndex = (index >> 3) + 1;
 8006162:	10d2      	asrs	r2, r2, #3
 8006164:	3201      	adds	r2, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8006166:	5ca5      	ldrb	r5, [r4, r2]
 8006168:	432f      	orrs	r7, r5
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 800616a:	2515      	movs	r5, #21
 800616c:	426d      	negs	r5, r5
 800616e:	46aa      	mov	sl, r5
		qrcode[byteIndex] |= 1 << bitIndex;
 8006170:	54a7      	strb	r7, [r4, r2]
	int qrsize = qrcode[0];
 8006172:	7822      	ldrb	r2, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006174:	4492      	add	sl, r2
 8006176:	4655      	mov	r5, sl
 8006178:	2d9c      	cmp	r5, #156	; 0x9c
 800617a:	d86c      	bhi.n	8006256 <initializeFunctionModules+0x85e>
 800617c:	1c4d      	adds	r5, r1, #1
 800617e:	d06a      	beq.n	8006256 <initializeFunctionModules+0x85e>
 8006180:	4291      	cmp	r1, r2
 8006182:	da68      	bge.n	8006256 <initializeFunctionModules+0x85e>
 8006184:	4293      	cmp	r3, r2
 8006186:	da66      	bge.n	8006256 <initializeFunctionModules+0x85e>
	int index = y * qrsize + x;
 8006188:	435a      	muls	r2, r3
 800618a:	4692      	mov	sl, r2
 800618c:	448a      	add	sl, r1
	int bitIndex = index & 7;
 800618e:	4657      	mov	r7, sl
 8006190:	4037      	ands	r7, r6
	int byteIndex = (index >> 3) + 1;
 8006192:	4652      	mov	r2, sl
	int bitIndex = index & 7;
 8006194:	46ba      	mov	sl, r7
		qrcode[byteIndex] |= 1 << bitIndex;
 8006196:	2701      	movs	r7, #1
 8006198:	4655      	mov	r5, sl
 800619a:	40af      	lsls	r7, r5
	int byteIndex = (index >> 3) + 1;
 800619c:	10d2      	asrs	r2, r2, #3
 800619e:	3201      	adds	r2, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 80061a0:	5ca5      	ldrb	r5, [r4, r2]
 80061a2:	432f      	orrs	r7, r5
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 80061a4:	2515      	movs	r5, #21
 80061a6:	426d      	negs	r5, r5
 80061a8:	46aa      	mov	sl, r5
		qrcode[byteIndex] |= 1 << bitIndex;
 80061aa:	54a7      	strb	r7, [r4, r2]
	int qrsize = qrcode[0];
 80061ac:	7822      	ldrb	r2, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 80061ae:	4492      	add	sl, r2
 80061b0:	4655      	mov	r5, sl
 80061b2:	2d9c      	cmp	r5, #156	; 0x9c
 80061b4:	d84f      	bhi.n	8006256 <initializeFunctionModules+0x85e>
 80061b6:	4594      	cmp	ip, r2
 80061b8:	da4d      	bge.n	8006256 <initializeFunctionModules+0x85e>
 80061ba:	4293      	cmp	r3, r2
 80061bc:	da4b      	bge.n	8006256 <initializeFunctionModules+0x85e>
	int index = y * qrsize + x;
 80061be:	435a      	muls	r2, r3
 80061c0:	4462      	add	r2, ip
 80061c2:	4692      	mov	sl, r2
	int bitIndex = index & 7;
 80061c4:	4657      	mov	r7, sl
 80061c6:	4037      	ands	r7, r6
 80061c8:	46ba      	mov	sl, r7
		qrcode[byteIndex] |= 1 << bitIndex;
 80061ca:	2701      	movs	r7, #1
 80061cc:	4655      	mov	r5, sl
 80061ce:	40af      	lsls	r7, r5
	int byteIndex = (index >> 3) + 1;
 80061d0:	10d2      	asrs	r2, r2, #3
 80061d2:	3201      	adds	r2, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 80061d4:	5ca5      	ldrb	r5, [r4, r2]
 80061d6:	432f      	orrs	r7, r5
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 80061d8:	2515      	movs	r5, #21
 80061da:	426d      	negs	r5, r5
 80061dc:	46aa      	mov	sl, r5
		qrcode[byteIndex] |= 1 << bitIndex;
 80061de:	54a7      	strb	r7, [r4, r2]
	int qrsize = qrcode[0];
 80061e0:	7822      	ldrb	r2, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 80061e2:	4492      	add	sl, r2
 80061e4:	4655      	mov	r5, sl
 80061e6:	2d9c      	cmp	r5, #156	; 0x9c
 80061e8:	d835      	bhi.n	8006256 <initializeFunctionModules+0x85e>
 80061ea:	4590      	cmp	r8, r2
 80061ec:	da33      	bge.n	8006256 <initializeFunctionModules+0x85e>
 80061ee:	4293      	cmp	r3, r2
 80061f0:	da31      	bge.n	8006256 <initializeFunctionModules+0x85e>
	int index = y * qrsize + x;
 80061f2:	435a      	muls	r2, r3
 80061f4:	4442      	add	r2, r8
 80061f6:	4692      	mov	sl, r2
	int bitIndex = index & 7;
 80061f8:	4657      	mov	r7, sl
 80061fa:	4037      	ands	r7, r6
 80061fc:	46ba      	mov	sl, r7
		qrcode[byteIndex] |= 1 << bitIndex;
 80061fe:	2701      	movs	r7, #1
 8006200:	4655      	mov	r5, sl
 8006202:	40af      	lsls	r7, r5
	int byteIndex = (index >> 3) + 1;
 8006204:	10d2      	asrs	r2, r2, #3
 8006206:	3201      	adds	r2, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8006208:	5ca5      	ldrb	r5, [r4, r2]
 800620a:	432f      	orrs	r7, r5
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 800620c:	2515      	movs	r5, #21
 800620e:	426d      	negs	r5, r5
 8006210:	46aa      	mov	sl, r5
		qrcode[byteIndex] |= 1 << bitIndex;
 8006212:	54a7      	strb	r7, [r4, r2]
	int qrsize = qrcode[0];
 8006214:	7822      	ldrb	r2, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006216:	4492      	add	sl, r2
 8006218:	4655      	mov	r5, sl
 800621a:	2d9c      	cmp	r5, #156	; 0x9c
 800621c:	d81b      	bhi.n	8006256 <initializeFunctionModules+0x85e>
 800621e:	4591      	cmp	r9, r2
 8006220:	da19      	bge.n	8006256 <initializeFunctionModules+0x85e>
 8006222:	4293      	cmp	r3, r2
 8006224:	da17      	bge.n	8006256 <initializeFunctionModules+0x85e>
	int index = y * qrsize + x;
 8006226:	435a      	muls	r2, r3
 8006228:	444a      	add	r2, r9
 800622a:	4692      	mov	sl, r2
	int bitIndex = index & 7;
 800622c:	4657      	mov	r7, sl
 800622e:	4037      	ands	r7, r6
 8006230:	46ba      	mov	sl, r7
		qrcode[byteIndex] |= 1 << bitIndex;
 8006232:	2701      	movs	r7, #1
 8006234:	4655      	mov	r5, sl
 8006236:	40af      	lsls	r7, r5
	int byteIndex = (index >> 3) + 1;
 8006238:	10d2      	asrs	r2, r2, #3
 800623a:	3201      	adds	r2, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 800623c:	5ca5      	ldrb	r5, [r4, r2]
	for (int dy = 0; dy < height; dy++) {
 800623e:	3301      	adds	r3, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8006240:	432f      	orrs	r7, r5
 8006242:	54a7      	strb	r7, [r4, r2]
	for (int dy = 0; dy < height; dy++) {
 8006244:	9a00      	ldr	r2, [sp, #0]
 8006246:	3201      	adds	r2, #1
 8006248:	9200      	str	r2, [sp, #0]
 800624a:	2a05      	cmp	r2, #5
 800624c:	d000      	beq.n	8006250 <initializeFunctionModules+0x858>
 800624e:	e76c      	b.n	800612a <initializeFunctionModules+0x732>
 8006250:	9b06      	ldr	r3, [sp, #24]
 8006252:	4699      	mov	r9, r3
 8006254:	e741      	b.n	80060da <initializeFunctionModules+0x6e2>
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006256:	21c4      	movs	r1, #196	; 0xc4
 8006258:	4b02      	ldr	r3, [pc, #8]	; (8006264 <initializeFunctionModules+0x86c>)
 800625a:	4a03      	ldr	r2, [pc, #12]	; (8006268 <initializeFunctionModules+0x870>)
 800625c:	4803      	ldr	r0, [pc, #12]	; (800626c <initializeFunctionModules+0x874>)
 800625e:	0089      	lsls	r1, r1, #2
 8006260:	f003 f98a 	bl	8009578 <__assert_func>
 8006264:	0800e368 	.word	0x0800e368
 8006268:	0800e8c4 	.word	0x0800e8c4
 800626c:	0800e204 	.word	0x0800e204
	for (int i = 0; i < numAlign; i++) {
 8006270:	9a05      	ldr	r2, [sp, #20]
 8006272:	9b02      	ldr	r3, [sp, #8]
 8006274:	3201      	adds	r2, #1
 8006276:	9205      	str	r2, [sp, #20]
 8006278:	9a03      	ldr	r2, [sp, #12]
 800627a:	3301      	adds	r3, #1
 800627c:	9302      	str	r3, [sp, #8]
 800627e:	4293      	cmp	r3, r2
 8006280:	d000      	beq.n	8006284 <initializeFunctionModules+0x88c>
 8006282:	e722      	b.n	80060ca <initializeFunctionModules+0x6d2>
	if (version >= 7) {
 8006284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006286:	2b06      	cmp	r3, #6
 8006288:	dc00      	bgt.n	800628c <initializeFunctionModules+0x894>
 800628a:	e1e5      	b.n	8006658 <initializeFunctionModules+0xc60>
		fillRectangle(qrsize - 11, 0, 3, 6, qrcode);
 800628c:	9b08      	ldr	r3, [sp, #32]
	for (int dy = 0; dy < height; dy++) {
 800628e:	2200      	movs	r2, #0
		fillRectangle(qrsize - 11, 0, 3, 6, qrcode);
 8006290:	1d9d      	adds	r5, r3, #6
			setModuleBounded(qrcode, left + dx, top + dy, true);
 8006292:	1dd8      	adds	r0, r3, #7
 8006294:	3308      	adds	r3, #8
 8006296:	0019      	movs	r1, r3
	int bitIndex = index & 7;
 8006298:	2307      	movs	r3, #7
		qrcode[byteIndex] |= 1 << bitIndex;
 800629a:	2601      	movs	r6, #1
	int bitIndex = index & 7;
 800629c:	4699      	mov	r9, r3
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 800629e:	2715      	movs	r7, #21
 80062a0:	427f      	negs	r7, r7
 80062a2:	46bc      	mov	ip, r7
	int qrsize = qrcode[0];
 80062a4:	7823      	ldrb	r3, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 80062a6:	449c      	add	ip, r3
 80062a8:	4667      	mov	r7, ip
 80062aa:	2f9c      	cmp	r7, #156	; 0x9c
 80062ac:	d8d3      	bhi.n	8006256 <initializeFunctionModules+0x85e>
 80062ae:	2d00      	cmp	r5, #0
 80062b0:	dbd1      	blt.n	8006256 <initializeFunctionModules+0x85e>
 80062b2:	429d      	cmp	r5, r3
 80062b4:	dacf      	bge.n	8006256 <initializeFunctionModules+0x85e>
 80062b6:	4293      	cmp	r3, r2
 80062b8:	ddcd      	ble.n	8006256 <initializeFunctionModules+0x85e>
	int index = y * qrsize + x;
 80062ba:	4353      	muls	r3, r2
 80062bc:	195b      	adds	r3, r3, r5
	int byteIndex = (index >> 3) + 1;
 80062be:	10df      	asrs	r7, r3, #3
 80062c0:	46bc      	mov	ip, r7
 80062c2:	2701      	movs	r7, #1
 80062c4:	46b8      	mov	r8, r7
	int bitIndex = index & 7;
 80062c6:	464f      	mov	r7, r9
 80062c8:	403b      	ands	r3, r7
		qrcode[byteIndex] |= 1 << bitIndex;
 80062ca:	0037      	movs	r7, r6
 80062cc:	409f      	lsls	r7, r3
	int byteIndex = (index >> 3) + 1;
 80062ce:	44c4      	add	ip, r8
		qrcode[byteIndex] |= 1 << bitIndex;
 80062d0:	003b      	movs	r3, r7
 80062d2:	4667      	mov	r7, ip
 80062d4:	5de7      	ldrb	r7, [r4, r7]
 80062d6:	433b      	orrs	r3, r7
 80062d8:	4667      	mov	r7, ip
 80062da:	55e3      	strb	r3, [r4, r7]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 80062dc:	2715      	movs	r7, #21
 80062de:	427f      	negs	r7, r7
 80062e0:	46bc      	mov	ip, r7
	int qrsize = qrcode[0];
 80062e2:	7823      	ldrb	r3, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 80062e4:	449c      	add	ip, r3
 80062e6:	4667      	mov	r7, ip
 80062e8:	2f9c      	cmp	r7, #156	; 0x9c
 80062ea:	d8b4      	bhi.n	8006256 <initializeFunctionModules+0x85e>
 80062ec:	2800      	cmp	r0, #0
 80062ee:	dbb2      	blt.n	8006256 <initializeFunctionModules+0x85e>
 80062f0:	4298      	cmp	r0, r3
 80062f2:	dab0      	bge.n	8006256 <initializeFunctionModules+0x85e>
 80062f4:	4293      	cmp	r3, r2
 80062f6:	ddae      	ble.n	8006256 <initializeFunctionModules+0x85e>
	int index = y * qrsize + x;
 80062f8:	4353      	muls	r3, r2
 80062fa:	181b      	adds	r3, r3, r0
	int byteIndex = (index >> 3) + 1;
 80062fc:	10df      	asrs	r7, r3, #3
 80062fe:	46bc      	mov	ip, r7
 8006300:	2701      	movs	r7, #1
 8006302:	46b8      	mov	r8, r7
	int bitIndex = index & 7;
 8006304:	464f      	mov	r7, r9
 8006306:	403b      	ands	r3, r7
		qrcode[byteIndex] |= 1 << bitIndex;
 8006308:	0037      	movs	r7, r6
 800630a:	409f      	lsls	r7, r3
	int byteIndex = (index >> 3) + 1;
 800630c:	44c4      	add	ip, r8
		qrcode[byteIndex] |= 1 << bitIndex;
 800630e:	003b      	movs	r3, r7
 8006310:	4667      	mov	r7, ip
 8006312:	5de7      	ldrb	r7, [r4, r7]
 8006314:	433b      	orrs	r3, r7
 8006316:	4667      	mov	r7, ip
 8006318:	55e3      	strb	r3, [r4, r7]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 800631a:	2715      	movs	r7, #21
 800631c:	427f      	negs	r7, r7
 800631e:	46bc      	mov	ip, r7
	int qrsize = qrcode[0];
 8006320:	7823      	ldrb	r3, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006322:	449c      	add	ip, r3
 8006324:	4667      	mov	r7, ip
 8006326:	2f9c      	cmp	r7, #156	; 0x9c
 8006328:	d895      	bhi.n	8006256 <initializeFunctionModules+0x85e>
 800632a:	2900      	cmp	r1, #0
 800632c:	db93      	blt.n	8006256 <initializeFunctionModules+0x85e>
 800632e:	4299      	cmp	r1, r3
 8006330:	da91      	bge.n	8006256 <initializeFunctionModules+0x85e>
 8006332:	4293      	cmp	r3, r2
 8006334:	dd8f      	ble.n	8006256 <initializeFunctionModules+0x85e>
	int index = y * qrsize + x;
 8006336:	4353      	muls	r3, r2
 8006338:	185b      	adds	r3, r3, r1
	int byteIndex = (index >> 3) + 1;
 800633a:	10df      	asrs	r7, r3, #3
 800633c:	46bc      	mov	ip, r7
 800633e:	2701      	movs	r7, #1
 8006340:	46b8      	mov	r8, r7
	int bitIndex = index & 7;
 8006342:	464f      	mov	r7, r9
 8006344:	403b      	ands	r3, r7
		qrcode[byteIndex] |= 1 << bitIndex;
 8006346:	0037      	movs	r7, r6
 8006348:	409f      	lsls	r7, r3
	int byteIndex = (index >> 3) + 1;
 800634a:	44c4      	add	ip, r8
		qrcode[byteIndex] |= 1 << bitIndex;
 800634c:	003b      	movs	r3, r7
 800634e:	4667      	mov	r7, ip
 8006350:	5de7      	ldrb	r7, [r4, r7]
	for (int dy = 0; dy < height; dy++) {
 8006352:	3201      	adds	r2, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8006354:	433b      	orrs	r3, r7
 8006356:	4667      	mov	r7, ip
 8006358:	55e3      	strb	r3, [r4, r7]
	for (int dy = 0; dy < height; dy++) {
 800635a:	2a06      	cmp	r2, #6
 800635c:	d19f      	bne.n	800629e <initializeFunctionModules+0x8a6>
	int qrsize = qrcode[0];
 800635e:	7823      	ldrb	r3, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006360:	001a      	movs	r2, r3
 8006362:	3a15      	subs	r2, #21
 8006364:	b2d2      	uxtb	r2, r2
 8006366:	2a9c      	cmp	r2, #156	; 0x9c
 8006368:	d900      	bls.n	800636c <initializeFunctionModules+0x974>
 800636a:	e774      	b.n	8006256 <initializeFunctionModules+0x85e>
 800636c:	429d      	cmp	r5, r3
 800636e:	db00      	blt.n	8006372 <initializeFunctionModules+0x97a>
 8006370:	e771      	b.n	8006256 <initializeFunctionModules+0x85e>
	int bitIndex = index & 7;
 8006372:	464f      	mov	r7, r9
	int index = y * qrsize + x;
 8006374:	436b      	muls	r3, r5
	int byteIndex = (index >> 3) + 1;
 8006376:	10da      	asrs	r2, r3, #3
	int bitIndex = index & 7;
 8006378:	403b      	ands	r3, r7
		qrcode[byteIndex] |= 1 << bitIndex;
 800637a:	0037      	movs	r7, r6
 800637c:	409f      	lsls	r7, r3
 800637e:	003b      	movs	r3, r7
	int byteIndex = (index >> 3) + 1;
 8006380:	3201      	adds	r2, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8006382:	5ca7      	ldrb	r7, [r4, r2]
 8006384:	433b      	orrs	r3, r7
 8006386:	54a3      	strb	r3, [r4, r2]
	int qrsize = qrcode[0];
 8006388:	7823      	ldrb	r3, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 800638a:	001a      	movs	r2, r3
 800638c:	3a15      	subs	r2, #21
 800638e:	b2d2      	uxtb	r2, r2
 8006390:	2a9c      	cmp	r2, #156	; 0x9c
 8006392:	d900      	bls.n	8006396 <initializeFunctionModules+0x99e>
 8006394:	e75f      	b.n	8006256 <initializeFunctionModules+0x85e>
 8006396:	429d      	cmp	r5, r3
 8006398:	db00      	blt.n	800639c <initializeFunctionModules+0x9a4>
 800639a:	e75c      	b.n	8006256 <initializeFunctionModules+0x85e>
	int bitIndex = index & 7;
 800639c:	464f      	mov	r7, r9
	int index = y * qrsize + x;
 800639e:	436b      	muls	r3, r5
 80063a0:	1c5a      	adds	r2, r3, #1
	int bitIndex = index & 7;
 80063a2:	403a      	ands	r2, r7
		qrcode[byteIndex] |= 1 << bitIndex;
 80063a4:	0037      	movs	r7, r6
 80063a6:	4097      	lsls	r7, r2
 80063a8:	003a      	movs	r2, r7
	int byteIndex = (index >> 3) + 1;
 80063aa:	10db      	asrs	r3, r3, #3
 80063ac:	3301      	adds	r3, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 80063ae:	5ce7      	ldrb	r7, [r4, r3]
 80063b0:	433a      	orrs	r2, r7
 80063b2:	54e2      	strb	r2, [r4, r3]
	int qrsize = qrcode[0];
 80063b4:	7823      	ldrb	r3, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 80063b6:	001a      	movs	r2, r3
 80063b8:	3a15      	subs	r2, #21
 80063ba:	b2d2      	uxtb	r2, r2
 80063bc:	2a9c      	cmp	r2, #156	; 0x9c
 80063be:	d900      	bls.n	80063c2 <initializeFunctionModules+0x9ca>
 80063c0:	e749      	b.n	8006256 <initializeFunctionModules+0x85e>
 80063c2:	429d      	cmp	r5, r3
 80063c4:	db00      	blt.n	80063c8 <initializeFunctionModules+0x9d0>
 80063c6:	e746      	b.n	8006256 <initializeFunctionModules+0x85e>
	int bitIndex = index & 7;
 80063c8:	464f      	mov	r7, r9
	int index = y * qrsize + x;
 80063ca:	436b      	muls	r3, r5
 80063cc:	3302      	adds	r3, #2
	int bitIndex = index & 7;
 80063ce:	401f      	ands	r7, r3
		qrcode[byteIndex] |= 1 << bitIndex;
 80063d0:	40be      	lsls	r6, r7
	int byteIndex = (index >> 3) + 1;
 80063d2:	10da      	asrs	r2, r3, #3
 80063d4:	3201      	adds	r2, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 80063d6:	5ca3      	ldrb	r3, [r4, r2]
 80063d8:	431e      	orrs	r6, r3
 80063da:	54a6      	strb	r6, [r4, r2]
	int qrsize = qrcode[0];
 80063dc:	7823      	ldrb	r3, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 80063de:	001a      	movs	r2, r3
 80063e0:	3a15      	subs	r2, #21
 80063e2:	b2d2      	uxtb	r2, r2
 80063e4:	2a9c      	cmp	r2, #156	; 0x9c
 80063e6:	d900      	bls.n	80063ea <initializeFunctionModules+0x9f2>
 80063e8:	e735      	b.n	8006256 <initializeFunctionModules+0x85e>
 80063ea:	429d      	cmp	r5, r3
 80063ec:	db00      	blt.n	80063f0 <initializeFunctionModules+0x9f8>
 80063ee:	e732      	b.n	8006256 <initializeFunctionModules+0x85e>
	int bitIndex = index & 7;
 80063f0:	2207      	movs	r2, #7
	int index = y * qrsize + x;
 80063f2:	436b      	muls	r3, r5
 80063f4:	3303      	adds	r3, #3
	int byteIndex = (index >> 3) + 1;
 80063f6:	10df      	asrs	r7, r3, #3
	int bitIndex = index & 7;
 80063f8:	4690      	mov	r8, r2
 80063fa:	4013      	ands	r3, r2
		qrcode[byteIndex] |= 1 << bitIndex;
 80063fc:	3a06      	subs	r2, #6
 80063fe:	0016      	movs	r6, r2
 8006400:	409e      	lsls	r6, r3
 8006402:	0033      	movs	r3, r6
	int byteIndex = (index >> 3) + 1;
 8006404:	3701      	adds	r7, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8006406:	5de6      	ldrb	r6, [r4, r7]
 8006408:	4333      	orrs	r3, r6
 800640a:	55e3      	strb	r3, [r4, r7]
	int qrsize = qrcode[0];
 800640c:	7823      	ldrb	r3, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 800640e:	001f      	movs	r7, r3
 8006410:	3f15      	subs	r7, #21
 8006412:	b2ff      	uxtb	r7, r7
 8006414:	2f9c      	cmp	r7, #156	; 0x9c
 8006416:	d900      	bls.n	800641a <initializeFunctionModules+0xa22>
 8006418:	e71d      	b.n	8006256 <initializeFunctionModules+0x85e>
 800641a:	429d      	cmp	r5, r3
 800641c:	db00      	blt.n	8006420 <initializeFunctionModules+0xa28>
 800641e:	e71a      	b.n	8006256 <initializeFunctionModules+0x85e>
	int bitIndex = index & 7;
 8006420:	4646      	mov	r6, r8
	int index = y * qrsize + x;
 8006422:	436b      	muls	r3, r5
 8006424:	3304      	adds	r3, #4
	int byteIndex = (index >> 3) + 1;
 8006426:	10df      	asrs	r7, r3, #3
	int bitIndex = index & 7;
 8006428:	4033      	ands	r3, r6
		qrcode[byteIndex] |= 1 << bitIndex;
 800642a:	0016      	movs	r6, r2
 800642c:	409e      	lsls	r6, r3
 800642e:	0033      	movs	r3, r6
	int byteIndex = (index >> 3) + 1;
 8006430:	3701      	adds	r7, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8006432:	5de6      	ldrb	r6, [r4, r7]
 8006434:	4333      	orrs	r3, r6
 8006436:	55e3      	strb	r3, [r4, r7]
	int qrsize = qrcode[0];
 8006438:	7823      	ldrb	r3, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 800643a:	001f      	movs	r7, r3
 800643c:	3f15      	subs	r7, #21
 800643e:	b2ff      	uxtb	r7, r7
 8006440:	2f9c      	cmp	r7, #156	; 0x9c
 8006442:	d900      	bls.n	8006446 <initializeFunctionModules+0xa4e>
 8006444:	e707      	b.n	8006256 <initializeFunctionModules+0x85e>
 8006446:	429d      	cmp	r5, r3
 8006448:	db00      	blt.n	800644c <initializeFunctionModules+0xa54>
 800644a:	e704      	b.n	8006256 <initializeFunctionModules+0x85e>
	int bitIndex = index & 7;
 800644c:	4646      	mov	r6, r8
	int index = y * qrsize + x;
 800644e:	436b      	muls	r3, r5
 8006450:	3305      	adds	r3, #5
	int byteIndex = (index >> 3) + 1;
 8006452:	10dd      	asrs	r5, r3, #3
	int bitIndex = index & 7;
 8006454:	4033      	ands	r3, r6
		qrcode[byteIndex] |= 1 << bitIndex;
 8006456:	0016      	movs	r6, r2
 8006458:	409e      	lsls	r6, r3
 800645a:	0033      	movs	r3, r6
	int byteIndex = (index >> 3) + 1;
 800645c:	3501      	adds	r5, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 800645e:	5d67      	ldrb	r7, [r4, r5]
 8006460:	433b      	orrs	r3, r7
 8006462:	5563      	strb	r3, [r4, r5]
	int qrsize = qrcode[0];
 8006464:	7823      	ldrb	r3, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006466:	001d      	movs	r5, r3
 8006468:	3d15      	subs	r5, #21
 800646a:	b2ed      	uxtb	r5, r5
 800646c:	2d9c      	cmp	r5, #156	; 0x9c
 800646e:	d900      	bls.n	8006472 <initializeFunctionModules+0xa7a>
 8006470:	e6f1      	b.n	8006256 <initializeFunctionModules+0x85e>
 8006472:	4283      	cmp	r3, r0
 8006474:	dc00      	bgt.n	8006478 <initializeFunctionModules+0xa80>
 8006476:	e6ee      	b.n	8006256 <initializeFunctionModules+0x85e>
	int bitIndex = index & 7;
 8006478:	4646      	mov	r6, r8
	int index = y * qrsize + x;
 800647a:	4343      	muls	r3, r0
	int byteIndex = (index >> 3) + 1;
 800647c:	10dd      	asrs	r5, r3, #3
	int bitIndex = index & 7;
 800647e:	4033      	ands	r3, r6
		qrcode[byteIndex] |= 1 << bitIndex;
 8006480:	0016      	movs	r6, r2
 8006482:	409e      	lsls	r6, r3
 8006484:	0033      	movs	r3, r6
	int byteIndex = (index >> 3) + 1;
 8006486:	3501      	adds	r5, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8006488:	5d67      	ldrb	r7, [r4, r5]
 800648a:	433b      	orrs	r3, r7
 800648c:	5563      	strb	r3, [r4, r5]
	int qrsize = qrcode[0];
 800648e:	7823      	ldrb	r3, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006490:	001d      	movs	r5, r3
 8006492:	3d15      	subs	r5, #21
 8006494:	b2ed      	uxtb	r5, r5
 8006496:	2d9c      	cmp	r5, #156	; 0x9c
 8006498:	d900      	bls.n	800649c <initializeFunctionModules+0xaa4>
 800649a:	e6dc      	b.n	8006256 <initializeFunctionModules+0x85e>
 800649c:	4298      	cmp	r0, r3
 800649e:	db00      	blt.n	80064a2 <initializeFunctionModules+0xaaa>
 80064a0:	e6d9      	b.n	8006256 <initializeFunctionModules+0x85e>
	int bitIndex = index & 7;
 80064a2:	4646      	mov	r6, r8
	int index = y * qrsize + x;
 80064a4:	4343      	muls	r3, r0
 80064a6:	3301      	adds	r3, #1
	int byteIndex = (index >> 3) + 1;
 80064a8:	10dd      	asrs	r5, r3, #3
	int bitIndex = index & 7;
 80064aa:	4033      	ands	r3, r6
		qrcode[byteIndex] |= 1 << bitIndex;
 80064ac:	409a      	lsls	r2, r3
	int byteIndex = (index >> 3) + 1;
 80064ae:	3501      	adds	r5, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 80064b0:	5d63      	ldrb	r3, [r4, r5]
 80064b2:	431a      	orrs	r2, r3
 80064b4:	5562      	strb	r2, [r4, r5]
	int qrsize = qrcode[0];
 80064b6:	7823      	ldrb	r3, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 80064b8:	001a      	movs	r2, r3
 80064ba:	3a15      	subs	r2, #21
 80064bc:	b2d2      	uxtb	r2, r2
 80064be:	2a9c      	cmp	r2, #156	; 0x9c
 80064c0:	d900      	bls.n	80064c4 <initializeFunctionModules+0xacc>
 80064c2:	e6c8      	b.n	8006256 <initializeFunctionModules+0x85e>
 80064c4:	4298      	cmp	r0, r3
 80064c6:	db00      	blt.n	80064ca <initializeFunctionModules+0xad2>
 80064c8:	e6c5      	b.n	8006256 <initializeFunctionModules+0x85e>
		qrcode[byteIndex] |= 1 << bitIndex;
 80064ca:	2201      	movs	r2, #1
	int bitIndex = index & 7;
 80064cc:	2507      	movs	r5, #7
		qrcode[byteIndex] |= 1 << bitIndex;
 80064ce:	0017      	movs	r7, r2
	int index = y * qrsize + x;
 80064d0:	4343      	muls	r3, r0
 80064d2:	3302      	adds	r3, #2
	int byteIndex = (index >> 3) + 1;
 80064d4:	10de      	asrs	r6, r3, #3
	int bitIndex = index & 7;
 80064d6:	402b      	ands	r3, r5
		qrcode[byteIndex] |= 1 << bitIndex;
 80064d8:	409f      	lsls	r7, r3
 80064da:	003b      	movs	r3, r7
	int byteIndex = (index >> 3) + 1;
 80064dc:	3601      	adds	r6, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 80064de:	5da7      	ldrb	r7, [r4, r6]
 80064e0:	433b      	orrs	r3, r7
 80064e2:	55a3      	strb	r3, [r4, r6]
	int qrsize = qrcode[0];
 80064e4:	7823      	ldrb	r3, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 80064e6:	001e      	movs	r6, r3
 80064e8:	3e15      	subs	r6, #21
 80064ea:	b2f6      	uxtb	r6, r6
 80064ec:	2e9c      	cmp	r6, #156	; 0x9c
 80064ee:	d900      	bls.n	80064f2 <initializeFunctionModules+0xafa>
 80064f0:	e6b1      	b.n	8006256 <initializeFunctionModules+0x85e>
 80064f2:	4283      	cmp	r3, r0
 80064f4:	dc00      	bgt.n	80064f8 <initializeFunctionModules+0xb00>
 80064f6:	e6ae      	b.n	8006256 <initializeFunctionModules+0x85e>
		qrcode[byteIndex] |= 1 << bitIndex;
 80064f8:	0017      	movs	r7, r2
	int index = y * qrsize + x;
 80064fa:	4343      	muls	r3, r0
 80064fc:	3303      	adds	r3, #3
	int byteIndex = (index >> 3) + 1;
 80064fe:	10de      	asrs	r6, r3, #3
	int bitIndex = index & 7;
 8006500:	402b      	ands	r3, r5
		qrcode[byteIndex] |= 1 << bitIndex;
 8006502:	409f      	lsls	r7, r3
 8006504:	003b      	movs	r3, r7
	int byteIndex = (index >> 3) + 1;
 8006506:	3601      	adds	r6, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8006508:	5da7      	ldrb	r7, [r4, r6]
 800650a:	433b      	orrs	r3, r7
 800650c:	55a3      	strb	r3, [r4, r6]
	int qrsize = qrcode[0];
 800650e:	7823      	ldrb	r3, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006510:	001e      	movs	r6, r3
 8006512:	3e15      	subs	r6, #21
 8006514:	b2f6      	uxtb	r6, r6
 8006516:	2e9c      	cmp	r6, #156	; 0x9c
 8006518:	d900      	bls.n	800651c <initializeFunctionModules+0xb24>
 800651a:	e69c      	b.n	8006256 <initializeFunctionModules+0x85e>
 800651c:	4298      	cmp	r0, r3
 800651e:	db00      	blt.n	8006522 <initializeFunctionModules+0xb2a>
 8006520:	e699      	b.n	8006256 <initializeFunctionModules+0x85e>
		qrcode[byteIndex] |= 1 << bitIndex;
 8006522:	0017      	movs	r7, r2
	int index = y * qrsize + x;
 8006524:	4343      	muls	r3, r0
 8006526:	3304      	adds	r3, #4
	int byteIndex = (index >> 3) + 1;
 8006528:	10de      	asrs	r6, r3, #3
	int bitIndex = index & 7;
 800652a:	402b      	ands	r3, r5
		qrcode[byteIndex] |= 1 << bitIndex;
 800652c:	409f      	lsls	r7, r3
 800652e:	003b      	movs	r3, r7
	int byteIndex = (index >> 3) + 1;
 8006530:	3601      	adds	r6, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8006532:	5da7      	ldrb	r7, [r4, r6]
 8006534:	433b      	orrs	r3, r7
 8006536:	55a3      	strb	r3, [r4, r6]
	int qrsize = qrcode[0];
 8006538:	7823      	ldrb	r3, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 800653a:	001e      	movs	r6, r3
 800653c:	3e15      	subs	r6, #21
 800653e:	b2f6      	uxtb	r6, r6
 8006540:	2e9c      	cmp	r6, #156	; 0x9c
 8006542:	d900      	bls.n	8006546 <initializeFunctionModules+0xb4e>
 8006544:	e687      	b.n	8006256 <initializeFunctionModules+0x85e>
 8006546:	4298      	cmp	r0, r3
 8006548:	db00      	blt.n	800654c <initializeFunctionModules+0xb54>
 800654a:	e684      	b.n	8006256 <initializeFunctionModules+0x85e>
		qrcode[byteIndex] |= 1 << bitIndex;
 800654c:	0016      	movs	r6, r2
	int index = y * qrsize + x;
 800654e:	4343      	muls	r3, r0
 8006550:	3305      	adds	r3, #5
	int byteIndex = (index >> 3) + 1;
 8006552:	10d8      	asrs	r0, r3, #3
	int bitIndex = index & 7;
 8006554:	402b      	ands	r3, r5
		qrcode[byteIndex] |= 1 << bitIndex;
 8006556:	409e      	lsls	r6, r3
 8006558:	0033      	movs	r3, r6
	int byteIndex = (index >> 3) + 1;
 800655a:	3001      	adds	r0, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 800655c:	5c26      	ldrb	r6, [r4, r0]
 800655e:	4333      	orrs	r3, r6
 8006560:	5423      	strb	r3, [r4, r0]
	int qrsize = qrcode[0];
 8006562:	7823      	ldrb	r3, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006564:	0018      	movs	r0, r3
 8006566:	3815      	subs	r0, #21
 8006568:	b2c0      	uxtb	r0, r0
 800656a:	289c      	cmp	r0, #156	; 0x9c
 800656c:	d900      	bls.n	8006570 <initializeFunctionModules+0xb78>
 800656e:	e672      	b.n	8006256 <initializeFunctionModules+0x85e>
 8006570:	4299      	cmp	r1, r3
 8006572:	db00      	blt.n	8006576 <initializeFunctionModules+0xb7e>
 8006574:	e66f      	b.n	8006256 <initializeFunctionModules+0x85e>
	int index = y * qrsize + x;
 8006576:	434b      	muls	r3, r1
	int bitIndex = index & 7;
 8006578:	401d      	ands	r5, r3
		qrcode[byteIndex] |= 1 << bitIndex;
 800657a:	40aa      	lsls	r2, r5
	int byteIndex = (index >> 3) + 1;
 800657c:	10d8      	asrs	r0, r3, #3
 800657e:	3001      	adds	r0, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8006580:	5c23      	ldrb	r3, [r4, r0]
 8006582:	431a      	orrs	r2, r3
 8006584:	5422      	strb	r2, [r4, r0]
	int qrsize = qrcode[0];
 8006586:	7823      	ldrb	r3, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006588:	001a      	movs	r2, r3
 800658a:	3a15      	subs	r2, #21
 800658c:	b2d2      	uxtb	r2, r2
 800658e:	2a9c      	cmp	r2, #156	; 0x9c
 8006590:	d900      	bls.n	8006594 <initializeFunctionModules+0xb9c>
 8006592:	e660      	b.n	8006256 <initializeFunctionModules+0x85e>
 8006594:	428b      	cmp	r3, r1
 8006596:	dc00      	bgt.n	800659a <initializeFunctionModules+0xba2>
 8006598:	e65d      	b.n	8006256 <initializeFunctionModules+0x85e>
		qrcode[byteIndex] |= 1 << bitIndex;
 800659a:	2201      	movs	r2, #1
	int bitIndex = index & 7;
 800659c:	2007      	movs	r0, #7
		qrcode[byteIndex] |= 1 << bitIndex;
 800659e:	0016      	movs	r6, r2
	int index = y * qrsize + x;
 80065a0:	434b      	muls	r3, r1
 80065a2:	1c5d      	adds	r5, r3, #1
	int bitIndex = index & 7;
 80065a4:	4005      	ands	r5, r0
		qrcode[byteIndex] |= 1 << bitIndex;
 80065a6:	40ae      	lsls	r6, r5
 80065a8:	0035      	movs	r5, r6
	int byteIndex = (index >> 3) + 1;
 80065aa:	10db      	asrs	r3, r3, #3
 80065ac:	3301      	adds	r3, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 80065ae:	5ce6      	ldrb	r6, [r4, r3]
 80065b0:	4335      	orrs	r5, r6
 80065b2:	54e5      	strb	r5, [r4, r3]
	int qrsize = qrcode[0];
 80065b4:	7823      	ldrb	r3, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 80065b6:	001d      	movs	r5, r3
 80065b8:	3d15      	subs	r5, #21
 80065ba:	b2ed      	uxtb	r5, r5
 80065bc:	2d9c      	cmp	r5, #156	; 0x9c
 80065be:	d900      	bls.n	80065c2 <initializeFunctionModules+0xbca>
 80065c0:	e649      	b.n	8006256 <initializeFunctionModules+0x85e>
 80065c2:	428b      	cmp	r3, r1
 80065c4:	dc00      	bgt.n	80065c8 <initializeFunctionModules+0xbd0>
 80065c6:	e646      	b.n	8006256 <initializeFunctionModules+0x85e>
		qrcode[byteIndex] |= 1 << bitIndex;
 80065c8:	0016      	movs	r6, r2
	int index = y * qrsize + x;
 80065ca:	434b      	muls	r3, r1
 80065cc:	1c9d      	adds	r5, r3, #2
	int bitIndex = index & 7;
 80065ce:	4005      	ands	r5, r0
		qrcode[byteIndex] |= 1 << bitIndex;
 80065d0:	40ae      	lsls	r6, r5
 80065d2:	0035      	movs	r5, r6
	int byteIndex = (index >> 3) + 1;
 80065d4:	10db      	asrs	r3, r3, #3
 80065d6:	3301      	adds	r3, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 80065d8:	5ce6      	ldrb	r6, [r4, r3]
 80065da:	4335      	orrs	r5, r6
 80065dc:	54e5      	strb	r5, [r4, r3]
	int qrsize = qrcode[0];
 80065de:	7823      	ldrb	r3, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 80065e0:	001d      	movs	r5, r3
 80065e2:	3d15      	subs	r5, #21
 80065e4:	b2ed      	uxtb	r5, r5
 80065e6:	2d9c      	cmp	r5, #156	; 0x9c
 80065e8:	d900      	bls.n	80065ec <initializeFunctionModules+0xbf4>
 80065ea:	e634      	b.n	8006256 <initializeFunctionModules+0x85e>
 80065ec:	428b      	cmp	r3, r1
 80065ee:	dc00      	bgt.n	80065f2 <initializeFunctionModules+0xbfa>
 80065f0:	e631      	b.n	8006256 <initializeFunctionModules+0x85e>
		qrcode[byteIndex] |= 1 << bitIndex;
 80065f2:	0016      	movs	r6, r2
	int index = y * qrsize + x;
 80065f4:	434b      	muls	r3, r1
 80065f6:	1cdd      	adds	r5, r3, #3
	int bitIndex = index & 7;
 80065f8:	4005      	ands	r5, r0
		qrcode[byteIndex] |= 1 << bitIndex;
 80065fa:	40ae      	lsls	r6, r5
 80065fc:	0035      	movs	r5, r6
	int byteIndex = (index >> 3) + 1;
 80065fe:	10db      	asrs	r3, r3, #3
 8006600:	3301      	adds	r3, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8006602:	5ce6      	ldrb	r6, [r4, r3]
 8006604:	4335      	orrs	r5, r6
 8006606:	54e5      	strb	r5, [r4, r3]
	int qrsize = qrcode[0];
 8006608:	7823      	ldrb	r3, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 800660a:	001d      	movs	r5, r3
 800660c:	3d15      	subs	r5, #21
 800660e:	b2ed      	uxtb	r5, r5
 8006610:	2d9c      	cmp	r5, #156	; 0x9c
 8006612:	d900      	bls.n	8006616 <initializeFunctionModules+0xc1e>
 8006614:	e61f      	b.n	8006256 <initializeFunctionModules+0x85e>
 8006616:	4299      	cmp	r1, r3
 8006618:	db00      	blt.n	800661c <initializeFunctionModules+0xc24>
 800661a:	e61c      	b.n	8006256 <initializeFunctionModules+0x85e>
		qrcode[byteIndex] |= 1 << bitIndex;
 800661c:	0016      	movs	r6, r2
	int index = y * qrsize + x;
 800661e:	434b      	muls	r3, r1
 8006620:	3304      	adds	r3, #4
	int byteIndex = (index >> 3) + 1;
 8006622:	10dd      	asrs	r5, r3, #3
	int bitIndex = index & 7;
 8006624:	4003      	ands	r3, r0
		qrcode[byteIndex] |= 1 << bitIndex;
 8006626:	409e      	lsls	r6, r3
 8006628:	0033      	movs	r3, r6
	int byteIndex = (index >> 3) + 1;
 800662a:	3501      	adds	r5, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 800662c:	5d66      	ldrb	r6, [r4, r5]
 800662e:	4333      	orrs	r3, r6
 8006630:	5563      	strb	r3, [r4, r5]
	int qrsize = qrcode[0];
 8006632:	7823      	ldrb	r3, [r4, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006634:	001d      	movs	r5, r3
 8006636:	3d15      	subs	r5, #21
 8006638:	b2ed      	uxtb	r5, r5
 800663a:	2d9c      	cmp	r5, #156	; 0x9c
 800663c:	d900      	bls.n	8006640 <initializeFunctionModules+0xc48>
 800663e:	e60a      	b.n	8006256 <initializeFunctionModules+0x85e>
 8006640:	4299      	cmp	r1, r3
 8006642:	db00      	blt.n	8006646 <initializeFunctionModules+0xc4e>
 8006644:	e607      	b.n	8006256 <initializeFunctionModules+0x85e>
	int index = y * qrsize + x;
 8006646:	434b      	muls	r3, r1
 8006648:	3305      	adds	r3, #5
	int byteIndex = (index >> 3) + 1;
 800664a:	10d9      	asrs	r1, r3, #3
	int bitIndex = index & 7;
 800664c:	4003      	ands	r3, r0
		qrcode[byteIndex] |= 1 << bitIndex;
 800664e:	409a      	lsls	r2, r3
	int byteIndex = (index >> 3) + 1;
 8006650:	3101      	adds	r1, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8006652:	5c63      	ldrb	r3, [r4, r1]
 8006654:	431a      	orrs	r2, r3
 8006656:	5462      	strb	r2, [r4, r1]
}
 8006658:	b00d      	add	sp, #52	; 0x34
 800665a:	bcf0      	pop	{r4, r5, r6, r7}
 800665c:	46bb      	mov	fp, r7
 800665e:	46b2      	mov	sl, r6
 8006660:	46a9      	mov	r9, r5
 8006662:	46a0      	mov	r8, r4
 8006664:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (!((i == 0 && j == 0) || (i == 0 && j == numAlign - 1) || (i == numAlign - 1 && j == 0)))
 8006666:	9b04      	ldr	r3, [sp, #16]
 8006668:	454b      	cmp	r3, r9
 800666a:	d000      	beq.n	800666e <initializeFunctionModules+0xc76>
 800666c:	e547      	b.n	80060fe <initializeFunctionModules+0x706>
 800666e:	e534      	b.n	80060da <initializeFunctionModules+0x6e2>
	int step = (version == 32) ? 26 :
 8006670:	201a      	movs	r0, #26
	for (int i = numAlign - 1, pos = version * 4 + 10; i >= 1; i--, pos -= step)
 8006672:	2505      	movs	r5, #5
 8006674:	e512      	b.n	800609c <initializeFunctionModules+0x6a4>
 8006676:	ab0a      	add	r3, sp, #40	; 0x28
 8006678:	9307      	str	r3, [sp, #28]
 800667a:	e518      	b.n	80060ae <initializeFunctionModules+0x6b6>

0800667c <setModuleBounded>:
testable void setModuleBounded(uint8_t qrcode[], int x, int y, bool isDark) {
 800667c:	b570      	push	{r4, r5, r6, lr}
	int qrsize = qrcode[0];
 800667e:	7804      	ldrb	r4, [r0, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006680:	0025      	movs	r5, r4
 8006682:	3d15      	subs	r5, #21
 8006684:	2d9c      	cmp	r5, #156	; 0x9c
 8006686:	d819      	bhi.n	80066bc <setModuleBounded+0x40>
 8006688:	428c      	cmp	r4, r1
 800668a:	d917      	bls.n	80066bc <setModuleBounded+0x40>
 800668c:	4294      	cmp	r4, r2
 800668e:	d915      	bls.n	80066bc <setModuleBounded+0x40>
	int index = y * qrsize + x;
 8006690:	4362      	muls	r2, r4
 8006692:	1852      	adds	r2, r2, r1
	int bitIndex = index & 7;
 8006694:	2107      	movs	r1, #7
 8006696:	4011      	ands	r1, r2
	int byteIndex = (index >> 3) + 1;
 8006698:	10d2      	asrs	r2, r2, #3
 800669a:	3201      	adds	r2, #1
	if (isDark)
 800669c:	2b00      	cmp	r3, #0
 800669e:	d106      	bne.n	80066ae <setModuleBounded+0x32>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 80066a0:	2301      	movs	r3, #1
 80066a2:	408b      	lsls	r3, r1
 80066a4:	0019      	movs	r1, r3
 80066a6:	5c83      	ldrb	r3, [r0, r2]
 80066a8:	438b      	bics	r3, r1
 80066aa:	5483      	strb	r3, [r0, r2]
}
 80066ac:	bd70      	pop	{r4, r5, r6, pc}
		qrcode[byteIndex] |= 1 << bitIndex;
 80066ae:	2301      	movs	r3, #1
 80066b0:	408b      	lsls	r3, r1
 80066b2:	0019      	movs	r1, r3
 80066b4:	5c83      	ldrb	r3, [r0, r2]
 80066b6:	430b      	orrs	r3, r1
 80066b8:	5483      	strb	r3, [r0, r2]
 80066ba:	e7f7      	b.n	80066ac <setModuleBounded+0x30>
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 80066bc:	21c4      	movs	r1, #196	; 0xc4
 80066be:	4b03      	ldr	r3, [pc, #12]	; (80066cc <setModuleBounded+0x50>)
 80066c0:	4a03      	ldr	r2, [pc, #12]	; (80066d0 <setModuleBounded+0x54>)
 80066c2:	4804      	ldr	r0, [pc, #16]	; (80066d4 <setModuleBounded+0x58>)
 80066c4:	0089      	lsls	r1, r1, #2
 80066c6:	f002 ff57 	bl	8009578 <__assert_func>
 80066ca:	46c0      	nop			; (mov r8, r8)
 80066cc:	0800e368 	.word	0x0800e368
 80066d0:	0800e8c4 	.word	0x0800e8c4
 80066d4:	0800e204 	.word	0x0800e204

080066d8 <drawFormatBits>:
static void drawFormatBits(enum qrcodegen_Ecc ecl, enum qrcodegen_Mask mask, uint8_t qrcode[]) {
 80066d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066da:	46de      	mov	lr, fp
 80066dc:	4657      	mov	r7, sl
 80066de:	464e      	mov	r6, r9
 80066e0:	4645      	mov	r5, r8
 80066e2:	b5e0      	push	{r5, r6, r7, lr}
	assert(0 <= (int)mask && (int)mask <= 7);
 80066e4:	b2cb      	uxtb	r3, r1
static void drawFormatBits(enum qrcodegen_Ecc ecl, enum qrcodegen_Mask mask, uint8_t qrcode[]) {
 80066e6:	b08d      	sub	sp, #52	; 0x34
 80066e8:	9201      	str	r2, [sp, #4]
	assert(0 <= (int)mask && (int)mask <= 7);
 80066ea:	2b07      	cmp	r3, #7
 80066ec:	d901      	bls.n	80066f2 <drawFormatBits+0x1a>
 80066ee:	f000 fcf6 	bl	80070de <drawFormatBits+0xa06>
	int data = table[(int)ecl] << 3 | (int)mask;  // errCorrLvl is uint2, mask is uint3
 80066f2:	4be6      	ldr	r3, [pc, #920]	; (8006a8c <drawFormatBits+0x3b4>)
 80066f4:	0080      	lsls	r0, r0, #2
 80066f6:	58c4      	ldr	r4, [r0, r3]
 80066f8:	00e4      	lsls	r4, r4, #3
 80066fa:	430c      	orrs	r4, r1
		rem = (rem << 1) ^ ((rem >> 9) * 0x537);
 80066fc:	49e4      	ldr	r1, [pc, #912]	; (8006a90 <drawFormatBits+0x3b8>)
 80066fe:	1260      	asrs	r0, r4, #9
 8006700:	4348      	muls	r0, r1
 8006702:	0063      	lsls	r3, r4, #1
 8006704:	4058      	eors	r0, r3
 8006706:	0043      	lsls	r3, r0, #1
 8006708:	1240      	asrs	r0, r0, #9
 800670a:	4348      	muls	r0, r1
 800670c:	4058      	eors	r0, r3
 800670e:	0043      	lsls	r3, r0, #1
 8006710:	1240      	asrs	r0, r0, #9
 8006712:	4348      	muls	r0, r1
 8006714:	4058      	eors	r0, r3
 8006716:	0043      	lsls	r3, r0, #1
 8006718:	1240      	asrs	r0, r0, #9
 800671a:	4348      	muls	r0, r1
 800671c:	4043      	eors	r3, r0
 800671e:	0058      	lsls	r0, r3, #1
 8006720:	125b      	asrs	r3, r3, #9
 8006722:	434b      	muls	r3, r1
 8006724:	4058      	eors	r0, r3
 8006726:	0043      	lsls	r3, r0, #1
 8006728:	1240      	asrs	r0, r0, #9
 800672a:	4348      	muls	r0, r1
 800672c:	4043      	eors	r3, r0
 800672e:	0058      	lsls	r0, r3, #1
 8006730:	125b      	asrs	r3, r3, #9
 8006732:	434b      	muls	r3, r1
 8006734:	4058      	eors	r0, r3
 8006736:	0043      	lsls	r3, r0, #1
 8006738:	1240      	asrs	r0, r0, #9
 800673a:	4348      	muls	r0, r1
 800673c:	4043      	eors	r3, r0
 800673e:	0058      	lsls	r0, r3, #1
 8006740:	125b      	asrs	r3, r3, #9
 8006742:	434b      	muls	r3, r1
 8006744:	4043      	eors	r3, r0
 8006746:	0058      	lsls	r0, r3, #1
 8006748:	125b      	asrs	r3, r3, #9
 800674a:	4359      	muls	r1, r3
	int bits = (data << 10 | rem) ^ 0x5412;  // uint15
 800674c:	02a4      	lsls	r4, r4, #10
 800674e:	4bd1      	ldr	r3, [pc, #836]	; (8006a94 <drawFormatBits+0x3bc>)
		rem = (rem << 1) ^ ((rem >> 9) * 0x537);
 8006750:	4041      	eors	r1, r0
	int bits = (data << 10 | rem) ^ 0x5412;  // uint15
 8006752:	4321      	orrs	r1, r4
 8006754:	404b      	eors	r3, r1
	assert(bits >> 15 == 0);
 8006756:	13d9      	asrs	r1, r3, #15
 8006758:	d001      	beq.n	800675e <drawFormatBits+0x86>
 800675a:	f000 fcb9 	bl	80070d0 <drawFormatBits+0x9f8>
	return ((x >> i) & 1) != 0;
 800675e:	2401      	movs	r4, #1
	int qrsize = qrcode[0];
 8006760:	7811      	ldrb	r1, [r2, #0]
	return ((x >> i) & 1) != 0;
 8006762:	0027      	movs	r7, r4
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006764:	0008      	movs	r0, r1
 8006766:	3815      	subs	r0, #21
 8006768:	b2c0      	uxtb	r0, r0
	return ((x >> i) & 1) != 0;
 800676a:	401f      	ands	r7, r3
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 800676c:	289c      	cmp	r0, #156	; 0x9c
 800676e:	d901      	bls.n	8006774 <drawFormatBits+0x9c>
 8006770:	f000 fca7 	bl	80070c2 <drawFormatBits+0x9ea>
		qrcode[byteIndex] |= 1 << bitIndex;
 8006774:	7890      	ldrb	r0, [r2, #2]
	if (isDark)
 8006776:	2f00      	cmp	r7, #0
 8006778:	d000      	beq.n	800677c <drawFormatBits+0xa4>
 800677a:	e3aa      	b.n	8006ed2 <drawFormatBits+0x7fa>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 800677c:	43a0      	bics	r0, r4
 800677e:	7090      	strb	r0, [r2, #2]
	return ((x >> i) & 1) != 0;
 8006780:	2001      	movs	r0, #1
	int bitIndex = index & 7;
 8006782:	2507      	movs	r5, #7
	return ((x >> i) & 1) != 0;
 8006784:	0002      	movs	r2, r0
	int index = y * qrsize + x;
 8006786:	3108      	adds	r1, #8
	return ((x >> i) & 1) != 0;
 8006788:	105c      	asrs	r4, r3, #1
 800678a:	4022      	ands	r2, r4
	int bitIndex = index & 7;
 800678c:	400d      	ands	r5, r1
	int byteIndex = (index >> 3) + 1;
 800678e:	10c9      	asrs	r1, r1, #3
	return ((x >> i) & 1) != 0;
 8006790:	4694      	mov	ip, r2
	int byteIndex = (index >> 3) + 1;
 8006792:	3101      	adds	r1, #1
	if (isDark)
 8006794:	4220      	tst	r0, r4
 8006796:	d000      	beq.n	800679a <drawFormatBits+0xc2>
 8006798:	e39f      	b.n	8006eda <drawFormatBits+0x802>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 800679a:	40a8      	lsls	r0, r5
 800679c:	9a01      	ldr	r2, [sp, #4]
 800679e:	5c54      	ldrb	r4, [r2, r1]
 80067a0:	4384      	bics	r4, r0
 80067a2:	5454      	strb	r4, [r2, r1]
	int qrsize = qrcode[0];
 80067a4:	7811      	ldrb	r1, [r2, #0]
	return ((x >> i) & 1) != 0;
 80067a6:	2001      	movs	r0, #1
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 80067a8:	000d      	movs	r5, r1
 80067aa:	3d15      	subs	r5, #21
	return ((x >> i) & 1) != 0;
 80067ac:	109c      	asrs	r4, r3, #2
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 80067ae:	b2ed      	uxtb	r5, r5
	return ((x >> i) & 1) != 0;
 80067b0:	4004      	ands	r4, r0
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 80067b2:	2d9c      	cmp	r5, #156	; 0x9c
 80067b4:	d901      	bls.n	80067ba <drawFormatBits+0xe2>
 80067b6:	f000 fc84 	bl	80070c2 <drawFormatBits+0x9ea>
	int bitIndex = index & 7;
 80067ba:	2507      	movs	r5, #7
	int index = y * qrsize + x;
 80067bc:	0049      	lsls	r1, r1, #1
 80067be:	3108      	adds	r1, #8
	int bitIndex = index & 7;
 80067c0:	400d      	ands	r5, r1
	int byteIndex = (index >> 3) + 1;
 80067c2:	10c9      	asrs	r1, r1, #3
		qrcode[byteIndex] |= 1 << bitIndex;
 80067c4:	40a8      	lsls	r0, r5
	int byteIndex = (index >> 3) + 1;
 80067c6:	3101      	adds	r1, #1
	if (isDark)
 80067c8:	2c00      	cmp	r4, #0
 80067ca:	d000      	beq.n	80067ce <drawFormatBits+0xf6>
 80067cc:	e38b      	b.n	8006ee6 <drawFormatBits+0x80e>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 80067ce:	0005      	movs	r5, r0
 80067d0:	5c50      	ldrb	r0, [r2, r1]
 80067d2:	43a8      	bics	r0, r5
 80067d4:	5450      	strb	r0, [r2, r1]
	int qrsize = qrcode[0];
 80067d6:	7816      	ldrb	r6, [r2, #0]
	return ((x >> i) & 1) != 0;
 80067d8:	2501      	movs	r5, #1
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 80067da:	0031      	movs	r1, r6
 80067dc:	3915      	subs	r1, #21
	return ((x >> i) & 1) != 0;
 80067de:	10d8      	asrs	r0, r3, #3
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 80067e0:	b2c9      	uxtb	r1, r1
	return ((x >> i) & 1) != 0;
 80067e2:	4028      	ands	r0, r5
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 80067e4:	299c      	cmp	r1, #156	; 0x9c
 80067e6:	d901      	bls.n	80067ec <drawFormatBits+0x114>
 80067e8:	f000 fc6b 	bl	80070c2 <drawFormatBits+0x9ea>
	int index = y * qrsize + x;
 80067ec:	0071      	lsls	r1, r6, #1
 80067ee:	1989      	adds	r1, r1, r6
	int bitIndex = index & 7;
 80067f0:	2607      	movs	r6, #7
	int index = y * qrsize + x;
 80067f2:	3108      	adds	r1, #8
	int bitIndex = index & 7;
 80067f4:	400e      	ands	r6, r1
	int byteIndex = (index >> 3) + 1;
 80067f6:	10c9      	asrs	r1, r1, #3
		qrcode[byteIndex] |= 1 << bitIndex;
 80067f8:	40b5      	lsls	r5, r6
	int byteIndex = (index >> 3) + 1;
 80067fa:	3101      	adds	r1, #1
	if (isDark)
 80067fc:	2800      	cmp	r0, #0
 80067fe:	d000      	beq.n	8006802 <drawFormatBits+0x12a>
 8006800:	e37c      	b.n	8006efc <drawFormatBits+0x824>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8006802:	002e      	movs	r6, r5
 8006804:	5c55      	ldrb	r5, [r2, r1]
 8006806:	43b5      	bics	r5, r6
 8006808:	5455      	strb	r5, [r2, r1]
	int qrsize = qrcode[0];
 800680a:	7815      	ldrb	r5, [r2, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 800680c:	2215      	movs	r2, #21
 800680e:	4252      	negs	r2, r2
 8006810:	4690      	mov	r8, r2
 8006812:	44a8      	add	r8, r5
	return ((x >> i) & 1) != 0;
 8006814:	2601      	movs	r6, #1
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006816:	4642      	mov	r2, r8
	return ((x >> i) & 1) != 0;
 8006818:	1119      	asrs	r1, r3, #4
 800681a:	4031      	ands	r1, r6
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 800681c:	b2d2      	uxtb	r2, r2
	return ((x >> i) & 1) != 0;
 800681e:	9102      	str	r1, [sp, #8]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006820:	2a9c      	cmp	r2, #156	; 0x9c
 8006822:	d901      	bls.n	8006828 <drawFormatBits+0x150>
 8006824:	f000 fc4d 	bl	80070c2 <drawFormatBits+0x9ea>
	int bitIndex = index & 7;
 8006828:	2207      	movs	r2, #7
	int index = y * qrsize + x;
 800682a:	00ad      	lsls	r5, r5, #2
 800682c:	3508      	adds	r5, #8
	int bitIndex = index & 7;
 800682e:	402a      	ands	r2, r5
	int byteIndex = (index >> 3) + 1;
 8006830:	10ed      	asrs	r5, r5, #3
 8006832:	3501      	adds	r5, #1
	if (isDark)
 8006834:	2900      	cmp	r1, #0
 8006836:	d000      	beq.n	800683a <drawFormatBits+0x162>
 8006838:	e359      	b.n	8006eee <drawFormatBits+0x816>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 800683a:	4096      	lsls	r6, r2
 800683c:	46b0      	mov	r8, r6
 800683e:	4642      	mov	r2, r8
 8006840:	9901      	ldr	r1, [sp, #4]
 8006842:	5d4e      	ldrb	r6, [r1, r5]
 8006844:	4396      	bics	r6, r2
 8006846:	000a      	movs	r2, r1
 8006848:	554e      	strb	r6, [r1, r5]
	return ((x >> i) & 1) != 0;
 800684a:	2601      	movs	r6, #1
	int qrsize = qrcode[0];
 800684c:	7812      	ldrb	r2, [r2, #0]
	return ((x >> i) & 1) != 0;
 800684e:	115d      	asrs	r5, r3, #5
 8006850:	4035      	ands	r5, r6
 8006852:	46a8      	mov	r8, r5
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006854:	0015      	movs	r5, r2
 8006856:	3d15      	subs	r5, #21
 8006858:	b2ed      	uxtb	r5, r5
	int qrsize = qrcode[0];
 800685a:	4691      	mov	r9, r2
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 800685c:	2d9c      	cmp	r5, #156	; 0x9c
 800685e:	d901      	bls.n	8006864 <drawFormatBits+0x18c>
 8006860:	f000 fc2f 	bl	80070c2 <drawFormatBits+0x9ea>
	int index = y * qrsize + x;
 8006864:	0095      	lsls	r5, r2, #2
	int bitIndex = index & 7;
 8006866:	2207      	movs	r2, #7
	int index = y * qrsize + x;
 8006868:	444d      	add	r5, r9
 800686a:	3508      	adds	r5, #8
	int bitIndex = index & 7;
 800686c:	402a      	ands	r2, r5
 800686e:	4691      	mov	r9, r2
	if (isDark)
 8006870:	4642      	mov	r2, r8
	int byteIndex = (index >> 3) + 1;
 8006872:	10ed      	asrs	r5, r5, #3
 8006874:	3501      	adds	r5, #1
	if (isDark)
 8006876:	2a00      	cmp	r2, #0
 8006878:	d100      	bne.n	800687c <drawFormatBits+0x1a4>
 800687a:	e343      	b.n	8006f04 <drawFormatBits+0x82c>
		qrcode[byteIndex] |= 1 << bitIndex;
 800687c:	464a      	mov	r2, r9
 800687e:	4096      	lsls	r6, r2
 8006880:	46b1      	mov	r9, r6
 8006882:	464a      	mov	r2, r9
 8006884:	9901      	ldr	r1, [sp, #4]
 8006886:	5d4e      	ldrb	r6, [r1, r5]
 8006888:	4316      	orrs	r6, r2
 800688a:	000a      	movs	r2, r1
 800688c:	554e      	strb	r6, [r1, r5]
	return ((x >> i) & 1) != 0;
 800688e:	2601      	movs	r6, #1
	int qrsize = qrcode[0];
 8006890:	7812      	ldrb	r2, [r2, #0]
	return ((x >> i) & 1) != 0;
 8006892:	119d      	asrs	r5, r3, #6
 8006894:	4035      	ands	r5, r6
 8006896:	0029      	movs	r1, r5
 8006898:	9503      	str	r5, [sp, #12]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 800689a:	0015      	movs	r5, r2
 800689c:	3d15      	subs	r5, #21
 800689e:	b2ed      	uxtb	r5, r5
 80068a0:	2d9c      	cmp	r5, #156	; 0x9c
 80068a2:	d901      	bls.n	80068a8 <drawFormatBits+0x1d0>
 80068a4:	f000 fc0d 	bl	80070c2 <drawFormatBits+0x9ea>
	int index = y * qrsize + x;
 80068a8:	00d5      	lsls	r5, r2, #3
 80068aa:	1aad      	subs	r5, r5, r2
	int bitIndex = index & 7;
 80068ac:	2207      	movs	r2, #7
	int index = y * qrsize + x;
 80068ae:	3508      	adds	r5, #8
	int bitIndex = index & 7;
 80068b0:	402a      	ands	r2, r5
	int byteIndex = (index >> 3) + 1;
 80068b2:	10ed      	asrs	r5, r5, #3
	int bitIndex = index & 7;
 80068b4:	4692      	mov	sl, r2
	int byteIndex = (index >> 3) + 1;
 80068b6:	3501      	adds	r5, #1
	if (isDark)
 80068b8:	2900      	cmp	r1, #0
 80068ba:	d100      	bne.n	80068be <drawFormatBits+0x1e6>
 80068bc:	e32a      	b.n	8006f14 <drawFormatBits+0x83c>
		qrcode[byteIndex] |= 1 << bitIndex;
 80068be:	4652      	mov	r2, sl
 80068c0:	4096      	lsls	r6, r2
 80068c2:	46b2      	mov	sl, r6
 80068c4:	4652      	mov	r2, sl
 80068c6:	9901      	ldr	r1, [sp, #4]
 80068c8:	5d4e      	ldrb	r6, [r1, r5]
 80068ca:	4316      	orrs	r6, r2
 80068cc:	000a      	movs	r2, r1
 80068ce:	554e      	strb	r6, [r1, r5]
	return ((x >> i) & 1) != 0;
 80068d0:	2601      	movs	r6, #1
 80068d2:	11dd      	asrs	r5, r3, #7
 80068d4:	4035      	ands	r5, r6
 80068d6:	0029      	movs	r1, r5
 80068d8:	9504      	str	r5, [sp, #16]
	int qrsize = qrcode[0];
 80068da:	7815      	ldrb	r5, [r2, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 80068dc:	2215      	movs	r2, #21
 80068de:	4252      	negs	r2, r2
 80068e0:	4692      	mov	sl, r2
 80068e2:	44aa      	add	sl, r5
 80068e4:	4652      	mov	r2, sl
 80068e6:	b2d2      	uxtb	r2, r2
 80068e8:	2a9c      	cmp	r2, #156	; 0x9c
 80068ea:	d900      	bls.n	80068ee <drawFormatBits+0x216>
 80068ec:	e3e9      	b.n	80070c2 <drawFormatBits+0x9ea>
	if (isDark)
 80068ee:	000a      	movs	r2, r1
	int byteIndex = (index >> 3) + 1;
 80068f0:	3502      	adds	r5, #2
		qrcode[byteIndex] |= 1 << bitIndex;
 80068f2:	9901      	ldr	r1, [sp, #4]
	if (isDark)
 80068f4:	2a00      	cmp	r2, #0
 80068f6:	d100      	bne.n	80068fa <drawFormatBits+0x222>
 80068f8:	e313      	b.n	8006f22 <drawFormatBits+0x84a>
		qrcode[byteIndex] |= 1 << bitIndex;
 80068fa:	2201      	movs	r2, #1
 80068fc:	4692      	mov	sl, r2
 80068fe:	4652      	mov	r2, sl
 8006900:	5d4e      	ldrb	r6, [r1, r5]
 8006902:	4316      	orrs	r6, r2
 8006904:	554e      	strb	r6, [r1, r5]
	return ((x >> i) & 1) != 0;
 8006906:	05dd      	lsls	r5, r3, #23
 8006908:	0fea      	lsrs	r2, r5, #31
	int qrsize = qrcode[0];
 800690a:	780d      	ldrb	r5, [r1, #0]
	return ((x >> i) & 1) != 0;
 800690c:	9205      	str	r2, [sp, #20]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 800690e:	002e      	movs	r6, r5
 8006910:	3e15      	subs	r6, #21
 8006912:	b2f6      	uxtb	r6, r6
 8006914:	2e9c      	cmp	r6, #156	; 0x9c
 8006916:	d900      	bls.n	800691a <drawFormatBits+0x242>
 8006918:	e3d3      	b.n	80070c2 <drawFormatBits+0x9ea>
	int byteIndex = (index >> 3) + 1;
 800691a:	3501      	adds	r5, #1
	if (isDark)
 800691c:	2a00      	cmp	r2, #0
 800691e:	d100      	bne.n	8006922 <drawFormatBits+0x24a>
 8006920:	e303      	b.n	8006f2a <drawFormatBits+0x852>
		qrcode[byteIndex] |= 1 << bitIndex;
 8006922:	2680      	movs	r6, #128	; 0x80
 8006924:	5d4a      	ldrb	r2, [r1, r5]
 8006926:	4276      	negs	r6, r6
 8006928:	4316      	orrs	r6, r2
 800692a:	554e      	strb	r6, [r1, r5]
	return ((x >> i) & 1) != 0;
 800692c:	125d      	asrs	r5, r3, #9
 800692e:	002a      	movs	r2, r5
 8006930:	2601      	movs	r6, #1
	int qrsize = qrcode[0];
 8006932:	780d      	ldrb	r5, [r1, #0]
	return ((x >> i) & 1) != 0;
 8006934:	4032      	ands	r2, r6
 8006936:	9206      	str	r2, [sp, #24]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006938:	2d05      	cmp	r5, #5
 800693a:	dc00      	bgt.n	800693e <drawFormatBits+0x266>
 800693c:	e3c1      	b.n	80070c2 <drawFormatBits+0x9ea>
 800693e:	2115      	movs	r1, #21
 8006940:	4249      	negs	r1, r1
 8006942:	468a      	mov	sl, r1
 8006944:	44aa      	add	sl, r5
 8006946:	4651      	mov	r1, sl
 8006948:	b2c9      	uxtb	r1, r1
 800694a:	299c      	cmp	r1, #156	; 0x9c
 800694c:	d900      	bls.n	8006950 <drawFormatBits+0x278>
 800694e:	e3b8      	b.n	80070c2 <drawFormatBits+0x9ea>
	int bitIndex = index & 7;
 8006950:	2105      	movs	r1, #5
	int byteIndex = (index >> 3) + 1;
 8006952:	3501      	adds	r5, #1
	if (isDark)
 8006954:	2a00      	cmp	r2, #0
 8006956:	d000      	beq.n	800695a <drawFormatBits+0x282>
 8006958:	e2ec      	b.n	8006f34 <drawFormatBits+0x85c>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 800695a:	408e      	lsls	r6, r1
 800695c:	46b2      	mov	sl, r6
 800695e:	4652      	mov	r2, sl
 8006960:	9901      	ldr	r1, [sp, #4]
 8006962:	5d4e      	ldrb	r6, [r1, r5]
 8006964:	4396      	bics	r6, r2
 8006966:	554e      	strb	r6, [r1, r5]
	return ((x >> i) & 1) != 0;
 8006968:	129d      	asrs	r5, r3, #10
 800696a:	002a      	movs	r2, r5
 800696c:	2601      	movs	r6, #1
	int qrsize = qrcode[0];
 800696e:	780d      	ldrb	r5, [r1, #0]
	return ((x >> i) & 1) != 0;
 8006970:	4032      	ands	r2, r6
 8006972:	9207      	str	r2, [sp, #28]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006974:	2d04      	cmp	r5, #4
 8006976:	dc00      	bgt.n	800697a <drawFormatBits+0x2a2>
 8006978:	e3a3      	b.n	80070c2 <drawFormatBits+0x9ea>
 800697a:	2115      	movs	r1, #21
 800697c:	4249      	negs	r1, r1
 800697e:	468a      	mov	sl, r1
 8006980:	44aa      	add	sl, r5
 8006982:	4651      	mov	r1, sl
 8006984:	b2c9      	uxtb	r1, r1
 8006986:	299c      	cmp	r1, #156	; 0x9c
 8006988:	d900      	bls.n	800698c <drawFormatBits+0x2b4>
 800698a:	e39a      	b.n	80070c2 <drawFormatBits+0x9ea>
	int bitIndex = index & 7;
 800698c:	2104      	movs	r1, #4
	int byteIndex = (index >> 3) + 1;
 800698e:	3501      	adds	r5, #1
	if (isDark)
 8006990:	2a00      	cmp	r2, #0
 8006992:	d000      	beq.n	8006996 <drawFormatBits+0x2be>
 8006994:	e2d4      	b.n	8006f40 <drawFormatBits+0x868>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8006996:	408e      	lsls	r6, r1
 8006998:	46b2      	mov	sl, r6
 800699a:	4652      	mov	r2, sl
 800699c:	9901      	ldr	r1, [sp, #4]
 800699e:	5d4e      	ldrb	r6, [r1, r5]
 80069a0:	4396      	bics	r6, r2
 80069a2:	554e      	strb	r6, [r1, r5]
	return ((x >> i) & 1) != 0;
 80069a4:	12dd      	asrs	r5, r3, #11
 80069a6:	2201      	movs	r2, #1
 80069a8:	0029      	movs	r1, r5
	int qrsize = qrcode[0];
 80069aa:	9d01      	ldr	r5, [sp, #4]
	return ((x >> i) & 1) != 0;
 80069ac:	4011      	ands	r1, r2
	int qrsize = qrcode[0];
 80069ae:	782e      	ldrb	r6, [r5, #0]
	return ((x >> i) & 1) != 0;
 80069b0:	4692      	mov	sl, r2
 80069b2:	9108      	str	r1, [sp, #32]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 80069b4:	2e03      	cmp	r6, #3
 80069b6:	dc00      	bgt.n	80069ba <drawFormatBits+0x2e2>
 80069b8:	e383      	b.n	80070c2 <drawFormatBits+0x9ea>
 80069ba:	3a16      	subs	r2, #22
 80069bc:	4693      	mov	fp, r2
 80069be:	44b3      	add	fp, r6
 80069c0:	465a      	mov	r2, fp
 80069c2:	b2d2      	uxtb	r2, r2
 80069c4:	2a9c      	cmp	r2, #156	; 0x9c
 80069c6:	d900      	bls.n	80069ca <drawFormatBits+0x2f2>
 80069c8:	e37b      	b.n	80070c2 <drawFormatBits+0x9ea>
	int bitIndex = index & 7;
 80069ca:	2203      	movs	r2, #3
	int byteIndex = (index >> 3) + 1;
 80069cc:	3601      	adds	r6, #1
	int bitIndex = index & 7;
 80069ce:	4693      	mov	fp, r2
		qrcode[byteIndex] |= 1 << bitIndex;
 80069d0:	4652      	mov	r2, sl
	if (isDark)
 80069d2:	2900      	cmp	r1, #0
 80069d4:	d000      	beq.n	80069d8 <drawFormatBits+0x300>
 80069d6:	e2c3      	b.n	8006f60 <drawFormatBits+0x888>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 80069d8:	4659      	mov	r1, fp
 80069da:	408a      	lsls	r2, r1
 80069dc:	4692      	mov	sl, r2
 80069de:	4651      	mov	r1, sl
 80069e0:	5daa      	ldrb	r2, [r5, r6]
 80069e2:	438a      	bics	r2, r1
 80069e4:	55aa      	strb	r2, [r5, r6]
	return ((x >> i) & 1) != 0;
 80069e6:	2201      	movs	r2, #1
 80069e8:	131e      	asrs	r6, r3, #12
 80069ea:	4692      	mov	sl, r2
 80069ec:	4032      	ands	r2, r6
	int qrsize = qrcode[0];
 80069ee:	782e      	ldrb	r6, [r5, #0]
	return ((x >> i) & 1) != 0;
 80069f0:	920a      	str	r2, [sp, #40]	; 0x28
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 80069f2:	2e02      	cmp	r6, #2
 80069f4:	dc00      	bgt.n	80069f8 <drawFormatBits+0x320>
 80069f6:	e364      	b.n	80070c2 <drawFormatBits+0x9ea>
 80069f8:	2115      	movs	r1, #21
 80069fa:	4249      	negs	r1, r1
 80069fc:	468b      	mov	fp, r1
 80069fe:	44b3      	add	fp, r6
 8006a00:	4659      	mov	r1, fp
 8006a02:	b2c9      	uxtb	r1, r1
 8006a04:	299c      	cmp	r1, #156	; 0x9c
 8006a06:	d900      	bls.n	8006a0a <drawFormatBits+0x332>
 8006a08:	e35b      	b.n	80070c2 <drawFormatBits+0x9ea>
	int bitIndex = index & 7;
 8006a0a:	2102      	movs	r1, #2
	int byteIndex = (index >> 3) + 1;
 8006a0c:	3601      	adds	r6, #1
	if (isDark)
 8006a0e:	2a00      	cmp	r2, #0
 8006a10:	d000      	beq.n	8006a14 <drawFormatBits+0x33c>
 8006a12:	e29b      	b.n	8006f4c <drawFormatBits+0x874>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8006a14:	4652      	mov	r2, sl
 8006a16:	408a      	lsls	r2, r1
 8006a18:	4692      	mov	sl, r2
 8006a1a:	4651      	mov	r1, sl
 8006a1c:	5daa      	ldrb	r2, [r5, r6]
 8006a1e:	438a      	bics	r2, r1
 8006a20:	55aa      	strb	r2, [r5, r6]
	return ((x >> i) & 1) != 0;
 8006a22:	2201      	movs	r2, #1
 8006a24:	135e      	asrs	r6, r3, #13
 8006a26:	4692      	mov	sl, r2
 8006a28:	4032      	ands	r2, r6
	int qrsize = qrcode[0];
 8006a2a:	782e      	ldrb	r6, [r5, #0]
	return ((x >> i) & 1) != 0;
 8006a2c:	920b      	str	r2, [sp, #44]	; 0x2c
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006a2e:	2e01      	cmp	r6, #1
 8006a30:	dc00      	bgt.n	8006a34 <drawFormatBits+0x35c>
 8006a32:	e346      	b.n	80070c2 <drawFormatBits+0x9ea>
 8006a34:	2115      	movs	r1, #21
 8006a36:	4249      	negs	r1, r1
 8006a38:	468b      	mov	fp, r1
 8006a3a:	44b3      	add	fp, r6
 8006a3c:	4659      	mov	r1, fp
 8006a3e:	b2c9      	uxtb	r1, r1
 8006a40:	299c      	cmp	r1, #156	; 0x9c
 8006a42:	d900      	bls.n	8006a46 <drawFormatBits+0x36e>
 8006a44:	e33d      	b.n	80070c2 <drawFormatBits+0x9ea>
	int bitIndex = index & 7;
 8006a46:	2101      	movs	r1, #1
	int byteIndex = (index >> 3) + 1;
 8006a48:	3601      	adds	r6, #1
	if (isDark)
 8006a4a:	2a00      	cmp	r2, #0
 8006a4c:	d000      	beq.n	8006a50 <drawFormatBits+0x378>
 8006a4e:	e291      	b.n	8006f74 <drawFormatBits+0x89c>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8006a50:	4652      	mov	r2, sl
 8006a52:	408a      	lsls	r2, r1
 8006a54:	4692      	mov	sl, r2
 8006a56:	4651      	mov	r1, sl
 8006a58:	5daa      	ldrb	r2, [r5, r6]
 8006a5a:	438a      	bics	r2, r1
 8006a5c:	0029      	movs	r1, r5
 8006a5e:	55aa      	strb	r2, [r5, r6]
	return ((x >> i) & 1) != 0;
 8006a60:	139a      	asrs	r2, r3, #14
	int qrsize = qrcode[0];
 8006a62:	780b      	ldrb	r3, [r1, #0]
	return ((x >> i) & 1) != 0;
 8006a64:	9209      	str	r2, [sp, #36]	; 0x24
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d100      	bne.n	8006a6c <drawFormatBits+0x394>
 8006a6a:	e32a      	b.n	80070c2 <drawFormatBits+0x9ea>
 8006a6c:	001e      	movs	r6, r3
 8006a6e:	3e15      	subs	r6, #21
 8006a70:	b2f6      	uxtb	r6, r6
 8006a72:	2e9c      	cmp	r6, #156	; 0x9c
 8006a74:	d900      	bls.n	8006a78 <drawFormatBits+0x3a0>
 8006a76:	e324      	b.n	80070c2 <drawFormatBits+0x9ea>
	int byteIndex = (index >> 3) + 1;
 8006a78:	3301      	adds	r3, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8006a7a:	5cce      	ldrb	r6, [r1, r3]
	if (isDark)
 8006a7c:	2a00      	cmp	r2, #0
 8006a7e:	d100      	bne.n	8006a82 <drawFormatBits+0x3aa>
 8006a80:	e283      	b.n	8006f8a <drawFormatBits+0x8b2>
		qrcode[byteIndex] |= 1 << bitIndex;
 8006a82:	2201      	movs	r2, #1
 8006a84:	4316      	orrs	r6, r2
 8006a86:	54ce      	strb	r6, [r1, r3]
 8006a88:	000b      	movs	r3, r1
 8006a8a:	e005      	b.n	8006a98 <drawFormatBits+0x3c0>
 8006a8c:	0800e9e0 	.word	0x0800e9e0
 8006a90:	00000537 	.word	0x00000537
 8006a94:	00005412 	.word	0x00005412
	int result = qrcode[0];
 8006a98:	781b      	ldrb	r3, [r3, #0]
	assert((qrcodegen_VERSION_MIN * 4 + 17) <= result
 8006a9a:	001e      	movs	r6, r3
 8006a9c:	3e15      	subs	r6, #21
 8006a9e:	2e24      	cmp	r6, #36	; 0x24
 8006aa0:	d900      	bls.n	8006aa4 <drawFormatBits+0x3cc>
 8006aa2:	e322      	b.n	80070ea <drawFormatBits+0xa12>
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006aa4:	1e5e      	subs	r6, r3, #1
 8006aa6:	d200      	bcs.n	8006aaa <drawFormatBits+0x3d2>
 8006aa8:	e30b      	b.n	80070c2 <drawFormatBits+0x9ea>
 8006aaa:	2b08      	cmp	r3, #8
 8006aac:	dc00      	bgt.n	8006ab0 <drawFormatBits+0x3d8>
 8006aae:	e308      	b.n	80070c2 <drawFormatBits+0x9ea>
	int index = y * qrsize + x;
 8006ab0:	00da      	lsls	r2, r3, #3
 8006ab2:	4692      	mov	sl, r2
 8006ab4:	44b2      	add	sl, r6
	int bitIndex = index & 7;
 8006ab6:	4651      	mov	r1, sl
 8006ab8:	2207      	movs	r2, #7
 8006aba:	400a      	ands	r2, r1
 8006abc:	4693      	mov	fp, r2
	int byteIndex = (index >> 3) + 1;
 8006abe:	10ca      	asrs	r2, r1, #3
 8006ac0:	4692      	mov	sl, r2
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	4691      	mov	r9, r2
 8006ac6:	44ca      	add	sl, r9
	if (isDark)
 8006ac8:	2f00      	cmp	r7, #0
 8006aca:	d000      	beq.n	8006ace <drawFormatBits+0x3f6>
 8006acc:	e272      	b.n	8006fb4 <drawFormatBits+0x8dc>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8006ace:	465a      	mov	r2, fp
 8006ad0:	3701      	adds	r7, #1
 8006ad2:	4097      	lsls	r7, r2
 8006ad4:	4652      	mov	r2, sl
 8006ad6:	46bb      	mov	fp, r7
 8006ad8:	9901      	ldr	r1, [sp, #4]
 8006ada:	5c8f      	ldrb	r7, [r1, r2]
 8006adc:	465a      	mov	r2, fp
 8006ade:	4397      	bics	r7, r2
 8006ae0:	4652      	mov	r2, sl
 8006ae2:	000d      	movs	r5, r1
 8006ae4:	548f      	strb	r7, [r1, r2]
	int qrsize = qrcode[0];
 8006ae6:	782a      	ldrb	r2, [r5, #0]
		setModuleBounded(qrcode, qrsize - 1 - i, 8, getBit(bits, i));
 8006ae8:	1e9f      	subs	r7, r3, #2
	int qrsize = qrcode[0];
 8006aea:	4692      	mov	sl, r2
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006aec:	2215      	movs	r2, #21
 8006aee:	4252      	negs	r2, r2
 8006af0:	4452      	add	r2, sl
 8006af2:	2a9c      	cmp	r2, #156	; 0x9c
 8006af4:	d900      	bls.n	8006af8 <drawFormatBits+0x420>
 8006af6:	e2e4      	b.n	80070c2 <drawFormatBits+0x9ea>
 8006af8:	45ba      	cmp	sl, r7
 8006afa:	d800      	bhi.n	8006afe <drawFormatBits+0x426>
 8006afc:	e2e1      	b.n	80070c2 <drawFormatBits+0x9ea>
 8006afe:	4652      	mov	r2, sl
 8006b00:	2a08      	cmp	r2, #8
 8006b02:	dc00      	bgt.n	8006b06 <drawFormatBits+0x42e>
 8006b04:	e2dd      	b.n	80070c2 <drawFormatBits+0x9ea>
	int index = y * qrsize + x;
 8006b06:	00d2      	lsls	r2, r2, #3
 8006b08:	4692      	mov	sl, r2
 8006b0a:	44ba      	add	sl, r7
	int bitIndex = index & 7;
 8006b0c:	4651      	mov	r1, sl
 8006b0e:	2207      	movs	r2, #7
 8006b10:	400a      	ands	r2, r1
 8006b12:	4693      	mov	fp, r2
	int byteIndex = (index >> 3) + 1;
 8006b14:	10ca      	asrs	r2, r1, #3
 8006b16:	4692      	mov	sl, r2
 8006b18:	2201      	movs	r2, #1
 8006b1a:	4691      	mov	r9, r2
	if (isDark)
 8006b1c:	4662      	mov	r2, ip
	int byteIndex = (index >> 3) + 1;
 8006b1e:	44ca      	add	sl, r9
	if (isDark)
 8006b20:	2a00      	cmp	r2, #0
 8006b22:	d000      	beq.n	8006b26 <drawFormatBits+0x44e>
 8006b24:	e237      	b.n	8006f96 <drawFormatBits+0x8be>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8006b26:	4659      	mov	r1, fp
 8006b28:	3201      	adds	r2, #1
 8006b2a:	408a      	lsls	r2, r1
 8006b2c:	4693      	mov	fp, r2
 8006b2e:	4652      	mov	r2, sl
 8006b30:	4659      	mov	r1, fp
 8006b32:	5caa      	ldrb	r2, [r5, r2]
 8006b34:	438a      	bics	r2, r1
 8006b36:	4694      	mov	ip, r2
 8006b38:	4652      	mov	r2, sl
 8006b3a:	4661      	mov	r1, ip
 8006b3c:	54a9      	strb	r1, [r5, r2]
		setModuleBounded(qrcode, qrsize - 1 - i, 8, getBit(bits, i));
 8006b3e:	1eda      	subs	r2, r3, #3
 8006b40:	4694      	mov	ip, r2
	int qrsize = qrcode[0];
 8006b42:	782a      	ldrb	r2, [r5, #0]
 8006b44:	4692      	mov	sl, r2
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006b46:	2215      	movs	r2, #21
 8006b48:	4252      	negs	r2, r2
 8006b4a:	4452      	add	r2, sl
 8006b4c:	2a9c      	cmp	r2, #156	; 0x9c
 8006b4e:	d900      	bls.n	8006b52 <drawFormatBits+0x47a>
 8006b50:	e2b7      	b.n	80070c2 <drawFormatBits+0x9ea>
 8006b52:	45e2      	cmp	sl, ip
 8006b54:	d800      	bhi.n	8006b58 <drawFormatBits+0x480>
 8006b56:	e2b4      	b.n	80070c2 <drawFormatBits+0x9ea>
 8006b58:	4652      	mov	r2, sl
 8006b5a:	2a08      	cmp	r2, #8
 8006b5c:	dc00      	bgt.n	8006b60 <drawFormatBits+0x488>
 8006b5e:	e2b0      	b.n	80070c2 <drawFormatBits+0x9ea>
	int index = y * qrsize + x;
 8006b60:	00d2      	lsls	r2, r2, #3
 8006b62:	4692      	mov	sl, r2
 8006b64:	44e2      	add	sl, ip
	int bitIndex = index & 7;
 8006b66:	4651      	mov	r1, sl
 8006b68:	2207      	movs	r2, #7
 8006b6a:	400a      	ands	r2, r1
 8006b6c:	4693      	mov	fp, r2
	int byteIndex = (index >> 3) + 1;
 8006b6e:	10ca      	asrs	r2, r1, #3
 8006b70:	4692      	mov	sl, r2
 8006b72:	2201      	movs	r2, #1
 8006b74:	4691      	mov	r9, r2
 8006b76:	44ca      	add	sl, r9
	if (isDark)
 8006b78:	2c00      	cmp	r4, #0
 8006b7a:	d000      	beq.n	8006b7e <drawFormatBits+0x4a6>
 8006b7c:	e227      	b.n	8006fce <drawFormatBits+0x8f6>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8006b7e:	465a      	mov	r2, fp
 8006b80:	3401      	adds	r4, #1
 8006b82:	4094      	lsls	r4, r2
 8006b84:	4652      	mov	r2, sl
 8006b86:	46a3      	mov	fp, r4
 8006b88:	5cac      	ldrb	r4, [r5, r2]
 8006b8a:	465a      	mov	r2, fp
 8006b8c:	4394      	bics	r4, r2
 8006b8e:	4652      	mov	r2, sl
 8006b90:	54ac      	strb	r4, [r5, r2]
	int qrsize = qrcode[0];
 8006b92:	782a      	ldrb	r2, [r5, #0]
		setModuleBounded(qrcode, qrsize - 1 - i, 8, getBit(bits, i));
 8006b94:	1f1c      	subs	r4, r3, #4
	int qrsize = qrcode[0];
 8006b96:	4692      	mov	sl, r2
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006b98:	2215      	movs	r2, #21
 8006b9a:	4252      	negs	r2, r2
 8006b9c:	4452      	add	r2, sl
 8006b9e:	2a9c      	cmp	r2, #156	; 0x9c
 8006ba0:	d900      	bls.n	8006ba4 <drawFormatBits+0x4cc>
 8006ba2:	e28e      	b.n	80070c2 <drawFormatBits+0x9ea>
 8006ba4:	45a2      	cmp	sl, r4
 8006ba6:	d800      	bhi.n	8006baa <drawFormatBits+0x4d2>
 8006ba8:	e28b      	b.n	80070c2 <drawFormatBits+0x9ea>
 8006baa:	4652      	mov	r2, sl
 8006bac:	2a08      	cmp	r2, #8
 8006bae:	dc00      	bgt.n	8006bb2 <drawFormatBits+0x4da>
 8006bb0:	e287      	b.n	80070c2 <drawFormatBits+0x9ea>
	int index = y * qrsize + x;
 8006bb2:	00d2      	lsls	r2, r2, #3
 8006bb4:	4692      	mov	sl, r2
 8006bb6:	44a2      	add	sl, r4
	int bitIndex = index & 7;
 8006bb8:	4651      	mov	r1, sl
 8006bba:	2207      	movs	r2, #7
 8006bbc:	400a      	ands	r2, r1
 8006bbe:	4693      	mov	fp, r2
	int byteIndex = (index >> 3) + 1;
 8006bc0:	10ca      	asrs	r2, r1, #3
 8006bc2:	4692      	mov	sl, r2
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	4691      	mov	r9, r2
 8006bc8:	44ca      	add	sl, r9
	if (isDark)
 8006bca:	2800      	cmp	r0, #0
 8006bcc:	d000      	beq.n	8006bd0 <drawFormatBits+0x4f8>
 8006bce:	e209      	b.n	8006fe4 <drawFormatBits+0x90c>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8006bd0:	465a      	mov	r2, fp
 8006bd2:	3001      	adds	r0, #1
 8006bd4:	4090      	lsls	r0, r2
 8006bd6:	4652      	mov	r2, sl
 8006bd8:	4683      	mov	fp, r0
 8006bda:	5ca8      	ldrb	r0, [r5, r2]
 8006bdc:	465a      	mov	r2, fp
 8006bde:	4390      	bics	r0, r2
 8006be0:	4652      	mov	r2, sl
 8006be2:	54a8      	strb	r0, [r5, r2]
		setModuleBounded(qrcode, qrsize - 1 - i, 8, getBit(bits, i));
 8006be4:	1f5a      	subs	r2, r3, #5
 8006be6:	4692      	mov	sl, r2
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006be8:	2215      	movs	r2, #21
 8006bea:	4252      	negs	r2, r2
 8006bec:	4693      	mov	fp, r2
	int qrsize = qrcode[0];
 8006bee:	7828      	ldrb	r0, [r5, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006bf0:	4483      	add	fp, r0
 8006bf2:	465a      	mov	r2, fp
 8006bf4:	2a9c      	cmp	r2, #156	; 0x9c
 8006bf6:	d900      	bls.n	8006bfa <drawFormatBits+0x522>
 8006bf8:	e263      	b.n	80070c2 <drawFormatBits+0x9ea>
 8006bfa:	4550      	cmp	r0, sl
 8006bfc:	d800      	bhi.n	8006c00 <drawFormatBits+0x528>
 8006bfe:	e260      	b.n	80070c2 <drawFormatBits+0x9ea>
 8006c00:	2808      	cmp	r0, #8
 8006c02:	dc00      	bgt.n	8006c06 <drawFormatBits+0x52e>
 8006c04:	e25d      	b.n	80070c2 <drawFormatBits+0x9ea>
	int bitIndex = index & 7;
 8006c06:	2207      	movs	r2, #7
	int index = y * qrsize + x;
 8006c08:	00c0      	lsls	r0, r0, #3
 8006c0a:	4450      	add	r0, sl
	int bitIndex = index & 7;
 8006c0c:	4002      	ands	r2, r0
 8006c0e:	4693      	mov	fp, r2
	if (isDark)
 8006c10:	9a02      	ldr	r2, [sp, #8]
	int byteIndex = (index >> 3) + 1;
 8006c12:	10c0      	asrs	r0, r0, #3
		qrcode[byteIndex] |= 1 << bitIndex;
 8006c14:	2101      	movs	r1, #1
	int byteIndex = (index >> 3) + 1;
 8006c16:	3001      	adds	r0, #1
	if (isDark)
 8006c18:	2a00      	cmp	r2, #0
 8006c1a:	d000      	beq.n	8006c1e <drawFormatBits+0x546>
 8006c1c:	e1fa      	b.n	8007014 <drawFormatBits+0x93c>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8006c1e:	465a      	mov	r2, fp
 8006c20:	4091      	lsls	r1, r2
 8006c22:	468b      	mov	fp, r1
 8006c24:	465a      	mov	r2, fp
 8006c26:	5c29      	ldrb	r1, [r5, r0]
 8006c28:	4391      	bics	r1, r2
 8006c2a:	5429      	strb	r1, [r5, r0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006c2c:	2215      	movs	r2, #21
 8006c2e:	4252      	negs	r2, r2
 8006c30:	4693      	mov	fp, r2
	int qrsize = qrcode[0];
 8006c32:	7829      	ldrb	r1, [r5, #0]
		setModuleBounded(qrcode, qrsize - 1 - i, 8, getBit(bits, i));
 8006c34:	1f98      	subs	r0, r3, #6
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006c36:	448b      	add	fp, r1
 8006c38:	465a      	mov	r2, fp
 8006c3a:	2a9c      	cmp	r2, #156	; 0x9c
 8006c3c:	d900      	bls.n	8006c40 <drawFormatBits+0x568>
 8006c3e:	e240      	b.n	80070c2 <drawFormatBits+0x9ea>
 8006c40:	4281      	cmp	r1, r0
 8006c42:	d800      	bhi.n	8006c46 <drawFormatBits+0x56e>
 8006c44:	e23d      	b.n	80070c2 <drawFormatBits+0x9ea>
 8006c46:	2908      	cmp	r1, #8
 8006c48:	dc00      	bgt.n	8006c4c <drawFormatBits+0x574>
 8006c4a:	e23a      	b.n	80070c2 <drawFormatBits+0x9ea>
	int bitIndex = index & 7;
 8006c4c:	2207      	movs	r2, #7
	int index = y * qrsize + x;
 8006c4e:	00c9      	lsls	r1, r1, #3
 8006c50:	1809      	adds	r1, r1, r0
	int bitIndex = index & 7;
 8006c52:	400a      	ands	r2, r1
 8006c54:	4693      	mov	fp, r2
	if (isDark)
 8006c56:	4642      	mov	r2, r8
	int byteIndex = (index >> 3) + 1;
 8006c58:	10c9      	asrs	r1, r1, #3
 8006c5a:	3101      	adds	r1, #1
	if (isDark)
 8006c5c:	2a00      	cmp	r2, #0
 8006c5e:	d000      	beq.n	8006c62 <drawFormatBits+0x58a>
 8006c60:	e1cb      	b.n	8006ffa <drawFormatBits+0x922>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8006c62:	465d      	mov	r5, fp
 8006c64:	3201      	adds	r2, #1
 8006c66:	40aa      	lsls	r2, r5
 8006c68:	4693      	mov	fp, r2
 8006c6a:	9d01      	ldr	r5, [sp, #4]
 8006c6c:	5c6a      	ldrb	r2, [r5, r1]
 8006c6e:	465d      	mov	r5, fp
 8006c70:	43aa      	bics	r2, r5
 8006c72:	9d01      	ldr	r5, [sp, #4]
 8006c74:	546a      	strb	r2, [r5, r1]
		setModuleBounded(qrcode, qrsize - 1 - i, 8, getBit(bits, i));
 8006c76:	1fda      	subs	r2, r3, #7
 8006c78:	4690      	mov	r8, r2
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006c7a:	2215      	movs	r2, #21
 8006c7c:	4252      	negs	r2, r2
 8006c7e:	4693      	mov	fp, r2
	int qrsize = qrcode[0];
 8006c80:	7829      	ldrb	r1, [r5, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006c82:	448b      	add	fp, r1
 8006c84:	465a      	mov	r2, fp
 8006c86:	2a9c      	cmp	r2, #156	; 0x9c
 8006c88:	d900      	bls.n	8006c8c <drawFormatBits+0x5b4>
 8006c8a:	e21a      	b.n	80070c2 <drawFormatBits+0x9ea>
 8006c8c:	4541      	cmp	r1, r8
 8006c8e:	d800      	bhi.n	8006c92 <drawFormatBits+0x5ba>
 8006c90:	e217      	b.n	80070c2 <drawFormatBits+0x9ea>
 8006c92:	2908      	cmp	r1, #8
 8006c94:	dc00      	bgt.n	8006c98 <drawFormatBits+0x5c0>
 8006c96:	e214      	b.n	80070c2 <drawFormatBits+0x9ea>
	int bitIndex = index & 7;
 8006c98:	2207      	movs	r2, #7
	int index = y * qrsize + x;
 8006c9a:	00c9      	lsls	r1, r1, #3
 8006c9c:	4441      	add	r1, r8
	int bitIndex = index & 7;
 8006c9e:	400a      	ands	r2, r1
 8006ca0:	4693      	mov	fp, r2
	if (isDark)
 8006ca2:	9a03      	ldr	r2, [sp, #12]
	int byteIndex = (index >> 3) + 1;
 8006ca4:	10c9      	asrs	r1, r1, #3
 8006ca6:	3101      	adds	r1, #1
	if (isDark)
 8006ca8:	2a00      	cmp	r2, #0
 8006caa:	d000      	beq.n	8006cae <drawFormatBits+0x5d6>
 8006cac:	e1ba      	b.n	8007024 <drawFormatBits+0x94c>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8006cae:	465d      	mov	r5, fp
 8006cb0:	3201      	adds	r2, #1
 8006cb2:	40aa      	lsls	r2, r5
 8006cb4:	4693      	mov	fp, r2
 8006cb6:	9d01      	ldr	r5, [sp, #4]
 8006cb8:	5c6a      	ldrb	r2, [r5, r1]
 8006cba:	465d      	mov	r5, fp
 8006cbc:	43aa      	bics	r2, r5
 8006cbe:	9d01      	ldr	r5, [sp, #4]
 8006cc0:	546a      	strb	r2, [r5, r1]
 8006cc2:	002a      	movs	r2, r5
	int qrsize = qrcode[0];
 8006cc4:	7811      	ldrb	r1, [r2, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006cc6:	2215      	movs	r2, #21
 8006cc8:	4252      	negs	r2, r2
 8006cca:	4691      	mov	r9, r2
 8006ccc:	4489      	add	r9, r1
 8006cce:	464a      	mov	r2, r9
		setModuleBounded(qrcode, qrsize - 1 - i, 8, getBit(bits, i));
 8006cd0:	3b08      	subs	r3, #8
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006cd2:	2a9c      	cmp	r2, #156	; 0x9c
 8006cd4:	d900      	bls.n	8006cd8 <drawFormatBits+0x600>
 8006cd6:	e1f4      	b.n	80070c2 <drawFormatBits+0x9ea>
 8006cd8:	428b      	cmp	r3, r1
 8006cda:	d300      	bcc.n	8006cde <drawFormatBits+0x606>
 8006cdc:	e1f1      	b.n	80070c2 <drawFormatBits+0x9ea>
 8006cde:	2908      	cmp	r1, #8
 8006ce0:	dc00      	bgt.n	8006ce4 <drawFormatBits+0x60c>
 8006ce2:	e1ee      	b.n	80070c2 <drawFormatBits+0x9ea>
	int bitIndex = index & 7;
 8006ce4:	2207      	movs	r2, #7
	int index = y * qrsize + x;
 8006ce6:	00c9      	lsls	r1, r1, #3
 8006ce8:	18c9      	adds	r1, r1, r3
	int bitIndex = index & 7;
 8006cea:	400a      	ands	r2, r1
 8006cec:	4691      	mov	r9, r2
	if (isDark)
 8006cee:	9a04      	ldr	r2, [sp, #16]
	int byteIndex = (index >> 3) + 1;
 8006cf0:	10c9      	asrs	r1, r1, #3
 8006cf2:	3101      	adds	r1, #1
	if (isDark)
 8006cf4:	2a00      	cmp	r2, #0
 8006cf6:	d100      	bne.n	8006cfa <drawFormatBits+0x622>
 8006cf8:	e1a2      	b.n	8007040 <drawFormatBits+0x968>
		qrcode[byteIndex] |= 1 << bitIndex;
 8006cfa:	464d      	mov	r5, r9
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	40aa      	lsls	r2, r5
 8006d00:	9d01      	ldr	r5, [sp, #4]
 8006d02:	4693      	mov	fp, r2
 8006d04:	5c6a      	ldrb	r2, [r5, r1]
 8006d06:	4691      	mov	r9, r2
 8006d08:	465a      	mov	r2, fp
 8006d0a:	464d      	mov	r5, r9
 8006d0c:	432a      	orrs	r2, r5
 8006d0e:	9d01      	ldr	r5, [sp, #4]
 8006d10:	546a      	strb	r2, [r5, r1]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006d12:	2215      	movs	r2, #21
 8006d14:	4252      	negs	r2, r2
 8006d16:	4691      	mov	r9, r2
	int qrsize = qrcode[0];
 8006d18:	7829      	ldrb	r1, [r5, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006d1a:	4489      	add	r9, r1
 8006d1c:	464a      	mov	r2, r9
 8006d1e:	b2d2      	uxtb	r2, r2
 8006d20:	2a9c      	cmp	r2, #156	; 0x9c
 8006d22:	d900      	bls.n	8006d26 <drawFormatBits+0x64e>
 8006d24:	e1cd      	b.n	80070c2 <drawFormatBits+0x9ea>
 8006d26:	4541      	cmp	r1, r8
 8006d28:	d800      	bhi.n	8006d2c <drawFormatBits+0x654>
 8006d2a:	e1ca      	b.n	80070c2 <drawFormatBits+0x9ea>
	int index = y * qrsize + x;
 8006d2c:	4642      	mov	r2, r8
 8006d2e:	434a      	muls	r2, r1
 8006d30:	0011      	movs	r1, r2
	int bitIndex = index & 7;
 8006d32:	2207      	movs	r2, #7
	int index = y * qrsize + x;
 8006d34:	3108      	adds	r1, #8
	int bitIndex = index & 7;
 8006d36:	400a      	ands	r2, r1
 8006d38:	4691      	mov	r9, r2
	if (isDark)
 8006d3a:	9a05      	ldr	r2, [sp, #20]
	int byteIndex = (index >> 3) + 1;
 8006d3c:	10c9      	asrs	r1, r1, #3
 8006d3e:	3101      	adds	r1, #1
	if (isDark)
 8006d40:	2a00      	cmp	r2, #0
 8006d42:	d000      	beq.n	8006d46 <drawFormatBits+0x66e>
 8006d44:	e18e      	b.n	8007064 <drawFormatBits+0x98c>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8006d46:	464d      	mov	r5, r9
 8006d48:	3201      	adds	r2, #1
 8006d4a:	40aa      	lsls	r2, r5
 8006d4c:	4691      	mov	r9, r2
 8006d4e:	9d01      	ldr	r5, [sp, #4]
 8006d50:	5c6a      	ldrb	r2, [r5, r1]
 8006d52:	464d      	mov	r5, r9
 8006d54:	43aa      	bics	r2, r5
 8006d56:	9d01      	ldr	r5, [sp, #4]
 8006d58:	546a      	strb	r2, [r5, r1]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006d5a:	2215      	movs	r2, #21
 8006d5c:	4252      	negs	r2, r2
 8006d5e:	4690      	mov	r8, r2
	int qrsize = qrcode[0];
 8006d60:	7829      	ldrb	r1, [r5, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006d62:	4488      	add	r8, r1
 8006d64:	4642      	mov	r2, r8
 8006d66:	b2d2      	uxtb	r2, r2
 8006d68:	2a9c      	cmp	r2, #156	; 0x9c
 8006d6a:	d900      	bls.n	8006d6e <drawFormatBits+0x696>
 8006d6c:	e1a9      	b.n	80070c2 <drawFormatBits+0x9ea>
 8006d6e:	4281      	cmp	r1, r0
 8006d70:	d800      	bhi.n	8006d74 <drawFormatBits+0x69c>
 8006d72:	e1a6      	b.n	80070c2 <drawFormatBits+0x9ea>
	int index = y * qrsize + x;
 8006d74:	4341      	muls	r1, r0
	int bitIndex = index & 7;
 8006d76:	2007      	movs	r0, #7
	int index = y * qrsize + x;
 8006d78:	3108      	adds	r1, #8
	if (isDark)
 8006d7a:	9a06      	ldr	r2, [sp, #24]
	int bitIndex = index & 7;
 8006d7c:	4008      	ands	r0, r1
	int byteIndex = (index >> 3) + 1;
 8006d7e:	10c9      	asrs	r1, r1, #3
 8006d80:	3101      	adds	r1, #1
	if (isDark)
 8006d82:	2a00      	cmp	r2, #0
 8006d84:	d000      	beq.n	8006d88 <drawFormatBits+0x6b0>
 8006d86:	e166      	b.n	8007056 <drawFormatBits+0x97e>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8006d88:	3201      	adds	r2, #1
 8006d8a:	4082      	lsls	r2, r0
 8006d8c:	5c68      	ldrb	r0, [r5, r1]
 8006d8e:	4390      	bics	r0, r2
 8006d90:	5468      	strb	r0, [r5, r1]
	int qrsize = qrcode[0];
 8006d92:	7829      	ldrb	r1, [r5, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006d94:	0008      	movs	r0, r1
 8006d96:	3815      	subs	r0, #21
 8006d98:	b2c0      	uxtb	r0, r0
 8006d9a:	289c      	cmp	r0, #156	; 0x9c
 8006d9c:	d900      	bls.n	8006da0 <drawFormatBits+0x6c8>
 8006d9e:	e190      	b.n	80070c2 <drawFormatBits+0x9ea>
 8006da0:	4551      	cmp	r1, sl
 8006da2:	d800      	bhi.n	8006da6 <drawFormatBits+0x6ce>
 8006da4:	e18d      	b.n	80070c2 <drawFormatBits+0x9ea>
	int index = y * qrsize + x;
 8006da6:	4652      	mov	r2, sl
 8006da8:	434a      	muls	r2, r1
 8006daa:	0011      	movs	r1, r2
	int bitIndex = index & 7;
 8006dac:	2007      	movs	r0, #7
	int index = y * qrsize + x;
 8006dae:	3108      	adds	r1, #8
	if (isDark)
 8006db0:	9a07      	ldr	r2, [sp, #28]
	int bitIndex = index & 7;
 8006db2:	4008      	ands	r0, r1
	int byteIndex = (index >> 3) + 1;
 8006db4:	10c9      	asrs	r1, r1, #3
 8006db6:	3101      	adds	r1, #1
	if (isDark)
 8006db8:	2a00      	cmp	r2, #0
 8006dba:	d000      	beq.n	8006dbe <drawFormatBits+0x6e6>
 8006dbc:	e15f      	b.n	800707e <drawFormatBits+0x9a6>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8006dbe:	3201      	adds	r2, #1
 8006dc0:	4082      	lsls	r2, r0
 8006dc2:	5c68      	ldrb	r0, [r5, r1]
 8006dc4:	4390      	bics	r0, r2
 8006dc6:	002a      	movs	r2, r5
 8006dc8:	5468      	strb	r0, [r5, r1]
	int qrsize = qrcode[0];
 8006dca:	7811      	ldrb	r1, [r2, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006dcc:	0008      	movs	r0, r1
 8006dce:	3815      	subs	r0, #21
 8006dd0:	b2c0      	uxtb	r0, r0
 8006dd2:	289c      	cmp	r0, #156	; 0x9c
 8006dd4:	d900      	bls.n	8006dd8 <drawFormatBits+0x700>
 8006dd6:	e174      	b.n	80070c2 <drawFormatBits+0x9ea>
 8006dd8:	42a1      	cmp	r1, r4
 8006dda:	d800      	bhi.n	8006dde <drawFormatBits+0x706>
 8006ddc:	e171      	b.n	80070c2 <drawFormatBits+0x9ea>
	int bitIndex = index & 7;
 8006dde:	2007      	movs	r0, #7
	int index = y * qrsize + x;
 8006de0:	4361      	muls	r1, r4
	if (isDark)
 8006de2:	9c08      	ldr	r4, [sp, #32]
	int index = y * qrsize + x;
 8006de4:	3108      	adds	r1, #8
	int bitIndex = index & 7;
 8006de6:	4008      	ands	r0, r1
	int byteIndex = (index >> 3) + 1;
 8006de8:	10c9      	asrs	r1, r1, #3
 8006dea:	3101      	adds	r1, #1
	if (isDark)
 8006dec:	2c00      	cmp	r4, #0
 8006dee:	d000      	beq.n	8006df2 <drawFormatBits+0x71a>
 8006df0:	e14d      	b.n	800708e <drawFormatBits+0x9b6>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8006df2:	3401      	adds	r4, #1
 8006df4:	4084      	lsls	r4, r0
 8006df6:	0015      	movs	r5, r2
 8006df8:	5c50      	ldrb	r0, [r2, r1]
 8006dfa:	43a0      	bics	r0, r4
 8006dfc:	5450      	strb	r0, [r2, r1]
	int qrsize = qrcode[0];
 8006dfe:	7829      	ldrb	r1, [r5, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006e00:	0008      	movs	r0, r1
 8006e02:	3815      	subs	r0, #21
 8006e04:	b2c0      	uxtb	r0, r0
 8006e06:	289c      	cmp	r0, #156	; 0x9c
 8006e08:	d900      	bls.n	8006e0c <drawFormatBits+0x734>
 8006e0a:	e15a      	b.n	80070c2 <drawFormatBits+0x9ea>
 8006e0c:	4561      	cmp	r1, ip
 8006e0e:	d800      	bhi.n	8006e12 <drawFormatBits+0x73a>
 8006e10:	e157      	b.n	80070c2 <drawFormatBits+0x9ea>
	int index = y * qrsize + x;
 8006e12:	4662      	mov	r2, ip
 8006e14:	434a      	muls	r2, r1
 8006e16:	0011      	movs	r1, r2
	int bitIndex = index & 7;
 8006e18:	2007      	movs	r0, #7
	int index = y * qrsize + x;
 8006e1a:	3108      	adds	r1, #8
	if (isDark)
 8006e1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	int bitIndex = index & 7;
 8006e1e:	4008      	ands	r0, r1
	int byteIndex = (index >> 3) + 1;
 8006e20:	10c9      	asrs	r1, r1, #3
 8006e22:	3101      	adds	r1, #1
	if (isDark)
 8006e24:	2a00      	cmp	r2, #0
 8006e26:	d000      	beq.n	8006e2a <drawFormatBits+0x752>
 8006e28:	e138      	b.n	800709c <drawFormatBits+0x9c4>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8006e2a:	2401      	movs	r4, #1
 8006e2c:	4084      	lsls	r4, r0
 8006e2e:	5c68      	ldrb	r0, [r5, r1]
 8006e30:	43a0      	bics	r0, r4
 8006e32:	5468      	strb	r0, [r5, r1]
	int qrsize = qrcode[0];
 8006e34:	7829      	ldrb	r1, [r5, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006e36:	0008      	movs	r0, r1
 8006e38:	3815      	subs	r0, #21
 8006e3a:	b2c0      	uxtb	r0, r0
 8006e3c:	289c      	cmp	r0, #156	; 0x9c
 8006e3e:	d900      	bls.n	8006e42 <drawFormatBits+0x76a>
 8006e40:	e13f      	b.n	80070c2 <drawFormatBits+0x9ea>
 8006e42:	428f      	cmp	r7, r1
 8006e44:	d300      	bcc.n	8006e48 <drawFormatBits+0x770>
 8006e46:	e13c      	b.n	80070c2 <drawFormatBits+0x9ea>
	int bitIndex = index & 7;
 8006e48:	2007      	movs	r0, #7
	int index = y * qrsize + x;
 8006e4a:	4379      	muls	r1, r7
	if (isDark)
 8006e4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	int index = y * qrsize + x;
 8006e4e:	3108      	adds	r1, #8
	int bitIndex = index & 7;
 8006e50:	4008      	ands	r0, r1
	int byteIndex = (index >> 3) + 1;
 8006e52:	10c9      	asrs	r1, r1, #3
 8006e54:	3101      	adds	r1, #1
	if (isDark)
 8006e56:	2a00      	cmp	r2, #0
 8006e58:	d000      	beq.n	8006e5c <drawFormatBits+0x784>
 8006e5a:	e125      	b.n	80070a8 <drawFormatBits+0x9d0>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8006e5c:	2401      	movs	r4, #1
 8006e5e:	4084      	lsls	r4, r0
 8006e60:	5c68      	ldrb	r0, [r5, r1]
 8006e62:	43a0      	bics	r0, r4
 8006e64:	5468      	strb	r0, [r5, r1]
	int qrsize = qrcode[0];
 8006e66:	7829      	ldrb	r1, [r5, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006e68:	0008      	movs	r0, r1
 8006e6a:	3815      	subs	r0, #21
 8006e6c:	b2c0      	uxtb	r0, r0
 8006e6e:	289c      	cmp	r0, #156	; 0x9c
 8006e70:	d900      	bls.n	8006e74 <drawFormatBits+0x79c>
 8006e72:	e126      	b.n	80070c2 <drawFormatBits+0x9ea>
 8006e74:	42b1      	cmp	r1, r6
 8006e76:	d800      	bhi.n	8006e7a <drawFormatBits+0x7a2>
 8006e78:	e123      	b.n	80070c2 <drawFormatBits+0x9ea>
	int bitIndex = index & 7;
 8006e7a:	2007      	movs	r0, #7
	int index = y * qrsize + x;
 8006e7c:	4371      	muls	r1, r6
	if (isDark)
 8006e7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
	int index = y * qrsize + x;
 8006e80:	3108      	adds	r1, #8
	int bitIndex = index & 7;
 8006e82:	4008      	ands	r0, r1
	int byteIndex = (index >> 3) + 1;
 8006e84:	10c9      	asrs	r1, r1, #3
 8006e86:	3101      	adds	r1, #1
	if (isDark)
 8006e88:	2a00      	cmp	r2, #0
 8006e8a:	d100      	bne.n	8006e8e <drawFormatBits+0x7b6>
 8006e8c:	e112      	b.n	80070b4 <drawFormatBits+0x9dc>
		qrcode[byteIndex] |= 1 << bitIndex;
 8006e8e:	2401      	movs	r4, #1
 8006e90:	4084      	lsls	r4, r0
 8006e92:	002a      	movs	r2, r5
 8006e94:	5c68      	ldrb	r0, [r5, r1]
 8006e96:	4320      	orrs	r0, r4
 8006e98:	5468      	strb	r0, [r5, r1]
	int qrsize = qrcode[0];
 8006e9a:	7811      	ldrb	r1, [r2, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8006e9c:	0008      	movs	r0, r1
 8006e9e:	3815      	subs	r0, #21
 8006ea0:	b2c0      	uxtb	r0, r0
 8006ea2:	289c      	cmp	r0, #156	; 0x9c
 8006ea4:	d900      	bls.n	8006ea8 <drawFormatBits+0x7d0>
 8006ea6:	e10c      	b.n	80070c2 <drawFormatBits+0x9ea>
 8006ea8:	428b      	cmp	r3, r1
 8006eaa:	db00      	blt.n	8006eae <drawFormatBits+0x7d6>
 8006eac:	e109      	b.n	80070c2 <drawFormatBits+0x9ea>
	int index = y * qrsize + x;
 8006eae:	434b      	muls	r3, r1
	int bitIndex = index & 7;
 8006eb0:	2107      	movs	r1, #7
	int index = y * qrsize + x;
 8006eb2:	3308      	adds	r3, #8
	int bitIndex = index & 7;
 8006eb4:	4019      	ands	r1, r3
	int byteIndex = (index >> 3) + 1;
 8006eb6:	10d8      	asrs	r0, r3, #3
		qrcode[byteIndex] |= 1 << bitIndex;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	408b      	lsls	r3, r1
	int byteIndex = (index >> 3) + 1;
 8006ebc:	3001      	adds	r0, #1
		qrcode[byteIndex] |= 1 << bitIndex;
 8006ebe:	5c11      	ldrb	r1, [r2, r0]
 8006ec0:	430b      	orrs	r3, r1
 8006ec2:	5413      	strb	r3, [r2, r0]
}
 8006ec4:	b00d      	add	sp, #52	; 0x34
 8006ec6:	bcf0      	pop	{r4, r5, r6, r7}
 8006ec8:	46bb      	mov	fp, r7
 8006eca:	46b2      	mov	sl, r6
 8006ecc:	46a9      	mov	r9, r5
 8006ece:	46a0      	mov	r8, r4
 8006ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		qrcode[byteIndex] |= 1 << bitIndex;
 8006ed2:	2401      	movs	r4, #1
 8006ed4:	4320      	orrs	r0, r4
 8006ed6:	7090      	strb	r0, [r2, #2]
 8006ed8:	e452      	b.n	8006780 <drawFormatBits+0xa8>
 8006eda:	40a8      	lsls	r0, r5
 8006edc:	9a01      	ldr	r2, [sp, #4]
 8006ede:	5c54      	ldrb	r4, [r2, r1]
 8006ee0:	4320      	orrs	r0, r4
 8006ee2:	5450      	strb	r0, [r2, r1]
 8006ee4:	e45e      	b.n	80067a4 <drawFormatBits+0xcc>
 8006ee6:	5c55      	ldrb	r5, [r2, r1]
 8006ee8:	4328      	orrs	r0, r5
 8006eea:	5450      	strb	r0, [r2, r1]
 8006eec:	e473      	b.n	80067d6 <drawFormatBits+0xfe>
 8006eee:	4096      	lsls	r6, r2
 8006ef0:	9901      	ldr	r1, [sp, #4]
 8006ef2:	5d4a      	ldrb	r2, [r1, r5]
 8006ef4:	4316      	orrs	r6, r2
 8006ef6:	554e      	strb	r6, [r1, r5]
 8006ef8:	000a      	movs	r2, r1
 8006efa:	e4a6      	b.n	800684a <drawFormatBits+0x172>
 8006efc:	5c56      	ldrb	r6, [r2, r1]
 8006efe:	4335      	orrs	r5, r6
 8006f00:	5455      	strb	r5, [r2, r1]
 8006f02:	e482      	b.n	800680a <drawFormatBits+0x132>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8006f04:	464a      	mov	r2, r9
 8006f06:	4096      	lsls	r6, r2
 8006f08:	9901      	ldr	r1, [sp, #4]
 8006f0a:	5d4a      	ldrb	r2, [r1, r5]
 8006f0c:	43b2      	bics	r2, r6
 8006f0e:	554a      	strb	r2, [r1, r5]
 8006f10:	000a      	movs	r2, r1
 8006f12:	e4bc      	b.n	800688e <drawFormatBits+0x1b6>
 8006f14:	4096      	lsls	r6, r2
 8006f16:	9901      	ldr	r1, [sp, #4]
 8006f18:	5d4a      	ldrb	r2, [r1, r5]
 8006f1a:	43b2      	bics	r2, r6
 8006f1c:	554a      	strb	r2, [r1, r5]
 8006f1e:	000a      	movs	r2, r1
 8006f20:	e4d6      	b.n	80068d0 <drawFormatBits+0x1f8>
 8006f22:	5d4a      	ldrb	r2, [r1, r5]
 8006f24:	43b2      	bics	r2, r6
 8006f26:	554a      	strb	r2, [r1, r5]
 8006f28:	e4ed      	b.n	8006906 <drawFormatBits+0x22e>
 8006f2a:	267f      	movs	r6, #127	; 0x7f
 8006f2c:	5d4a      	ldrb	r2, [r1, r5]
 8006f2e:	4016      	ands	r6, r2
 8006f30:	554e      	strb	r6, [r1, r5]
 8006f32:	e4fb      	b.n	800692c <drawFormatBits+0x254>
		qrcode[byteIndex] |= 1 << bitIndex;
 8006f34:	408e      	lsls	r6, r1
 8006f36:	9901      	ldr	r1, [sp, #4]
 8006f38:	5d4a      	ldrb	r2, [r1, r5]
 8006f3a:	4316      	orrs	r6, r2
 8006f3c:	554e      	strb	r6, [r1, r5]
 8006f3e:	e513      	b.n	8006968 <drawFormatBits+0x290>
 8006f40:	408e      	lsls	r6, r1
 8006f42:	9901      	ldr	r1, [sp, #4]
 8006f44:	5d4a      	ldrb	r2, [r1, r5]
 8006f46:	4316      	orrs	r6, r2
 8006f48:	554e      	strb	r6, [r1, r5]
 8006f4a:	e52b      	b.n	80069a4 <drawFormatBits+0x2cc>
 8006f4c:	4652      	mov	r2, sl
 8006f4e:	408a      	lsls	r2, r1
 8006f50:	4692      	mov	sl, r2
 8006f52:	5daa      	ldrb	r2, [r5, r6]
 8006f54:	4693      	mov	fp, r2
 8006f56:	4652      	mov	r2, sl
 8006f58:	4659      	mov	r1, fp
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	55aa      	strb	r2, [r5, r6]
 8006f5e:	e560      	b.n	8006a22 <drawFormatBits+0x34a>
 8006f60:	4659      	mov	r1, fp
 8006f62:	408a      	lsls	r2, r1
 8006f64:	4692      	mov	sl, r2
 8006f66:	5daa      	ldrb	r2, [r5, r6]
 8006f68:	4693      	mov	fp, r2
 8006f6a:	4652      	mov	r2, sl
 8006f6c:	4659      	mov	r1, fp
 8006f6e:	430a      	orrs	r2, r1
 8006f70:	55aa      	strb	r2, [r5, r6]
 8006f72:	e538      	b.n	80069e6 <drawFormatBits+0x30e>
 8006f74:	4652      	mov	r2, sl
 8006f76:	408a      	lsls	r2, r1
 8006f78:	4692      	mov	sl, r2
 8006f7a:	5daa      	ldrb	r2, [r5, r6]
 8006f7c:	4693      	mov	fp, r2
 8006f7e:	4652      	mov	r2, sl
 8006f80:	4659      	mov	r1, fp
 8006f82:	430a      	orrs	r2, r1
 8006f84:	55aa      	strb	r2, [r5, r6]
 8006f86:	0029      	movs	r1, r5
 8006f88:	e56a      	b.n	8006a60 <drawFormatBits+0x388>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	4252      	negs	r2, r2
 8006f8e:	4016      	ands	r6, r2
 8006f90:	54ce      	strb	r6, [r1, r3]
 8006f92:	000b      	movs	r3, r1
 8006f94:	e580      	b.n	8006a98 <drawFormatBits+0x3c0>
		qrcode[byteIndex] |= 1 << bitIndex;
 8006f96:	4659      	mov	r1, fp
 8006f98:	2201      	movs	r2, #1
 8006f9a:	408a      	lsls	r2, r1
 8006f9c:	4693      	mov	fp, r2
 8006f9e:	4652      	mov	r2, sl
 8006fa0:	5caa      	ldrb	r2, [r5, r2]
 8006fa2:	4694      	mov	ip, r2
 8006fa4:	465a      	mov	r2, fp
 8006fa6:	4661      	mov	r1, ip
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	4694      	mov	ip, r2
 8006fac:	4652      	mov	r2, sl
 8006fae:	4661      	mov	r1, ip
 8006fb0:	54a9      	strb	r1, [r5, r2]
 8006fb2:	e5c4      	b.n	8006b3e <drawFormatBits+0x466>
 8006fb4:	465a      	mov	r2, fp
 8006fb6:	2701      	movs	r7, #1
 8006fb8:	4097      	lsls	r7, r2
 8006fba:	4652      	mov	r2, sl
 8006fbc:	46bb      	mov	fp, r7
 8006fbe:	9901      	ldr	r1, [sp, #4]
 8006fc0:	5c8f      	ldrb	r7, [r1, r2]
 8006fc2:	465a      	mov	r2, fp
 8006fc4:	4317      	orrs	r7, r2
 8006fc6:	4652      	mov	r2, sl
 8006fc8:	000d      	movs	r5, r1
 8006fca:	548f      	strb	r7, [r1, r2]
 8006fcc:	e58b      	b.n	8006ae6 <drawFormatBits+0x40e>
 8006fce:	465a      	mov	r2, fp
 8006fd0:	2401      	movs	r4, #1
 8006fd2:	4094      	lsls	r4, r2
 8006fd4:	4652      	mov	r2, sl
 8006fd6:	46a3      	mov	fp, r4
 8006fd8:	5cac      	ldrb	r4, [r5, r2]
 8006fda:	465a      	mov	r2, fp
 8006fdc:	4314      	orrs	r4, r2
 8006fde:	4652      	mov	r2, sl
 8006fe0:	54ac      	strb	r4, [r5, r2]
 8006fe2:	e5d6      	b.n	8006b92 <drawFormatBits+0x4ba>
 8006fe4:	465a      	mov	r2, fp
 8006fe6:	2001      	movs	r0, #1
 8006fe8:	4090      	lsls	r0, r2
 8006fea:	4652      	mov	r2, sl
 8006fec:	4683      	mov	fp, r0
 8006fee:	5ca8      	ldrb	r0, [r5, r2]
 8006ff0:	465a      	mov	r2, fp
 8006ff2:	4310      	orrs	r0, r2
 8006ff4:	4652      	mov	r2, sl
 8006ff6:	54a8      	strb	r0, [r5, r2]
 8006ff8:	e5f4      	b.n	8006be4 <drawFormatBits+0x50c>
 8006ffa:	465d      	mov	r5, fp
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	40aa      	lsls	r2, r5
 8007000:	9d01      	ldr	r5, [sp, #4]
 8007002:	4693      	mov	fp, r2
 8007004:	5c6a      	ldrb	r2, [r5, r1]
 8007006:	4690      	mov	r8, r2
 8007008:	465a      	mov	r2, fp
 800700a:	4645      	mov	r5, r8
 800700c:	432a      	orrs	r2, r5
 800700e:	9d01      	ldr	r5, [sp, #4]
 8007010:	546a      	strb	r2, [r5, r1]
 8007012:	e630      	b.n	8006c76 <drawFormatBits+0x59e>
 8007014:	465a      	mov	r2, fp
 8007016:	4091      	lsls	r1, r2
 8007018:	468b      	mov	fp, r1
 800701a:	465a      	mov	r2, fp
 800701c:	5c29      	ldrb	r1, [r5, r0]
 800701e:	4311      	orrs	r1, r2
 8007020:	5429      	strb	r1, [r5, r0]
 8007022:	e603      	b.n	8006c2c <drawFormatBits+0x554>
 8007024:	465d      	mov	r5, fp
 8007026:	2201      	movs	r2, #1
 8007028:	40aa      	lsls	r2, r5
 800702a:	9d01      	ldr	r5, [sp, #4]
 800702c:	4693      	mov	fp, r2
 800702e:	5c6a      	ldrb	r2, [r5, r1]
 8007030:	4691      	mov	r9, r2
 8007032:	465a      	mov	r2, fp
 8007034:	464d      	mov	r5, r9
 8007036:	432a      	orrs	r2, r5
 8007038:	9d01      	ldr	r5, [sp, #4]
 800703a:	546a      	strb	r2, [r5, r1]
 800703c:	002a      	movs	r2, r5
 800703e:	e641      	b.n	8006cc4 <drawFormatBits+0x5ec>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8007040:	464d      	mov	r5, r9
 8007042:	2201      	movs	r2, #1
 8007044:	40aa      	lsls	r2, r5
 8007046:	4693      	mov	fp, r2
 8007048:	9d01      	ldr	r5, [sp, #4]
 800704a:	5c6a      	ldrb	r2, [r5, r1]
 800704c:	465d      	mov	r5, fp
 800704e:	43aa      	bics	r2, r5
 8007050:	9d01      	ldr	r5, [sp, #4]
 8007052:	546a      	strb	r2, [r5, r1]
 8007054:	e65d      	b.n	8006d12 <drawFormatBits+0x63a>
		qrcode[byteIndex] |= 1 << bitIndex;
 8007056:	2201      	movs	r2, #1
 8007058:	4082      	lsls	r2, r0
 800705a:	0010      	movs	r0, r2
 800705c:	5c6a      	ldrb	r2, [r5, r1]
 800705e:	4310      	orrs	r0, r2
 8007060:	5468      	strb	r0, [r5, r1]
 8007062:	e696      	b.n	8006d92 <drawFormatBits+0x6ba>
 8007064:	464d      	mov	r5, r9
 8007066:	2201      	movs	r2, #1
 8007068:	40aa      	lsls	r2, r5
 800706a:	9d01      	ldr	r5, [sp, #4]
 800706c:	4690      	mov	r8, r2
 800706e:	5c6a      	ldrb	r2, [r5, r1]
 8007070:	4691      	mov	r9, r2
 8007072:	4642      	mov	r2, r8
 8007074:	464d      	mov	r5, r9
 8007076:	432a      	orrs	r2, r5
 8007078:	9d01      	ldr	r5, [sp, #4]
 800707a:	546a      	strb	r2, [r5, r1]
 800707c:	e66d      	b.n	8006d5a <drawFormatBits+0x682>
 800707e:	2201      	movs	r2, #1
 8007080:	4082      	lsls	r2, r0
 8007082:	0010      	movs	r0, r2
 8007084:	5c6a      	ldrb	r2, [r5, r1]
 8007086:	4310      	orrs	r0, r2
 8007088:	5468      	strb	r0, [r5, r1]
 800708a:	002a      	movs	r2, r5
 800708c:	e69d      	b.n	8006dca <drawFormatBits+0x6f2>
 800708e:	2401      	movs	r4, #1
 8007090:	4084      	lsls	r4, r0
 8007092:	5c50      	ldrb	r0, [r2, r1]
 8007094:	0015      	movs	r5, r2
 8007096:	4320      	orrs	r0, r4
 8007098:	5450      	strb	r0, [r2, r1]
 800709a:	e6b0      	b.n	8006dfe <drawFormatBits+0x726>
 800709c:	2401      	movs	r4, #1
 800709e:	4084      	lsls	r4, r0
 80070a0:	5c68      	ldrb	r0, [r5, r1]
 80070a2:	4320      	orrs	r0, r4
 80070a4:	5468      	strb	r0, [r5, r1]
 80070a6:	e6c5      	b.n	8006e34 <drawFormatBits+0x75c>
 80070a8:	2401      	movs	r4, #1
 80070aa:	4084      	lsls	r4, r0
 80070ac:	5c68      	ldrb	r0, [r5, r1]
 80070ae:	4320      	orrs	r0, r4
 80070b0:	5468      	strb	r0, [r5, r1]
 80070b2:	e6d8      	b.n	8006e66 <drawFormatBits+0x78e>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 80070b4:	2401      	movs	r4, #1
 80070b6:	4084      	lsls	r4, r0
 80070b8:	5c68      	ldrb	r0, [r5, r1]
 80070ba:	002a      	movs	r2, r5
 80070bc:	43a0      	bics	r0, r4
 80070be:	5468      	strb	r0, [r5, r1]
 80070c0:	e6eb      	b.n	8006e9a <drawFormatBits+0x7c2>
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 80070c2:	21c4      	movs	r1, #196	; 0xc4
 80070c4:	4b0a      	ldr	r3, [pc, #40]	; (80070f0 <drawFormatBits+0xa18>)
 80070c6:	4a0b      	ldr	r2, [pc, #44]	; (80070f4 <drawFormatBits+0xa1c>)
 80070c8:	480b      	ldr	r0, [pc, #44]	; (80070f8 <drawFormatBits+0xa20>)
 80070ca:	0089      	lsls	r1, r1, #2
 80070cc:	f002 fa54 	bl	8009578 <__assert_func>
	assert(bits >> 15 == 0);
 80070d0:	2184      	movs	r1, #132	; 0x84
 80070d2:	4b0a      	ldr	r3, [pc, #40]	; (80070fc <drawFormatBits+0xa24>)
 80070d4:	4a0a      	ldr	r2, [pc, #40]	; (8007100 <drawFormatBits+0xa28>)
 80070d6:	4808      	ldr	r0, [pc, #32]	; (80070f8 <drawFormatBits+0xa20>)
 80070d8:	0089      	lsls	r1, r1, #2
 80070da:	f002 fa4d 	bl	8009578 <__assert_func>
	assert(0 <= (int)mask && (int)mask <= 7);
 80070de:	4b09      	ldr	r3, [pc, #36]	; (8007104 <drawFormatBits+0xa2c>)
 80070e0:	4a07      	ldr	r2, [pc, #28]	; (8007100 <drawFormatBits+0xa28>)
 80070e2:	4909      	ldr	r1, [pc, #36]	; (8007108 <drawFormatBits+0xa30>)
 80070e4:	4804      	ldr	r0, [pc, #16]	; (80070f8 <drawFormatBits+0xa20>)
 80070e6:	f002 fa47 	bl	8009578 <__assert_func>
 80070ea:	f7fe fb2f 	bl	800574c <qrcodegen_getSize.part.0>
 80070ee:	46c0      	nop			; (mov r8, r8)
 80070f0:	0800e368 	.word	0x0800e368
 80070f4:	0800e8c4 	.word	0x0800e8c4
 80070f8:	0800e204 	.word	0x0800e204
 80070fc:	0800e3d8 	.word	0x0800e3d8
 8007100:	0800e860 	.word	0x0800e860
 8007104:	0800e334 	.word	0x0800e334
 8007108:	00000209 	.word	0x00000209

0800710c <qrcodegen_encodeSegmentsAdvanced>:
		int minVersion, int maxVersion, enum qrcodegen_Mask mask, bool boostEcl, uint8_t tempBuffer[], uint8_t qrcode[]) {
 800710c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800710e:	464e      	mov	r6, r9
 8007110:	46de      	mov	lr, fp
 8007112:	4657      	mov	r7, sl
 8007114:	4645      	mov	r5, r8
 8007116:	b5e0      	push	{r5, r6, r7, lr}
 8007118:	b0a1      	sub	sp, #132	; 0x84
 800711a:	9305      	str	r3, [sp, #20]
 800711c:	ab2a      	add	r3, sp, #168	; 0xa8
 800711e:	920a      	str	r2, [sp, #40]	; 0x28
 8007120:	cb04      	ldmia	r3!, {r2}
 8007122:	9003      	str	r0, [sp, #12]
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	9101      	str	r1, [sp, #4]
 8007128:	b25b      	sxtb	r3, r3
 800712a:	930e      	str	r3, [sp, #56]	; 0x38
 800712c:	ab2c      	add	r3, sp, #176	; 0xb0
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	9204      	str	r2, [sp, #16]
 8007132:	9307      	str	r3, [sp, #28]
 8007134:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8007136:	4699      	mov	r9, r3
	assert(segs != NULL || len == 0);
 8007138:	2800      	cmp	r0, #0
 800713a:	d101      	bne.n	8007140 <qrcodegen_encodeSegmentsAdvanced+0x34>
 800713c:	f001 f89a 	bl	8008274 <qrcodegen_encodeSegmentsAdvanced+0x1168>
	assert(qrcodegen_VERSION_MIN <= minVersion && minVersion <= maxVersion && maxVersion <= qrcodegen_VERSION_MAX);
 8007140:	9b05      	ldr	r3, [sp, #20]
 8007142:	2b00      	cmp	r3, #0
 8007144:	dc01      	bgt.n	800714a <qrcodegen_encodeSegmentsAdvanced+0x3e>
 8007146:	f001 f92f 	bl	80083a8 <qrcodegen_encodeSegmentsAdvanced+0x129c>
 800714a:	9a04      	ldr	r2, [sp, #16]
 800714c:	4293      	cmp	r3, r2
 800714e:	dd01      	ble.n	8007154 <qrcodegen_encodeSegmentsAdvanced+0x48>
 8007150:	f001 f92a 	bl	80083a8 <qrcodegen_encodeSegmentsAdvanced+0x129c>
 8007154:	2a0a      	cmp	r2, #10
 8007156:	dd01      	ble.n	800715c <qrcodegen_encodeSegmentsAdvanced+0x50>
 8007158:	f001 f926 	bl	80083a8 <qrcodegen_encodeSegmentsAdvanced+0x129c>
	assert(0 <= (int)ecl && (int)ecl <= 3 && -1 <= (int)mask && (int)mask <= 7);
 800715c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800715e:	2b03      	cmp	r3, #3
 8007160:	d901      	bls.n	8007166 <qrcodegen_encodeSegmentsAdvanced+0x5a>
 8007162:	f001 f92e 	bl	80083c2 <qrcodegen_encodeSegmentsAdvanced+0x12b6>
 8007166:	466b      	mov	r3, sp
 8007168:	2238      	movs	r2, #56	; 0x38
 800716a:	189b      	adds	r3, r3, r2
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	9315      	str	r3, [sp, #84]	; 0x54
 8007170:	3301      	adds	r3, #1
 8007172:	b2db      	uxtb	r3, r3
 8007174:	2b08      	cmp	r3, #8
 8007176:	d901      	bls.n	800717c <qrcodegen_encodeSegmentsAdvanced+0x70>
 8007178:	f001 f923 	bl	80083c2 <qrcodegen_encodeSegmentsAdvanced+0x12b6>
	assert(qrcodegen_VERSION_MIN <= ver && ver <= qrcodegen_VERSION_MAX);
 800717c:	9805      	ldr	r0, [sp, #20]
 800717e:	1e43      	subs	r3, r0, #1
 8007180:	2b09      	cmp	r3, #9
 8007182:	d901      	bls.n	8007188 <qrcodegen_encodeSegmentsAdvanced+0x7c>
 8007184:	f001 f916 	bl	80083b4 <qrcodegen_encodeSegmentsAdvanced+0x12a8>
 8007188:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800718a:	4694      	mov	ip, r2
 800718c:	0093      	lsls	r3, r2, #2
 800718e:	4463      	add	r3, ip
 8007190:	4a87      	ldr	r2, [pc, #540]	; (80073b0 <qrcodegen_encodeSegmentsAdvanced+0x2a4>)
 8007192:	00db      	lsls	r3, r3, #3
 8007194:	4463      	add	r3, ip
 8007196:	4694      	mov	ip, r2
 8007198:	449c      	add	ip, r3
 800719a:	4662      	mov	r2, ip
 800719c:	9206      	str	r2, [sp, #24]
 800719e:	4a85      	ldr	r2, [pc, #532]	; (80073b4 <qrcodegen_encodeSegmentsAdvanced+0x2a8>)
 80071a0:	4694      	mov	ip, r2
 80071a2:	4463      	add	r3, ip
 80071a4:	9305      	str	r3, [sp, #20]
// Returns the bit width of the character count field for a segment in the given mode
// in a QR Code at the given version number. The result is in the range [0, 16].
static int numCharCountBits(enum qrcodegen_Mode mode, int version) {
	assert(qrcodegen_VERSION_MIN <= version && version <= qrcodegen_VERSION_MAX);
	int i = (version + 7) / 17;
	switch (mode) {
 80071a6:	4b84      	ldr	r3, [pc, #528]	; (80073b8 <qrcodegen_encodeSegmentsAdvanced+0x2ac>)
 80071a8:	4698      	mov	r8, r3
 80071aa:	464b      	mov	r3, r9
 80071ac:	4681      	mov	r9, r0
 80071ae:	932e      	str	r3, [sp, #184]	; 0xb8
	int result = (16 * ver + 128) * ver + 64;
 80071b0:	464b      	mov	r3, r9
 80071b2:	464a      	mov	r2, r9
 80071b4:	3308      	adds	r3, #8
 80071b6:	4353      	muls	r3, r2
 80071b8:	3304      	adds	r3, #4
 80071ba:	011c      	lsls	r4, r3, #4
 80071bc:	940b      	str	r4, [sp, #44]	; 0x2c
	if (ver >= 2) {
 80071be:	2a01      	cmp	r2, #1
 80071c0:	d079      	beq.n	80072b6 <qrcodegen_encodeSegmentsAdvanced+0x1aa>
		int numAlign = ver / 7 + 2;
 80071c2:	2107      	movs	r1, #7
 80071c4:	4648      	mov	r0, r9
 80071c6:	f7f9 f83b 	bl	8000240 <__divsi3>
 80071ca:	3002      	adds	r0, #2
		result -= (25 * numAlign - 10) * numAlign - 55;
 80071cc:	0083      	lsls	r3, r0, #2
 80071ce:	181b      	adds	r3, r3, r0
 80071d0:	009a      	lsls	r2, r3, #2
 80071d2:	189b      	adds	r3, r3, r2
		if (ver >= 7)
 80071d4:	464a      	mov	r2, r9
		result -= (25 * numAlign - 10) * numAlign - 55;
 80071d6:	3b0a      	subs	r3, #10
 80071d8:	4358      	muls	r0, r3
 80071da:	3837      	subs	r0, #55	; 0x37
 80071dc:	1a23      	subs	r3, r4, r0
 80071de:	9302      	str	r3, [sp, #8]
		if (ver >= 7)
 80071e0:	2a06      	cmp	r2, #6
 80071e2:	dd01      	ble.n	80071e8 <qrcodegen_encodeSegmentsAdvanced+0xdc>
			result -= 36;
 80071e4:	3b24      	subs	r3, #36	; 0x24
 80071e6:	9302      	str	r3, [sp, #8]
	assert(208 <= result && result <= 29648);
 80071e8:	22e6      	movs	r2, #230	; 0xe6
 80071ea:	9b02      	ldr	r3, [sp, #8]
 80071ec:	01d2      	lsls	r2, r2, #7
 80071ee:	3bd0      	subs	r3, #208	; 0xd0
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d901      	bls.n	80071f8 <qrcodegen_encodeSegmentsAdvanced+0xec>
 80071f4:	f001 f91c 	bl	8008430 <qrcodegen_encodeSegmentsAdvanced+0x1324>
	assert(segs != NULL || len == 0);
 80071f8:	9b03      	ldr	r3, [sp, #12]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d05f      	beq.n	80072be <qrcodegen_encodeSegmentsAdvanced+0x1b2>
	for (size_t i = 0; i < len; i++) {
 80071fe:	9b01      	ldr	r3, [sp, #4]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d061      	beq.n	80072c8 <qrcodegen_encodeSegmentsAdvanced+0x1bc>
	int i = (version + 7) / 17;
 8007204:	464b      	mov	r3, r9
 8007206:	2111      	movs	r1, #17
 8007208:	1dd8      	adds	r0, r3, #7
 800720a:	f7f9 f819 	bl	8000240 <__divsi3>
		case qrcodegen_Mode_NUMERIC     : { static const int temp[] = {10, 12, 14}; return temp[i]; }
		case qrcodegen_Mode_ALPHANUMERIC: { static const int temp[] = { 9, 11, 13}; return temp[i]; }
		case qrcodegen_Mode_BYTE        : { static const int temp[] = { 8, 16, 16}; return temp[i]; }
		case qrcodegen_Mode_KANJI       : { static const int temp[] = { 8, 10, 12}; return temp[i]; }
 800720e:	0083      	lsls	r3, r0, #2
 8007210:	469a      	mov	sl, r3
		case qrcodegen_Mode_NUMERIC     : { static const int temp[] = {10, 12, 14}; return temp[i]; }
 8007212:	4b6a      	ldr	r3, [pc, #424]	; (80073bc <qrcodegen_encodeSegmentsAdvanced+0x2b0>)
		assert(0 <= numChars  && numChars  <= INT16_MAX);
 8007214:	2480      	movs	r4, #128	; 0x80
		case qrcodegen_Mode_NUMERIC     : { static const int temp[] = {10, 12, 14}; return temp[i]; }
 8007216:	469b      	mov	fp, r3
 8007218:	9b01      	ldr	r3, [sp, #4]
	int i = (version + 7) / 17;
 800721a:	2500      	movs	r5, #0
 800721c:	2700      	movs	r7, #0
		case qrcodegen_Mode_NUMERIC     : { static const int temp[] = {10, 12, 14}; return temp[i]; }
 800721e:	469c      	mov	ip, r3
 8007220:	9a03      	ldr	r2, [sp, #12]
		assert(0 <= numChars  && numChars  <= INT16_MAX);
 8007222:	0224      	lsls	r4, r4, #8
		int numChars  = segs[i].numChars;
 8007224:	6856      	ldr	r6, [r2, #4]
		int bitLength = segs[i].bitLength;
 8007226:	68d0      	ldr	r0, [r2, #12]
		assert(0 <= numChars  && numChars  <= INT16_MAX);
 8007228:	42a6      	cmp	r6, r4
 800722a:	d301      	bcc.n	8007230 <qrcodegen_encodeSegmentsAdvanced+0x124>
 800722c:	f001 f8b6 	bl	800839c <qrcodegen_encodeSegmentsAdvanced+0x1290>
		assert(0 <= bitLength && bitLength <= INT16_MAX);
 8007230:	42a0      	cmp	r0, r4
 8007232:	d301      	bcc.n	8007238 <qrcodegen_encodeSegmentsAdvanced+0x12c>
 8007234:	f001 f8a5 	bl	8008382 <qrcodegen_encodeSegmentsAdvanced+0x1276>
	switch (mode) {
 8007238:	7811      	ldrb	r1, [r2, #0]
 800723a:	2908      	cmp	r1, #8
 800723c:	d901      	bls.n	8007242 <qrcodegen_encodeSegmentsAdvanced+0x136>
 800723e:	f001 f823 	bl	8008288 <qrcodegen_encodeSegmentsAdvanced+0x117c>
 8007242:	4643      	mov	r3, r8
 8007244:	0089      	lsls	r1, r1, #2
 8007246:	585b      	ldr	r3, [r3, r1]
 8007248:	469f      	mov	pc, r3
		case qrcodegen_Mode_KANJI       : { static const int temp[] = { 8, 10, 12}; return temp[i]; }
 800724a:	4651      	mov	r1, sl
 800724c:	4b5c      	ldr	r3, [pc, #368]	; (80073c0 <qrcodegen_encodeSegmentsAdvanced+0x2b4>)
 800724e:	58cb      	ldr	r3, [r1, r3]
		assert(0 <= ccbits && ccbits <= 16);
 8007250:	2b10      	cmp	r3, #16
 8007252:	d901      	bls.n	8007258 <qrcodegen_encodeSegmentsAdvanced+0x14c>
 8007254:	f001 f89b 	bl	800838e <qrcodegen_encodeSegmentsAdvanced+0x1282>
		if (numChars >= (1L << ccbits))
 8007258:	2101      	movs	r1, #1
 800725a:	4099      	lsls	r1, r3
 800725c:	428e      	cmp	r6, r1
 800725e:	da15      	bge.n	800728c <qrcodegen_encodeSegmentsAdvanced+0x180>
		result += 4L + ccbits + bitLength;
 8007260:	3304      	adds	r3, #4
 8007262:	181b      	adds	r3, r3, r0
 8007264:	18ed      	adds	r5, r5, r3
		if (result > INT16_MAX)
 8007266:	42a5      	cmp	r5, r4
 8007268:	da10      	bge.n	800728c <qrcodegen_encodeSegmentsAdvanced+0x180>
	for (size_t i = 0; i < len; i++) {
 800726a:	3701      	adds	r7, #1
 800726c:	3210      	adds	r2, #16
 800726e:	45bc      	cmp	ip, r7
 8007270:	d1d8      	bne.n	8007224 <qrcodegen_encodeSegmentsAdvanced+0x118>
		- ECC_CODEWORDS_PER_BLOCK    [e][v]
 8007272:	4649      	mov	r1, r9
		* NUM_ERROR_CORRECTION_BLOCKS[e][v];
 8007274:	4648      	mov	r0, r9
	return getNumRawDataModules(v) / 8
 8007276:	9b02      	ldr	r3, [sp, #8]
 8007278:	10da      	asrs	r2, r3, #3
		- ECC_CODEWORDS_PER_BLOCK    [e][v]
 800727a:	9b06      	ldr	r3, [sp, #24]
 800727c:	5659      	ldrsb	r1, [r3, r1]
		* NUM_ERROR_CORRECTION_BLOCKS[e][v];
 800727e:	9b05      	ldr	r3, [sp, #20]
 8007280:	561b      	ldrsb	r3, [r3, r0]
 8007282:	434b      	muls	r3, r1
		- ECC_CODEWORDS_PER_BLOCK    [e][v]
 8007284:	1ad3      	subs	r3, r2, r3
		int dataCapacityBits = getNumDataCodewords(version, ecl) * 8;  // Number of data bits available
 8007286:	00db      	lsls	r3, r3, #3
		if (dataUsedBits != LENGTH_OVERFLOW && dataUsedBits <= dataCapacityBits)
 8007288:	42ab      	cmp	r3, r5
 800728a:	da2c      	bge.n	80072e6 <qrcodegen_encodeSegmentsAdvanced+0x1da>
		if (version >= maxVersion) {  // All versions in the range could not fit the given data
 800728c:	9b04      	ldr	r3, [sp, #16]
 800728e:	454b      	cmp	r3, r9
 8007290:	d01c      	beq.n	80072cc <qrcodegen_encodeSegmentsAdvanced+0x1c0>
	for (version = minVersion; ; version++) {
 8007292:	2301      	movs	r3, #1
 8007294:	469c      	mov	ip, r3
 8007296:	44e1      	add	r9, ip
	assert(qrcodegen_VERSION_MIN <= ver && ver <= qrcodegen_VERSION_MAX);
 8007298:	e78a      	b.n	80071b0 <qrcodegen_encodeSegmentsAdvanced+0xa4>
		case qrcodegen_Mode_BYTE        : { static const int temp[] = { 8, 16, 16}; return temp[i]; }
 800729a:	4651      	mov	r1, sl
 800729c:	4b49      	ldr	r3, [pc, #292]	; (80073c4 <qrcodegen_encodeSegmentsAdvanced+0x2b8>)
 800729e:	58cb      	ldr	r3, [r1, r3]
 80072a0:	e7d6      	b.n	8007250 <qrcodegen_encodeSegmentsAdvanced+0x144>
		case qrcodegen_Mode_ALPHANUMERIC: { static const int temp[] = { 9, 11, 13}; return temp[i]; }
 80072a2:	4651      	mov	r1, sl
 80072a4:	4b48      	ldr	r3, [pc, #288]	; (80073c8 <qrcodegen_encodeSegmentsAdvanced+0x2bc>)
 80072a6:	58cb      	ldr	r3, [r1, r3]
 80072a8:	e7d2      	b.n	8007250 <qrcodegen_encodeSegmentsAdvanced+0x144>
		case qrcodegen_Mode_NUMERIC     : { static const int temp[] = {10, 12, 14}; return temp[i]; }
 80072aa:	465b      	mov	r3, fp
 80072ac:	4651      	mov	r1, sl
 80072ae:	58cb      	ldr	r3, [r1, r3]
 80072b0:	e7ce      	b.n	8007250 <qrcodegen_encodeSegmentsAdvanced+0x144>
	switch (mode) {
 80072b2:	2300      	movs	r3, #0
 80072b4:	e7d0      	b.n	8007258 <qrcodegen_encodeSegmentsAdvanced+0x14c>
	assert(segs != NULL || len == 0);
 80072b6:	9b03      	ldr	r3, [sp, #12]
	int result = (16 * ver + 128) * ver + 64;
 80072b8:	9402      	str	r4, [sp, #8]
	assert(segs != NULL || len == 0);
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d19f      	bne.n	80071fe <qrcodegen_encodeSegmentsAdvanced+0xf2>
 80072be:	9b01      	ldr	r3, [sp, #4]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d001      	beq.n	80072c8 <qrcodegen_encodeSegmentsAdvanced+0x1bc>
 80072c4:	f001 f883 	bl	80083ce <qrcodegen_encodeSegmentsAdvanced+0x12c2>
 80072c8:	2500      	movs	r5, #0
 80072ca:	e7d2      	b.n	8007272 <qrcodegen_encodeSegmentsAdvanced+0x166>
			qrcode[0] = 0;  // Set size to invalid value for safety
 80072cc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
			return false;
 80072ce:	2000      	movs	r0, #0
			qrcode[0] = 0;  // Set size to invalid value for safety
 80072d0:	4699      	mov	r9, r3
 80072d2:	2300      	movs	r3, #0
 80072d4:	464a      	mov	r2, r9
 80072d6:	7013      	strb	r3, [r2, #0]
}
 80072d8:	b021      	add	sp, #132	; 0x84
 80072da:	bcf0      	pop	{r4, r5, r6, r7}
 80072dc:	46bb      	mov	fp, r7
 80072de:	46b2      	mov	sl, r6
 80072e0:	46a9      	mov	r9, r5
 80072e2:	46a0      	mov	r8, r4
 80072e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072e6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80072e8:	9213      	str	r2, [sp, #76]	; 0x4c
 80072ea:	4699      	mov	r9, r3
 80072ec:	9b07      	ldr	r3, [sp, #28]
 80072ee:	9005      	str	r0, [sp, #20]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d001      	beq.n	80072f8 <qrcodegen_encodeSegmentsAdvanced+0x1ec>
 80072f4:	f000 ffd1 	bl	800829a <qrcodegen_encodeSegmentsAdvanced+0x118e>
	memset(qrcode, 0, (size_t)qrcodegen_BUFFER_LEN_FOR_VERSION(version) * sizeof(qrcode[0]));
 80072f8:	9c05      	ldr	r4, [sp, #20]
 80072fa:	2100      	movs	r1, #0
 80072fc:	00a3      	lsls	r3, r4, #2
 80072fe:	9316      	str	r3, [sp, #88]	; 0x58
 8007300:	3311      	adds	r3, #17
 8007302:	435b      	muls	r3, r3
 8007304:	1dda      	adds	r2, r3, #7
 8007306:	10d2      	asrs	r2, r2, #3
 8007308:	4648      	mov	r0, r9
 800730a:	3201      	adds	r2, #1
 800730c:	f002 f9a8 	bl	8009660 <memset>
	for (size_t i = 0; i < len; i++) {
 8007310:	9b01      	ldr	r3, [sp, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <qrcodegen_encodeSegmentsAdvanced+0x20e>
 8007316:	f001 f888 	bl	800842a <qrcodegen_encodeSegmentsAdvanced+0x131e>
	int i = (version + 7) / 17;
 800731a:	1de0      	adds	r0, r4, #7
 800731c:	2111      	movs	r1, #17
 800731e:	f7f8 ff8f 	bl	8000240 <__divsi3>
	for (size_t i = 0; i < len; i++) {
 8007322:	2300      	movs	r3, #0
 8007324:	9306      	str	r3, [sp, #24]
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8007326:	3307      	adds	r3, #7
 8007328:	469a      	mov	sl, r3
 800732a:	3b06      	subs	r3, #6
 800732c:	469b      	mov	fp, r3
		case qrcodegen_Mode_KANJI       : { static const int temp[] = { 8, 10, 12}; return temp[i]; }
 800732e:	0083      	lsls	r3, r0, #2
 8007330:	9a03      	ldr	r2, [sp, #12]
	int bitLen = 0;
 8007332:	2400      	movs	r4, #0
		case qrcodegen_Mode_KANJI       : { static const int temp[] = { 8, 10, 12}; return temp[i]; }
 8007334:	9303      	str	r3, [sp, #12]
		case qrcodegen_Mode_NUMERIC     : { static const int temp[] = {10, 12, 14}; return temp[i]; }
 8007336:	46ac      	mov	ip, r5
 8007338:	464b      	mov	r3, r9
 800733a:	9202      	str	r2, [sp, #8]
		appendBitsToBuffer((unsigned int)seg->mode, 4, qrcode, &bitLen);
 800733c:	9a02      	ldr	r2, [sp, #8]
 800733e:	7811      	ldrb	r1, [r2, #0]
	assert(0 <= numBits && numBits <= 16 && (unsigned long)val >> numBits == 0);
 8007340:	0908      	lsrs	r0, r1, #4
 8007342:	d001      	beq.n	8007348 <qrcodegen_encodeSegmentsAdvanced+0x23c>
 8007344:	f001 f84a 	bl	80083dc <qrcodegen_encodeSegmentsAdvanced+0x12d0>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8007348:	4656      	mov	r6, sl
 800734a:	08c8      	lsrs	r0, r1, #3
 800734c:	43a6      	bics	r6, r4
 800734e:	40b0      	lsls	r0, r6
 8007350:	465f      	mov	r7, fp
 8007352:	10e5      	asrs	r5, r4, #3
 8007354:	5d5e      	ldrb	r6, [r3, r5]
 8007356:	4330      	orrs	r0, r6
 8007358:	5558      	strb	r0, [r3, r5]
 800735a:	0888      	lsrs	r0, r1, #2
 800735c:	4038      	ands	r0, r7
 800735e:	4657      	mov	r7, sl
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8007360:	1c66      	adds	r6, r4, #1
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8007362:	43b7      	bics	r7, r6
 8007364:	40b8      	lsls	r0, r7
 8007366:	465f      	mov	r7, fp
 8007368:	10f5      	asrs	r5, r6, #3
 800736a:	5d5e      	ldrb	r6, [r3, r5]
 800736c:	4330      	orrs	r0, r6
 800736e:	5558      	strb	r0, [r3, r5]
 8007370:	0848      	lsrs	r0, r1, #1
 8007372:	4038      	ands	r0, r7
 8007374:	4657      	mov	r7, sl
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8007376:	1ca6      	adds	r6, r4, #2
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8007378:	43b7      	bics	r7, r6
 800737a:	40b8      	lsls	r0, r7
 800737c:	10f5      	asrs	r5, r6, #3
 800737e:	5d5e      	ldrb	r6, [r3, r5]
 8007380:	4330      	orrs	r0, r6
 8007382:	465e      	mov	r6, fp
 8007384:	4031      	ands	r1, r6
 8007386:	4656      	mov	r6, sl
 8007388:	5558      	strb	r0, [r3, r5]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 800738a:	1ce5      	adds	r5, r4, #3
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 800738c:	43ae      	bics	r6, r5
 800738e:	40b1      	lsls	r1, r6
 8007390:	10e8      	asrs	r0, r5, #3
 8007392:	5c1d      	ldrb	r5, [r3, r0]
 8007394:	4329      	orrs	r1, r5
 8007396:	5419      	strb	r1, [r3, r0]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8007398:	1d21      	adds	r1, r4, #4
 800739a:	9104      	str	r1, [sp, #16]
	switch (mode) {
 800739c:	7811      	ldrb	r1, [r2, #0]
		appendBitsToBuffer((unsigned int)seg->numChars, numCharCountBits(seg->mode, version), qrcode, &bitLen);
 800739e:	6850      	ldr	r0, [r2, #4]
	switch (mode) {
 80073a0:	2908      	cmp	r1, #8
 80073a2:	d901      	bls.n	80073a8 <qrcodegen_encodeSegmentsAdvanced+0x29c>
 80073a4:	f000 ff70 	bl	8008288 <qrcodegen_encodeSegmentsAdvanced+0x117c>
 80073a8:	4d08      	ldr	r5, [pc, #32]	; (80073cc <qrcodegen_encodeSegmentsAdvanced+0x2c0>)
 80073aa:	0089      	lsls	r1, r1, #2
 80073ac:	5869      	ldr	r1, [r5, r1]
 80073ae:	468f      	mov	pc, r1
 80073b0:	0800e6fc 	.word	0x0800e6fc
 80073b4:	0800e7a0 	.word	0x0800e7a0
 80073b8:	0800e604 	.word	0x0800e604
 80073bc:	0800ea14 	.word	0x0800ea14
 80073c0:	0800e9f0 	.word	0x0800e9f0
 80073c4:	0800e9fc 	.word	0x0800e9fc
 80073c8:	0800ea08 	.word	0x0800ea08
 80073cc:	0800e628 	.word	0x0800e628
		case qrcodegen_Mode_KANJI       : { static const int temp[] = { 8, 10, 12}; return temp[i]; }
 80073d0:	49c4      	ldr	r1, [pc, #784]	; (80076e4 <qrcodegen_encodeSegmentsAdvanced+0x5d8>)
 80073d2:	9d03      	ldr	r5, [sp, #12]
 80073d4:	5869      	ldr	r1, [r5, r1]
	assert(0 <= numBits && numBits <= 16 && (unsigned long)val >> numBits == 0);
 80073d6:	2910      	cmp	r1, #16
 80073d8:	d901      	bls.n	80073de <qrcodegen_encodeSegmentsAdvanced+0x2d2>
 80073da:	f000 ffff 	bl	80083dc <qrcodegen_encodeSegmentsAdvanced+0x12d0>
 80073de:	0005      	movs	r5, r0
 80073e0:	40cd      	lsrs	r5, r1
 80073e2:	d001      	beq.n	80073e8 <qrcodegen_encodeSegmentsAdvanced+0x2dc>
 80073e4:	f000 fffa 	bl	80083dc <qrcodegen_encodeSegmentsAdvanced+0x12d0>
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 80073e8:	1e4d      	subs	r5, r1, #1
 80073ea:	d201      	bcs.n	80073f0 <qrcodegen_encodeSegmentsAdvanced+0x2e4>
 80073ec:	f000 fc7e 	bl	8007cec <qrcodegen_encodeSegmentsAdvanced+0xbe0>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 80073f0:	0007      	movs	r7, r0
 80073f2:	40ef      	lsrs	r7, r5
 80073f4:	003d      	movs	r5, r7
 80073f6:	465f      	mov	r7, fp
 80073f8:	403d      	ands	r5, r7
 80073fa:	4657      	mov	r7, sl
 80073fc:	1d22      	adds	r2, r4, #4
 80073fe:	4397      	bics	r7, r2
 8007400:	40bd      	lsls	r5, r7
 8007402:	10d6      	asrs	r6, r2, #3
 8007404:	5d9f      	ldrb	r7, [r3, r6]
 8007406:	433d      	orrs	r5, r7
 8007408:	559d      	strb	r5, [r3, r6]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 800740a:	1d66      	adds	r6, r4, #5
 800740c:	46b0      	mov	r8, r6
 800740e:	1e8d      	subs	r5, r1, #2
 8007410:	2901      	cmp	r1, #1
 8007412:	d100      	bne.n	8007416 <qrcodegen_encodeSegmentsAdvanced+0x30a>
 8007414:	e12a      	b.n	800766c <qrcodegen_encodeSegmentsAdvanced+0x560>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8007416:	0007      	movs	r7, r0
 8007418:	40ef      	lsrs	r7, r5
 800741a:	003d      	movs	r5, r7
 800741c:	465f      	mov	r7, fp
 800741e:	4642      	mov	r2, r8
 8007420:	403d      	ands	r5, r7
 8007422:	4657      	mov	r7, sl
 8007424:	4397      	bics	r7, r2
 8007426:	40bd      	lsls	r5, r7
 8007428:	10f6      	asrs	r6, r6, #3
 800742a:	5d9a      	ldrb	r2, [r3, r6]
 800742c:	4315      	orrs	r5, r2
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 800742e:	1da2      	adds	r2, r4, #6
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8007430:	559d      	strb	r5, [r3, r6]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8007432:	4690      	mov	r8, r2
 8007434:	1ecd      	subs	r5, r1, #3
 8007436:	2902      	cmp	r1, #2
 8007438:	d100      	bne.n	800743c <qrcodegen_encodeSegmentsAdvanced+0x330>
 800743a:	e117      	b.n	800766c <qrcodegen_encodeSegmentsAdvanced+0x560>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 800743c:	0007      	movs	r7, r0
 800743e:	40ef      	lsrs	r7, r5
 8007440:	10d6      	asrs	r6, r2, #3
 8007442:	003d      	movs	r5, r7
 8007444:	465a      	mov	r2, fp
 8007446:	4657      	mov	r7, sl
 8007448:	4015      	ands	r5, r2
 800744a:	4642      	mov	r2, r8
 800744c:	4397      	bics	r7, r2
 800744e:	40bd      	lsls	r5, r7
 8007450:	5d9a      	ldrb	r2, [r3, r6]
 8007452:	4315      	orrs	r5, r2
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8007454:	1de2      	adds	r2, r4, #7
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8007456:	559d      	strb	r5, [r3, r6]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8007458:	4690      	mov	r8, r2
 800745a:	1f0d      	subs	r5, r1, #4
 800745c:	2903      	cmp	r1, #3
 800745e:	d100      	bne.n	8007462 <qrcodegen_encodeSegmentsAdvanced+0x356>
 8007460:	e104      	b.n	800766c <qrcodegen_encodeSegmentsAdvanced+0x560>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8007462:	0007      	movs	r7, r0
 8007464:	40ef      	lsrs	r7, r5
 8007466:	10d6      	asrs	r6, r2, #3
 8007468:	003d      	movs	r5, r7
 800746a:	465a      	mov	r2, fp
 800746c:	4657      	mov	r7, sl
 800746e:	4015      	ands	r5, r2
 8007470:	4642      	mov	r2, r8
 8007472:	4397      	bics	r7, r2
 8007474:	40bd      	lsls	r5, r7
 8007476:	5d9a      	ldrb	r2, [r3, r6]
 8007478:	4315      	orrs	r5, r2
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 800747a:	2208      	movs	r2, #8
 800747c:	4690      	mov	r8, r2
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 800747e:	559d      	strb	r5, [r3, r6]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8007480:	44a0      	add	r8, r4
 8007482:	1f4d      	subs	r5, r1, #5
 8007484:	2904      	cmp	r1, #4
 8007486:	d100      	bne.n	800748a <qrcodegen_encodeSegmentsAdvanced+0x37e>
 8007488:	e0f0      	b.n	800766c <qrcodegen_encodeSegmentsAdvanced+0x560>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 800748a:	0007      	movs	r7, r0
 800748c:	4642      	mov	r2, r8
 800748e:	40ef      	lsrs	r7, r5
 8007490:	10d6      	asrs	r6, r2, #3
 8007492:	003d      	movs	r5, r7
 8007494:	465a      	mov	r2, fp
 8007496:	4657      	mov	r7, sl
 8007498:	4015      	ands	r5, r2
 800749a:	4642      	mov	r2, r8
 800749c:	4397      	bics	r7, r2
 800749e:	40bd      	lsls	r5, r7
 80074a0:	5d9a      	ldrb	r2, [r3, r6]
 80074a2:	4315      	orrs	r5, r2
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 80074a4:	2209      	movs	r2, #9
 80074a6:	4690      	mov	r8, r2
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 80074a8:	559d      	strb	r5, [r3, r6]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 80074aa:	44a0      	add	r8, r4
 80074ac:	1f8d      	subs	r5, r1, #6
 80074ae:	2905      	cmp	r1, #5
 80074b0:	d100      	bne.n	80074b4 <qrcodegen_encodeSegmentsAdvanced+0x3a8>
 80074b2:	e0db      	b.n	800766c <qrcodegen_encodeSegmentsAdvanced+0x560>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 80074b4:	0007      	movs	r7, r0
 80074b6:	4642      	mov	r2, r8
 80074b8:	40ef      	lsrs	r7, r5
 80074ba:	10d6      	asrs	r6, r2, #3
 80074bc:	003d      	movs	r5, r7
 80074be:	465a      	mov	r2, fp
 80074c0:	4657      	mov	r7, sl
 80074c2:	4015      	ands	r5, r2
 80074c4:	4642      	mov	r2, r8
 80074c6:	4397      	bics	r7, r2
 80074c8:	40bd      	lsls	r5, r7
 80074ca:	5d9a      	ldrb	r2, [r3, r6]
 80074cc:	4315      	orrs	r5, r2
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 80074ce:	220a      	movs	r2, #10
 80074d0:	4690      	mov	r8, r2
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 80074d2:	559d      	strb	r5, [r3, r6]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 80074d4:	44a0      	add	r8, r4
 80074d6:	1fcd      	subs	r5, r1, #7
 80074d8:	2906      	cmp	r1, #6
 80074da:	d100      	bne.n	80074de <qrcodegen_encodeSegmentsAdvanced+0x3d2>
 80074dc:	e0c6      	b.n	800766c <qrcodegen_encodeSegmentsAdvanced+0x560>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 80074de:	0007      	movs	r7, r0
 80074e0:	4642      	mov	r2, r8
 80074e2:	40ef      	lsrs	r7, r5
 80074e4:	10d6      	asrs	r6, r2, #3
 80074e6:	003d      	movs	r5, r7
 80074e8:	465a      	mov	r2, fp
 80074ea:	4657      	mov	r7, sl
 80074ec:	4015      	ands	r5, r2
 80074ee:	4642      	mov	r2, r8
 80074f0:	4397      	bics	r7, r2
 80074f2:	40bd      	lsls	r5, r7
 80074f4:	5d9a      	ldrb	r2, [r3, r6]
 80074f6:	4315      	orrs	r5, r2
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 80074f8:	220b      	movs	r2, #11
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 80074fa:	559d      	strb	r5, [r3, r6]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 80074fc:	4690      	mov	r8, r2
 80074fe:	000d      	movs	r5, r1
 8007500:	44a0      	add	r8, r4
 8007502:	3d08      	subs	r5, #8
 8007504:	2907      	cmp	r1, #7
 8007506:	d100      	bne.n	800750a <qrcodegen_encodeSegmentsAdvanced+0x3fe>
 8007508:	e0b0      	b.n	800766c <qrcodegen_encodeSegmentsAdvanced+0x560>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 800750a:	0007      	movs	r7, r0
 800750c:	4642      	mov	r2, r8
 800750e:	40ef      	lsrs	r7, r5
 8007510:	10d6      	asrs	r6, r2, #3
 8007512:	003d      	movs	r5, r7
 8007514:	465a      	mov	r2, fp
 8007516:	4657      	mov	r7, sl
 8007518:	4015      	ands	r5, r2
 800751a:	4642      	mov	r2, r8
 800751c:	4397      	bics	r7, r2
 800751e:	40bd      	lsls	r5, r7
 8007520:	5d9a      	ldrb	r2, [r3, r6]
 8007522:	4315      	orrs	r5, r2
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8007524:	220c      	movs	r2, #12
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8007526:	559d      	strb	r5, [r3, r6]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8007528:	4690      	mov	r8, r2
 800752a:	000d      	movs	r5, r1
 800752c:	44a0      	add	r8, r4
 800752e:	3d09      	subs	r5, #9
 8007530:	2908      	cmp	r1, #8
 8007532:	d100      	bne.n	8007536 <qrcodegen_encodeSegmentsAdvanced+0x42a>
 8007534:	e09a      	b.n	800766c <qrcodegen_encodeSegmentsAdvanced+0x560>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8007536:	0007      	movs	r7, r0
 8007538:	4642      	mov	r2, r8
 800753a:	40ef      	lsrs	r7, r5
 800753c:	10d6      	asrs	r6, r2, #3
 800753e:	003d      	movs	r5, r7
 8007540:	465a      	mov	r2, fp
 8007542:	4657      	mov	r7, sl
 8007544:	4015      	ands	r5, r2
 8007546:	4642      	mov	r2, r8
 8007548:	4397      	bics	r7, r2
 800754a:	40bd      	lsls	r5, r7
 800754c:	5d9a      	ldrb	r2, [r3, r6]
 800754e:	4315      	orrs	r5, r2
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8007550:	220d      	movs	r2, #13
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8007552:	559d      	strb	r5, [r3, r6]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8007554:	4690      	mov	r8, r2
 8007556:	000d      	movs	r5, r1
 8007558:	44a0      	add	r8, r4
 800755a:	3d0a      	subs	r5, #10
 800755c:	2909      	cmp	r1, #9
 800755e:	d100      	bne.n	8007562 <qrcodegen_encodeSegmentsAdvanced+0x456>
 8007560:	e084      	b.n	800766c <qrcodegen_encodeSegmentsAdvanced+0x560>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8007562:	0007      	movs	r7, r0
 8007564:	4642      	mov	r2, r8
 8007566:	40ef      	lsrs	r7, r5
 8007568:	10d6      	asrs	r6, r2, #3
 800756a:	003d      	movs	r5, r7
 800756c:	465a      	mov	r2, fp
 800756e:	4657      	mov	r7, sl
 8007570:	4015      	ands	r5, r2
 8007572:	4642      	mov	r2, r8
 8007574:	4397      	bics	r7, r2
 8007576:	40bd      	lsls	r5, r7
 8007578:	5d9a      	ldrb	r2, [r3, r6]
 800757a:	4315      	orrs	r5, r2
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 800757c:	220e      	movs	r2, #14
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 800757e:	559d      	strb	r5, [r3, r6]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8007580:	4690      	mov	r8, r2
 8007582:	000d      	movs	r5, r1
 8007584:	44a0      	add	r8, r4
 8007586:	3d0b      	subs	r5, #11
 8007588:	290a      	cmp	r1, #10
 800758a:	d06f      	beq.n	800766c <qrcodegen_encodeSegmentsAdvanced+0x560>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 800758c:	0007      	movs	r7, r0
 800758e:	4642      	mov	r2, r8
 8007590:	40ef      	lsrs	r7, r5
 8007592:	10d6      	asrs	r6, r2, #3
 8007594:	003d      	movs	r5, r7
 8007596:	465a      	mov	r2, fp
 8007598:	4657      	mov	r7, sl
 800759a:	4015      	ands	r5, r2
 800759c:	4642      	mov	r2, r8
 800759e:	4397      	bics	r7, r2
 80075a0:	40bd      	lsls	r5, r7
 80075a2:	5d9a      	ldrb	r2, [r3, r6]
 80075a4:	4315      	orrs	r5, r2
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 80075a6:	220f      	movs	r2, #15
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 80075a8:	559d      	strb	r5, [r3, r6]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 80075aa:	4690      	mov	r8, r2
 80075ac:	000d      	movs	r5, r1
 80075ae:	44a0      	add	r8, r4
 80075b0:	3d0c      	subs	r5, #12
 80075b2:	290b      	cmp	r1, #11
 80075b4:	d05a      	beq.n	800766c <qrcodegen_encodeSegmentsAdvanced+0x560>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 80075b6:	0007      	movs	r7, r0
 80075b8:	4642      	mov	r2, r8
 80075ba:	40ef      	lsrs	r7, r5
 80075bc:	10d6      	asrs	r6, r2, #3
 80075be:	003d      	movs	r5, r7
 80075c0:	465a      	mov	r2, fp
 80075c2:	4657      	mov	r7, sl
 80075c4:	4015      	ands	r5, r2
 80075c6:	4642      	mov	r2, r8
 80075c8:	4397      	bics	r7, r2
 80075ca:	40bd      	lsls	r5, r7
 80075cc:	5d9a      	ldrb	r2, [r3, r6]
 80075ce:	4315      	orrs	r5, r2
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 80075d0:	2210      	movs	r2, #16
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 80075d2:	559d      	strb	r5, [r3, r6]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 80075d4:	4690      	mov	r8, r2
 80075d6:	000d      	movs	r5, r1
 80075d8:	44a0      	add	r8, r4
 80075da:	3d0d      	subs	r5, #13
 80075dc:	290c      	cmp	r1, #12
 80075de:	d045      	beq.n	800766c <qrcodegen_encodeSegmentsAdvanced+0x560>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 80075e0:	0007      	movs	r7, r0
 80075e2:	4642      	mov	r2, r8
 80075e4:	40ef      	lsrs	r7, r5
 80075e6:	10d6      	asrs	r6, r2, #3
 80075e8:	003d      	movs	r5, r7
 80075ea:	465a      	mov	r2, fp
 80075ec:	4657      	mov	r7, sl
 80075ee:	4015      	ands	r5, r2
 80075f0:	4642      	mov	r2, r8
 80075f2:	4397      	bics	r7, r2
 80075f4:	40bd      	lsls	r5, r7
 80075f6:	5d9a      	ldrb	r2, [r3, r6]
 80075f8:	4315      	orrs	r5, r2
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 80075fa:	2211      	movs	r2, #17
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 80075fc:	559d      	strb	r5, [r3, r6]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 80075fe:	4690      	mov	r8, r2
 8007600:	000d      	movs	r5, r1
 8007602:	44a0      	add	r8, r4
 8007604:	3d0e      	subs	r5, #14
 8007606:	290d      	cmp	r1, #13
 8007608:	d030      	beq.n	800766c <qrcodegen_encodeSegmentsAdvanced+0x560>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 800760a:	0007      	movs	r7, r0
 800760c:	4642      	mov	r2, r8
 800760e:	40ef      	lsrs	r7, r5
 8007610:	10d6      	asrs	r6, r2, #3
 8007612:	003d      	movs	r5, r7
 8007614:	465a      	mov	r2, fp
 8007616:	4657      	mov	r7, sl
 8007618:	4015      	ands	r5, r2
 800761a:	4642      	mov	r2, r8
 800761c:	4397      	bics	r7, r2
 800761e:	40bd      	lsls	r5, r7
 8007620:	5d9a      	ldrb	r2, [r3, r6]
 8007622:	4315      	orrs	r5, r2
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8007624:	2212      	movs	r2, #18
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8007626:	559d      	strb	r5, [r3, r6]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8007628:	4691      	mov	r9, r2
 800762a:	000d      	movs	r5, r1
 800762c:	44a1      	add	r9, r4
 800762e:	3d0f      	subs	r5, #15
 8007630:	290e      	cmp	r1, #14
 8007632:	d01b      	beq.n	800766c <qrcodegen_encodeSegmentsAdvanced+0x560>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8007634:	464a      	mov	r2, r9
 8007636:	0006      	movs	r6, r0
 8007638:	10d2      	asrs	r2, r2, #3
 800763a:	4690      	mov	r8, r2
 800763c:	40ee      	lsrs	r6, r5
 800763e:	465a      	mov	r2, fp
 8007640:	4657      	mov	r7, sl
 8007642:	4016      	ands	r6, r2
 8007644:	464a      	mov	r2, r9
 8007646:	4397      	bics	r7, r2
 8007648:	4642      	mov	r2, r8
 800764a:	40be      	lsls	r6, r7
 800764c:	5c9a      	ldrb	r2, [r3, r2]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 800764e:	3413      	adds	r4, #19
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8007650:	4316      	orrs	r6, r2
 8007652:	4642      	mov	r2, r8
 8007654:	549e      	strb	r6, [r3, r2]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8007656:	2d00      	cmp	r5, #0
 8007658:	d008      	beq.n	800766c <qrcodegen_encodeSegmentsAdvanced+0x560>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 800765a:	465a      	mov	r2, fp
 800765c:	4656      	mov	r6, sl
 800765e:	4010      	ands	r0, r2
 8007660:	43a6      	bics	r6, r4
 8007662:	40b0      	lsls	r0, r6
 8007664:	10e5      	asrs	r5, r4, #3
 8007666:	5d5c      	ldrb	r4, [r3, r5]
 8007668:	4320      	orrs	r0, r4
 800766a:	5558      	strb	r0, [r3, r5]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 800766c:	9a04      	ldr	r2, [sp, #16]
 800766e:	1854      	adds	r4, r2, r1
		for (int j = 0; j < seg->bitLength; j++) {
 8007670:	9902      	ldr	r1, [sp, #8]
 8007672:	68ca      	ldr	r2, [r1, #12]
 8007674:	2a00      	cmp	r2, #0
 8007676:	dd16      	ble.n	80076a6 <qrcodegen_encodeSegmentsAdvanced+0x59a>
 8007678:	2000      	movs	r0, #0
 800767a:	000a      	movs	r2, r1
			int bit = (seg->data[j >> 3] >> (7 - (j & 7))) & 1;
 800767c:	6896      	ldr	r6, [r2, #8]
 800767e:	10c1      	asrs	r1, r0, #3
 8007680:	5c71      	ldrb	r1, [r6, r1]
 8007682:	4656      	mov	r6, sl
 8007684:	4386      	bics	r6, r0
 8007686:	4131      	asrs	r1, r6
 8007688:	465e      	mov	r6, fp
 800768a:	4031      	ands	r1, r6
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 800768c:	4656      	mov	r6, sl
 800768e:	43a6      	bics	r6, r4
 8007690:	40b1      	lsls	r1, r6
 8007692:	10e5      	asrs	r5, r4, #3
 8007694:	5d5e      	ldrb	r6, [r3, r5]
		for (int j = 0; j < seg->bitLength; j++) {
 8007696:	3001      	adds	r0, #1
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8007698:	4331      	orrs	r1, r6
 800769a:	5559      	strb	r1, [r3, r5]
		for (int j = 0; j < seg->bitLength; j++) {
 800769c:	68d1      	ldr	r1, [r2, #12]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 800769e:	3401      	adds	r4, #1
		for (int j = 0; j < seg->bitLength; j++) {
 80076a0:	4281      	cmp	r1, r0
 80076a2:	dceb      	bgt.n	800767c <qrcodegen_encodeSegmentsAdvanced+0x570>
 80076a4:	9202      	str	r2, [sp, #8]
	for (size_t i = 0; i < len; i++) {
 80076a6:	9a02      	ldr	r2, [sp, #8]
 80076a8:	9906      	ldr	r1, [sp, #24]
 80076aa:	3210      	adds	r2, #16
 80076ac:	9202      	str	r2, [sp, #8]
 80076ae:	9a01      	ldr	r2, [sp, #4]
 80076b0:	3101      	adds	r1, #1
 80076b2:	9106      	str	r1, [sp, #24]
 80076b4:	428a      	cmp	r2, r1
 80076b6:	d000      	beq.n	80076ba <qrcodegen_encodeSegmentsAdvanced+0x5ae>
 80076b8:	e640      	b.n	800733c <qrcodegen_encodeSegmentsAdvanced+0x230>
 80076ba:	4665      	mov	r5, ip
 80076bc:	4699      	mov	r9, r3
	assert(bitLen == dataUsedBits);
 80076be:	42a5      	cmp	r5, r4
 80076c0:	d001      	beq.n	80076c6 <qrcodegen_encodeSegmentsAdvanced+0x5ba>
 80076c2:	f000 fe91 	bl	80083e8 <qrcodegen_encodeSegmentsAdvanced+0x12dc>
	int dataCapacityBits = getNumDataCodewords(version, ecl) * 8;
 80076c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80076c8:	9805      	ldr	r0, [sp, #20]
 80076ca:	f7fe f84f 	bl	800576c <getNumDataCodewords>
 80076ce:	00c7      	lsls	r7, r0, #3
	assert(bitLen <= dataCapacityBits);
 80076d0:	42af      	cmp	r7, r5
 80076d2:	da01      	bge.n	80076d8 <qrcodegen_encodeSegmentsAdvanced+0x5cc>
 80076d4:	f000 fe8e 	bl	80083f4 <qrcodegen_encodeSegmentsAdvanced+0x12e8>
	int terminatorBits = dataCapacityBits - bitLen;
 80076d8:	1b3b      	subs	r3, r7, r4
	if (terminatorBits > 4)
 80076da:	2b04      	cmp	r3, #4
 80076dc:	dd01      	ble.n	80076e2 <qrcodegen_encodeSegmentsAdvanced+0x5d6>
 80076de:	f000 fdd9 	bl	8008294 <qrcodegen_encodeSegmentsAdvanced+0x1188>
 80076e2:	e001      	b.n	80076e8 <qrcodegen_encodeSegmentsAdvanced+0x5dc>
 80076e4:	0800e9f0 	.word	0x0800e9f0
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 80076e8:	42a7      	cmp	r7, r4
 80076ea:	d000      	beq.n	80076ee <qrcodegen_encodeSegmentsAdvanced+0x5e2>
 80076ec:	18e4      	adds	r4, r4, r3
	appendBitsToBuffer(0, (8 - bitLen % 8) % 8, qrcode, &bitLen);
 80076ee:	2207      	movs	r2, #7
 80076f0:	0013      	movs	r3, r2
 80076f2:	0011      	movs	r1, r2
 80076f4:	4023      	ands	r3, r4
 80076f6:	425b      	negs	r3, r3
 80076f8:	4019      	ands	r1, r3
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 80076fa:	421a      	tst	r2, r3
 80076fc:	d000      	beq.n	8007700 <qrcodegen_encodeSegmentsAdvanced+0x5f4>
 80076fe:	1864      	adds	r4, r4, r1
	assert(bitLen % 8 == 0);
 8007700:	0763      	lsls	r3, r4, #29
 8007702:	d001      	beq.n	8007708 <qrcodegen_encodeSegmentsAdvanced+0x5fc>
 8007704:	f000 fe7c 	bl	8008400 <qrcodegen_encodeSegmentsAdvanced+0x12f4>
	for (uint8_t padByte = 0xEC; bitLen < dataCapacityBits; padByte ^= 0xEC ^ 0x11)
 8007708:	23ec      	movs	r3, #236	; 0xec
 800770a:	42a7      	cmp	r7, r4
 800770c:	dd60      	ble.n	80077d0 <qrcodegen_encodeSegmentsAdvanced+0x6c4>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 800770e:	2102      	movs	r1, #2
 8007710:	4249      	negs	r1, r1
 8007712:	4688      	mov	r8, r1
 8007714:	3901      	subs	r1, #1
 8007716:	468c      	mov	ip, r1
 8007718:	4441      	add	r1, r8
 800771a:	468a      	mov	sl, r1
 800771c:	3901      	subs	r1, #1
 800771e:	468b      	mov	fp, r1
 8007720:	2207      	movs	r2, #7
 8007722:	2601      	movs	r6, #1
 8007724:	4649      	mov	r1, r9
 8007726:	9701      	str	r7, [sp, #4]
 8007728:	0017      	movs	r7, r2
 800772a:	09d8      	lsrs	r0, r3, #7
 800772c:	43a7      	bics	r7, r4
 800772e:	40b8      	lsls	r0, r7
 8007730:	10e5      	asrs	r5, r4, #3
 8007732:	5d4f      	ldrb	r7, [r1, r5]
 8007734:	4338      	orrs	r0, r7
 8007736:	4647      	mov	r7, r8
 8007738:	5548      	strb	r0, [r1, r5]
 800773a:	1b3f      	subs	r7, r7, r4
 800773c:	0998      	lsrs	r0, r3, #6
 800773e:	4017      	ands	r7, r2
 8007740:	4030      	ands	r0, r6
 8007742:	40b8      	lsls	r0, r7
 8007744:	1c65      	adds	r5, r4, #1
 8007746:	10ed      	asrs	r5, r5, #3
 8007748:	5d4f      	ldrb	r7, [r1, r5]
 800774a:	4338      	orrs	r0, r7
 800774c:	4667      	mov	r7, ip
 800774e:	5548      	strb	r0, [r1, r5]
 8007750:	1b3f      	subs	r7, r7, r4
 8007752:	0958      	lsrs	r0, r3, #5
 8007754:	4017      	ands	r7, r2
 8007756:	4030      	ands	r0, r6
 8007758:	40b8      	lsls	r0, r7
 800775a:	1ca5      	adds	r5, r4, #2
 800775c:	10ed      	asrs	r5, r5, #3
 800775e:	5d4f      	ldrb	r7, [r1, r5]
 8007760:	4338      	orrs	r0, r7
 8007762:	2704      	movs	r7, #4
 8007764:	427f      	negs	r7, r7
 8007766:	5548      	strb	r0, [r1, r5]
 8007768:	1b3f      	subs	r7, r7, r4
 800776a:	0918      	lsrs	r0, r3, #4
 800776c:	4017      	ands	r7, r2
 800776e:	4030      	ands	r0, r6
 8007770:	40b8      	lsls	r0, r7
 8007772:	1ce5      	adds	r5, r4, #3
 8007774:	10ed      	asrs	r5, r5, #3
 8007776:	5d4f      	ldrb	r7, [r1, r5]
 8007778:	4338      	orrs	r0, r7
 800777a:	4657      	mov	r7, sl
 800777c:	5548      	strb	r0, [r1, r5]
 800777e:	1b3f      	subs	r7, r7, r4
 8007780:	08d8      	lsrs	r0, r3, #3
 8007782:	4017      	ands	r7, r2
 8007784:	4030      	ands	r0, r6
 8007786:	40b8      	lsls	r0, r7
 8007788:	1d25      	adds	r5, r4, #4
 800778a:	10ed      	asrs	r5, r5, #3
 800778c:	5d4f      	ldrb	r7, [r1, r5]
 800778e:	4338      	orrs	r0, r7
 8007790:	465f      	mov	r7, fp
 8007792:	5548      	strb	r0, [r1, r5]
 8007794:	1b3f      	subs	r7, r7, r4
 8007796:	0898      	lsrs	r0, r3, #2
 8007798:	4017      	ands	r7, r2
 800779a:	4030      	ands	r0, r6
 800779c:	40b8      	lsls	r0, r7
 800779e:	1d65      	adds	r5, r4, #5
 80077a0:	10ed      	asrs	r5, r5, #3
 80077a2:	5d4f      	ldrb	r7, [r1, r5]
 80077a4:	4338      	orrs	r0, r7
 80077a6:	2708      	movs	r7, #8
 80077a8:	5548      	strb	r0, [r1, r5]
 80077aa:	0030      	movs	r0, r6
 80077ac:	427f      	negs	r7, r7
 80077ae:	1b3f      	subs	r7, r7, r4
 80077b0:	4018      	ands	r0, r3
 80077b2:	4017      	ands	r7, r2
 80077b4:	40b8      	lsls	r0, r7
 80077b6:	1de5      	adds	r5, r4, #7
 80077b8:	10ed      	asrs	r5, r5, #3
 80077ba:	5d4f      	ldrb	r7, [r1, r5]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 80077bc:	3408      	adds	r4, #8
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 80077be:	4338      	orrs	r0, r7
 80077c0:	5548      	strb	r0, [r1, r5]
	for (uint8_t padByte = 0xEC; bitLen < dataCapacityBits; padByte ^= 0xEC ^ 0x11)
 80077c2:	4660      	mov	r0, ip
 80077c4:	4043      	eors	r3, r0
 80077c6:	9801      	ldr	r0, [sp, #4]
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	42a0      	cmp	r0, r4
 80077cc:	dcac      	bgt.n	8007728 <qrcodegen_encodeSegmentsAdvanced+0x61c>
 80077ce:	4689      	mov	r9, r1
	int numBlocks = NUM_ERROR_CORRECTION_BLOCKS[(int)ecl][version];
 80077d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077d2:	9905      	ldr	r1, [sp, #20]
 80077d4:	4694      	mov	ip, r2
 80077d6:	0093      	lsls	r3, r2, #2
 80077d8:	4463      	add	r3, ip
 80077da:	4ad5      	ldr	r2, [pc, #852]	; (8007b30 <qrcodegen_encodeSegmentsAdvanced+0xa24>)
 80077dc:	00db      	lsls	r3, r3, #3
 80077de:	4463      	add	r3, ip
 80077e0:	18d2      	adds	r2, r2, r3
 80077e2:	5652      	ldrsb	r2, [r2, r1]
 80077e4:	920c      	str	r2, [sp, #48]	; 0x30
	int blockEccLen = ECC_CODEWORDS_PER_BLOCK  [(int)ecl][version];
 80077e6:	4ad3      	ldr	r2, [pc, #844]	; (8007b34 <qrcodegen_encodeSegmentsAdvanced+0xa28>)
 80077e8:	4694      	mov	ip, r2
 80077ea:	4463      	add	r3, ip
 80077ec:	565b      	ldrsb	r3, [r3, r1]
 80077ee:	4698      	mov	r8, r3
	if (ver >= 2) {
 80077f0:	2901      	cmp	r1, #1
 80077f2:	d018      	beq.n	8007826 <qrcodegen_encodeSegmentsAdvanced+0x71a>
 80077f4:	000c      	movs	r4, r1
		int numAlign = ver / 7 + 2;
 80077f6:	2107      	movs	r1, #7
 80077f8:	0020      	movs	r0, r4
 80077fa:	f7f8 fd21 	bl	8000240 <__divsi3>
 80077fe:	3002      	adds	r0, #2
		result -= (25 * numAlign - 10) * numAlign - 55;
 8007800:	0083      	lsls	r3, r0, #2
 8007802:	181b      	adds	r3, r3, r0
 8007804:	009a      	lsls	r2, r3, #2
 8007806:	189b      	adds	r3, r3, r2
 8007808:	3b0a      	subs	r3, #10
 800780a:	4343      	muls	r3, r0
 800780c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800780e:	3b37      	subs	r3, #55	; 0x37
 8007810:	1ad3      	subs	r3, r2, r3
		if (ver >= 7)
 8007812:	2c06      	cmp	r4, #6
 8007814:	dd00      	ble.n	8007818 <qrcodegen_encodeSegmentsAdvanced+0x70c>
			result -= 36;
 8007816:	3b24      	subs	r3, #36	; 0x24
	assert(208 <= result && result <= 29648);
 8007818:	22e6      	movs	r2, #230	; 0xe6
 800781a:	3bd0      	subs	r3, #208	; 0xd0
 800781c:	01d2      	lsls	r2, r2, #7
 800781e:	4293      	cmp	r3, r2
 8007820:	d901      	bls.n	8007826 <qrcodegen_encodeSegmentsAdvanced+0x71a>
 8007822:	f000 fe05 	bl	8008430 <qrcodegen_encodeSegmentsAdvanced+0x1324>
	int dataLen = getNumDataCodewords(version, ecl);
 8007826:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007828:	9805      	ldr	r0, [sp, #20]
 800782a:	f7fd ff9f 	bl	800576c <getNumDataCodewords>
 800782e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007830:	9007      	str	r0, [sp, #28]
	int numShortBlocks = numBlocks - rawCodewords % numBlocks;
 8007832:	0021      	movs	r1, r4
 8007834:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8007836:	f7f8 fde9 	bl	800040c <__aeabi_idivmod>
 800783a:	1a63      	subs	r3, r4, r1
 800783c:	930d      	str	r3, [sp, #52]	; 0x34
	int shortBlockDataLen = rawCodewords / numBlocks - blockEccLen;
 800783e:	4643      	mov	r3, r8
 8007840:	1ac3      	subs	r3, r0, r3
 8007842:	9314      	str	r3, [sp, #80]	; 0x50
	assert(1 <= degree && degree <= qrcodegen_REED_SOLOMON_DEGREE_MAX);
 8007844:	4643      	mov	r3, r8
 8007846:	3b01      	subs	r3, #1
 8007848:	9306      	str	r3, [sp, #24]
 800784a:	2b1d      	cmp	r3, #29
 800784c:	d901      	bls.n	8007852 <qrcodegen_encodeSegmentsAdvanced+0x746>
 800784e:	f000 fde5 	bl	800841c <qrcodegen_encodeSegmentsAdvanced+0x1310>
	memset(result, 0, (size_t)degree * sizeof(result[0]));
 8007852:	4642      	mov	r2, r8
 8007854:	2100      	movs	r1, #0
 8007856:	a818      	add	r0, sp, #96	; 0x60
 8007858:	f001 ff02 	bl	8009660 <memset>
	result[degree - 1] = 1;  // Start off with the monomial x^0
 800785c:	2301      	movs	r3, #1
 800785e:	9906      	ldr	r1, [sp, #24]
 8007860:	aa18      	add	r2, sp, #96	; 0x60
 8007862:	5453      	strb	r3, [r2, r1]
	for (int i = 0; i < degree; i++) {
 8007864:	2300      	movs	r3, #0
 8007866:	9304      	str	r3, [sp, #16]
	uint8_t root = 1;
 8007868:	3301      	adds	r3, #1
 800786a:	9303      	str	r3, [sp, #12]
	for (int i = 0; i < degree; i++) {
 800786c:	4643      	mov	r3, r8
 800786e:	2b00      	cmp	r3, #0
 8007870:	dc00      	bgt.n	8007874 <qrcodegen_encodeSegmentsAdvanced+0x768>
 8007872:	e091      	b.n	8007998 <qrcodegen_encodeSegmentsAdvanced+0x88c>
 8007874:	464b      	mov	r3, r9
 8007876:	4645      	mov	r5, r8
 8007878:	932e      	str	r3, [sp, #184]	; 0xb8
		z ^= ((y >> i) & 1) * x;
 800787a:	2101      	movs	r1, #1
 800787c:	9a03      	ldr	r2, [sp, #12]
		for (int j = 0; j < degree; j++) {
 800787e:	2400      	movs	r4, #0
		z ^= ((y >> i) & 1) * x;
 8007880:	09d3      	lsrs	r3, r2, #7
 8007882:	469a      	mov	sl, r3
 8007884:	1193      	asrs	r3, r2, #6
 8007886:	4019      	ands	r1, r3
 8007888:	4689      	mov	r9, r1
 800788a:	2101      	movs	r1, #1
 800788c:	1153      	asrs	r3, r2, #5
 800788e:	4019      	ands	r1, r3
 8007890:	4688      	mov	r8, r1
 8007892:	2101      	movs	r1, #1
 8007894:	1113      	asrs	r3, r2, #4
 8007896:	4019      	ands	r1, r3
 8007898:	2301      	movs	r3, #1
 800789a:	468c      	mov	ip, r1
 800789c:	2101      	movs	r1, #1
 800789e:	10d7      	asrs	r7, r2, #3
 80078a0:	1096      	asrs	r6, r2, #2
 80078a2:	401f      	ands	r7, r3
 80078a4:	4033      	ands	r3, r6
 80078a6:	469b      	mov	fp, r3
 80078a8:	1053      	asrs	r3, r2, #1
 80078aa:	4019      	ands	r1, r3
 80078ac:	2301      	movs	r3, #1
 80078ae:	4013      	ands	r3, r2
 80078b0:	9302      	str	r3, [sp, #8]
		for (int j = 0; j < degree; j++) {
 80078b2:	003b      	movs	r3, r7
 80078b4:	464f      	mov	r7, r9
 80078b6:	4699      	mov	r9, r3
		z ^= ((y >> i) & 1) * x;
 80078b8:	9101      	str	r1, [sp, #4]
 80078ba:	a818      	add	r0, sp, #96	; 0x60
 80078bc:	4653      	mov	r3, sl
			result[j] = reedSolomonMultiply(result[j], root);
 80078be:	7801      	ldrb	r1, [r0, #0]
			if (j + 1 < degree)
 80078c0:	3401      	adds	r4, #1
		z ^= ((y >> i) & 1) * x;
 80078c2:	434b      	muls	r3, r1
 80078c4:	b2db      	uxtb	r3, r3
		z = (uint8_t)((z << 1) ^ ((z >> 7) * 0x11D));
 80078c6:	09de      	lsrs	r6, r3, #7
 80078c8:	00f2      	lsls	r2, r6, #3
 80078ca:	1b92      	subs	r2, r2, r6
 80078cc:	0092      	lsls	r2, r2, #2
 80078ce:	18b2      	adds	r2, r6, r2
 80078d0:	005b      	lsls	r3, r3, #1
 80078d2:	405a      	eors	r2, r3
		z ^= ((y >> i) & 1) * x;
 80078d4:	003b      	movs	r3, r7
 80078d6:	434b      	muls	r3, r1
 80078d8:	405a      	eors	r2, r3
 80078da:	b2d2      	uxtb	r2, r2
		z = (uint8_t)((z << 1) ^ ((z >> 7) * 0x11D));
 80078dc:	09d6      	lsrs	r6, r2, #7
 80078de:	00f3      	lsls	r3, r6, #3
 80078e0:	1b9b      	subs	r3, r3, r6
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	18f3      	adds	r3, r6, r3
 80078e6:	0052      	lsls	r2, r2, #1
 80078e8:	4053      	eors	r3, r2
		z ^= ((y >> i) & 1) * x;
 80078ea:	4642      	mov	r2, r8
 80078ec:	434a      	muls	r2, r1
 80078ee:	4053      	eors	r3, r2
 80078f0:	b2db      	uxtb	r3, r3
		z = (uint8_t)((z << 1) ^ ((z >> 7) * 0x11D));
 80078f2:	09de      	lsrs	r6, r3, #7
 80078f4:	00f2      	lsls	r2, r6, #3
 80078f6:	1b92      	subs	r2, r2, r6
 80078f8:	0092      	lsls	r2, r2, #2
 80078fa:	18b2      	adds	r2, r6, r2
 80078fc:	005b      	lsls	r3, r3, #1
 80078fe:	405a      	eors	r2, r3
		z ^= ((y >> i) & 1) * x;
 8007900:	4663      	mov	r3, ip
 8007902:	434b      	muls	r3, r1
 8007904:	405a      	eors	r2, r3
 8007906:	b2d2      	uxtb	r2, r2
		z = (uint8_t)((z << 1) ^ ((z >> 7) * 0x11D));
 8007908:	09d6      	lsrs	r6, r2, #7
 800790a:	00f3      	lsls	r3, r6, #3
 800790c:	1b9b      	subs	r3, r3, r6
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	18f3      	adds	r3, r6, r3
 8007912:	0052      	lsls	r2, r2, #1
 8007914:	4053      	eors	r3, r2
		z ^= ((y >> i) & 1) * x;
 8007916:	464a      	mov	r2, r9
 8007918:	434a      	muls	r2, r1
 800791a:	4053      	eors	r3, r2
 800791c:	b2db      	uxtb	r3, r3
		z = (uint8_t)((z << 1) ^ ((z >> 7) * 0x11D));
 800791e:	09de      	lsrs	r6, r3, #7
 8007920:	00f2      	lsls	r2, r6, #3
 8007922:	1b92      	subs	r2, r2, r6
 8007924:	0092      	lsls	r2, r2, #2
 8007926:	18b2      	adds	r2, r6, r2
 8007928:	005b      	lsls	r3, r3, #1
 800792a:	405a      	eors	r2, r3
		z ^= ((y >> i) & 1) * x;
 800792c:	465b      	mov	r3, fp
 800792e:	434b      	muls	r3, r1
 8007930:	405a      	eors	r2, r3
 8007932:	b2d2      	uxtb	r2, r2
		z = (uint8_t)((z << 1) ^ ((z >> 7) * 0x11D));
 8007934:	09d6      	lsrs	r6, r2, #7
 8007936:	00f3      	lsls	r3, r6, #3
 8007938:	1b9b      	subs	r3, r3, r6
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	18f3      	adds	r3, r6, r3
 800793e:	0052      	lsls	r2, r2, #1
 8007940:	4053      	eors	r3, r2
		z ^= ((y >> i) & 1) * x;
 8007942:	9a01      	ldr	r2, [sp, #4]
 8007944:	434a      	muls	r2, r1
 8007946:	4053      	eors	r3, r2
 8007948:	b2db      	uxtb	r3, r3
		z = (uint8_t)((z << 1) ^ ((z >> 7) * 0x11D));
 800794a:	09de      	lsrs	r6, r3, #7
 800794c:	00f2      	lsls	r2, r6, #3
 800794e:	1b92      	subs	r2, r2, r6
 8007950:	0092      	lsls	r2, r2, #2
 8007952:	005b      	lsls	r3, r3, #1
 8007954:	18b2      	adds	r2, r6, r2
 8007956:	405a      	eors	r2, r3
		z ^= ((y >> i) & 1) * x;
 8007958:	9b02      	ldr	r3, [sp, #8]
 800795a:	4359      	muls	r1, r3
 800795c:	404a      	eors	r2, r1
 800795e:	b2d2      	uxtb	r2, r2
			result[j] = reedSolomonMultiply(result[j], root);
 8007960:	7002      	strb	r2, [r0, #0]
			if (j + 1 < degree)
 8007962:	42a5      	cmp	r5, r4
 8007964:	dd02      	ble.n	800796c <qrcodegen_encodeSegmentsAdvanced+0x860>
				result[j] ^= result[j + 1];
 8007966:	7841      	ldrb	r1, [r0, #1]
 8007968:	404a      	eors	r2, r1
 800796a:	7002      	strb	r2, [r0, #0]
		for (int j = 0; j < degree; j++) {
 800796c:	3001      	adds	r0, #1
 800796e:	42a5      	cmp	r5, r4
 8007970:	dca4      	bgt.n	80078bc <qrcodegen_encodeSegmentsAdvanced+0x7b0>
		z = (uint8_t)((z << 1) ^ ((z >> 7) * 0x11D));
 8007972:	9903      	ldr	r1, [sp, #12]
 8007974:	09cb      	lsrs	r3, r1, #7
 8007976:	00da      	lsls	r2, r3, #3
 8007978:	1ad2      	subs	r2, r2, r3
 800797a:	0092      	lsls	r2, r2, #2
 800797c:	189b      	adds	r3, r3, r2
 800797e:	004a      	lsls	r2, r1, #1
 8007980:	4053      	eors	r3, r2
		z ^= ((y >> i) & 1) * x;
 8007982:	b2db      	uxtb	r3, r3
 8007984:	9303      	str	r3, [sp, #12]
	for (int i = 0; i < degree; i++) {
 8007986:	9b04      	ldr	r3, [sp, #16]
 8007988:	3301      	adds	r3, #1
 800798a:	9304      	str	r3, [sp, #16]
 800798c:	429d      	cmp	r5, r3
 800798e:	dd00      	ble.n	8007992 <qrcodegen_encodeSegmentsAdvanced+0x886>
 8007990:	e773      	b.n	800787a <qrcodegen_encodeSegmentsAdvanced+0x76e>
 8007992:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8007994:	46a8      	mov	r8, r5
 8007996:	4699      	mov	r9, r3
	for (int i = 0; i < numBlocks; i++) {
 8007998:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800799a:	2b00      	cmp	r3, #0
 800799c:	dc00      	bgt.n	80079a0 <qrcodegen_encodeSegmentsAdvanced+0x894>
 800799e:	e0ef      	b.n	8007b80 <qrcodegen_encodeSegmentsAdvanced+0xa74>
 80079a0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
		uint8_t *ecc = &data[dataLen];  // Temporary storage
 80079a2:	9b07      	ldr	r3, [sp, #28]
 80079a4:	4694      	mov	ip, r2
 80079a6:	001d      	movs	r5, r3
 80079a8:	4463      	add	r3, ip
 80079aa:	9311      	str	r3, [sp, #68]	; 0x44
 80079ac:	464b      	mov	r3, r9
 80079ae:	930f      	str	r3, [sp, #60]	; 0x3c
	for (int i = 0; i < numBlocks; i++) {
 80079b0:	2300      	movs	r3, #0
 80079b2:	9310      	str	r3, [sp, #64]	; 0x40
 80079b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		uint8_t *ecc = &data[dataLen];  // Temporary storage
 80079b6:	444d      	add	r5, r9
 80079b8:	0fdb      	lsrs	r3, r3, #31
 80079ba:	9317      	str	r3, [sp, #92]	; 0x5c
		memmove(&result[0], &result[1], (size_t)(degree - 1) * sizeof(result[0]));
 80079bc:	1c6b      	adds	r3, r5, #1
 80079be:	9309      	str	r3, [sp, #36]	; 0x24
		z ^= ((y >> i) & 1) * x;
 80079c0:	464b      	mov	r3, r9
 80079c2:	932e      	str	r3, [sp, #184]	; 0xb8
		int datLen = shortBlockDataLen + (i < numShortBlocks ? 0 : 1);
 80079c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80079c6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80079c8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80079ca:	17d3      	asrs	r3, r2, #31
 80079cc:	4282      	cmp	r2, r0
 80079ce:	414b      	adcs	r3, r1
 80079d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
	memset(result, 0, (size_t)degree * sizeof(result[0]));
 80079d2:	2100      	movs	r1, #0
		int datLen = shortBlockDataLen + (i < numShortBlocks ? 0 : 1);
 80079d4:	4694      	mov	ip, r2
	memset(result, 0, (size_t)degree * sizeof(result[0]));
 80079d6:	0028      	movs	r0, r5
		int datLen = shortBlockDataLen + (i < numShortBlocks ? 0 : 1);
 80079d8:	4463      	add	r3, ip
	memset(result, 0, (size_t)degree * sizeof(result[0]));
 80079da:	4642      	mov	r2, r8
		int datLen = shortBlockDataLen + (i < numShortBlocks ? 0 : 1);
 80079dc:	001c      	movs	r4, r3
 80079de:	9312      	str	r3, [sp, #72]	; 0x48
	memset(result, 0, (size_t)degree * sizeof(result[0]));
 80079e0:	f001 fe3e 	bl	8009660 <memset>
	for (int i = 0; i < dataLen; i++) {  // Polynomial division
 80079e4:	2c00      	cmp	r4, #0
 80079e6:	dc00      	bgt.n	80079ea <qrcodegen_encodeSegmentsAdvanced+0x8de>
 80079e8:	e0b7      	b.n	8007b5a <qrcodegen_encodeSegmentsAdvanced+0xa4e>
		result[degree - 1] = 0;
 80079ea:	9b06      	ldr	r3, [sp, #24]
 80079ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80079ee:	469c      	mov	ip, r3
 80079f0:	44ac      	add	ip, r5
 80079f2:	4663      	mov	r3, ip
 80079f4:	9308      	str	r3, [sp, #32]
 80079f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079f8:	469c      	mov	ip, r3
 80079fa:	4462      	add	r2, ip
 80079fc:	9304      	str	r3, [sp, #16]
 80079fe:	9207      	str	r2, [sp, #28]
		uint8_t factor = data[i] ^ result[0];
 8007a00:	9b04      	ldr	r3, [sp, #16]
		memmove(&result[0], &result[1], (size_t)(degree - 1) * sizeof(result[0]));
 8007a02:	9a06      	ldr	r2, [sp, #24]
		uint8_t factor = data[i] ^ result[0];
 8007a04:	781e      	ldrb	r6, [r3, #0]
 8007a06:	782b      	ldrb	r3, [r5, #0]
		memmove(&result[0], &result[1], (size_t)(degree - 1) * sizeof(result[0]));
 8007a08:	0028      	movs	r0, r5
 8007a0a:	9909      	ldr	r1, [sp, #36]	; 0x24
		uint8_t factor = data[i] ^ result[0];
 8007a0c:	405e      	eors	r6, r3
		memmove(&result[0], &result[1], (size_t)(degree - 1) * sizeof(result[0]));
 8007a0e:	f001 fe14 	bl	800963a <memmove>
		result[degree - 1] = 0;
 8007a12:	2200      	movs	r2, #0
 8007a14:	9b08      	ldr	r3, [sp, #32]
 8007a16:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < degree; j++)
 8007a18:	4643      	mov	r3, r8
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	dd77      	ble.n	8007b0e <qrcodegen_encodeSegmentsAdvanced+0xa02>
		z ^= ((y >> i) & 1) * x;
 8007a1e:	2201      	movs	r2, #1
 8007a20:	09f3      	lsrs	r3, r6, #7
 8007a22:	469a      	mov	sl, r3
 8007a24:	11b3      	asrs	r3, r6, #6
 8007a26:	401a      	ands	r2, r3
 8007a28:	4691      	mov	r9, r2
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	1173      	asrs	r3, r6, #5
 8007a2e:	401a      	ands	r2, r3
 8007a30:	9201      	str	r2, [sp, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	1133      	asrs	r3, r6, #4
 8007a36:	401a      	ands	r2, r3
 8007a38:	2301      	movs	r3, #1
 8007a3a:	4694      	mov	ip, r2
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	10f7      	asrs	r7, r6, #3
 8007a40:	401f      	ands	r7, r3
 8007a42:	10b3      	asrs	r3, r6, #2
 8007a44:	401a      	ands	r2, r3
 8007a46:	9202      	str	r2, [sp, #8]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	1073      	asrs	r3, r6, #1
 8007a4c:	401a      	ands	r2, r3
 8007a4e:	2301      	movs	r3, #1
 8007a50:	4033      	ands	r3, r6
 8007a52:	469b      	mov	fp, r3
		for (int j = 0; j < degree; j++)
 8007a54:	4646      	mov	r6, r8
 8007a56:	2000      	movs	r0, #0
 8007a58:	46b8      	mov	r8, r7
		z ^= ((y >> i) & 1) * x;
 8007a5a:	9203      	str	r2, [sp, #12]
 8007a5c:	ac18      	add	r4, sp, #96	; 0x60
 8007a5e:	4653      	mov	r3, sl
			result[j] ^= reedSolomonMultiply(generator[j], factor);
 8007a60:	7821      	ldrb	r1, [r4, #0]
		for (int j = 0; j < degree; j++)
 8007a62:	3401      	adds	r4, #1
		z ^= ((y >> i) & 1) * x;
 8007a64:	434b      	muls	r3, r1
 8007a66:	b2db      	uxtb	r3, r3
		z = (uint8_t)((z << 1) ^ ((z >> 7) * 0x11D));
 8007a68:	09df      	lsrs	r7, r3, #7
 8007a6a:	00fa      	lsls	r2, r7, #3
 8007a6c:	1bd2      	subs	r2, r2, r7
 8007a6e:	0092      	lsls	r2, r2, #2
 8007a70:	18ba      	adds	r2, r7, r2
 8007a72:	005b      	lsls	r3, r3, #1
 8007a74:	405a      	eors	r2, r3
		z ^= ((y >> i) & 1) * x;
 8007a76:	464b      	mov	r3, r9
 8007a78:	434b      	muls	r3, r1
 8007a7a:	405a      	eors	r2, r3
 8007a7c:	b2d2      	uxtb	r2, r2
		z = (uint8_t)((z << 1) ^ ((z >> 7) * 0x11D));
 8007a7e:	09d7      	lsrs	r7, r2, #7
 8007a80:	00fb      	lsls	r3, r7, #3
 8007a82:	1bdb      	subs	r3, r3, r7
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	18fb      	adds	r3, r7, r3
 8007a88:	0052      	lsls	r2, r2, #1
 8007a8a:	4053      	eors	r3, r2
		z ^= ((y >> i) & 1) * x;
 8007a8c:	9a01      	ldr	r2, [sp, #4]
 8007a8e:	434a      	muls	r2, r1
 8007a90:	4053      	eors	r3, r2
 8007a92:	b2db      	uxtb	r3, r3
		z = (uint8_t)((z << 1) ^ ((z >> 7) * 0x11D));
 8007a94:	09df      	lsrs	r7, r3, #7
 8007a96:	00fa      	lsls	r2, r7, #3
 8007a98:	1bd2      	subs	r2, r2, r7
 8007a9a:	0092      	lsls	r2, r2, #2
 8007a9c:	18ba      	adds	r2, r7, r2
 8007a9e:	005b      	lsls	r3, r3, #1
 8007aa0:	405a      	eors	r2, r3
		z ^= ((y >> i) & 1) * x;
 8007aa2:	4663      	mov	r3, ip
 8007aa4:	434b      	muls	r3, r1
 8007aa6:	405a      	eors	r2, r3
 8007aa8:	b2d2      	uxtb	r2, r2
		z = (uint8_t)((z << 1) ^ ((z >> 7) * 0x11D));
 8007aaa:	09d7      	lsrs	r7, r2, #7
 8007aac:	00fb      	lsls	r3, r7, #3
 8007aae:	1bdb      	subs	r3, r3, r7
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	18fb      	adds	r3, r7, r3
 8007ab4:	0052      	lsls	r2, r2, #1
 8007ab6:	4053      	eors	r3, r2
		z ^= ((y >> i) & 1) * x;
 8007ab8:	4642      	mov	r2, r8
 8007aba:	434a      	muls	r2, r1
 8007abc:	4053      	eors	r3, r2
 8007abe:	b2db      	uxtb	r3, r3
		z = (uint8_t)((z << 1) ^ ((z >> 7) * 0x11D));
 8007ac0:	09df      	lsrs	r7, r3, #7
 8007ac2:	00fa      	lsls	r2, r7, #3
 8007ac4:	1bd2      	subs	r2, r2, r7
 8007ac6:	0092      	lsls	r2, r2, #2
 8007ac8:	18ba      	adds	r2, r7, r2
 8007aca:	005b      	lsls	r3, r3, #1
 8007acc:	405a      	eors	r2, r3
		z ^= ((y >> i) & 1) * x;
 8007ace:	9b02      	ldr	r3, [sp, #8]
 8007ad0:	434b      	muls	r3, r1
 8007ad2:	405a      	eors	r2, r3
 8007ad4:	b2d2      	uxtb	r2, r2
		z = (uint8_t)((z << 1) ^ ((z >> 7) * 0x11D));
 8007ad6:	09d7      	lsrs	r7, r2, #7
 8007ad8:	00fb      	lsls	r3, r7, #3
 8007ada:	1bdb      	subs	r3, r3, r7
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	18fb      	adds	r3, r7, r3
 8007ae0:	0052      	lsls	r2, r2, #1
 8007ae2:	4053      	eors	r3, r2
		z ^= ((y >> i) & 1) * x;
 8007ae4:	9a03      	ldr	r2, [sp, #12]
 8007ae6:	434a      	muls	r2, r1
 8007ae8:	4053      	eors	r3, r2
 8007aea:	b2db      	uxtb	r3, r3
		z = (uint8_t)((z << 1) ^ ((z >> 7) * 0x11D));
 8007aec:	09df      	lsrs	r7, r3, #7
 8007aee:	00fa      	lsls	r2, r7, #3
 8007af0:	1bd2      	subs	r2, r2, r7
 8007af2:	0092      	lsls	r2, r2, #2
 8007af4:	005b      	lsls	r3, r3, #1
 8007af6:	18ba      	adds	r2, r7, r2
 8007af8:	405a      	eors	r2, r3
		z ^= ((y >> i) & 1) * x;
 8007afa:	465b      	mov	r3, fp
 8007afc:	434b      	muls	r3, r1
 8007afe:	4053      	eors	r3, r2
			result[j] ^= reedSolomonMultiply(generator[j], factor);
 8007b00:	5c2a      	ldrb	r2, [r5, r0]
 8007b02:	4053      	eors	r3, r2
 8007b04:	542b      	strb	r3, [r5, r0]
		for (int j = 0; j < degree; j++)
 8007b06:	3001      	adds	r0, #1
 8007b08:	4286      	cmp	r6, r0
 8007b0a:	dca8      	bgt.n	8007a5e <qrcodegen_encodeSegmentsAdvanced+0x952>
 8007b0c:	46b0      	mov	r8, r6
	for (int i = 0; i < dataLen; i++) {  // Polynomial division
 8007b0e:	9b04      	ldr	r3, [sp, #16]
 8007b10:	9a07      	ldr	r2, [sp, #28]
 8007b12:	3301      	adds	r3, #1
 8007b14:	9304      	str	r3, [sp, #16]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d000      	beq.n	8007b1c <qrcodegen_encodeSegmentsAdvanced+0xa10>
 8007b1a:	e771      	b.n	8007a00 <qrcodegen_encodeSegmentsAdvanced+0x8f4>
 8007b1c:	46ac      	mov	ip, r5
 8007b1e:	2300      	movs	r3, #0
 8007b20:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b22:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8007b24:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8007b26:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8007b28:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8007b2a:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8007b2c:	e00a      	b.n	8007b44 <qrcodegen_encodeSegmentsAdvanced+0xa38>
 8007b2e:	46c0      	nop			; (mov r8, r8)
 8007b30:	0800e7a0 	.word	0x0800e7a0
 8007b34:	0800e6fc 	.word	0x0800e6fc
			result[k] = dat[j];
 8007b38:	5cc1      	ldrb	r1, [r0, r3]
		for (int j = 0, k = i; j < datLen; j++, k += numBlocks) {  // Copy data
 8007b3a:	3301      	adds	r3, #1
			result[k] = dat[j];
 8007b3c:	54a9      	strb	r1, [r5, r2]
		for (int j = 0, k = i; j < datLen; j++, k += numBlocks) {  // Copy data
 8007b3e:	1912      	adds	r2, r2, r4
 8007b40:	429f      	cmp	r7, r3
 8007b42:	d009      	beq.n	8007b58 <qrcodegen_encodeSegmentsAdvanced+0xa4c>
			if (j == shortBlockDataLen)
 8007b44:	429e      	cmp	r6, r3
 8007b46:	d1f7      	bne.n	8007b38 <qrcodegen_encodeSegmentsAdvanced+0xa2c>
				k -= numShortBlocks;
 8007b48:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007b4a:	1a52      	subs	r2, r2, r1
			result[k] = dat[j];
 8007b4c:	5cc1      	ldrb	r1, [r0, r3]
		for (int j = 0, k = i; j < datLen; j++, k += numBlocks) {  // Copy data
 8007b4e:	3301      	adds	r3, #1
			result[k] = dat[j];
 8007b50:	54a9      	strb	r1, [r5, r2]
		for (int j = 0, k = i; j < datLen; j++, k += numBlocks) {  // Copy data
 8007b52:	1912      	adds	r2, r2, r4
 8007b54:	429f      	cmp	r7, r3
 8007b56:	d1f5      	bne.n	8007b44 <qrcodegen_encodeSegmentsAdvanced+0xa38>
 8007b58:	4665      	mov	r5, ip
		for (int j = 0, k = dataLen + i; j < blockEccLen; j++, k += numBlocks)  // Copy ECC
 8007b5a:	4643      	mov	r3, r8
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	dc00      	bgt.n	8007b62 <qrcodegen_encodeSegmentsAdvanced+0xa56>
 8007b60:	e106      	b.n	8007d70 <qrcodegen_encodeSegmentsAdvanced+0xc64>
 8007b62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d000      	beq.n	8007b6a <qrcodegen_encodeSegmentsAdvanced+0xa5e>
 8007b68:	e0f6      	b.n	8007d58 <qrcodegen_encodeSegmentsAdvanced+0xc4c>
 8007b6a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8007b6c:	4640      	mov	r0, r8
 8007b6e:	4699      	mov	r9, r3
 8007b70:	2300      	movs	r3, #0
 8007b72:	9a11      	ldr	r2, [sp, #68]	; 0x44
			result[k] = ecc[j];
 8007b74:	5ce9      	ldrb	r1, [r5, r3]
		for (int j = 0, k = dataLen + i; j < blockEccLen; j++, k += numBlocks)  // Copy ECC
 8007b76:	3301      	adds	r3, #1
			result[k] = ecc[j];
 8007b78:	7011      	strb	r1, [r2, #0]
		for (int j = 0, k = dataLen + i; j < blockEccLen; j++, k += numBlocks)  // Copy ECC
 8007b7a:	3201      	adds	r2, #1
 8007b7c:	4298      	cmp	r0, r3
 8007b7e:	dcf9      	bgt.n	8007b74 <qrcodegen_encodeSegmentsAdvanced+0xa68>
	initializeFunctionModules(version, qrcode);
 8007b80:	9c05      	ldr	r4, [sp, #20]
 8007b82:	4649      	mov	r1, r9
 8007b84:	0020      	movs	r0, r4
 8007b86:	f7fd ff37 	bl	80059f8 <initializeFunctionModules>
	if (ver >= 2) {
 8007b8a:	2c01      	cmp	r4, #1
 8007b8c:	d018      	beq.n	8007bc0 <qrcodegen_encodeSegmentsAdvanced+0xab4>
		int numAlign = ver / 7 + 2;
 8007b8e:	9c05      	ldr	r4, [sp, #20]
 8007b90:	2107      	movs	r1, #7
 8007b92:	0020      	movs	r0, r4
 8007b94:	f7f8 fb54 	bl	8000240 <__divsi3>
 8007b98:	3002      	adds	r0, #2
		result -= (25 * numAlign - 10) * numAlign - 55;
 8007b9a:	0083      	lsls	r3, r0, #2
 8007b9c:	181b      	adds	r3, r3, r0
 8007b9e:	009a      	lsls	r2, r3, #2
 8007ba0:	189b      	adds	r3, r3, r2
 8007ba2:	3b0a      	subs	r3, #10
 8007ba4:	4343      	muls	r3, r0
 8007ba6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ba8:	3b37      	subs	r3, #55	; 0x37
 8007baa:	1ad3      	subs	r3, r2, r3
		if (ver >= 7)
 8007bac:	2c06      	cmp	r4, #6
 8007bae:	dd00      	ble.n	8007bb2 <qrcodegen_encodeSegmentsAdvanced+0xaa6>
			result -= 36;
 8007bb0:	3b24      	subs	r3, #36	; 0x24
	assert(208 <= result && result <= 29648);
 8007bb2:	22e6      	movs	r2, #230	; 0xe6
 8007bb4:	3bd0      	subs	r3, #208	; 0xd0
 8007bb6:	01d2      	lsls	r2, r2, #7
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d901      	bls.n	8007bc0 <qrcodegen_encodeSegmentsAdvanced+0xab4>
 8007bbc:	f000 fc38 	bl	8008430 <qrcodegen_encodeSegmentsAdvanced+0x1324>
	int result = qrcode[0];
 8007bc0:	464b      	mov	r3, r9
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	9306      	str	r3, [sp, #24]
	assert((qrcodegen_VERSION_MIN * 4 + 17) <= result
 8007bc6:	3b15      	subs	r3, #21
 8007bc8:	2b24      	cmp	r3, #36	; 0x24
 8007bca:	d901      	bls.n	8007bd0 <qrcodegen_encodeSegmentsAdvanced+0xac4>
 8007bcc:	f000 fc1e 	bl	800840c <qrcodegen_encodeSegmentsAdvanced+0x1300>
	for (int right = qrsize - 1; right >= 1; right -= 2) {  // Index of right column in each column pair
 8007bd0:	9b06      	ldr	r3, [sp, #24]
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	9307      	str	r3, [sp, #28]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	dc01      	bgt.n	8007bde <qrcodegen_encodeSegmentsAdvanced+0xad2>
 8007bda:	f000 fc19 	bl	8008410 <qrcodegen_encodeSegmentsAdvanced+0x1304>
 8007bde:	001d      	movs	r5, r3
				if (!getModuleBounded(qrcode, x, y) && i < dataLen * 8) {
 8007be0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	return ((x >> i) & 1) != 0;
 8007be2:	2601      	movs	r6, #1
				if (!getModuleBounded(qrcode, x, y) && i < dataLen * 8) {
 8007be4:	00db      	lsls	r3, r3, #3
 8007be6:	9302      	str	r3, [sp, #8]
	int i = 0;  // Bit index into the data
 8007be8:	2300      	movs	r3, #0
 8007bea:	469a      	mov	sl, r3
	return getBit(qrcode[(index >> 3) + 1], index & 7);
 8007bec:	3307      	adds	r3, #7
 8007bee:	469b      	mov	fp, r3
	return ((x >> i) & 1) != 0;
 8007bf0:	4648      	mov	r0, r9
		if (right == 6)
 8007bf2:	2d06      	cmp	r5, #6
 8007bf4:	d100      	bne.n	8007bf8 <qrcodegen_encodeSegmentsAdvanced+0xaec>
 8007bf6:	e336      	b.n	8008266 <qrcodegen_encodeSegmentsAdvanced+0x115a>
		for (int vert = 0; vert < qrsize; vert++) {  // Vertical counter
 8007bf8:	9b06      	ldr	r3, [sp, #24]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d100      	bne.n	8007c00 <qrcodegen_encodeSegmentsAdvanced+0xaf4>
 8007bfe:	e093      	b.n	8007d28 <qrcodegen_encodeSegmentsAdvanced+0xc1c>
				bool upward = ((right + 1) & 2) == 0;
 8007c00:	2202      	movs	r2, #2
 8007c02:	1c6b      	adds	r3, r5, #1
 8007c04:	9c07      	ldr	r4, [sp, #28]
 8007c06:	401a      	ands	r2, r3
				int x = right - j;  // Actual x coordinate
 8007c08:	1e6b      	subs	r3, r5, #1
		for (int vert = 0; vert < qrsize; vert++) {  // Vertical counter
 8007c0a:	2700      	movs	r7, #0
				int x = right - j;  // Actual x coordinate
 8007c0c:	4698      	mov	r8, r3
 8007c0e:	46ac      	mov	ip, r5
				bool upward = ((right + 1) & 2) == 0;
 8007c10:	9203      	str	r2, [sp, #12]
				int x = right - j;  // Actual x coordinate
 8007c12:	9401      	str	r4, [sp, #4]
 8007c14:	e017      	b.n	8007c46 <qrcodegen_encodeSegmentsAdvanced+0xb3a>
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8007c16:	4542      	cmp	r2, r8
 8007c18:	dd50      	ble.n	8007cbc <qrcodegen_encodeSegmentsAdvanced+0xbb0>
 8007c1a:	428a      	cmp	r2, r1
 8007c1c:	dd4e      	ble.n	8007cbc <qrcodegen_encodeSegmentsAdvanced+0xbb0>
	int index = y * qrsize + x;
 8007c1e:	434a      	muls	r2, r1
	return getBit(qrcode[(index >> 3) + 1], index & 7);
 8007c20:	4659      	mov	r1, fp
	int index = y * qrsize + x;
 8007c22:	4442      	add	r2, r8
	return getBit(qrcode[(index >> 3) + 1], index & 7);
 8007c24:	10d3      	asrs	r3, r2, #3
 8007c26:	3301      	adds	r3, #1
 8007c28:	18c5      	adds	r5, r0, r3
 8007c2a:	5cc3      	ldrb	r3, [r0, r3]
 8007c2c:	400a      	ands	r2, r1
	return ((x >> i) & 1) != 0;
 8007c2e:	0019      	movs	r1, r3
 8007c30:	4111      	asrs	r1, r2
				if (!getModuleBounded(qrcode, x, y) && i < dataLen * 8) {
 8007c32:	420e      	tst	r6, r1
 8007c34:	d102      	bne.n	8007c3c <qrcodegen_encodeSegmentsAdvanced+0xb30>
 8007c36:	9902      	ldr	r1, [sp, #8]
 8007c38:	458a      	cmp	sl, r1
 8007c3a:	db59      	blt.n	8007cf0 <qrcodegen_encodeSegmentsAdvanced+0xbe4>
		for (int vert = 0; vert < qrsize; vert++) {  // Vertical counter
 8007c3c:	9b01      	ldr	r3, [sp, #4]
 8007c3e:	3701      	adds	r7, #1
 8007c40:	3b01      	subs	r3, #1
 8007c42:	9301      	str	r3, [sp, #4]
 8007c44:	d36f      	bcc.n	8007d26 <qrcodegen_encodeSegmentsAdvanced+0xc1a>
				int y = upward ? qrsize - 1 - vert : vert;  // Actual y coordinate
 8007c46:	9b03      	ldr	r3, [sp, #12]
 8007c48:	0039      	movs	r1, r7
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d100      	bne.n	8007c50 <qrcodegen_encodeSegmentsAdvanced+0xb44>
 8007c4e:	9901      	ldr	r1, [sp, #4]
	int qrsize = qrcode[0];
 8007c50:	7803      	ldrb	r3, [r0, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8007c52:	001d      	movs	r5, r3
 8007c54:	3d15      	subs	r5, #21
	int qrsize = qrcode[0];
 8007c56:	001a      	movs	r2, r3
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8007c58:	2d9c      	cmp	r5, #156	; 0x9c
 8007c5a:	d82f      	bhi.n	8007cbc <qrcodegen_encodeSegmentsAdvanced+0xbb0>
 8007c5c:	4563      	cmp	r3, ip
 8007c5e:	dd2d      	ble.n	8007cbc <qrcodegen_encodeSegmentsAdvanced+0xbb0>
 8007c60:	4299      	cmp	r1, r3
 8007c62:	d22b      	bcs.n	8007cbc <qrcodegen_encodeSegmentsAdvanced+0xbb0>
	int index = y * qrsize + x;
 8007c64:	434b      	muls	r3, r1
 8007c66:	4463      	add	r3, ip
	return getBit(qrcode[(index >> 3) + 1], index & 7);
 8007c68:	10dd      	asrs	r5, r3, #3
 8007c6a:	3501      	adds	r5, #1
 8007c6c:	1944      	adds	r4, r0, r5
 8007c6e:	9404      	str	r4, [sp, #16]
 8007c70:	465c      	mov	r4, fp
 8007c72:	5d45      	ldrb	r5, [r0, r5]
 8007c74:	4023      	ands	r3, r4
	return ((x >> i) & 1) != 0;
 8007c76:	002c      	movs	r4, r5
 8007c78:	411c      	asrs	r4, r3
				if (!getModuleBounded(qrcode, x, y) && i < dataLen * 8) {
 8007c7a:	4226      	tst	r6, r4
 8007c7c:	d1cb      	bne.n	8007c16 <qrcodegen_encodeSegmentsAdvanced+0xb0a>
 8007c7e:	9c02      	ldr	r4, [sp, #8]
 8007c80:	45a2      	cmp	sl, r4
 8007c82:	dac8      	bge.n	8007c16 <qrcodegen_encodeSegmentsAdvanced+0xb0a>
					bool dark = getBit(data[i >> 3], 7 - (i & 7));
 8007c84:	4652      	mov	r2, sl
 8007c86:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8007c88:	10d2      	asrs	r2, r2, #3
 8007c8a:	5ca4      	ldrb	r4, [r4, r2]
 8007c8c:	4652      	mov	r2, sl
 8007c8e:	9408      	str	r4, [sp, #32]
 8007c90:	465c      	mov	r4, fp
 8007c92:	4394      	bics	r4, r2
	return ((x >> i) & 1) != 0;
 8007c94:	0022      	movs	r2, r4
 8007c96:	9c08      	ldr	r4, [sp, #32]
 8007c98:	4114      	asrs	r4, r2
	if (isDark)
 8007c9a:	4226      	tst	r6, r4
 8007c9c:	d100      	bne.n	8007ca0 <qrcodegen_encodeSegmentsAdvanced+0xb94>
 8007c9e:	e2da      	b.n	8008256 <qrcodegen_encodeSegmentsAdvanced+0x114a>
		qrcode[byteIndex] |= 1 << bitIndex;
 8007ca0:	0032      	movs	r2, r6
 8007ca2:	409a      	lsls	r2, r3
 8007ca4:	4315      	orrs	r5, r2
 8007ca6:	b2ed      	uxtb	r5, r5
 8007ca8:	9b04      	ldr	r3, [sp, #16]
 8007caa:	701d      	strb	r5, [r3, #0]
					i++;
 8007cac:	2301      	movs	r3, #1
	int qrsize = qrcode[0];
 8007cae:	7802      	ldrb	r2, [r0, #0]
					i++;
 8007cb0:	4699      	mov	r9, r3
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8007cb2:	0013      	movs	r3, r2
 8007cb4:	3b15      	subs	r3, #21
					i++;
 8007cb6:	44ca      	add	sl, r9
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8007cb8:	2b9c      	cmp	r3, #156	; 0x9c
 8007cba:	d9ac      	bls.n	8007c16 <qrcodegen_encodeSegmentsAdvanced+0xb0a>
 8007cbc:	4b91      	ldr	r3, [pc, #580]	; (8007f04 <qrcodegen_encodeSegmentsAdvanced+0xdf8>)
 8007cbe:	4a92      	ldr	r2, [pc, #584]	; (8007f08 <qrcodegen_encodeSegmentsAdvanced+0xdfc>)
 8007cc0:	4992      	ldr	r1, [pc, #584]	; (8007f0c <qrcodegen_encodeSegmentsAdvanced+0xe00>)
 8007cc2:	4893      	ldr	r0, [pc, #588]	; (8007f10 <qrcodegen_encodeSegmentsAdvanced+0xe04>)
 8007cc4:	f001 fc58 	bl	8009578 <__assert_func>
		case qrcodegen_Mode_BYTE        : { static const int temp[] = { 8, 16, 16}; return temp[i]; }
 8007cc8:	4992      	ldr	r1, [pc, #584]	; (8007f14 <qrcodegen_encodeSegmentsAdvanced+0xe08>)
 8007cca:	9d03      	ldr	r5, [sp, #12]
 8007ccc:	5869      	ldr	r1, [r5, r1]
 8007cce:	f7ff fb82 	bl	80073d6 <qrcodegen_encodeSegmentsAdvanced+0x2ca>
		case qrcodegen_Mode_NUMERIC     : { static const int temp[] = {10, 12, 14}; return temp[i]; }
 8007cd2:	4991      	ldr	r1, [pc, #580]	; (8007f18 <qrcodegen_encodeSegmentsAdvanced+0xe0c>)
 8007cd4:	9d03      	ldr	r5, [sp, #12]
 8007cd6:	5869      	ldr	r1, [r5, r1]
 8007cd8:	f7ff fb7d 	bl	80073d6 <qrcodegen_encodeSegmentsAdvanced+0x2ca>
		case qrcodegen_Mode_ALPHANUMERIC: { static const int temp[] = { 9, 11, 13}; return temp[i]; }
 8007cdc:	498f      	ldr	r1, [pc, #572]	; (8007f1c <qrcodegen_encodeSegmentsAdvanced+0xe10>)
 8007cde:	9d03      	ldr	r5, [sp, #12]
 8007ce0:	5869      	ldr	r1, [r5, r1]
 8007ce2:	f7ff fb78 	bl	80073d6 <qrcodegen_encodeSegmentsAdvanced+0x2ca>
	assert(0 <= numBits && numBits <= 16 && (unsigned long)val >> numBits == 0);
 8007ce6:	2800      	cmp	r0, #0
 8007ce8:	d000      	beq.n	8007cec <qrcodegen_encodeSegmentsAdvanced+0xbe0>
 8007cea:	e377      	b.n	80083dc <qrcodegen_encodeSegmentsAdvanced+0x12d0>
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8007cec:	9c04      	ldr	r4, [sp, #16]
 8007cee:	e4bf      	b.n	8007670 <qrcodegen_encodeSegmentsAdvanced+0x564>
					bool dark = getBit(data[i >> 3], 7 - (i & 7));
 8007cf0:	4651      	mov	r1, sl
 8007cf2:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8007cf4:	10c9      	asrs	r1, r1, #3
 8007cf6:	5c64      	ldrb	r4, [r4, r1]
 8007cf8:	4651      	mov	r1, sl
 8007cfa:	9404      	str	r4, [sp, #16]
 8007cfc:	465c      	mov	r4, fp
 8007cfe:	438c      	bics	r4, r1
	return ((x >> i) & 1) != 0;
 8007d00:	0021      	movs	r1, r4
 8007d02:	9c04      	ldr	r4, [sp, #16]
 8007d04:	410c      	asrs	r4, r1
	if (isDark)
 8007d06:	4226      	tst	r6, r4
 8007d08:	d100      	bne.n	8007d0c <qrcodegen_encodeSegmentsAdvanced+0xc00>
 8007d0a:	e2a8      	b.n	800825e <qrcodegen_encodeSegmentsAdvanced+0x1152>
		qrcode[byteIndex] |= 1 << bitIndex;
 8007d0c:	0031      	movs	r1, r6
 8007d0e:	4091      	lsls	r1, r2
 8007d10:	430b      	orrs	r3, r1
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	702b      	strb	r3, [r5, #0]
					i++;
 8007d16:	2301      	movs	r3, #1
 8007d18:	4699      	mov	r9, r3
		for (int vert = 0; vert < qrsize; vert++) {  // Vertical counter
 8007d1a:	9b01      	ldr	r3, [sp, #4]
					i++;
 8007d1c:	44ca      	add	sl, r9
		for (int vert = 0; vert < qrsize; vert++) {  // Vertical counter
 8007d1e:	3701      	adds	r7, #1
 8007d20:	3b01      	subs	r3, #1
 8007d22:	9301      	str	r3, [sp, #4]
 8007d24:	d28f      	bcs.n	8007c46 <qrcodegen_encodeSegmentsAdvanced+0xb3a>
 8007d26:	4665      	mov	r5, ip
	for (int right = qrsize - 1; right >= 1; right -= 2) {  // Index of right column in each column pair
 8007d28:	3d02      	subs	r5, #2
 8007d2a:	2d00      	cmp	r5, #0
 8007d2c:	dd00      	ble.n	8007d30 <qrcodegen_encodeSegmentsAdvanced+0xc24>
 8007d2e:	e760      	b.n	8007bf2 <qrcodegen_encodeSegmentsAdvanced+0xae6>
	assert(i == dataLen * 8);
 8007d30:	9b02      	ldr	r3, [sp, #8]
 8007d32:	4681      	mov	r9, r0
 8007d34:	459a      	cmp	sl, r3
 8007d36:	d000      	beq.n	8007d3a <qrcodegen_encodeSegmentsAdvanced+0xc2e>
 8007d38:	e36a      	b.n	8008410 <qrcodegen_encodeSegmentsAdvanced+0x1304>
	int result = qrcode[0];
 8007d3a:	7802      	ldrb	r2, [r0, #0]
	assert((qrcodegen_VERSION_MIN * 4 + 17) <= result
 8007d3c:	0013      	movs	r3, r2
 8007d3e:	3b15      	subs	r3, #21
 8007d40:	9207      	str	r2, [sp, #28]
 8007d42:	2b24      	cmp	r3, #36	; 0x24
 8007d44:	d900      	bls.n	8007d48 <qrcodegen_encodeSegmentsAdvanced+0xc3c>
 8007d46:	e361      	b.n	800840c <qrcodegen_encodeSegmentsAdvanced+0x1300>
	for (int i = 7; i < qrsize - 7; i += 2) {
 8007d48:	1fd0      	subs	r0, r2, #7
 8007d4a:	2307      	movs	r3, #7
	int bitIndex = index & 7;
 8007d4c:	2507      	movs	r5, #7
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8007d4e:	2401      	movs	r4, #1
 8007d50:	4649      	mov	r1, r9
	for (int i = 7; i < qrsize - 7; i += 2) {
 8007d52:	2807      	cmp	r0, #7
 8007d54:	dc24      	bgt.n	8007da0 <qrcodegen_encodeSegmentsAdvanced+0xc94>
 8007d56:	e04c      	b.n	8007df2 <qrcodegen_encodeSegmentsAdvanced+0xce6>
		for (int j = 0, k = dataLen + i; j < blockEccLen; j++, k += numBlocks)  // Copy ECC
 8007d58:	2300      	movs	r3, #0
 8007d5a:	4640      	mov	r0, r8
 8007d5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
			result[k] = ecc[j];
 8007d5e:	5ce9      	ldrb	r1, [r5, r3]
		for (int j = 0, k = dataLen + i; j < blockEccLen; j++, k += numBlocks)  // Copy ECC
 8007d60:	3301      	adds	r3, #1
			result[k] = ecc[j];
 8007d62:	7011      	strb	r1, [r2, #0]
		for (int j = 0, k = dataLen + i; j < blockEccLen; j++, k += numBlocks)  // Copy ECC
 8007d64:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007d66:	468c      	mov	ip, r1
 8007d68:	4462      	add	r2, ip
 8007d6a:	4298      	cmp	r0, r3
 8007d6c:	dcf7      	bgt.n	8007d5e <qrcodegen_encodeSegmentsAdvanced+0xc52>
 8007d6e:	4680      	mov	r8, r0
		dat += datLen;
 8007d70:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d74:	4694      	mov	ip, r2
	for (int i = 0; i < numBlocks; i++) {
 8007d76:	9a11      	ldr	r2, [sp, #68]	; 0x44
		dat += datLen;
 8007d78:	4463      	add	r3, ip
	for (int i = 0; i < numBlocks; i++) {
 8007d7a:	3201      	adds	r2, #1
		dat += datLen;
 8007d7c:	930f      	str	r3, [sp, #60]	; 0x3c
	for (int i = 0; i < numBlocks; i++) {
 8007d7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d80:	9211      	str	r2, [sp, #68]	; 0x44
 8007d82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d84:	3301      	adds	r3, #1
 8007d86:	9310      	str	r3, [sp, #64]	; 0x40
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	dd00      	ble.n	8007d8e <qrcodegen_encodeSegmentsAdvanced+0xc82>
 8007d8c:	e61a      	b.n	80079c4 <qrcodegen_encodeSegmentsAdvanced+0x8b8>
 8007d8e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8007d90:	4699      	mov	r9, r3
 8007d92:	e6f5      	b.n	8007b80 <qrcodegen_encodeSegmentsAdvanced+0xa74>
	int qrsize = qrcode[0];
 8007d94:	780a      	ldrb	r2, [r1, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8007d96:	0016      	movs	r6, r2
 8007d98:	3e15      	subs	r6, #21
 8007d9a:	2e9c      	cmp	r6, #156	; 0x9c
 8007d9c:	d900      	bls.n	8007da0 <qrcodegen_encodeSegmentsAdvanced+0xc94>
 8007d9e:	e2e9      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
 8007da0:	2a06      	cmp	r2, #6
 8007da2:	dc00      	bgt.n	8007da6 <qrcodegen_encodeSegmentsAdvanced+0xc9a>
 8007da4:	e2e6      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
 8007da6:	4293      	cmp	r3, r2
 8007da8:	db00      	blt.n	8007dac <qrcodegen_encodeSegmentsAdvanced+0xca0>
 8007daa:	e2e3      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8007dac:	0027      	movs	r7, r4
	int index = y * qrsize + x;
 8007dae:	435a      	muls	r2, r3
 8007db0:	3206      	adds	r2, #6
	int byteIndex = (index >> 3) + 1;
 8007db2:	10d6      	asrs	r6, r2, #3
	int bitIndex = index & 7;
 8007db4:	402a      	ands	r2, r5
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8007db6:	4097      	lsls	r7, r2
	int byteIndex = (index >> 3) + 1;
 8007db8:	3601      	adds	r6, #1
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8007dba:	5d8a      	ldrb	r2, [r1, r6]
 8007dbc:	43ba      	bics	r2, r7
 8007dbe:	558a      	strb	r2, [r1, r6]
	int qrsize = qrcode[0];
 8007dc0:	780e      	ldrb	r6, [r1, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8007dc2:	0032      	movs	r2, r6
 8007dc4:	3a15      	subs	r2, #21
 8007dc6:	2a9c      	cmp	r2, #156	; 0x9c
 8007dc8:	d900      	bls.n	8007dcc <qrcodegen_encodeSegmentsAdvanced+0xcc0>
 8007dca:	e2d3      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
 8007dcc:	42b3      	cmp	r3, r6
 8007dce:	db00      	blt.n	8007dd2 <qrcodegen_encodeSegmentsAdvanced+0xcc6>
 8007dd0:	e2d0      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8007dd2:	0027      	movs	r7, r4
	int index = y * qrsize + x;
 8007dd4:	0072      	lsls	r2, r6, #1
 8007dd6:	1992      	adds	r2, r2, r6
 8007dd8:	0052      	lsls	r2, r2, #1
 8007dda:	18d2      	adds	r2, r2, r3
	int byteIndex = (index >> 3) + 1;
 8007ddc:	10d6      	asrs	r6, r2, #3
	int bitIndex = index & 7;
 8007dde:	402a      	ands	r2, r5
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8007de0:	4097      	lsls	r7, r2
	int byteIndex = (index >> 3) + 1;
 8007de2:	3601      	adds	r6, #1
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8007de4:	5d8a      	ldrb	r2, [r1, r6]
	for (int i = 7; i < qrsize - 7; i += 2) {
 8007de6:	3302      	adds	r3, #2
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8007de8:	43ba      	bics	r2, r7
 8007dea:	558a      	strb	r2, [r1, r6]
	for (int i = 7; i < qrsize - 7; i += 2) {
 8007dec:	4283      	cmp	r3, r0
 8007dee:	dbd1      	blt.n	8007d94 <qrcodegen_encodeSegmentsAdvanced+0xc88>
 8007df0:	4689      	mov	r9, r1
 8007df2:	9b07      	ldr	r3, [sp, #28]
			if (abs(dy) > dist)
 8007df4:	2501      	movs	r5, #1
 8007df6:	3b08      	subs	r3, #8
 8007df8:	4698      	mov	r8, r3
 8007dfa:	9302      	str	r3, [sp, #8]
	int bitIndex = index & 7;
 8007dfc:	2307      	movs	r3, #7
 8007dfe:	469b      	mov	fp, r3
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8007e00:	3b06      	subs	r3, #6
			if (dist == 2 || dist == 4) {
 8007e02:	2402      	movs	r4, #2
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8007e04:	469a      	mov	sl, r3
 8007e06:	464f      	mov	r7, r9
			if (abs(dy) > dist)
 8007e08:	426d      	negs	r5, r5
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	2103      	movs	r1, #3
 8007e0e:	1eee      	subs	r6, r5, #3
 8007e10:	17f3      	asrs	r3, r6, #31
 8007e12:	18f6      	adds	r6, r6, r3
 8007e14:	9802      	ldr	r0, [sp, #8]
 8007e16:	405e      	eors	r6, r3
 8007e18:	4252      	negs	r2, r2
 8007e1a:	4249      	negs	r1, r1
 8007e1c:	9501      	str	r5, [sp, #4]
 8007e1e:	e004      	b.n	8007e2a <qrcodegen_encodeSegmentsAdvanced+0xd1e>
		for (int dx = -4; dx <= 4; dx++) {
 8007e20:	2905      	cmp	r1, #5
 8007e22:	d039      	beq.n	8007e98 <qrcodegen_encodeSegmentsAdvanced+0xd8c>
 8007e24:	3101      	adds	r1, #1
 8007e26:	3201      	adds	r2, #1
 8007e28:	3001      	adds	r0, #1
			int dist = abs(dx);
 8007e2a:	1ed3      	subs	r3, r2, #3
			if (dist == 2 || dist == 4) {
 8007e2c:	17dd      	asrs	r5, r3, #31
 8007e2e:	195b      	adds	r3, r3, r5
 8007e30:	406b      	eors	r3, r5
 8007e32:	42b3      	cmp	r3, r6
 8007e34:	da00      	bge.n	8007e38 <qrcodegen_encodeSegmentsAdvanced+0xd2c>
 8007e36:	0033      	movs	r3, r6
 8007e38:	3b02      	subs	r3, #2
 8007e3a:	43a3      	bics	r3, r4
 8007e3c:	d1f0      	bne.n	8007e20 <qrcodegen_encodeSegmentsAdvanced+0xd14>
	int qrsize = qrcode[0];
 8007e3e:	783b      	ldrb	r3, [r7, #0]
	if (0 <= x && x < qrsize && 0 <= y && y < qrsize)
 8007e40:	1c55      	adds	r5, r2, #1
 8007e42:	d100      	bne.n	8007e46 <qrcodegen_encodeSegmentsAdvanced+0xd3a>
 8007e44:	e248      	b.n	80082d8 <qrcodegen_encodeSegmentsAdvanced+0x11cc>
 8007e46:	429a      	cmp	r2, r3
 8007e48:	db00      	blt.n	8007e4c <qrcodegen_encodeSegmentsAdvanced+0xd40>
 8007e4a:	e24c      	b.n	80082e6 <qrcodegen_encodeSegmentsAdvanced+0x11da>
 8007e4c:	9d01      	ldr	r5, [sp, #4]
 8007e4e:	3501      	adds	r5, #1
 8007e50:	d003      	beq.n	8007e5a <qrcodegen_encodeSegmentsAdvanced+0xd4e>
 8007e52:	9d01      	ldr	r5, [sp, #4]
 8007e54:	429d      	cmp	r5, r3
 8007e56:	da00      	bge.n	8007e5a <qrcodegen_encodeSegmentsAdvanced+0xd4e>
 8007e58:	e253      	b.n	8008302 <qrcodegen_encodeSegmentsAdvanced+0x11f6>
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	dae0      	bge.n	8007e20 <qrcodegen_encodeSegmentsAdvanced+0xd14>
 8007e5e:	4543      	cmp	r3, r8
 8007e60:	d9de      	bls.n	8007e20 <qrcodegen_encodeSegmentsAdvanced+0xd14>
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8007e62:	2515      	movs	r5, #21
 8007e64:	426d      	negs	r5, r5
 8007e66:	46ac      	mov	ip, r5
 8007e68:	449c      	add	ip, r3
 8007e6a:	4665      	mov	r5, ip
 8007e6c:	2d9c      	cmp	r5, #156	; 0x9c
 8007e6e:	d900      	bls.n	8007e72 <qrcodegen_encodeSegmentsAdvanced+0xd66>
 8007e70:	e280      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
	int index = y * qrsize + x;
 8007e72:	4645      	mov	r5, r8
 8007e74:	436b      	muls	r3, r5
 8007e76:	189b      	adds	r3, r3, r2
	int byteIndex = (index >> 3) + 1;
 8007e78:	10dd      	asrs	r5, r3, #3
 8007e7a:	46ac      	mov	ip, r5
 8007e7c:	2501      	movs	r5, #1
 8007e7e:	46a9      	mov	r9, r5
	int bitIndex = index & 7;
 8007e80:	465d      	mov	r5, fp
 8007e82:	402b      	ands	r3, r5
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8007e84:	4655      	mov	r5, sl
	int byteIndex = (index >> 3) + 1;
 8007e86:	44cc      	add	ip, r9
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8007e88:	409d      	lsls	r5, r3
 8007e8a:	4663      	mov	r3, ip
 8007e8c:	5cfb      	ldrb	r3, [r7, r3]
 8007e8e:	43ab      	bics	r3, r5
 8007e90:	4665      	mov	r5, ip
 8007e92:	557b      	strb	r3, [r7, r5]
		for (int dx = -4; dx <= 4; dx++) {
 8007e94:	2905      	cmp	r1, #5
 8007e96:	d1c5      	bne.n	8007e24 <qrcodegen_encodeSegmentsAdvanced+0xd18>
	for (int dy = -4; dy <= 4; dy++) {
 8007e98:	2301      	movs	r3, #1
 8007e9a:	469c      	mov	ip, r3
 8007e9c:	9d01      	ldr	r5, [sp, #4]
 8007e9e:	44e0      	add	r8, ip
 8007ea0:	3501      	adds	r5, #1
 8007ea2:	2d08      	cmp	r5, #8
 8007ea4:	d1b1      	bne.n	8007e0a <qrcodegen_encodeSegmentsAdvanced+0xcfe>
	if (version == 1)
 8007ea6:	9d05      	ldr	r5, [sp, #20]
 8007ea8:	46b9      	mov	r9, r7
 8007eaa:	2d01      	cmp	r5, #1
 8007eac:	d100      	bne.n	8007eb0 <qrcodegen_encodeSegmentsAdvanced+0xda4>
 8007eae:	e1b8      	b.n	8008222 <qrcodegen_encodeSegmentsAdvanced+0x1116>
	int numAlign = version / 7 + 2;
 8007eb0:	2107      	movs	r1, #7
 8007eb2:	0028      	movs	r0, r5
 8007eb4:	f7f8 f9c4 	bl	8000240 <__divsi3>
 8007eb8:	1c82      	adds	r2, r0, #2
		(version * 4 + numAlign * 2 + 1) / (numAlign * 2 - 2) * 2;
 8007eba:	4694      	mov	ip, r2
 8007ebc:	1c43      	adds	r3, r0, #1
	for (int i = numAlign - 1, pos = version * 4 + 10; i >= 1; i--, pos -= step)
 8007ebe:	9c16      	ldr	r4, [sp, #88]	; 0x58
		(version * 4 + numAlign * 2 + 1) / (numAlign * 2 - 2) * 2;
 8007ec0:	0068      	lsls	r0, r5, #1
 8007ec2:	4460      	add	r0, ip
	for (int i = numAlign - 1, pos = version * 4 + 10; i >= 1; i--, pos -= step)
 8007ec4:	340a      	adds	r4, #10
		result[i] = (uint8_t)pos;
 8007ec6:	a918      	add	r1, sp, #96	; 0x60
		(version * 4 + numAlign * 2 + 1) / (numAlign * 2 - 2) * 2;
 8007ec8:	0040      	lsls	r0, r0, #1
		result[i] = (uint8_t)pos;
 8007eca:	54cc      	strb	r4, [r1, r3]
		(version * 4 + numAlign * 2 + 1) / (numAlign * 2 - 2) * 2;
 8007ecc:	3001      	adds	r0, #1
 8007ece:	0059      	lsls	r1, r3, #1
 8007ed0:	001d      	movs	r5, r3
	int numAlign = version / 7 + 2;
 8007ed2:	9204      	str	r2, [sp, #16]
		(version * 4 + numAlign * 2 + 1) / (numAlign * 2 - 2) * 2;
 8007ed4:	9306      	str	r3, [sp, #24]
 8007ed6:	f7f8 f9b3 	bl	8000240 <__divsi3>
	int step = (version == 32) ? 26 :
 8007eda:	0040      	lsls	r0, r0, #1
	for (int i = numAlign - 1, pos = version * 4 + 10; i >= 1; i--, pos -= step)
 8007edc:	1a24      	subs	r4, r4, r0
 8007ede:	2d01      	cmp	r5, #1
 8007ee0:	d001      	beq.n	8007ee6 <qrcodegen_encodeSegmentsAdvanced+0xdda>
		result[i] = (uint8_t)pos;
 8007ee2:	ab18      	add	r3, sp, #96	; 0x60
 8007ee4:	705c      	strb	r4, [r3, #1]
	result[0] = 6;
 8007ee6:	2306      	movs	r3, #6
 8007ee8:	aa18      	add	r2, sp, #96	; 0x60
 8007eea:	7013      	strb	r3, [r2, #0]
	for (int i = 0; i < numAlign; i++) {
 8007eec:	2300      	movs	r3, #0
 8007eee:	469b      	mov	fp, r3
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	469a      	mov	sl, r3
	int bitIndex = index & 7;
 8007ef4:	2607      	movs	r6, #7
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8007ef6:	464b      	mov	r3, r9
 8007ef8:	9203      	str	r2, [sp, #12]
	for (int i = 0; i < numAlign; i++) {
 8007efa:	2000      	movs	r0, #0
 8007efc:	2201      	movs	r2, #1
 8007efe:	9001      	str	r0, [sp, #4]
 8007f00:	9202      	str	r2, [sp, #8]
 8007f02:	e018      	b.n	8007f36 <qrcodegen_encodeSegmentsAdvanced+0xe2a>
 8007f04:	0800e368 	.word	0x0800e368
 8007f08:	0800e8d8 	.word	0x0800e8d8
 8007f0c:	00000307 	.word	0x00000307
 8007f10:	0800e204 	.word	0x0800e204
 8007f14:	0800e9fc 	.word	0x0800e9fc
 8007f18:	0800ea14 	.word	0x0800ea14
 8007f1c:	0800ea08 	.word	0x0800ea08
			if ((i == 0 && j == 0) || (i == 0 && j == numAlign - 1) || (i == numAlign - 1 && j == 0))
 8007f20:	9a06      	ldr	r2, [sp, #24]
 8007f22:	455a      	cmp	r2, fp
 8007f24:	d112      	bne.n	8007f4c <qrcodegen_encodeSegmentsAdvanced+0xe40>
 8007f26:	2900      	cmp	r1, #0
 8007f28:	d110      	bne.n	8007f4c <qrcodegen_encodeSegmentsAdvanced+0xe40>
 8007f2a:	9a01      	ldr	r2, [sp, #4]
 8007f2c:	3201      	adds	r2, #1
 8007f2e:	9201      	str	r2, [sp, #4]
 8007f30:	9a02      	ldr	r2, [sp, #8]
 8007f32:	3201      	adds	r2, #1
 8007f34:	9202      	str	r2, [sp, #8]
 8007f36:	465a      	mov	r2, fp
 8007f38:	9901      	ldr	r1, [sp, #4]
 8007f3a:	430a      	orrs	r2, r1
 8007f3c:	d0f5      	beq.n	8007f2a <qrcodegen_encodeSegmentsAdvanced+0xe1e>
 8007f3e:	465a      	mov	r2, fp
 8007f40:	2a00      	cmp	r2, #0
 8007f42:	d1ed      	bne.n	8007f20 <qrcodegen_encodeSegmentsAdvanced+0xe14>
 8007f44:	9a06      	ldr	r2, [sp, #24]
 8007f46:	428a      	cmp	r2, r1
 8007f48:	d100      	bne.n	8007f4c <qrcodegen_encodeSegmentsAdvanced+0xe40>
 8007f4a:	e11d      	b.n	8008188 <qrcodegen_encodeSegmentsAdvanced+0x107c>
					setModuleBounded(qrcode, alignPatPos[i] + dx, alignPatPos[j] + dy, dx == 0 && dy == 0);
 8007f4c:	9a03      	ldr	r2, [sp, #12]
 8007f4e:	9802      	ldr	r0, [sp, #8]
 8007f50:	7811      	ldrb	r1, [r2, #0]
 8007f52:	aa18      	add	r2, sp, #96	; 0x60
 8007f54:	3a01      	subs	r2, #1
 8007f56:	5c12      	ldrb	r2, [r2, r0]
 8007f58:	1c48      	adds	r0, r1, #1
 8007f5a:	4681      	mov	r9, r0
	int qrsize = qrcode[0];
 8007f5c:	7818      	ldrb	r0, [r3, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8007f5e:	2715      	movs	r7, #21
	int qrsize = qrcode[0];
 8007f60:	4684      	mov	ip, r0
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8007f62:	427f      	negs	r7, r7
 8007f64:	4467      	add	r7, ip
					setModuleBounded(qrcode, alignPatPos[i] + dx, alignPatPos[j] + dy, dx == 0 && dy == 0);
 8007f66:	1e4c      	subs	r4, r1, #1
 8007f68:	1e55      	subs	r5, r2, #1
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8007f6a:	2f9c      	cmp	r7, #156	; 0x9c
 8007f6c:	d900      	bls.n	8007f70 <qrcodegen_encodeSegmentsAdvanced+0xe64>
 8007f6e:	e201      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
 8007f70:	1c60      	adds	r0, r4, #1
 8007f72:	d100      	bne.n	8007f76 <qrcodegen_encodeSegmentsAdvanced+0xe6a>
 8007f74:	e1fe      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
 8007f76:	4564      	cmp	r4, ip
 8007f78:	db00      	blt.n	8007f7c <qrcodegen_encodeSegmentsAdvanced+0xe70>
 8007f7a:	e1fb      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
 8007f7c:	1c68      	adds	r0, r5, #1
 8007f7e:	d100      	bne.n	8007f82 <qrcodegen_encodeSegmentsAdvanced+0xe76>
 8007f80:	e1f8      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
 8007f82:	4565      	cmp	r5, ip
 8007f84:	db00      	blt.n	8007f88 <qrcodegen_encodeSegmentsAdvanced+0xe7c>
 8007f86:	e1f5      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
	int index = y * qrsize + x;
 8007f88:	4667      	mov	r7, ip
 8007f8a:	436f      	muls	r7, r5
 8007f8c:	46bc      	mov	ip, r7
 8007f8e:	44a4      	add	ip, r4
 8007f90:	4667      	mov	r7, ip
	int byteIndex = (index >> 3) + 1;
 8007f92:	10f8      	asrs	r0, r7, #3
 8007f94:	4684      	mov	ip, r0
 8007f96:	2001      	movs	r0, #1
 8007f98:	4680      	mov	r8, r0
	int bitIndex = index & 7;
 8007f9a:	4037      	ands	r7, r6
	int byteIndex = (index >> 3) + 1;
 8007f9c:	44c4      	add	ip, r8
	int bitIndex = index & 7;
 8007f9e:	46b8      	mov	r8, r7
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8007fa0:	4657      	mov	r7, sl
 8007fa2:	4640      	mov	r0, r8
 8007fa4:	4087      	lsls	r7, r0
 8007fa6:	4660      	mov	r0, ip
 8007fa8:	5c18      	ldrb	r0, [r3, r0]
 8007faa:	43b8      	bics	r0, r7
 8007fac:	4680      	mov	r8, r0
 8007fae:	4660      	mov	r0, ip
 8007fb0:	4647      	mov	r7, r8
 8007fb2:	541f      	strb	r7, [r3, r0]
	int qrsize = qrcode[0];
 8007fb4:	7818      	ldrb	r0, [r3, #0]
 8007fb6:	4684      	mov	ip, r0
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8007fb8:	2015      	movs	r0, #21
 8007fba:	4240      	negs	r0, r0
 8007fbc:	4460      	add	r0, ip
 8007fbe:	289c      	cmp	r0, #156	; 0x9c
 8007fc0:	d900      	bls.n	8007fc4 <qrcodegen_encodeSegmentsAdvanced+0xeb8>
 8007fc2:	e1d7      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
 8007fc4:	4561      	cmp	r1, ip
 8007fc6:	db00      	blt.n	8007fca <qrcodegen_encodeSegmentsAdvanced+0xebe>
 8007fc8:	e1d4      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
 8007fca:	4565      	cmp	r5, ip
 8007fcc:	db00      	blt.n	8007fd0 <qrcodegen_encodeSegmentsAdvanced+0xec4>
 8007fce:	e1d1      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
	int index = y * qrsize + x;
 8007fd0:	4660      	mov	r0, ip
 8007fd2:	4368      	muls	r0, r5
 8007fd4:	4684      	mov	ip, r0
 8007fd6:	448c      	add	ip, r1
 8007fd8:	4667      	mov	r7, ip
	int byteIndex = (index >> 3) + 1;
 8007fda:	10f8      	asrs	r0, r7, #3
 8007fdc:	4684      	mov	ip, r0
 8007fde:	2001      	movs	r0, #1
 8007fe0:	4680      	mov	r8, r0
	int bitIndex = index & 7;
 8007fe2:	0038      	movs	r0, r7
 8007fe4:	4030      	ands	r0, r6
	int byteIndex = (index >> 3) + 1;
 8007fe6:	44c4      	add	ip, r8
	int bitIndex = index & 7;
 8007fe8:	4680      	mov	r8, r0
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8007fea:	4650      	mov	r0, sl
 8007fec:	4647      	mov	r7, r8
 8007fee:	40b8      	lsls	r0, r7
 8007ff0:	4667      	mov	r7, ip
 8007ff2:	5ddf      	ldrb	r7, [r3, r7]
 8007ff4:	4387      	bics	r7, r0
 8007ff6:	4660      	mov	r0, ip
 8007ff8:	541f      	strb	r7, [r3, r0]
	int qrsize = qrcode[0];
 8007ffa:	7818      	ldrb	r0, [r3, #0]
 8007ffc:	4684      	mov	ip, r0
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8007ffe:	2015      	movs	r0, #21
 8008000:	4240      	negs	r0, r0
 8008002:	4460      	add	r0, ip
 8008004:	289c      	cmp	r0, #156	; 0x9c
 8008006:	d900      	bls.n	800800a <qrcodegen_encodeSegmentsAdvanced+0xefe>
 8008008:	e1b4      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
 800800a:	45e1      	cmp	r9, ip
 800800c:	db00      	blt.n	8008010 <qrcodegen_encodeSegmentsAdvanced+0xf04>
 800800e:	e1b1      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
 8008010:	4565      	cmp	r5, ip
 8008012:	db00      	blt.n	8008016 <qrcodegen_encodeSegmentsAdvanced+0xf0a>
 8008014:	e1ae      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
	int index = y * qrsize + x;
 8008016:	4660      	mov	r0, ip
 8008018:	4368      	muls	r0, r5
 800801a:	0005      	movs	r5, r0
 800801c:	444d      	add	r5, r9
	int byteIndex = (index >> 3) + 1;
 800801e:	10e8      	asrs	r0, r5, #3
 8008020:	4684      	mov	ip, r0
 8008022:	2001      	movs	r0, #1
 8008024:	4680      	mov	r8, r0
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8008026:	4650      	mov	r0, sl
	int bitIndex = index & 7;
 8008028:	4035      	ands	r5, r6
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 800802a:	40a8      	lsls	r0, r5
	int byteIndex = (index >> 3) + 1;
 800802c:	44c4      	add	ip, r8
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 800802e:	4680      	mov	r8, r0
 8008030:	4660      	mov	r0, ip
 8008032:	5c1d      	ldrb	r5, [r3, r0]
 8008034:	4640      	mov	r0, r8
 8008036:	4385      	bics	r5, r0
 8008038:	4660      	mov	r0, ip
 800803a:	541d      	strb	r5, [r3, r0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 800803c:	2015      	movs	r0, #21
 800803e:	4240      	negs	r0, r0
 8008040:	4684      	mov	ip, r0
	int qrsize = qrcode[0];
 8008042:	781d      	ldrb	r5, [r3, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8008044:	44ac      	add	ip, r5
 8008046:	4660      	mov	r0, ip
 8008048:	289c      	cmp	r0, #156	; 0x9c
 800804a:	d900      	bls.n	800804e <qrcodegen_encodeSegmentsAdvanced+0xf42>
 800804c:	e192      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
 800804e:	42a5      	cmp	r5, r4
 8008050:	dc00      	bgt.n	8008054 <qrcodegen_encodeSegmentsAdvanced+0xf48>
 8008052:	e18f      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
 8008054:	42aa      	cmp	r2, r5
 8008056:	db00      	blt.n	800805a <qrcodegen_encodeSegmentsAdvanced+0xf4e>
 8008058:	e18c      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
	int index = y * qrsize + x;
 800805a:	4355      	muls	r5, r2
 800805c:	192d      	adds	r5, r5, r4
	int byteIndex = (index >> 3) + 1;
 800805e:	10e8      	asrs	r0, r5, #3
 8008060:	4684      	mov	ip, r0
 8008062:	2001      	movs	r0, #1
 8008064:	4680      	mov	r8, r0
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8008066:	4650      	mov	r0, sl
	int bitIndex = index & 7;
 8008068:	4035      	ands	r5, r6
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 800806a:	40a8      	lsls	r0, r5
	int byteIndex = (index >> 3) + 1;
 800806c:	44c4      	add	ip, r8
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 800806e:	4680      	mov	r8, r0
 8008070:	4660      	mov	r0, ip
 8008072:	5c1d      	ldrb	r5, [r3, r0]
 8008074:	4640      	mov	r0, r8
 8008076:	4385      	bics	r5, r0
 8008078:	4660      	mov	r0, ip
 800807a:	541d      	strb	r5, [r3, r0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 800807c:	2015      	movs	r0, #21
 800807e:	4240      	negs	r0, r0
 8008080:	4684      	mov	ip, r0
	int qrsize = qrcode[0];
 8008082:	781d      	ldrb	r5, [r3, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8008084:	44ac      	add	ip, r5
 8008086:	4660      	mov	r0, ip
 8008088:	289c      	cmp	r0, #156	; 0x9c
 800808a:	d900      	bls.n	800808e <qrcodegen_encodeSegmentsAdvanced+0xf82>
 800808c:	e172      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
 800808e:	42a9      	cmp	r1, r5
 8008090:	db00      	blt.n	8008094 <qrcodegen_encodeSegmentsAdvanced+0xf88>
 8008092:	e16f      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
 8008094:	42aa      	cmp	r2, r5
 8008096:	db00      	blt.n	800809a <qrcodegen_encodeSegmentsAdvanced+0xf8e>
 8008098:	e16c      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
	int index = y * qrsize + x;
 800809a:	4355      	muls	r5, r2
 800809c:	186d      	adds	r5, r5, r1
	int byteIndex = (index >> 3) + 1;
 800809e:	10e8      	asrs	r0, r5, #3
 80080a0:	4684      	mov	ip, r0
 80080a2:	2001      	movs	r0, #1
 80080a4:	4680      	mov	r8, r0
		qrcode[byteIndex] |= 1 << bitIndex;
 80080a6:	4650      	mov	r0, sl
	int bitIndex = index & 7;
 80080a8:	4035      	ands	r5, r6
		qrcode[byteIndex] |= 1 << bitIndex;
 80080aa:	40a8      	lsls	r0, r5
	int byteIndex = (index >> 3) + 1;
 80080ac:	44c4      	add	ip, r8
		qrcode[byteIndex] |= 1 << bitIndex;
 80080ae:	0005      	movs	r5, r0
 80080b0:	4660      	mov	r0, ip
 80080b2:	5c18      	ldrb	r0, [r3, r0]
 80080b4:	4305      	orrs	r5, r0
 80080b6:	4660      	mov	r0, ip
 80080b8:	541d      	strb	r5, [r3, r0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 80080ba:	2015      	movs	r0, #21
 80080bc:	4240      	negs	r0, r0
 80080be:	4684      	mov	ip, r0
	int qrsize = qrcode[0];
 80080c0:	781d      	ldrb	r5, [r3, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 80080c2:	44ac      	add	ip, r5
 80080c4:	4660      	mov	r0, ip
 80080c6:	289c      	cmp	r0, #156	; 0x9c
 80080c8:	d900      	bls.n	80080cc <qrcodegen_encodeSegmentsAdvanced+0xfc0>
 80080ca:	e153      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
 80080cc:	45a9      	cmp	r9, r5
 80080ce:	db00      	blt.n	80080d2 <qrcodegen_encodeSegmentsAdvanced+0xfc6>
 80080d0:	e150      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
 80080d2:	42aa      	cmp	r2, r5
 80080d4:	db00      	blt.n	80080d8 <qrcodegen_encodeSegmentsAdvanced+0xfcc>
 80080d6:	e14d      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
	int index = y * qrsize + x;
 80080d8:	4355      	muls	r5, r2
 80080da:	444d      	add	r5, r9
	int byteIndex = (index >> 3) + 1;
 80080dc:	10e8      	asrs	r0, r5, #3
 80080de:	4684      	mov	ip, r0
 80080e0:	2001      	movs	r0, #1
 80080e2:	4680      	mov	r8, r0
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 80080e4:	4650      	mov	r0, sl
	int bitIndex = index & 7;
 80080e6:	4035      	ands	r5, r6
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 80080e8:	40a8      	lsls	r0, r5
	int byteIndex = (index >> 3) + 1;
 80080ea:	44c4      	add	ip, r8
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 80080ec:	4680      	mov	r8, r0
 80080ee:	4660      	mov	r0, ip
 80080f0:	5c1d      	ldrb	r5, [r3, r0]
 80080f2:	4640      	mov	r0, r8
 80080f4:	4385      	bics	r5, r0
 80080f6:	4660      	mov	r0, ip
 80080f8:	541d      	strb	r5, [r3, r0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 80080fa:	2015      	movs	r0, #21
 80080fc:	4240      	negs	r0, r0
 80080fe:	4684      	mov	ip, r0
	int qrsize = qrcode[0];
 8008100:	781d      	ldrb	r5, [r3, #0]
					setModuleBounded(qrcode, alignPatPos[i] + dx, alignPatPos[j] + dy, dx == 0 && dy == 0);
 8008102:	3201      	adds	r2, #1
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8008104:	44ac      	add	ip, r5
 8008106:	4660      	mov	r0, ip
 8008108:	289c      	cmp	r0, #156	; 0x9c
 800810a:	d900      	bls.n	800810e <qrcodegen_encodeSegmentsAdvanced+0x1002>
 800810c:	e132      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
 800810e:	42ac      	cmp	r4, r5
 8008110:	db00      	blt.n	8008114 <qrcodegen_encodeSegmentsAdvanced+0x1008>
 8008112:	e12f      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
 8008114:	42aa      	cmp	r2, r5
 8008116:	db00      	blt.n	800811a <qrcodegen_encodeSegmentsAdvanced+0x100e>
 8008118:	e12c      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 800811a:	4650      	mov	r0, sl
	int index = y * qrsize + x;
 800811c:	4355      	muls	r5, r2
 800811e:	192c      	adds	r4, r5, r4
	int byteIndex = (index >> 3) + 1;
 8008120:	10e5      	asrs	r5, r4, #3
	int bitIndex = index & 7;
 8008122:	4034      	ands	r4, r6
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8008124:	40a0      	lsls	r0, r4
	int byteIndex = (index >> 3) + 1;
 8008126:	3501      	adds	r5, #1
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8008128:	5d5c      	ldrb	r4, [r3, r5]
 800812a:	4384      	bics	r4, r0
 800812c:	555c      	strb	r4, [r3, r5]
	int qrsize = qrcode[0];
 800812e:	781c      	ldrb	r4, [r3, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8008130:	0025      	movs	r5, r4
 8008132:	3d15      	subs	r5, #21
 8008134:	2d9c      	cmp	r5, #156	; 0x9c
 8008136:	d900      	bls.n	800813a <qrcodegen_encodeSegmentsAdvanced+0x102e>
 8008138:	e11c      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
 800813a:	42a1      	cmp	r1, r4
 800813c:	db00      	blt.n	8008140 <qrcodegen_encodeSegmentsAdvanced+0x1034>
 800813e:	e119      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
 8008140:	42a2      	cmp	r2, r4
 8008142:	db00      	blt.n	8008146 <qrcodegen_encodeSegmentsAdvanced+0x103a>
 8008144:	e116      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
	int index = y * qrsize + x;
 8008146:	4354      	muls	r4, r2
 8008148:	1864      	adds	r4, r4, r1
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 800814a:	4651      	mov	r1, sl
	int byteIndex = (index >> 3) + 1;
 800814c:	10e5      	asrs	r5, r4, #3
	int bitIndex = index & 7;
 800814e:	4034      	ands	r4, r6
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8008150:	40a1      	lsls	r1, r4
 8008152:	000c      	movs	r4, r1
	int byteIndex = (index >> 3) + 1;
 8008154:	3501      	adds	r5, #1
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8008156:	5d59      	ldrb	r1, [r3, r5]
 8008158:	43a1      	bics	r1, r4
 800815a:	5559      	strb	r1, [r3, r5]
	int qrsize = qrcode[0];
 800815c:	7819      	ldrb	r1, [r3, #0]
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 800815e:	000c      	movs	r4, r1
 8008160:	3c15      	subs	r4, #21
 8008162:	2c9c      	cmp	r4, #156	; 0x9c
 8008164:	d900      	bls.n	8008168 <qrcodegen_encodeSegmentsAdvanced+0x105c>
 8008166:	e105      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
 8008168:	4549      	cmp	r1, r9
 800816a:	dc00      	bgt.n	800816e <qrcodegen_encodeSegmentsAdvanced+0x1062>
 800816c:	e102      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
 800816e:	428a      	cmp	r2, r1
 8008170:	db00      	blt.n	8008174 <qrcodegen_encodeSegmentsAdvanced+0x1068>
 8008172:	e0ff      	b.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8008174:	4654      	mov	r4, sl
	int index = y * qrsize + x;
 8008176:	4351      	muls	r1, r2
 8008178:	4449      	add	r1, r9
	int byteIndex = (index >> 3) + 1;
 800817a:	10ca      	asrs	r2, r1, #3
	int bitIndex = index & 7;
 800817c:	4031      	ands	r1, r6
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 800817e:	408c      	lsls	r4, r1
	int byteIndex = (index >> 3) + 1;
 8008180:	3201      	adds	r2, #1
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8008182:	5c99      	ldrb	r1, [r3, r2]
 8008184:	43a1      	bics	r1, r4
 8008186:	5499      	strb	r1, [r3, r2]
		for (int j = 0; j < numAlign; j++) {
 8008188:	9a04      	ldr	r2, [sp, #16]
 800818a:	9902      	ldr	r1, [sp, #8]
 800818c:	4291      	cmp	r1, r2
 800818e:	da00      	bge.n	8008192 <qrcodegen_encodeSegmentsAdvanced+0x1086>
 8008190:	e6cb      	b.n	8007f2a <qrcodegen_encodeSegmentsAdvanced+0xe1e>
	for (int i = 0; i < numAlign; i++) {
 8008192:	2201      	movs	r2, #1
 8008194:	4694      	mov	ip, r2
 8008196:	9a03      	ldr	r2, [sp, #12]
 8008198:	44e3      	add	fp, ip
 800819a:	3201      	adds	r2, #1
 800819c:	9203      	str	r2, [sp, #12]
 800819e:	9a04      	ldr	r2, [sp, #16]
 80081a0:	4593      	cmp	fp, r2
 80081a2:	da00      	bge.n	80081a6 <qrcodegen_encodeSegmentsAdvanced+0x109a>
 80081a4:	e6a9      	b.n	8007efa <qrcodegen_encodeSegmentsAdvanced+0xdee>
	if (version >= 7) {
 80081a6:	9805      	ldr	r0, [sp, #20]
 80081a8:	4699      	mov	r9, r3
 80081aa:	2806      	cmp	r0, #6
 80081ac:	dd39      	ble.n	8008222 <qrcodegen_encodeSegmentsAdvanced+0x1116>
			rem = (rem << 1) ^ ((rem >> 11) * 0x1F25);
 80081ae:	4abf      	ldr	r2, [pc, #764]	; (80084ac <qrcodegen_encodeSegmentsAdvanced+0x13a0>)
 80081b0:	0203      	lsls	r3, r0, #8
 80081b2:	12db      	asrs	r3, r3, #11
 80081b4:	4353      	muls	r3, r2
 80081b6:	0241      	lsls	r1, r0, #9
 80081b8:	404b      	eors	r3, r1
 80081ba:	0059      	lsls	r1, r3, #1
 80081bc:	12db      	asrs	r3, r3, #11
 80081be:	4353      	muls	r3, r2
 80081c0:	404b      	eors	r3, r1
 80081c2:	0059      	lsls	r1, r3, #1
 80081c4:	12db      	asrs	r3, r3, #11
 80081c6:	4353      	muls	r3, r2
 80081c8:	404b      	eors	r3, r1
 80081ca:	210b      	movs	r1, #11
 80081cc:	4249      	negs	r1, r1
 80081ce:	468c      	mov	ip, r1
 80081d0:	005c      	lsls	r4, r3, #1
 80081d2:	12db      	asrs	r3, r3, #11
 80081d4:	435a      	muls	r2, r3
 80081d6:	4062      	eors	r2, r4
		long bits = (long)version << 12 | rem;  // uint18
 80081d8:	0304      	lsls	r4, r0, #12
 80081da:	4314      	orrs	r4, r2
		assert(bits >> 18 == 0);
 80081dc:	9a07      	ldr	r2, [sp, #28]
		for (int i = 0; i < 6; i++) {
 80081de:	2500      	movs	r5, #0
 80081e0:	4462      	add	r2, ip
 80081e2:	4693      	mov	fp, r2
				setModuleBounded(qrcode, k, i, (bits & 1) != 0);
 80081e4:	2201      	movs	r2, #1
		assert(bits >> 18 == 0);
 80081e6:	14a3      	asrs	r3, r4, #18
				setModuleBounded(qrcode, k, i, (bits & 1) != 0);
 80081e8:	4692      	mov	sl, r2
		assert(bits >> 18 == 0);
 80081ea:	d000      	beq.n	80081ee <qrcodegen_encodeSegmentsAdvanced+0x10e2>
 80081ec:	e366      	b.n	80088bc <qrcodegen_encodeSegmentsAdvanced+0x17b0>
			for (int j = 0; j < 3; j++) {
 80081ee:	2600      	movs	r6, #0
 80081f0:	46a8      	mov	r8, r5
				int k = qrsize - 11 + j;
 80081f2:	465b      	mov	r3, fp
				setModuleBounded(qrcode, k, i, (bits & 1) != 0);
 80081f4:	4655      	mov	r5, sl
 80081f6:	199f      	adds	r7, r3, r6
 80081f8:	4025      	ands	r5, r4
 80081fa:	002b      	movs	r3, r5
 80081fc:	4642      	mov	r2, r8
 80081fe:	0039      	movs	r1, r7
 8008200:	4648      	mov	r0, r9
 8008202:	f7fe fa3b 	bl	800667c <setModuleBounded>
			for (int j = 0; j < 3; j++) {
 8008206:	3601      	adds	r6, #1
				setModuleBounded(qrcode, i, k, (bits & 1) != 0);
 8008208:	002b      	movs	r3, r5
 800820a:	003a      	movs	r2, r7
 800820c:	4641      	mov	r1, r8
 800820e:	4648      	mov	r0, r9
 8008210:	f7fe fa34 	bl	800667c <setModuleBounded>
				bits >>= 1;
 8008214:	1064      	asrs	r4, r4, #1
			for (int j = 0; j < 3; j++) {
 8008216:	2e03      	cmp	r6, #3
 8008218:	d1eb      	bne.n	80081f2 <qrcodegen_encodeSegmentsAdvanced+0x10e6>
		for (int i = 0; i < 6; i++) {
 800821a:	4645      	mov	r5, r8
 800821c:	3501      	adds	r5, #1
 800821e:	2d06      	cmp	r5, #6
 8008220:	d1e5      	bne.n	80081ee <qrcodegen_encodeSegmentsAdvanced+0x10e2>
	initializeFunctionModules(version, tempBuffer);
 8008222:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8008224:	9805      	ldr	r0, [sp, #20]
 8008226:	f7fd fbe7 	bl	80059f8 <initializeFunctionModules>
	if (mask == qrcodegen_Mask_AUTO) {  // Automatically choose best mask
 800822a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800822c:	3301      	adds	r3, #1
 800822e:	d100      	bne.n	8008232 <qrcodegen_encodeSegmentsAdvanced+0x1126>
 8008230:	e10c      	b.n	800844c <qrcodegen_encodeSegmentsAdvanced+0x1340>
	assert(0 <= (int)mask && (int)mask <= 7);
 8008232:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008234:	2b07      	cmp	r3, #7
 8008236:	d900      	bls.n	800823a <qrcodegen_encodeSegmentsAdvanced+0x112e>
 8008238:	e101      	b.n	800843e <qrcodegen_encodeSegmentsAdvanced+0x1332>
	applyMask(tempBuffer, qrcode, mask);  // Apply the final choice of mask
 800823a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800823c:	4649      	mov	r1, r9
 800823e:	0022      	movs	r2, r4
 8008240:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8008242:	f7fd faeb 	bl	800581c <applyMask>
	drawFormatBits(ecl, mask, qrcode);  // Overwrite old format bits
 8008246:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008248:	464a      	mov	r2, r9
 800824a:	0021      	movs	r1, r4
 800824c:	f7fe fa44 	bl	80066d8 <drawFormatBits>
	return true;
 8008250:	2001      	movs	r0, #1
 8008252:	f7ff f841 	bl	80072d8 <qrcodegen_encodeSegmentsAdvanced+0x1cc>
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8008256:	0032      	movs	r2, r6
 8008258:	409a      	lsls	r2, r3
 800825a:	4395      	bics	r5, r2
 800825c:	e524      	b.n	8007ca8 <qrcodegen_encodeSegmentsAdvanced+0xb9c>
 800825e:	0031      	movs	r1, r6
 8008260:	4091      	lsls	r1, r2
 8008262:	438b      	bics	r3, r1
 8008264:	e556      	b.n	8007d14 <qrcodegen_encodeSegmentsAdvanced+0xc08>
		for (int vert = 0; vert < qrsize; vert++) {  // Vertical counter
 8008266:	9b06      	ldr	r3, [sp, #24]
			right = 5;
 8008268:	2505      	movs	r5, #5
		for (int vert = 0; vert < qrsize; vert++) {  // Vertical counter
 800826a:	2b00      	cmp	r3, #0
 800826c:	d000      	beq.n	8008270 <qrcodegen_encodeSegmentsAdvanced+0x1164>
 800826e:	e4c7      	b.n	8007c00 <qrcodegen_encodeSegmentsAdvanced+0xaf4>
	for (int right = qrsize - 1; right >= 1; right -= 2) {  // Index of right column in each column pair
 8008270:	3d02      	subs	r5, #2
 8008272:	e559      	b.n	8007d28 <qrcodegen_encodeSegmentsAdvanced+0xc1c>
	assert(segs != NULL || len == 0);
 8008274:	2900      	cmp	r1, #0
 8008276:	d101      	bne.n	800827c <qrcodegen_encodeSegmentsAdvanced+0x1170>
 8008278:	f7fe ff62 	bl	8007140 <qrcodegen_encodeSegmentsAdvanced+0x34>
 800827c:	21d1      	movs	r1, #209	; 0xd1
 800827e:	4b8c      	ldr	r3, [pc, #560]	; (80084b0 <qrcodegen_encodeSegmentsAdvanced+0x13a4>)
 8008280:	4a8c      	ldr	r2, [pc, #560]	; (80084b4 <qrcodegen_encodeSegmentsAdvanced+0x13a8>)
 8008282:	488d      	ldr	r0, [pc, #564]	; (80084b8 <qrcodegen_encodeSegmentsAdvanced+0x13ac>)
 8008284:	f001 f978 	bl	8009578 <__assert_func>
		case qrcodegen_Mode_ECI         : return 0;
		default:  assert(false);  return -1;  // Dummy value
 8008288:	4b8c      	ldr	r3, [pc, #560]	; (80084bc <qrcodegen_encodeSegmentsAdvanced+0x13b0>)
 800828a:	4a8d      	ldr	r2, [pc, #564]	; (80084c0 <qrcodegen_encodeSegmentsAdvanced+0x13b4>)
 800828c:	498d      	ldr	r1, [pc, #564]	; (80084c4 <qrcodegen_encodeSegmentsAdvanced+0x13b8>)
 800828e:	488a      	ldr	r0, [pc, #552]	; (80084b8 <qrcodegen_encodeSegmentsAdvanced+0x13ac>)
 8008290:	f001 f972 	bl	8009578 <__assert_func>
 8008294:	2304      	movs	r3, #4
 8008296:	f7ff fa27 	bl	80076e8 <qrcodegen_encodeSegmentsAdvanced+0x5dc>
		if (boostEcl && dataUsedBits <= getNumDataCodewords(version, (enum qrcodegen_Ecc)i) * 8)
 800829a:	2101      	movs	r1, #1
 800829c:	9805      	ldr	r0, [sp, #20]
 800829e:	f7fd fa65 	bl	800576c <getNumDataCodewords>
 80082a2:	00c0      	lsls	r0, r0, #3
 80082a4:	4285      	cmp	r5, r0
 80082a6:	dc01      	bgt.n	80082ac <qrcodegen_encodeSegmentsAdvanced+0x11a0>
 80082a8:	2301      	movs	r3, #1
 80082aa:	930a      	str	r3, [sp, #40]	; 0x28
 80082ac:	2102      	movs	r1, #2
 80082ae:	9805      	ldr	r0, [sp, #20]
 80082b0:	f7fd fa5c 	bl	800576c <getNumDataCodewords>
 80082b4:	00c0      	lsls	r0, r0, #3
 80082b6:	4285      	cmp	r5, r0
 80082b8:	dc01      	bgt.n	80082be <qrcodegen_encodeSegmentsAdvanced+0x11b2>
 80082ba:	2302      	movs	r3, #2
 80082bc:	930a      	str	r3, [sp, #40]	; 0x28
 80082be:	2103      	movs	r1, #3
 80082c0:	9805      	ldr	r0, [sp, #20]
 80082c2:	f7fd fa53 	bl	800576c <getNumDataCodewords>
 80082c6:	00c0      	lsls	r0, r0, #3
 80082c8:	42a8      	cmp	r0, r5
 80082ca:	da01      	bge.n	80082d0 <qrcodegen_encodeSegmentsAdvanced+0x11c4>
 80082cc:	f7ff f814 	bl	80072f8 <qrcodegen_encodeSegmentsAdvanced+0x1ec>
 80082d0:	2303      	movs	r3, #3
 80082d2:	930a      	str	r3, [sp, #40]	; 0x28
	for (int i = (int)qrcodegen_Ecc_MEDIUM; i <= (int)qrcodegen_Ecc_HIGH; i++) {  // From low to high
 80082d4:	f7ff f810 	bl	80072f8 <qrcodegen_encodeSegmentsAdvanced+0x1ec>
	if (0 <= x && x < qrsize && 0 <= y && y < qrsize)
 80082d8:	4298      	cmp	r0, r3
 80082da:	d300      	bcc.n	80082de <qrcodegen_encodeSegmentsAdvanced+0x11d2>
 80082dc:	e5a2      	b.n	8007e24 <qrcodegen_encodeSegmentsAdvanced+0xd18>
 80082de:	9d01      	ldr	r5, [sp, #4]
 80082e0:	3501      	adds	r5, #1
 80082e2:	d107      	bne.n	80082f4 <qrcodegen_encodeSegmentsAdvanced+0x11e8>
 80082e4:	e59e      	b.n	8007e24 <qrcodegen_encodeSegmentsAdvanced+0xd18>
 80082e6:	4298      	cmp	r0, r3
 80082e8:	d300      	bcc.n	80082ec <qrcodegen_encodeSegmentsAdvanced+0x11e0>
 80082ea:	e599      	b.n	8007e20 <qrcodegen_encodeSegmentsAdvanced+0xd14>
 80082ec:	9d01      	ldr	r5, [sp, #4]
 80082ee:	3501      	adds	r5, #1
 80082f0:	d100      	bne.n	80082f4 <qrcodegen_encodeSegmentsAdvanced+0x11e8>
 80082f2:	e5b2      	b.n	8007e5a <qrcodegen_encodeSegmentsAdvanced+0xd4e>
 80082f4:	9d01      	ldr	r5, [sp, #4]
 80082f6:	429d      	cmp	r5, r3
 80082f8:	db22      	blt.n	8008340 <qrcodegen_encodeSegmentsAdvanced+0x1234>
 80082fa:	1c55      	adds	r5, r2, #1
 80082fc:	d000      	beq.n	8008300 <qrcodegen_encodeSegmentsAdvanced+0x11f4>
 80082fe:	e5ac      	b.n	8007e5a <qrcodegen_encodeSegmentsAdvanced+0xd4e>
 8008300:	e590      	b.n	8007e24 <qrcodegen_encodeSegmentsAdvanced+0xd18>
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8008302:	2515      	movs	r5, #21
 8008304:	426d      	negs	r5, r5
 8008306:	46ac      	mov	ip, r5
 8008308:	449c      	add	ip, r3
 800830a:	4665      	mov	r5, ip
 800830c:	2d9c      	cmp	r5, #156	; 0x9c
 800830e:	d831      	bhi.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
	int index = y * qrsize + x;
 8008310:	9d01      	ldr	r5, [sp, #4]
 8008312:	436b      	muls	r3, r5
 8008314:	189b      	adds	r3, r3, r2
	int byteIndex = (index >> 3) + 1;
 8008316:	10dd      	asrs	r5, r3, #3
 8008318:	46ac      	mov	ip, r5
 800831a:	2501      	movs	r5, #1
 800831c:	46a9      	mov	r9, r5
	int bitIndex = index & 7;
 800831e:	465d      	mov	r5, fp
 8008320:	402b      	ands	r3, r5
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8008322:	4655      	mov	r5, sl
	int byteIndex = (index >> 3) + 1;
 8008324:	44cc      	add	ip, r9
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8008326:	409d      	lsls	r5, r3
 8008328:	4663      	mov	r3, ip
 800832a:	5cfb      	ldrb	r3, [r7, r3]
 800832c:	43ab      	bics	r3, r5
 800832e:	4665      	mov	r5, ip
 8008330:	557b      	strb	r3, [r7, r5]
	int qrsize = qrcode[0];
 8008332:	783b      	ldrb	r3, [r7, #0]
	if (0 <= x && x < qrsize && 0 <= y && y < qrsize)
 8008334:	4298      	cmp	r0, r3
 8008336:	d300      	bcc.n	800833a <qrcodegen_encodeSegmentsAdvanced+0x122e>
 8008338:	e58f      	b.n	8007e5a <qrcodegen_encodeSegmentsAdvanced+0xd4e>
 800833a:	9d01      	ldr	r5, [sp, #4]
 800833c:	429d      	cmp	r5, r3
 800833e:	dadc      	bge.n	80082fa <qrcodegen_encodeSegmentsAdvanced+0x11ee>
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8008340:	2515      	movs	r5, #21
 8008342:	426d      	negs	r5, r5
 8008344:	46ac      	mov	ip, r5
 8008346:	449c      	add	ip, r3
 8008348:	4665      	mov	r5, ip
 800834a:	2d9c      	cmp	r5, #156	; 0x9c
 800834c:	d812      	bhi.n	8008374 <qrcodegen_encodeSegmentsAdvanced+0x1268>
	int index = y * qrsize + x;
 800834e:	9d01      	ldr	r5, [sp, #4]
 8008350:	436b      	muls	r3, r5
 8008352:	181b      	adds	r3, r3, r0
	int byteIndex = (index >> 3) + 1;
 8008354:	10dd      	asrs	r5, r3, #3
 8008356:	46ac      	mov	ip, r5
 8008358:	2501      	movs	r5, #1
 800835a:	46a9      	mov	r9, r5
	int bitIndex = index & 7;
 800835c:	465d      	mov	r5, fp
 800835e:	402b      	ands	r3, r5
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8008360:	4655      	mov	r5, sl
	int byteIndex = (index >> 3) + 1;
 8008362:	44cc      	add	ip, r9
		qrcode[byteIndex] &= (1 << bitIndex) ^ 0xFF;
 8008364:	409d      	lsls	r5, r3
 8008366:	4663      	mov	r3, ip
 8008368:	5cfb      	ldrb	r3, [r7, r3]
 800836a:	43ab      	bics	r3, r5
 800836c:	4665      	mov	r5, ip
 800836e:	557b      	strb	r3, [r7, r5]
	int qrsize = qrcode[0];
 8008370:	783b      	ldrb	r3, [r7, #0]
 8008372:	e7c2      	b.n	80082fa <qrcodegen_encodeSegmentsAdvanced+0x11ee>
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8008374:	21c4      	movs	r1, #196	; 0xc4
 8008376:	4b54      	ldr	r3, [pc, #336]	; (80084c8 <qrcodegen_encodeSegmentsAdvanced+0x13bc>)
 8008378:	4a54      	ldr	r2, [pc, #336]	; (80084cc <qrcodegen_encodeSegmentsAdvanced+0x13c0>)
 800837a:	484f      	ldr	r0, [pc, #316]	; (80084b8 <qrcodegen_encodeSegmentsAdvanced+0x13ac>)
 800837c:	0089      	lsls	r1, r1, #2
 800837e:	f001 f8fb 	bl	8009578 <__assert_func>
		assert(0 <= bitLength && bitLength <= INT16_MAX);
 8008382:	4b53      	ldr	r3, [pc, #332]	; (80084d0 <qrcodegen_encodeSegmentsAdvanced+0x13c4>)
 8008384:	4a53      	ldr	r2, [pc, #332]	; (80084d4 <qrcodegen_encodeSegmentsAdvanced+0x13c8>)
 8008386:	4954      	ldr	r1, [pc, #336]	; (80084d8 <qrcodegen_encodeSegmentsAdvanced+0x13cc>)
 8008388:	484b      	ldr	r0, [pc, #300]	; (80084b8 <qrcodegen_encodeSegmentsAdvanced+0x13ac>)
 800838a:	f001 f8f5 	bl	8009578 <__assert_func>
		assert(0 <= ccbits && ccbits <= 16);
 800838e:	21fa      	movs	r1, #250	; 0xfa
 8008390:	4b52      	ldr	r3, [pc, #328]	; (80084dc <qrcodegen_encodeSegmentsAdvanced+0x13d0>)
 8008392:	4a50      	ldr	r2, [pc, #320]	; (80084d4 <qrcodegen_encodeSegmentsAdvanced+0x13c8>)
 8008394:	4848      	ldr	r0, [pc, #288]	; (80084b8 <qrcodegen_encodeSegmentsAdvanced+0x13ac>)
 8008396:	0089      	lsls	r1, r1, #2
 8008398:	f001 f8ee 	bl	8009578 <__assert_func>
		assert(0 <= numChars  && numChars  <= INT16_MAX);
 800839c:	4b50      	ldr	r3, [pc, #320]	; (80084e0 <qrcodegen_encodeSegmentsAdvanced+0x13d4>)
 800839e:	4a4d      	ldr	r2, [pc, #308]	; (80084d4 <qrcodegen_encodeSegmentsAdvanced+0x13c8>)
 80083a0:	4950      	ldr	r1, [pc, #320]	; (80084e4 <qrcodegen_encodeSegmentsAdvanced+0x13d8>)
 80083a2:	4845      	ldr	r0, [pc, #276]	; (80084b8 <qrcodegen_encodeSegmentsAdvanced+0x13ac>)
 80083a4:	f001 f8e8 	bl	8009578 <__assert_func>
	assert(qrcodegen_VERSION_MIN <= minVersion && minVersion <= maxVersion && maxVersion <= qrcodegen_VERSION_MAX);
 80083a8:	21d2      	movs	r1, #210	; 0xd2
 80083aa:	4b4f      	ldr	r3, [pc, #316]	; (80084e8 <qrcodegen_encodeSegmentsAdvanced+0x13dc>)
 80083ac:	4a41      	ldr	r2, [pc, #260]	; (80084b4 <qrcodegen_encodeSegmentsAdvanced+0x13a8>)
 80083ae:	4842      	ldr	r0, [pc, #264]	; (80084b8 <qrcodegen_encodeSegmentsAdvanced+0x13ac>)
 80083b0:	f001 f8e2 	bl	8009578 <__assert_func>
	assert(qrcodegen_VERSION_MIN <= ver && ver <= qrcodegen_VERSION_MAX);
 80083b4:	2158      	movs	r1, #88	; 0x58
 80083b6:	4b4d      	ldr	r3, [pc, #308]	; (80084ec <qrcodegen_encodeSegmentsAdvanced+0x13e0>)
 80083b8:	4a4d      	ldr	r2, [pc, #308]	; (80084f0 <qrcodegen_encodeSegmentsAdvanced+0x13e4>)
 80083ba:	483f      	ldr	r0, [pc, #252]	; (80084b8 <qrcodegen_encodeSegmentsAdvanced+0x13ac>)
 80083bc:	31ff      	adds	r1, #255	; 0xff
 80083be:	f001 f8db 	bl	8009578 <__assert_func>
	assert(0 <= (int)ecl && (int)ecl <= 3 && -1 <= (int)mask && (int)mask <= 7);
 80083c2:	21d3      	movs	r1, #211	; 0xd3
 80083c4:	4b4b      	ldr	r3, [pc, #300]	; (80084f4 <qrcodegen_encodeSegmentsAdvanced+0x13e8>)
 80083c6:	4a3b      	ldr	r2, [pc, #236]	; (80084b4 <qrcodegen_encodeSegmentsAdvanced+0x13a8>)
 80083c8:	483b      	ldr	r0, [pc, #236]	; (80084b8 <qrcodegen_encodeSegmentsAdvanced+0x13ac>)
 80083ca:	f001 f8d5 	bl	8009578 <__assert_func>
	assert(segs != NULL || len == 0);
 80083ce:	21f8      	movs	r1, #248	; 0xf8
 80083d0:	4b37      	ldr	r3, [pc, #220]	; (80084b0 <qrcodegen_encodeSegmentsAdvanced+0x13a4>)
 80083d2:	4a40      	ldr	r2, [pc, #256]	; (80084d4 <qrcodegen_encodeSegmentsAdvanced+0x13c8>)
 80083d4:	4838      	ldr	r0, [pc, #224]	; (80084b8 <qrcodegen_encodeSegmentsAdvanced+0x13ac>)
 80083d6:	0089      	lsls	r1, r1, #2
 80083d8:	f001 f8ce 	bl	8009578 <__assert_func>
	assert(0 <= numBits && numBits <= 16 && (unsigned long)val >> numBits == 0);
 80083dc:	21bd      	movs	r1, #189	; 0xbd
 80083de:	4b46      	ldr	r3, [pc, #280]	; (80084f8 <qrcodegen_encodeSegmentsAdvanced+0x13ec>)
 80083e0:	4a46      	ldr	r2, [pc, #280]	; (80084fc <qrcodegen_encodeSegmentsAdvanced+0x13f0>)
 80083e2:	4835      	ldr	r0, [pc, #212]	; (80084b8 <qrcodegen_encodeSegmentsAdvanced+0x13ac>)
 80083e4:	f001 f8c8 	bl	8009578 <__assert_func>
	assert(bitLen == dataUsedBits);
 80083e8:	21f5      	movs	r1, #245	; 0xf5
 80083ea:	4b45      	ldr	r3, [pc, #276]	; (8008500 <qrcodegen_encodeSegmentsAdvanced+0x13f4>)
 80083ec:	4a31      	ldr	r2, [pc, #196]	; (80084b4 <qrcodegen_encodeSegmentsAdvanced+0x13a8>)
 80083ee:	4832      	ldr	r0, [pc, #200]	; (80084b8 <qrcodegen_encodeSegmentsAdvanced+0x13ac>)
 80083f0:	f001 f8c2 	bl	8009578 <__assert_func>
	assert(bitLen <= dataCapacityBits);
 80083f4:	21f9      	movs	r1, #249	; 0xf9
 80083f6:	4b43      	ldr	r3, [pc, #268]	; (8008504 <qrcodegen_encodeSegmentsAdvanced+0x13f8>)
 80083f8:	4a2e      	ldr	r2, [pc, #184]	; (80084b4 <qrcodegen_encodeSegmentsAdvanced+0x13a8>)
 80083fa:	482f      	ldr	r0, [pc, #188]	; (80084b8 <qrcodegen_encodeSegmentsAdvanced+0x13ac>)
 80083fc:	f001 f8bc 	bl	8009578 <__assert_func>
	assert(bitLen % 8 == 0);
 8008400:	21ff      	movs	r1, #255	; 0xff
 8008402:	4b41      	ldr	r3, [pc, #260]	; (8008508 <qrcodegen_encodeSegmentsAdvanced+0x13fc>)
 8008404:	4a2b      	ldr	r2, [pc, #172]	; (80084b4 <qrcodegen_encodeSegmentsAdvanced+0x13a8>)
 8008406:	482c      	ldr	r0, [pc, #176]	; (80084b8 <qrcodegen_encodeSegmentsAdvanced+0x13ac>)
 8008408:	f001 f8b6 	bl	8009578 <__assert_func>
 800840c:	f7fd f99e 	bl	800574c <qrcodegen_getSize.part.0>
	assert(i == dataLen * 8);
 8008410:	4b3e      	ldr	r3, [pc, #248]	; (800850c <qrcodegen_encodeSegmentsAdvanced+0x1400>)
 8008412:	4a3f      	ldr	r2, [pc, #252]	; (8008510 <qrcodegen_encodeSegmentsAdvanced+0x1404>)
 8008414:	493f      	ldr	r1, [pc, #252]	; (8008514 <qrcodegen_encodeSegmentsAdvanced+0x1408>)
 8008416:	4828      	ldr	r0, [pc, #160]	; (80084b8 <qrcodegen_encodeSegmentsAdvanced+0x13ac>)
 8008418:	f001 f8ae 	bl	8009578 <__assert_func>
	assert(1 <= degree && degree <= qrcodegen_REED_SOLOMON_DEGREE_MAX);
 800841c:	21b5      	movs	r1, #181	; 0xb5
 800841e:	4b3e      	ldr	r3, [pc, #248]	; (8008518 <qrcodegen_encodeSegmentsAdvanced+0x140c>)
 8008420:	4a3e      	ldr	r2, [pc, #248]	; (800851c <qrcodegen_encodeSegmentsAdvanced+0x1410>)
 8008422:	4825      	ldr	r0, [pc, #148]	; (80084b8 <qrcodegen_encodeSegmentsAdvanced+0x13ac>)
 8008424:	0049      	lsls	r1, r1, #1
 8008426:	f001 f8a7 	bl	8009578 <__assert_func>
	int bitLen = 0;
 800842a:	2400      	movs	r4, #0
 800842c:	f7ff f947 	bl	80076be <qrcodegen_encodeSegmentsAdvanced+0x5b2>
	assert(208 <= result && result <= 29648);
 8008430:	2160      	movs	r1, #96	; 0x60
 8008432:	4b3b      	ldr	r3, [pc, #236]	; (8008520 <qrcodegen_encodeSegmentsAdvanced+0x1414>)
 8008434:	4a2e      	ldr	r2, [pc, #184]	; (80084f0 <qrcodegen_encodeSegmentsAdvanced+0x13e4>)
 8008436:	4820      	ldr	r0, [pc, #128]	; (80084b8 <qrcodegen_encodeSegmentsAdvanced+0x13ac>)
 8008438:	31ff      	adds	r1, #255	; 0xff
 800843a:	f001 f89d 	bl	8009578 <__assert_func>
	assert(0 <= (int)mask && (int)mask <= 7);
 800843e:	211c      	movs	r1, #28
 8008440:	4b38      	ldr	r3, [pc, #224]	; (8008524 <qrcodegen_encodeSegmentsAdvanced+0x1418>)
 8008442:	4a1c      	ldr	r2, [pc, #112]	; (80084b4 <qrcodegen_encodeSegmentsAdvanced+0x13a8>)
 8008444:	481c      	ldr	r0, [pc, #112]	; (80084b8 <qrcodegen_encodeSegmentsAdvanced+0x13ac>)
 8008446:	31ff      	adds	r1, #255	; 0xff
 8008448:	f001 f896 	bl	8009578 <__assert_func>
		for (int i = 0; i < 8; i++) {
 800844c:	2300      	movs	r3, #0
 800844e:	9303      	str	r3, [sp, #12]
		long minPenalty = LONG_MAX;
 8008450:	4b35      	ldr	r3, [pc, #212]	; (8008528 <qrcodegen_encodeSegmentsAdvanced+0x141c>)
	return getBit(qrcode[(index >> 3) + 1], index & 7);
 8008452:	46ca      	mov	sl, r9
		long minPenalty = LONG_MAX;
 8008454:	9305      	str	r3, [sp, #20]
	return getBit(qrcode[(index >> 3) + 1], index & 7);
 8008456:	2307      	movs	r3, #7
 8008458:	469b      	mov	fp, r3
			enum qrcodegen_Mask msk = (enum qrcodegen_Mask)i;
 800845a:	466b      	mov	r3, sp
 800845c:	7b1b      	ldrb	r3, [r3, #12]
			applyMask(tempBuffer, qrcode, msk);
 800845e:	4651      	mov	r1, sl
			enum qrcodegen_Mask msk = (enum qrcodegen_Mask)i;
 8008460:	b25b      	sxtb	r3, r3
 8008462:	001c      	movs	r4, r3
			applyMask(tempBuffer, qrcode, msk);
 8008464:	001a      	movs	r2, r3
 8008466:	982d      	ldr	r0, [sp, #180]	; 0xb4
			enum qrcodegen_Mask msk = (enum qrcodegen_Mask)i;
 8008468:	9306      	str	r3, [sp, #24]
			applyMask(tempBuffer, qrcode, msk);
 800846a:	f7fd f9d7 	bl	800581c <applyMask>
			drawFormatBits(ecl, msk, qrcode);
 800846e:	0021      	movs	r1, r4
 8008470:	4652      	mov	r2, sl
 8008472:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008474:	f7fe f930 	bl	80066d8 <drawFormatBits>
	int result = qrcode[0];
 8008478:	4653      	mov	r3, sl
 800847a:	781c      	ldrb	r4, [r3, #0]
	assert((qrcodegen_VERSION_MIN * 4 + 17) <= result
 800847c:	0023      	movs	r3, r4
 800847e:	3b15      	subs	r3, #21
 8008480:	2b24      	cmp	r3, #36	; 0x24
 8008482:	d8c3      	bhi.n	800840c <qrcodegen_encodeSegmentsAdvanced+0x1300>
	for (int y = 0; y < qrsize; y++) {
 8008484:	2300      	movs	r3, #0
 8008486:	2c00      	cmp	r4, #0
 8008488:	d100      	bne.n	800848c <qrcodegen_encodeSegmentsAdvanced+0x1380>
 800848a:	e214      	b.n	80088b6 <qrcodegen_encodeSegmentsAdvanced+0x17aa>
 800848c:	9302      	str	r3, [sp, #8]
	long result = 0;
 800848e:	9301      	str	r3, [sp, #4]
	for (int y = 0; y < qrsize; y++) {
 8008490:	9304      	str	r3, [sp, #16]
		int runHistory[7] = {0};
 8008492:	221c      	movs	r2, #28
 8008494:	2100      	movs	r1, #0
 8008496:	a818      	add	r0, sp, #96	; 0x60
 8008498:	f001 f8e2 	bl	8009660 <memset>
		int runX = 0;
 800849c:	2600      	movs	r6, #0
		int runHistory[7] = {0};
 800849e:	2300      	movs	r3, #0
		for (int x = 0; x < qrsize; x++) {
 80084a0:	0032      	movs	r2, r6
		int runHistory[7] = {0};
 80084a2:	4698      	mov	r8, r3
		for (int x = 0; x < qrsize; x++) {
 80084a4:	0026      	movs	r6, r4
 80084a6:	2700      	movs	r7, #0
 80084a8:	001c      	movs	r4, r3
 80084aa:	e053      	b.n	8008554 <qrcodegen_encodeSegmentsAdvanced+0x1448>
 80084ac:	00001f25 	.word	0x00001f25
 80084b0:	0800e3e8 	.word	0x0800e3e8
 80084b4:	0800e994 	.word	0x0800e994
 80084b8:	0800e204 	.word	0x0800e204
 80084bc:	0800e504 	.word	0x0800e504
 80084c0:	0800e970 	.word	0x0800e970
 80084c4:	000003ff 	.word	0x000003ff
 80084c8:	0800e368 	.word	0x0800e368
 80084cc:	0800e8c4 	.word	0x0800e8c4
 80084d0:	0800e4d8 	.word	0x0800e4d8
 80084d4:	0800e984 	.word	0x0800e984
 80084d8:	000003e6 	.word	0x000003e6
 80084dc:	0800e50c 	.word	0x0800e50c
 80084e0:	0800e4b0 	.word	0x0800e4b0
 80084e4:	000003e5 	.word	0x000003e5
 80084e8:	0800e404 	.word	0x0800e404
 80084ec:	0800e2d0 	.word	0x0800e2d0
 80084f0:	0800e8fc 	.word	0x0800e8fc
 80084f4:	0800e46c 	.word	0x0800e46c
 80084f8:	0800e220 	.word	0x0800e220
 80084fc:	0800e948 	.word	0x0800e948
 8008500:	0800e528 	.word	0x0800e528
 8008504:	0800e540 	.word	0x0800e540
 8008508:	0800e55c 	.word	0x0800e55c
 800850c:	0800e5a8 	.word	0x0800e5a8
 8008510:	0800e8ec 	.word	0x0800e8ec
 8008514:	0000025a 	.word	0x0000025a
 8008518:	0800e56c 	.word	0x0800e56c
 800851c:	0800e92c 	.word	0x0800e92c
 8008520:	0800e310 	.word	0x0800e310
 8008524:	0800e334 	.word	0x0800e334
 8008528:	7fffffff 	.word	0x7fffffff
	if (runHistory[0] == 0)
 800852c:	4643      	mov	r3, r8
		currentRunLength += qrsize;  // Add light border to initial run
 800852e:	4690      	mov	r8, r2
	if (runHistory[0] == 0)
 8008530:	2b00      	cmp	r3, #0
 8008532:	d100      	bne.n	8008536 <qrcodegen_encodeSegmentsAdvanced+0x142a>
		currentRunLength += qrsize;  // Add light border to initial run
 8008534:	44b0      	add	r8, r6
	memmove(&runHistory[1], &runHistory[0], 6 * sizeof(runHistory[0]));
 8008536:	2218      	movs	r2, #24
 8008538:	a918      	add	r1, sp, #96	; 0x60
 800853a:	a819      	add	r0, sp, #100	; 0x64
 800853c:	f001 f87d 	bl	800963a <memmove>
	runHistory[0] = currentRunLength;
 8008540:	4643      	mov	r3, r8
 8008542:	9318      	str	r3, [sp, #96]	; 0x60
				if (!runColor)
 8008544:	2c00      	cmp	r4, #0
 8008546:	d100      	bne.n	800854a <qrcodegen_encodeSegmentsAdvanced+0x143e>
 8008548:	e10b      	b.n	8008762 <qrcodegen_encodeSegmentsAdvanced+0x1656>
 800854a:	002c      	movs	r4, r5
				runX = 1;
 800854c:	2201      	movs	r2, #1
		for (int x = 0; x < qrsize; x++) {
 800854e:	3701      	adds	r7, #1
 8008550:	42b7      	cmp	r7, r6
 8008552:	da16      	bge.n	8008582 <qrcodegen_encodeSegmentsAdvanced+0x1476>
	int index = y * qrsize + x;
 8008554:	9b02      	ldr	r3, [sp, #8]
 8008556:	18fb      	adds	r3, r7, r3
	return getBit(qrcode[(index >> 3) + 1], index & 7);
 8008558:	10d9      	asrs	r1, r3, #3
 800855a:	4451      	add	r1, sl
 800855c:	784d      	ldrb	r5, [r1, #1]
 800855e:	4659      	mov	r1, fp
 8008560:	400b      	ands	r3, r1
	return ((x >> i) & 1) != 0;
 8008562:	411d      	asrs	r5, r3
 8008564:	2301      	movs	r3, #1
 8008566:	401d      	ands	r5, r3
			if (getModuleBounded(qrcode, x, y) == runColor) {
 8008568:	42a5      	cmp	r5, r4
 800856a:	d1df      	bne.n	800852c <qrcodegen_encodeSegmentsAdvanced+0x1420>
				runX++;
 800856c:	3201      	adds	r2, #1
				if (runX == 5)
 800856e:	2a05      	cmp	r2, #5
 8008570:	d100      	bne.n	8008574 <qrcodegen_encodeSegmentsAdvanced+0x1468>
 8008572:	e116      	b.n	80087a2 <qrcodegen_encodeSegmentsAdvanced+0x1696>
				else if (runX > 5)
 8008574:	ddeb      	ble.n	800854e <qrcodegen_encodeSegmentsAdvanced+0x1442>
					result++;
 8008576:	9b01      	ldr	r3, [sp, #4]
		for (int x = 0; x < qrsize; x++) {
 8008578:	3701      	adds	r7, #1
					result++;
 800857a:	3301      	adds	r3, #1
 800857c:	9301      	str	r3, [sp, #4]
		for (int x = 0; x < qrsize; x++) {
 800857e:	42b7      	cmp	r7, r6
 8008580:	dbe8      	blt.n	8008554 <qrcodegen_encodeSegmentsAdvanced+0x1448>
	if (currentRunColor) {  // Terminate dark run
 8008582:	46a1      	mov	r9, r4
 8008584:	464b      	mov	r3, r9
 8008586:	0034      	movs	r4, r6
 8008588:	0016      	movs	r6, r2
 800858a:	2b00      	cmp	r3, #0
 800858c:	d100      	bne.n	8008590 <qrcodegen_encodeSegmentsAdvanced+0x1484>
 800858e:	e161      	b.n	8008854 <qrcodegen_encodeSegmentsAdvanced+0x1748>
	if (runHistory[0] == 0)
 8008590:	4643      	mov	r3, r8
 8008592:	2b00      	cmp	r3, #0
 8008594:	d100      	bne.n	8008598 <qrcodegen_encodeSegmentsAdvanced+0x148c>
		currentRunLength += qrsize;  // Add light border to initial run
 8008596:	1916      	adds	r6, r2, r4
	memmove(&runHistory[1], &runHistory[0], 6 * sizeof(runHistory[0]));
 8008598:	2218      	movs	r2, #24
 800859a:	a918      	add	r1, sp, #96	; 0x60
 800859c:	a819      	add	r0, sp, #100	; 0x64
 800859e:	f001 f84c 	bl	800963a <memmove>
	runHistory[0] = currentRunLength;
 80085a2:	9618      	str	r6, [sp, #96]	; 0x60
 80085a4:	0026      	movs	r6, r4
	memmove(&runHistory[1], &runHistory[0], 6 * sizeof(runHistory[0]));
 80085a6:	2218      	movs	r2, #24
 80085a8:	a918      	add	r1, sp, #96	; 0x60
 80085aa:	a819      	add	r0, sp, #100	; 0x64
 80085ac:	f001 f845 	bl	800963a <memmove>
	return finderPenaltyCountPatterns(runHistory, qrsize);
 80085b0:	0021      	movs	r1, r4
 80085b2:	a818      	add	r0, sp, #96	; 0x60
	runHistory[0] = currentRunLength;
 80085b4:	9618      	str	r6, [sp, #96]	; 0x60
	return finderPenaltyCountPatterns(runHistory, qrsize);
 80085b6:	f7fd f883 	bl	80056c0 <finderPenaltyCountPatterns>
		result += finderPenaltyTerminateAndCount(runColor, runX, runHistory, qrsize) * PENALTY_N3;
 80085ba:	9a01      	ldr	r2, [sp, #4]
 80085bc:	0083      	lsls	r3, r0, #2
 80085be:	4694      	mov	ip, r2
 80085c0:	181b      	adds	r3, r3, r0
	for (int y = 0; y < qrsize; y++) {
 80085c2:	9a02      	ldr	r2, [sp, #8]
		result += finderPenaltyTerminateAndCount(runColor, runX, runHistory, qrsize) * PENALTY_N3;
 80085c4:	00db      	lsls	r3, r3, #3
 80085c6:	449c      	add	ip, r3
 80085c8:	4663      	mov	r3, ip
	for (int y = 0; y < qrsize; y++) {
 80085ca:	4694      	mov	ip, r2
 80085cc:	44a4      	add	ip, r4
 80085ce:	4662      	mov	r2, ip
		result += finderPenaltyTerminateAndCount(runColor, runX, runHistory, qrsize) * PENALTY_N3;
 80085d0:	9301      	str	r3, [sp, #4]
	for (int y = 0; y < qrsize; y++) {
 80085d2:	9b04      	ldr	r3, [sp, #16]
 80085d4:	9202      	str	r2, [sp, #8]
 80085d6:	3301      	adds	r3, #1
 80085d8:	9304      	str	r3, [sp, #16]
 80085da:	42a3      	cmp	r3, r4
 80085dc:	da00      	bge.n	80085e0 <qrcodegen_encodeSegmentsAdvanced+0x14d4>
 80085de:	e758      	b.n	8008492 <qrcodegen_encodeSegmentsAdvanced+0x1386>
 80085e0:	2300      	movs	r3, #0
 80085e2:	9304      	str	r3, [sp, #16]
		int runHistory[7] = {0};
 80085e4:	221c      	movs	r2, #28
 80085e6:	2100      	movs	r1, #0
 80085e8:	a818      	add	r0, sp, #96	; 0x60
 80085ea:	f001 f839 	bl	8009660 <memset>
 80085ee:	2300      	movs	r3, #0
		for (int y = 0; y < qrsize; y++) {
 80085f0:	0022      	movs	r2, r4
		int runY = 0;
 80085f2:	2500      	movs	r5, #0
		for (int y = 0; y < qrsize; y++) {
 80085f4:	001c      	movs	r4, r3
 80085f6:	4691      	mov	r9, r2
 80085f8:	9f04      	ldr	r7, [sp, #16]
		int runHistory[7] = {0};
 80085fa:	9302      	str	r3, [sp, #8]
 80085fc:	e015      	b.n	800862a <qrcodegen_encodeSegmentsAdvanced+0x151e>
	if (runHistory[0] == 0)
 80085fe:	9a02      	ldr	r2, [sp, #8]
 8008600:	2a00      	cmp	r2, #0
 8008602:	d000      	beq.n	8008606 <qrcodegen_encodeSegmentsAdvanced+0x14fa>
 8008604:	e0bc      	b.n	8008780 <qrcodegen_encodeSegmentsAdvanced+0x1674>
		currentRunLength += qrsize;  // Add light border to initial run
 8008606:	444b      	add	r3, r9
 8008608:	9302      	str	r3, [sp, #8]
	memmove(&runHistory[1], &runHistory[0], 6 * sizeof(runHistory[0]));
 800860a:	2218      	movs	r2, #24
 800860c:	a918      	add	r1, sp, #96	; 0x60
 800860e:	a819      	add	r0, sp, #100	; 0x64
 8008610:	f001 f813 	bl	800963a <memmove>
	runHistory[0] = currentRunLength;
 8008614:	9b02      	ldr	r3, [sp, #8]
 8008616:	9318      	str	r3, [sp, #96]	; 0x60
				if (!runColor)
 8008618:	2d00      	cmp	r5, #0
 800861a:	d100      	bne.n	800861e <qrcodegen_encodeSegmentsAdvanced+0x1512>
 800861c:	e0b2      	b.n	8008784 <qrcodegen_encodeSegmentsAdvanced+0x1678>
 800861e:	0035      	movs	r5, r6
				runY = 1;
 8008620:	2301      	movs	r3, #1
		for (int y = 0; y < qrsize; y++) {
 8008622:	3401      	adds	r4, #1
 8008624:	444f      	add	r7, r9
 8008626:	454c      	cmp	r4, r9
 8008628:	da15      	bge.n	8008656 <qrcodegen_encodeSegmentsAdvanced+0x154a>
	return getBit(qrcode[(index >> 3) + 1], index & 7);
 800862a:	10fa      	asrs	r2, r7, #3
 800862c:	4452      	add	r2, sl
 800862e:	7856      	ldrb	r6, [r2, #1]
 8008630:	465a      	mov	r2, fp
 8008632:	403a      	ands	r2, r7
	return ((x >> i) & 1) != 0;
 8008634:	4116      	asrs	r6, r2
 8008636:	2201      	movs	r2, #1
 8008638:	4016      	ands	r6, r2
			if (getModuleBounded(qrcode, x, y) == runColor) {
 800863a:	42b5      	cmp	r5, r6
 800863c:	d1df      	bne.n	80085fe <qrcodegen_encodeSegmentsAdvanced+0x14f2>
				runY++;
 800863e:	3301      	adds	r3, #1
				if (runY == 5)
 8008640:	2b05      	cmp	r3, #5
 8008642:	d100      	bne.n	8008646 <qrcodegen_encodeSegmentsAdvanced+0x153a>
 8008644:	e102      	b.n	800884c <qrcodegen_encodeSegmentsAdvanced+0x1740>
				else if (runY > 5)
 8008646:	ddec      	ble.n	8008622 <qrcodegen_encodeSegmentsAdvanced+0x1516>
					result++;
 8008648:	9a01      	ldr	r2, [sp, #4]
		for (int y = 0; y < qrsize; y++) {
 800864a:	3401      	adds	r4, #1
					result++;
 800864c:	3201      	adds	r2, #1
 800864e:	9201      	str	r2, [sp, #4]
		for (int y = 0; y < qrsize; y++) {
 8008650:	444f      	add	r7, r9
 8008652:	454c      	cmp	r4, r9
 8008654:	dbe9      	blt.n	800862a <qrcodegen_encodeSegmentsAdvanced+0x151e>
	if (currentRunColor) {  // Terminate dark run
 8008656:	46a8      	mov	r8, r5
 8008658:	001d      	movs	r5, r3
 800865a:	4643      	mov	r3, r8
 800865c:	464c      	mov	r4, r9
 800865e:	2b00      	cmp	r3, #0
 8008660:	d100      	bne.n	8008664 <qrcodegen_encodeSegmentsAdvanced+0x1558>
 8008662:	e0fe      	b.n	8008862 <qrcodegen_encodeSegmentsAdvanced+0x1756>
	if (runHistory[0] == 0)
 8008664:	9b02      	ldr	r3, [sp, #8]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d100      	bne.n	800866c <qrcodegen_encodeSegmentsAdvanced+0x1560>
		currentRunLength += qrsize;  // Add light border to initial run
 800866a:	192d      	adds	r5, r5, r4
	memmove(&runHistory[1], &runHistory[0], 6 * sizeof(runHistory[0]));
 800866c:	2218      	movs	r2, #24
 800866e:	a918      	add	r1, sp, #96	; 0x60
 8008670:	a819      	add	r0, sp, #100	; 0x64
 8008672:	f000 ffe2 	bl	800963a <memmove>
	runHistory[0] = currentRunLength;
 8008676:	9518      	str	r5, [sp, #96]	; 0x60
 8008678:	0025      	movs	r5, r4
	memmove(&runHistory[1], &runHistory[0], 6 * sizeof(runHistory[0]));
 800867a:	2218      	movs	r2, #24
 800867c:	a918      	add	r1, sp, #96	; 0x60
 800867e:	a819      	add	r0, sp, #100	; 0x64
 8008680:	f000 ffdb 	bl	800963a <memmove>
	return finderPenaltyCountPatterns(runHistory, qrsize);
 8008684:	0021      	movs	r1, r4
 8008686:	a818      	add	r0, sp, #96	; 0x60
	runHistory[0] = currentRunLength;
 8008688:	9518      	str	r5, [sp, #96]	; 0x60
	return finderPenaltyCountPatterns(runHistory, qrsize);
 800868a:	f7fd f819 	bl	80056c0 <finderPenaltyCountPatterns>
		result += finderPenaltyTerminateAndCount(runColor, runY, runHistory, qrsize) * PENALTY_N3;
 800868e:	9a01      	ldr	r2, [sp, #4]
 8008690:	0083      	lsls	r3, r0, #2
 8008692:	4694      	mov	ip, r2
 8008694:	181b      	adds	r3, r3, r0
 8008696:	00db      	lsls	r3, r3, #3
 8008698:	449c      	add	ip, r3
 800869a:	4663      	mov	r3, ip
 800869c:	9301      	str	r3, [sp, #4]
	for (int x = 0; x < qrsize; x++) {
 800869e:	9b04      	ldr	r3, [sp, #16]
 80086a0:	3301      	adds	r3, #1
 80086a2:	9304      	str	r3, [sp, #16]
 80086a4:	42a3      	cmp	r3, r4
 80086a6:	db9d      	blt.n	80085e4 <qrcodegen_encodeSegmentsAdvanced+0x14d8>
	for (int y = 0; y < qrsize - 1; y++) {
 80086a8:	2300      	movs	r3, #0
 80086aa:	1e67      	subs	r7, r4, #1
 80086ac:	4699      	mov	r9, r3
 80086ae:	46bc      	mov	ip, r7
 80086b0:	4656      	mov	r6, sl
 80086b2:	2c01      	cmp	r4, #1
 80086b4:	d07d      	beq.n	80087b2 <qrcodegen_encodeSegmentsAdvanced+0x16a6>
 80086b6:	1c5a      	adds	r2, r3, #1
 80086b8:	464f      	mov	r7, r9
 80086ba:	4690      	mov	r8, r2
	int index = y * qrsize + x;
 80086bc:	44a1      	add	r9, r4
 80086be:	4294      	cmp	r4, r2
 80086c0:	dc00      	bgt.n	80086c4 <qrcodegen_encodeSegmentsAdvanced+0x15b8>
 80086c2:	e0d5      	b.n	8008870 <qrcodegen_encodeSegmentsAdvanced+0x1764>
 80086c4:	429c      	cmp	r4, r3
 80086c6:	dc01      	bgt.n	80086cc <qrcodegen_encodeSegmentsAdvanced+0x15c0>
 80086c8:	f7ff faf8 	bl	8007cbc <qrcodegen_encodeSegmentsAdvanced+0xbb0>
 80086cc:	4649      	mov	r1, r9
 80086ce:	3901      	subs	r1, #1
		for (int x = 0; x < qrsize - 1; x++) {
 80086d0:	2200      	movs	r2, #0
 80086d2:	003b      	movs	r3, r7
 80086d4:	9104      	str	r1, [sp, #16]
 80086d6:	e005      	b.n	80086e4 <qrcodegen_encodeSegmentsAdvanced+0x15d8>
 80086d8:	4594      	cmp	ip, r2
 80086da:	dd66      	ble.n	80087aa <qrcodegen_encodeSegmentsAdvanced+0x169e>
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 80086dc:	4294      	cmp	r4, r2
 80086de:	dc01      	bgt.n	80086e4 <qrcodegen_encodeSegmentsAdvanced+0x15d8>
 80086e0:	f7ff faec 	bl	8007cbc <qrcodegen_encodeSegmentsAdvanced+0xbb0>
	return getBit(qrcode[(index >> 3) + 1], index & 7);
 80086e4:	10d9      	asrs	r1, r3, #3
 80086e6:	1871      	adds	r1, r6, r1
 80086e8:	7848      	ldrb	r0, [r1, #1]
 80086ea:	4659      	mov	r1, fp
 80086ec:	400b      	ands	r3, r1
	return ((x >> i) & 1) != 0;
 80086ee:	4118      	asrs	r0, r3
 80086f0:	2501      	movs	r5, #1
			if (  color == getModuleBounded(qrcode, x + 1, y) &&
 80086f2:	3201      	adds	r2, #1
	return ((x >> i) & 1) != 0;
 80086f4:	4028      	ands	r0, r5
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 80086f6:	4294      	cmp	r4, r2
 80086f8:	dc01      	bgt.n	80086fe <qrcodegen_encodeSegmentsAdvanced+0x15f2>
 80086fa:	f7ff fadf 	bl	8007cbc <qrcodegen_encodeSegmentsAdvanced+0xbb0>
	return getBit(qrcode[(index >> 3) + 1], index & 7);
 80086fe:	465d      	mov	r5, fp
 8008700:	18bb      	adds	r3, r7, r2
 8008702:	10d9      	asrs	r1, r3, #3
 8008704:	1871      	adds	r1, r6, r1
 8008706:	7849      	ldrb	r1, [r1, #1]
 8008708:	401d      	ands	r5, r3
	return ((x >> i) & 1) != 0;
 800870a:	4129      	asrs	r1, r5
			if (  color == getModuleBounded(qrcode, x + 1, y) &&
 800870c:	2501      	movs	r5, #1
 800870e:	4029      	ands	r1, r5
 8008710:	4281      	cmp	r1, r0
 8008712:	d1e1      	bne.n	80086d8 <qrcodegen_encodeSegmentsAdvanced+0x15cc>
	int index = y * qrsize + x;
 8008714:	9804      	ldr	r0, [sp, #16]
 8008716:	1880      	adds	r0, r0, r2
	return getBit(qrcode[(index >> 3) + 1], index & 7);
 8008718:	10c5      	asrs	r5, r0, #3
 800871a:	46aa      	mov	sl, r5
 800871c:	44b2      	add	sl, r6
 800871e:	4655      	mov	r5, sl
 8008720:	786d      	ldrb	r5, [r5, #1]
 8008722:	46aa      	mov	sl, r5
 8008724:	465d      	mov	r5, fp
 8008726:	4028      	ands	r0, r5
	return ((x >> i) & 1) != 0;
 8008728:	4655      	mov	r5, sl
 800872a:	4105      	asrs	r5, r0
 800872c:	0028      	movs	r0, r5
			if (  color == getModuleBounded(qrcode, x + 1, y) &&
 800872e:	2501      	movs	r5, #1
 8008730:	4028      	ands	r0, r5
 8008732:	4288      	cmp	r0, r1
 8008734:	d1d0      	bne.n	80086d8 <qrcodegen_encodeSegmentsAdvanced+0x15cc>
	int index = y * qrsize + x;
 8008736:	4692      	mov	sl, r2
 8008738:	44ca      	add	sl, r9
	return getBit(qrcode[(index >> 3) + 1], index & 7);
 800873a:	4651      	mov	r1, sl
 800873c:	10c9      	asrs	r1, r1, #3
 800873e:	1871      	adds	r1, r6, r1
 8008740:	784d      	ldrb	r5, [r1, #1]
 8008742:	4659      	mov	r1, fp
 8008744:	9502      	str	r5, [sp, #8]
 8008746:	4655      	mov	r5, sl
 8008748:	400d      	ands	r5, r1
	return ((x >> i) & 1) != 0;
 800874a:	0029      	movs	r1, r5
 800874c:	9d02      	ldr	r5, [sp, #8]
 800874e:	410d      	asrs	r5, r1
 8008750:	0029      	movs	r1, r5
			      color == getModuleBounded(qrcode, x, y + 1) &&
 8008752:	2501      	movs	r5, #1
 8008754:	4029      	ands	r1, r5
 8008756:	4281      	cmp	r1, r0
 8008758:	d1be      	bne.n	80086d8 <qrcodegen_encodeSegmentsAdvanced+0x15cc>
				result += PENALTY_N2;
 800875a:	9901      	ldr	r1, [sp, #4]
 800875c:	3103      	adds	r1, #3
 800875e:	9101      	str	r1, [sp, #4]
 8008760:	e7ba      	b.n	80086d8 <qrcodegen_encodeSegmentsAdvanced+0x15cc>
					result += finderPenaltyCountPatterns(runHistory, qrsize) * PENALTY_N3;
 8008762:	0031      	movs	r1, r6
 8008764:	a818      	add	r0, sp, #96	; 0x60
 8008766:	f7fc ffab 	bl	80056c0 <finderPenaltyCountPatterns>
 800876a:	9a01      	ldr	r2, [sp, #4]
 800876c:	0083      	lsls	r3, r0, #2
 800876e:	4694      	mov	ip, r2
 8008770:	181b      	adds	r3, r3, r0
 8008772:	00db      	lsls	r3, r3, #3
 8008774:	449c      	add	ip, r3
 8008776:	4663      	mov	r3, ip
 8008778:	002c      	movs	r4, r5
				runX = 1;
 800877a:	2201      	movs	r2, #1
					result += finderPenaltyCountPatterns(runHistory, qrsize) * PENALTY_N3;
 800877c:	9301      	str	r3, [sp, #4]
 800877e:	e6e6      	b.n	800854e <qrcodegen_encodeSegmentsAdvanced+0x1442>
 8008780:	9302      	str	r3, [sp, #8]
 8008782:	e742      	b.n	800860a <qrcodegen_encodeSegmentsAdvanced+0x14fe>
					result += finderPenaltyCountPatterns(runHistory, qrsize) * PENALTY_N3;
 8008784:	4649      	mov	r1, r9
 8008786:	a818      	add	r0, sp, #96	; 0x60
 8008788:	f7fc ff9a 	bl	80056c0 <finderPenaltyCountPatterns>
 800878c:	9a01      	ldr	r2, [sp, #4]
 800878e:	0083      	lsls	r3, r0, #2
 8008790:	4694      	mov	ip, r2
 8008792:	181b      	adds	r3, r3, r0
 8008794:	00db      	lsls	r3, r3, #3
 8008796:	449c      	add	ip, r3
 8008798:	4663      	mov	r3, ip
 800879a:	0035      	movs	r5, r6
 800879c:	9301      	str	r3, [sp, #4]
				runY = 1;
 800879e:	2301      	movs	r3, #1
 80087a0:	e73f      	b.n	8008622 <qrcodegen_encodeSegmentsAdvanced+0x1516>
					result += PENALTY_N1;
 80087a2:	9b01      	ldr	r3, [sp, #4]
 80087a4:	3303      	adds	r3, #3
 80087a6:	9301      	str	r3, [sp, #4]
 80087a8:	e6d1      	b.n	800854e <qrcodegen_encodeSegmentsAdvanced+0x1442>
	for (int y = 0; y < qrsize - 1; y++) {
 80087aa:	4643      	mov	r3, r8
 80087ac:	4563      	cmp	r3, ip
 80087ae:	db82      	blt.n	80086b6 <qrcodegen_encodeSegmentsAdvanced+0x15aa>
 80087b0:	46b2      	mov	sl, r6
	return ((x >> i) & 1) != 0;
 80087b2:	2201      	movs	r2, #1
		for (int x = 0; x < qrsize - 1; x++) {
 80087b4:	2500      	movs	r5, #0
 80087b6:	2300      	movs	r3, #0
 80087b8:	2000      	movs	r0, #0
	return ((x >> i) & 1) != 0;
 80087ba:	4694      	mov	ip, r2
		for (int x = 0; x < qrsize; x++) {
 80087bc:	2100      	movs	r1, #0
	return getBit(qrcode[(index >> 3) + 1], index & 7);
 80087be:	465e      	mov	r6, fp
 80087c0:	194f      	adds	r7, r1, r5
 80087c2:	10fa      	asrs	r2, r7, #3
 80087c4:	4452      	add	r2, sl
 80087c6:	7852      	ldrb	r2, [r2, #1]
 80087c8:	4037      	ands	r7, r6
	return ((x >> i) & 1) != 0;
 80087ca:	413a      	asrs	r2, r7
				dark++;
 80087cc:	4666      	mov	r6, ip
		for (int x = 0; x < qrsize; x++) {
 80087ce:	3101      	adds	r1, #1
				dark++;
 80087d0:	4032      	ands	r2, r6
 80087d2:	189b      	adds	r3, r3, r2
		for (int x = 0; x < qrsize; x++) {
 80087d4:	428c      	cmp	r4, r1
 80087d6:	dcf2      	bgt.n	80087be <qrcodegen_encodeSegmentsAdvanced+0x16b2>
	for (int y = 0; y < qrsize; y++) {
 80087d8:	3001      	adds	r0, #1
 80087da:	192d      	adds	r5, r5, r4
 80087dc:	4284      	cmp	r4, r0
 80087de:	dced      	bgt.n	80087bc <qrcodegen_encodeSegmentsAdvanced+0x16b0>
	int k = (int)((labs(dark * 20L - total * 10L) + total - 1) / total) - 1;
 80087e0:	0098      	lsls	r0, r3, #2
 80087e2:	18c3      	adds	r3, r0, r3
 80087e4:	009b      	lsls	r3, r3, #2
	int total = qrsize * qrsize;  // Note that size is odd, so dark/total != 1/2
 80087e6:	0021      	movs	r1, r4
 80087e8:	4361      	muls	r1, r4
	int k = (int)((labs(dark * 20L - total * 10L) + total - 1) / total) - 1;
 80087ea:	0748      	lsls	r0, r1, #29
 80087ec:	1a40      	subs	r0, r0, r1
 80087ee:	0080      	lsls	r0, r0, #2
 80087f0:	1a40      	subs	r0, r0, r1
 80087f2:	0040      	lsls	r0, r0, #1
 80087f4:	18c0      	adds	r0, r0, r3
 80087f6:	17c3      	asrs	r3, r0, #31
 80087f8:	18c0      	adds	r0, r0, r3
 80087fa:	4058      	eors	r0, r3
 80087fc:	1840      	adds	r0, r0, r1
 80087fe:	3801      	subs	r0, #1
 8008800:	f7f7 fd1e 	bl	8000240 <__divsi3>
 8008804:	3801      	subs	r0, #1
	assert(0 <= k && k <= 9);
 8008806:	2809      	cmp	r0, #9
 8008808:	d866      	bhi.n	80088d8 <qrcodegen_encodeSegmentsAdvanced+0x17cc>
	result += k * PENALTY_N4;
 800880a:	9a01      	ldr	r2, [sp, #4]
 800880c:	0083      	lsls	r3, r0, #2
 800880e:	4694      	mov	ip, r2
 8008810:	181b      	adds	r3, r3, r0
 8008812:	005b      	lsls	r3, r3, #1
	assert(0 <= result && result <= 2568888L);  // Non-tight upper bound based on default values of PENALTY_N1, ..., N4
 8008814:	4a33      	ldr	r2, [pc, #204]	; (80088e4 <qrcodegen_encodeSegmentsAdvanced+0x17d8>)
	result += k * PENALTY_N4;
 8008816:	4463      	add	r3, ip
	assert(0 <= result && result <= 2568888L);  // Non-tight upper bound based on default values of PENALTY_N1, ..., N4
 8008818:	4293      	cmp	r3, r2
 800881a:	d856      	bhi.n	80088ca <qrcodegen_encodeSegmentsAdvanced+0x17be>
			if (penalty < minPenalty) {
 800881c:	9a05      	ldr	r2, [sp, #20]
 800881e:	4293      	cmp	r3, r2
 8008820:	da02      	bge.n	8008828 <qrcodegen_encodeSegmentsAdvanced+0x171c>
 8008822:	9305      	str	r3, [sp, #20]
				mask = msk;
 8008824:	9b06      	ldr	r3, [sp, #24]
 8008826:	930e      	str	r3, [sp, #56]	; 0x38
			applyMask(tempBuffer, qrcode, msk);  // Undoes the mask due to XOR
 8008828:	4651      	mov	r1, sl
 800882a:	9a06      	ldr	r2, [sp, #24]
 800882c:	982d      	ldr	r0, [sp, #180]	; 0xb4
 800882e:	f7fc fff5 	bl	800581c <applyMask>
		for (int i = 0; i < 8; i++) {
 8008832:	9b03      	ldr	r3, [sp, #12]
 8008834:	3301      	adds	r3, #1
 8008836:	9303      	str	r3, [sp, #12]
 8008838:	2b08      	cmp	r3, #8
 800883a:	d000      	beq.n	800883e <qrcodegen_encodeSegmentsAdvanced+0x1732>
 800883c:	e60d      	b.n	800845a <qrcodegen_encodeSegmentsAdvanced+0x134e>
	assert(0 <= (int)mask && (int)mask <= 7);
 800883e:	466b      	mov	r3, sp
 8008840:	2238      	movs	r2, #56	; 0x38
 8008842:	189b      	adds	r3, r3, r2
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	46d1      	mov	r9, sl
 8008848:	9315      	str	r3, [sp, #84]	; 0x54
 800884a:	e4f2      	b.n	8008232 <qrcodegen_encodeSegmentsAdvanced+0x1126>
					result += PENALTY_N1;
 800884c:	9a01      	ldr	r2, [sp, #4]
 800884e:	3203      	adds	r2, #3
 8008850:	9201      	str	r2, [sp, #4]
 8008852:	e6e6      	b.n	8008622 <qrcodegen_encodeSegmentsAdvanced+0x1516>
	if (runHistory[0] == 0)
 8008854:	4643      	mov	r3, r8
	currentRunLength += qrsize;  // Add light border to final run
 8008856:	1916      	adds	r6, r2, r4
	if (runHistory[0] == 0)
 8008858:	2b00      	cmp	r3, #0
 800885a:	d000      	beq.n	800885e <qrcodegen_encodeSegmentsAdvanced+0x1752>
 800885c:	e6a3      	b.n	80085a6 <qrcodegen_encodeSegmentsAdvanced+0x149a>
		currentRunLength += qrsize;  // Add light border to initial run
 800885e:	1936      	adds	r6, r6, r4
 8008860:	e6a1      	b.n	80085a6 <qrcodegen_encodeSegmentsAdvanced+0x149a>
	if (runHistory[0] == 0)
 8008862:	9b02      	ldr	r3, [sp, #8]
	currentRunLength += qrsize;  // Add light border to final run
 8008864:	192d      	adds	r5, r5, r4
	if (runHistory[0] == 0)
 8008866:	2b00      	cmp	r3, #0
 8008868:	d000      	beq.n	800886c <qrcodegen_encodeSegmentsAdvanced+0x1760>
 800886a:	e706      	b.n	800867a <qrcodegen_encodeSegmentsAdvanced+0x156e>
		currentRunLength += qrsize;  // Add light border to initial run
 800886c:	192d      	adds	r5, r5, r4
 800886e:	e704      	b.n	800867a <qrcodegen_encodeSegmentsAdvanced+0x156e>
 8008870:	429c      	cmp	r4, r3
 8008872:	dc01      	bgt.n	8008878 <qrcodegen_encodeSegmentsAdvanced+0x176c>
 8008874:	f7ff fa22 	bl	8007cbc <qrcodegen_encodeSegmentsAdvanced+0xbb0>
		for (int x = 0; x < qrsize - 1; x++) {
 8008878:	2200      	movs	r2, #0
 800887a:	003b      	movs	r3, r7
 800887c:	e001      	b.n	8008882 <qrcodegen_encodeSegmentsAdvanced+0x1776>
 800887e:	4594      	cmp	ip, r2
 8008880:	dd93      	ble.n	80087aa <qrcodegen_encodeSegmentsAdvanced+0x169e>
	return getBit(qrcode[(index >> 3) + 1], index & 7);
 8008882:	4658      	mov	r0, fp
 8008884:	10d9      	asrs	r1, r3, #3
 8008886:	1871      	adds	r1, r6, r1
 8008888:	7849      	ldrb	r1, [r1, #1]
 800888a:	4003      	ands	r3, r0
	return ((x >> i) & 1) != 0;
 800888c:	4119      	asrs	r1, r3
 800888e:	2501      	movs	r5, #1
			if (  color == getModuleBounded(qrcode, x + 1, y) &&
 8008890:	3201      	adds	r2, #1
	return ((x >> i) & 1) != 0;
 8008892:	4029      	ands	r1, r5
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8008894:	4294      	cmp	r4, r2
 8008896:	dc01      	bgt.n	800889c <qrcodegen_encodeSegmentsAdvanced+0x1790>
 8008898:	f7ff fa10 	bl	8007cbc <qrcodegen_encodeSegmentsAdvanced+0xbb0>
	return getBit(qrcode[(index >> 3) + 1], index & 7);
 800889c:	465d      	mov	r5, fp
 800889e:	19d3      	adds	r3, r2, r7
 80088a0:	10d8      	asrs	r0, r3, #3
 80088a2:	1830      	adds	r0, r6, r0
 80088a4:	7840      	ldrb	r0, [r0, #1]
 80088a6:	401d      	ands	r5, r3
	return ((x >> i) & 1) != 0;
 80088a8:	4128      	asrs	r0, r5
			if (  color == getModuleBounded(qrcode, x + 1, y) &&
 80088aa:	2501      	movs	r5, #1
 80088ac:	4028      	ands	r0, r5
 80088ae:	4288      	cmp	r0, r1
 80088b0:	d1e5      	bne.n	800887e <qrcodegen_encodeSegmentsAdvanced+0x1772>
 80088b2:	f7ff fa03 	bl	8007cbc <qrcodegen_encodeSegmentsAdvanced+0xbb0>
	long result = 0;
 80088b6:	2200      	movs	r2, #0
 80088b8:	9201      	str	r2, [sp, #4]
 80088ba:	e794      	b.n	80087e6 <qrcodegen_encodeSegmentsAdvanced+0x16da>
		assert(bits >> 18 == 0);
 80088bc:	21f6      	movs	r1, #246	; 0xf6
 80088be:	4b0a      	ldr	r3, [pc, #40]	; (80088e8 <qrcodegen_encodeSegmentsAdvanced+0x17dc>)
 80088c0:	4a0a      	ldr	r2, [pc, #40]	; (80088ec <qrcodegen_encodeSegmentsAdvanced+0x17e0>)
 80088c2:	480b      	ldr	r0, [pc, #44]	; (80088f0 <qrcodegen_encodeSegmentsAdvanced+0x17e4>)
 80088c4:	31ff      	adds	r1, #255	; 0xff
 80088c6:	f000 fe57 	bl	8009578 <__assert_func>
	assert(0 <= result && result <= 2568888L);  // Non-tight upper bound based on default values of PENALTY_N1, ..., N4
 80088ca:	21b2      	movs	r1, #178	; 0xb2
 80088cc:	4b09      	ldr	r3, [pc, #36]	; (80088f4 <qrcodegen_encodeSegmentsAdvanced+0x17e8>)
 80088ce:	4a0a      	ldr	r2, [pc, #40]	; (80088f8 <qrcodegen_encodeSegmentsAdvanced+0x17ec>)
 80088d0:	4807      	ldr	r0, [pc, #28]	; (80088f0 <qrcodegen_encodeSegmentsAdvanced+0x17e4>)
 80088d2:	0089      	lsls	r1, r1, #2
 80088d4:	f000 fe50 	bl	8009578 <__assert_func>
	assert(0 <= k && k <= 9);
 80088d8:	4b08      	ldr	r3, [pc, #32]	; (80088fc <qrcodegen_encodeSegmentsAdvanced+0x17f0>)
 80088da:	4a07      	ldr	r2, [pc, #28]	; (80088f8 <qrcodegen_encodeSegmentsAdvanced+0x17ec>)
 80088dc:	4908      	ldr	r1, [pc, #32]	; (8008900 <qrcodegen_encodeSegmentsAdvanced+0x17f4>)
 80088de:	4804      	ldr	r0, [pc, #16]	; (80088f0 <qrcodegen_encodeSegmentsAdvanced+0x17e4>)
 80088e0:	f000 fe4a 	bl	8009578 <__assert_func>
 80088e4:	002732b8 	.word	0x002732b8
 80088e8:	0800e5bc 	.word	0x0800e5bc
 80088ec:	0800e8a8 	.word	0x0800e8a8
 80088f0:	0800e204 	.word	0x0800e204
 80088f4:	0800e5e0 	.word	0x0800e5e0
 80088f8:	0800e898 	.word	0x0800e898
 80088fc:	0800e5cc 	.word	0x0800e5cc
 8008900:	000002c6 	.word	0x000002c6

08008904 <qrcodegen_getSize>:
int qrcodegen_getSize(const uint8_t qrcode[]) {
 8008904:	b510      	push	{r4, lr}
	assert(qrcode != NULL);
 8008906:	2800      	cmp	r0, #0
 8008908:	d005      	beq.n	8008916 <qrcodegen_getSize+0x12>
	int result = qrcode[0];
 800890a:	7800      	ldrb	r0, [r0, #0]
	assert((qrcodegen_VERSION_MIN * 4 + 17) <= result
 800890c:	0003      	movs	r3, r0
 800890e:	3b15      	subs	r3, #21
 8008910:	2b24      	cmp	r3, #36	; 0x24
 8008912:	d807      	bhi.n	8008924 <qrcodegen_getSize+0x20>
}
 8008914:	bd10      	pop	{r4, pc}
	assert(qrcode != NULL);
 8008916:	21bd      	movs	r1, #189	; 0xbd
 8008918:	4b03      	ldr	r3, [pc, #12]	; (8008928 <qrcodegen_getSize+0x24>)
 800891a:	4a04      	ldr	r2, [pc, #16]	; (800892c <qrcodegen_getSize+0x28>)
 800891c:	4804      	ldr	r0, [pc, #16]	; (8008930 <qrcodegen_getSize+0x2c>)
 800891e:	0089      	lsls	r1, r1, #2
 8008920:	f000 fe2a 	bl	8009578 <__assert_func>
 8008924:	f7fc ff12 	bl	800574c <qrcodegen_getSize.part.0>
 8008928:	0800e358 	.word	0x0800e358
 800892c:	0800e9cc 	.word	0x0800e9cc
 8008930:	0800e204 	.word	0x0800e204

08008934 <qrcodegen_getModule>:
bool qrcodegen_getModule(const uint8_t qrcode[], int x, int y) {
 8008934:	0003      	movs	r3, r0
 8008936:	b510      	push	{r4, lr}
	assert(qrcode != NULL);
 8008938:	2800      	cmp	r0, #0
 800893a:	d014      	beq.n	8008966 <qrcodegen_getModule+0x32>
	int qrsize = qrcode[0];
 800893c:	7804      	ldrb	r4, [r0, #0]
	return (0 <= x && x < qrsize && 0 <= y && y < qrsize) && getModuleBounded(qrcode, x, y);
 800893e:	2000      	movs	r0, #0
 8008940:	428c      	cmp	r4, r1
 8008942:	d90f      	bls.n	8008964 <qrcodegen_getModule+0x30>
 8008944:	4294      	cmp	r4, r2
 8008946:	d90d      	bls.n	8008964 <qrcodegen_getModule+0x30>
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8008948:	0020      	movs	r0, r4
 800894a:	3815      	subs	r0, #21
 800894c:	289c      	cmp	r0, #156	; 0x9c
 800894e:	d810      	bhi.n	8008972 <qrcodegen_getModule+0x3e>
	int index = y * qrsize + x;
 8008950:	4362      	muls	r2, r4
 8008952:	1851      	adds	r1, r2, r1
	return getBit(qrcode[(index >> 3) + 1], index & 7);
 8008954:	2207      	movs	r2, #7
 8008956:	10c8      	asrs	r0, r1, #3
 8008958:	181b      	adds	r3, r3, r0
 800895a:	785b      	ldrb	r3, [r3, #1]
 800895c:	4011      	ands	r1, r2
	return ((x >> i) & 1) != 0;
 800895e:	410b      	asrs	r3, r1
 8008960:	2001      	movs	r0, #1
 8008962:	4018      	ands	r0, r3
}
 8008964:	bd10      	pop	{r4, pc}
	assert(qrcode != NULL);
 8008966:	4b06      	ldr	r3, [pc, #24]	; (8008980 <qrcodegen_getModule+0x4c>)
 8008968:	4a06      	ldr	r2, [pc, #24]	; (8008984 <qrcodegen_getModule+0x50>)
 800896a:	4907      	ldr	r1, [pc, #28]	; (8008988 <qrcodegen_getModule+0x54>)
 800896c:	4807      	ldr	r0, [pc, #28]	; (800898c <qrcodegen_getModule+0x58>)
 800896e:	f000 fe03 	bl	8009578 <__assert_func>
	assert(21 <= qrsize && qrsize <= 177 && 0 <= x && x < qrsize && 0 <= y && y < qrsize);
 8008972:	4b07      	ldr	r3, [pc, #28]	; (8008990 <qrcodegen_getModule+0x5c>)
 8008974:	4a07      	ldr	r2, [pc, #28]	; (8008994 <qrcodegen_getModule+0x60>)
 8008976:	4908      	ldr	r1, [pc, #32]	; (8008998 <qrcodegen_getModule+0x64>)
 8008978:	4804      	ldr	r0, [pc, #16]	; (800898c <qrcodegen_getModule+0x58>)
 800897a:	f000 fdfd 	bl	8009578 <__assert_func>
 800897e:	46c0      	nop			; (mov r8, r8)
 8008980:	0800e358 	.word	0x0800e358
 8008984:	0800e9b8 	.word	0x0800e9b8
 8008988:	000002fe 	.word	0x000002fe
 800898c:	0800e204 	.word	0x0800e204
 8008990:	0800e368 	.word	0x0800e368
 8008994:	0800e8d8 	.word	0x0800e8d8
 8008998:	00000307 	.word	0x00000307

0800899c <qrcodegen_makeNumeric>:
struct qrcodegen_Segment qrcodegen_makeNumeric(const char *digits, uint8_t buf[]) {
 800899c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800899e:	4645      	mov	r5, r8
 80089a0:	46de      	mov	lr, fp
 80089a2:	4657      	mov	r7, sl
 80089a4:	464e      	mov	r6, r9
 80089a6:	b5e0      	push	{r5, r6, r7, lr}
 80089a8:	b083      	sub	sp, #12
 80089aa:	000d      	movs	r5, r1
 80089ac:	0014      	movs	r4, r2
 80089ae:	9000      	str	r0, [sp, #0]
	assert(digits != NULL);
 80089b0:	2900      	cmp	r1, #0
 80089b2:	d100      	bne.n	80089b6 <qrcodegen_makeNumeric+0x1a>
 80089b4:	e265      	b.n	8008e82 <qrcodegen_makeNumeric+0x4e6>
	size_t len = strlen(digits);
 80089b6:	0008      	movs	r0, r1
 80089b8:	f7f7 fba6 	bl	8000108 <strlen>
	if (numChars > (unsigned int)INT16_MAX)
 80089bc:	2380      	movs	r3, #128	; 0x80
	size_t len = strlen(digits);
 80089be:	4682      	mov	sl, r0
	if (numChars > (unsigned int)INT16_MAX)
 80089c0:	021b      	lsls	r3, r3, #8
 80089c2:	4298      	cmp	r0, r3
 80089c4:	d300      	bcc.n	80089c8 <qrcodegen_makeNumeric+0x2c>
 80089c6:	e264      	b.n	8008e92 <qrcodegen_makeNumeric+0x4f6>
		result = (result * 10 + 2) / 3;  // ceil(10/3 * n)
 80089c8:	0083      	lsls	r3, r0, #2
 80089ca:	4453      	add	r3, sl
 80089cc:	005e      	lsls	r6, r3, #1
 80089ce:	2103      	movs	r1, #3
 80089d0:	1cb0      	adds	r0, r6, #2
 80089d2:	f7f7 fc35 	bl	8000240 <__divsi3>
	if (result > INT16_MAX)
 80089d6:	4b61      	ldr	r3, [pc, #388]	; (8008b5c <qrcodegen_makeNumeric+0x1c0>)
		result = (result * 10 + 2) / 3;  // ceil(10/3 * n)
 80089d8:	4680      	mov	r8, r0
	if (result > INT16_MAX)
 80089da:	429e      	cmp	r6, r3
 80089dc:	dd00      	ble.n	80089e0 <qrcodegen_makeNumeric+0x44>
 80089de:	e258      	b.n	8008e92 <qrcodegen_makeNumeric+0x4f6>
	if (bitLen > 0)
 80089e0:	2800      	cmp	r0, #0
 80089e2:	d000      	beq.n	80089e6 <qrcodegen_makeNumeric+0x4a>
 80089e4:	e0a9      	b.n	8008b3a <qrcodegen_makeNumeric+0x19e>
	for (; *digits != '\0'; digits++) {
 80089e6:	782a      	ldrb	r2, [r5, #0]
 80089e8:	2a00      	cmp	r2, #0
 80089ea:	d100      	bne.n	80089ee <qrcodegen_makeNumeric+0x52>
 80089ec:	e23b      	b.n	8008e66 <qrcodegen_makeNumeric+0x4ca>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 80089ee:	2307      	movs	r3, #7
 80089f0:	469c      	mov	ip, r3
 80089f2:	3b06      	subs	r3, #6
	result.bitLength = 0;
 80089f4:	2000      	movs	r0, #0
	int accumCount = 0;
 80089f6:	2100      	movs	r1, #0
	unsigned int accumData = 0;
 80089f8:	2700      	movs	r7, #0
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 80089fa:	4699      	mov	r9, r3
 80089fc:	e004      	b.n	8008a08 <qrcodegen_makeNumeric+0x6c>
	for (; *digits != '\0'; digits++) {
 80089fe:	786a      	ldrb	r2, [r5, #1]
 8008a00:	3501      	adds	r5, #1
 8008a02:	2a00      	cmp	r2, #0
 8008a04:	d100      	bne.n	8008a08 <qrcodegen_makeNumeric+0x6c>
 8008a06:	e084      	b.n	8008b12 <qrcodegen_makeNumeric+0x176>
		assert('0' <= c && c <= '9');
 8008a08:	0013      	movs	r3, r2
 8008a0a:	3b30      	subs	r3, #48	; 0x30
 8008a0c:	2b09      	cmp	r3, #9
 8008a0e:	d900      	bls.n	8008a12 <qrcodegen_makeNumeric+0x76>
 8008a10:	e22b      	b.n	8008e6a <qrcodegen_makeNumeric+0x4ce>
		accumData = accumData * 10 + (unsigned int)(c - '0');
 8008a12:	00bb      	lsls	r3, r7, #2
 8008a14:	19db      	adds	r3, r3, r7
 8008a16:	005b      	lsls	r3, r3, #1
 8008a18:	3b30      	subs	r3, #48	; 0x30
		accumCount++;
 8008a1a:	3101      	adds	r1, #1
		accumData = accumData * 10 + (unsigned int)(c - '0');
 8008a1c:	18d7      	adds	r7, r2, r3
		if (accumCount == 3) {
 8008a1e:	2903      	cmp	r1, #3
 8008a20:	d1ed      	bne.n	80089fe <qrcodegen_makeNumeric+0x62>
	assert(0 <= numBits && numBits <= 16 && (unsigned long)val >> numBits == 0);
 8008a22:	0abb      	lsrs	r3, r7, #10
 8008a24:	d000      	beq.n	8008a28 <qrcodegen_makeNumeric+0x8c>
 8008a26:	e226      	b.n	8008e76 <qrcodegen_makeNumeric+0x4da>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008a28:	4661      	mov	r1, ip
 8008a2a:	0a7b      	lsrs	r3, r7, #9
 8008a2c:	4381      	bics	r1, r0
 8008a2e:	408b      	lsls	r3, r1
 8008a30:	464e      	mov	r6, r9
 8008a32:	10c2      	asrs	r2, r0, #3
 8008a34:	5ca1      	ldrb	r1, [r4, r2]
	for (; *digits != '\0'; digits++) {
 8008a36:	3501      	adds	r5, #1
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008a38:	430b      	orrs	r3, r1
 8008a3a:	54a3      	strb	r3, [r4, r2]
 8008a3c:	0a3b      	lsrs	r3, r7, #8
 8008a3e:	4033      	ands	r3, r6
 8008a40:	4666      	mov	r6, ip
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008a42:	1c41      	adds	r1, r0, #1
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008a44:	438e      	bics	r6, r1
 8008a46:	40b3      	lsls	r3, r6
 8008a48:	464e      	mov	r6, r9
 8008a4a:	10ca      	asrs	r2, r1, #3
 8008a4c:	5ca1      	ldrb	r1, [r4, r2]
 8008a4e:	430b      	orrs	r3, r1
 8008a50:	54a3      	strb	r3, [r4, r2]
 8008a52:	09fb      	lsrs	r3, r7, #7
 8008a54:	4033      	ands	r3, r6
 8008a56:	4666      	mov	r6, ip
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008a58:	1c81      	adds	r1, r0, #2
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008a5a:	438e      	bics	r6, r1
 8008a5c:	40b3      	lsls	r3, r6
 8008a5e:	464e      	mov	r6, r9
 8008a60:	10ca      	asrs	r2, r1, #3
 8008a62:	5ca1      	ldrb	r1, [r4, r2]
 8008a64:	430b      	orrs	r3, r1
 8008a66:	54a3      	strb	r3, [r4, r2]
 8008a68:	09bb      	lsrs	r3, r7, #6
 8008a6a:	4033      	ands	r3, r6
 8008a6c:	4666      	mov	r6, ip
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008a6e:	1cc1      	adds	r1, r0, #3
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008a70:	438e      	bics	r6, r1
 8008a72:	40b3      	lsls	r3, r6
 8008a74:	464e      	mov	r6, r9
 8008a76:	10ca      	asrs	r2, r1, #3
 8008a78:	5ca1      	ldrb	r1, [r4, r2]
 8008a7a:	430b      	orrs	r3, r1
 8008a7c:	54a3      	strb	r3, [r4, r2]
 8008a7e:	097b      	lsrs	r3, r7, #5
 8008a80:	4033      	ands	r3, r6
 8008a82:	4666      	mov	r6, ip
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008a84:	1d01      	adds	r1, r0, #4
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008a86:	438e      	bics	r6, r1
 8008a88:	40b3      	lsls	r3, r6
 8008a8a:	464e      	mov	r6, r9
 8008a8c:	10ca      	asrs	r2, r1, #3
 8008a8e:	5ca1      	ldrb	r1, [r4, r2]
 8008a90:	430b      	orrs	r3, r1
 8008a92:	54a3      	strb	r3, [r4, r2]
 8008a94:	093b      	lsrs	r3, r7, #4
 8008a96:	4033      	ands	r3, r6
 8008a98:	4666      	mov	r6, ip
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008a9a:	1d41      	adds	r1, r0, #5
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008a9c:	438e      	bics	r6, r1
 8008a9e:	40b3      	lsls	r3, r6
 8008aa0:	464e      	mov	r6, r9
 8008aa2:	10ca      	asrs	r2, r1, #3
 8008aa4:	5ca1      	ldrb	r1, [r4, r2]
 8008aa6:	430b      	orrs	r3, r1
 8008aa8:	54a3      	strb	r3, [r4, r2]
 8008aaa:	08fb      	lsrs	r3, r7, #3
 8008aac:	4033      	ands	r3, r6
 8008aae:	4666      	mov	r6, ip
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008ab0:	1d81      	adds	r1, r0, #6
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008ab2:	438e      	bics	r6, r1
 8008ab4:	40b3      	lsls	r3, r6
 8008ab6:	464e      	mov	r6, r9
 8008ab8:	10ca      	asrs	r2, r1, #3
 8008aba:	5ca1      	ldrb	r1, [r4, r2]
 8008abc:	430b      	orrs	r3, r1
 8008abe:	54a3      	strb	r3, [r4, r2]
 8008ac0:	08bb      	lsrs	r3, r7, #2
 8008ac2:	4033      	ands	r3, r6
 8008ac4:	4666      	mov	r6, ip
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008ac6:	1dc1      	adds	r1, r0, #7
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008ac8:	438e      	bics	r6, r1
 8008aca:	40b3      	lsls	r3, r6
 8008acc:	464e      	mov	r6, r9
 8008ace:	10ca      	asrs	r2, r1, #3
 8008ad0:	5ca1      	ldrb	r1, [r4, r2]
 8008ad2:	430b      	orrs	r3, r1
 8008ad4:	54a3      	strb	r3, [r4, r2]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008ad6:	0001      	movs	r1, r0
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008ad8:	087b      	lsrs	r3, r7, #1
 8008ada:	4033      	ands	r3, r6
 8008adc:	4666      	mov	r6, ip
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008ade:	3108      	adds	r1, #8
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008ae0:	438e      	bics	r6, r1
 8008ae2:	40b3      	lsls	r3, r6
 8008ae4:	10ca      	asrs	r2, r1, #3
 8008ae6:	5ca1      	ldrb	r1, [r4, r2]
 8008ae8:	464e      	mov	r6, r9
 8008aea:	430b      	orrs	r3, r1
 8008aec:	54a3      	strb	r3, [r4, r2]
 8008aee:	003b      	movs	r3, r7
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008af0:	0001      	movs	r1, r0
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008af2:	4033      	ands	r3, r6
 8008af4:	4666      	mov	r6, ip
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008af6:	3109      	adds	r1, #9
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008af8:	438e      	bics	r6, r1
 8008afa:	40b3      	lsls	r3, r6
 8008afc:	10ca      	asrs	r2, r1, #3
 8008afe:	5ca1      	ldrb	r1, [r4, r2]
			accumData = 0;
 8008b00:	2700      	movs	r7, #0
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008b02:	430b      	orrs	r3, r1
 8008b04:	54a3      	strb	r3, [r4, r2]
	for (; *digits != '\0'; digits++) {
 8008b06:	782a      	ldrb	r2, [r5, #0]
			accumCount = 0;
 8008b08:	2100      	movs	r1, #0
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008b0a:	300a      	adds	r0, #10
	for (; *digits != '\0'; digits++) {
 8008b0c:	2a00      	cmp	r2, #0
 8008b0e:	d000      	beq.n	8008b12 <qrcodegen_makeNumeric+0x176>
 8008b10:	e77a      	b.n	8008a08 <qrcodegen_makeNumeric+0x6c>
	if (accumCount > 0)  // 1 or 2 digits remaining
 8008b12:	2900      	cmp	r1, #0
 8008b14:	d12c      	bne.n	8008b70 <qrcodegen_makeNumeric+0x1d4>
	assert(result.bitLength == bitLen);
 8008b16:	4580      	cmp	r8, r0
 8008b18:	d119      	bne.n	8008b4e <qrcodegen_makeNumeric+0x1b2>
	return result;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	9a00      	ldr	r2, [sp, #0]
 8008b1e:	7013      	strb	r3, [r2, #0]
 8008b20:	0013      	movs	r3, r2
 8008b22:	4652      	mov	r2, sl
 8008b24:	60d8      	str	r0, [r3, #12]
}
 8008b26:	0018      	movs	r0, r3
	return result;
 8008b28:	605a      	str	r2, [r3, #4]
 8008b2a:	609c      	str	r4, [r3, #8]
}
 8008b2c:	b003      	add	sp, #12
 8008b2e:	bcf0      	pop	{r4, r5, r6, r7}
 8008b30:	46bb      	mov	fp, r7
 8008b32:	46b2      	mov	sl, r6
 8008b34:	46a9      	mov	r9, r5
 8008b36:	46a0      	mov	r8, r4
 8008b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(buf, 0, ((size_t)bitLen + 7) / 8 * sizeof(buf[0]));
 8008b3a:	1dc2      	adds	r2, r0, #7
 8008b3c:	08d2      	lsrs	r2, r2, #3
 8008b3e:	2100      	movs	r1, #0
 8008b40:	0020      	movs	r0, r4
 8008b42:	f000 fd8d 	bl	8009660 <memset>
	for (; *digits != '\0'; digits++) {
 8008b46:	782a      	ldrb	r2, [r5, #0]
 8008b48:	2a00      	cmp	r2, #0
 8008b4a:	d000      	beq.n	8008b4e <qrcodegen_makeNumeric+0x1b2>
 8008b4c:	e74f      	b.n	80089ee <qrcodegen_makeNumeric+0x52>
	assert(result.bitLength == bitLen);
 8008b4e:	4b04      	ldr	r3, [pc, #16]	; (8008b60 <qrcodegen_makeNumeric+0x1c4>)
 8008b50:	4a04      	ldr	r2, [pc, #16]	; (8008b64 <qrcodegen_makeNumeric+0x1c8>)
 8008b52:	4905      	ldr	r1, [pc, #20]	; (8008b68 <qrcodegen_makeNumeric+0x1cc>)
 8008b54:	4805      	ldr	r0, [pc, #20]	; (8008b6c <qrcodegen_makeNumeric+0x1d0>)
 8008b56:	f000 fd0f 	bl	8009578 <__assert_func>
 8008b5a:	46c0      	nop			; (mov r8, r8)
 8008b5c:	00017ffd 	.word	0x00017ffd
 8008b60:	0800e6d0 	.word	0x0800e6d0
 8008b64:	0800e914 	.word	0x0800e914
 8008b68:	00000399 	.word	0x00000399
 8008b6c:	0800e204 	.word	0x0800e204
		appendBitsToBuffer(accumData, accumCount * 3 + 1, buf, &result.bitLength);
 8008b70:	004b      	lsls	r3, r1, #1
 8008b72:	1859      	adds	r1, r3, r1
 8008b74:	1c4b      	adds	r3, r1, #1
	assert(0 <= numBits && numBits <= 16 && (unsigned long)val >> numBits == 0);
 8008b76:	2b10      	cmp	r3, #16
 8008b78:	dd00      	ble.n	8008b7c <qrcodegen_makeNumeric+0x1e0>
 8008b7a:	e188      	b.n	8008e8e <qrcodegen_makeNumeric+0x4f2>
 8008b7c:	003a      	movs	r2, r7
 8008b7e:	40da      	lsrs	r2, r3
 8008b80:	d000      	beq.n	8008b84 <qrcodegen_makeNumeric+0x1e8>
 8008b82:	e184      	b.n	8008e8e <qrcodegen_makeNumeric+0x4f2>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008b84:	003d      	movs	r5, r7
 8008b86:	2201      	movs	r2, #1
 8008b88:	2607      	movs	r6, #7
 8008b8a:	40cd      	lsrs	r5, r1
 8008b8c:	46b4      	mov	ip, r6
 8008b8e:	4015      	ands	r5, r2
 8008b90:	4386      	bics	r6, r0
 8008b92:	40b5      	lsls	r5, r6
 8008b94:	10c3      	asrs	r3, r0, #3
 8008b96:	5ce6      	ldrb	r6, [r4, r3]
 8008b98:	4335      	orrs	r5, r6
 8008b9a:	003e      	movs	r6, r7
 8008b9c:	54e5      	strb	r5, [r4, r3]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008b9e:	1c45      	adds	r5, r0, #1
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008ba0:	10eb      	asrs	r3, r5, #3
 8008ba2:	4699      	mov	r9, r3
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008ba4:	1e4b      	subs	r3, r1, #1
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008ba6:	40de      	lsrs	r6, r3
 8008ba8:	0033      	movs	r3, r6
 8008baa:	4666      	mov	r6, ip
 8008bac:	4013      	ands	r3, r2
 8008bae:	43ae      	bics	r6, r5
 8008bb0:	40b3      	lsls	r3, r6
 8008bb2:	464e      	mov	r6, r9
 8008bb4:	5da6      	ldrb	r6, [r4, r6]
 8008bb6:	4333      	orrs	r3, r6
 8008bb8:	464e      	mov	r6, r9
 8008bba:	55a3      	strb	r3, [r4, r6]
 8008bbc:	003e      	movs	r6, r7
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008bbe:	1c83      	adds	r3, r0, #2
 8008bc0:	469b      	mov	fp, r3
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008bc2:	10db      	asrs	r3, r3, #3
 8008bc4:	4699      	mov	r9, r3
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008bc6:	1e8b      	subs	r3, r1, #2
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008bc8:	40de      	lsrs	r6, r3
 8008bca:	0033      	movs	r3, r6
 8008bcc:	4013      	ands	r3, r2
 8008bce:	9301      	str	r3, [sp, #4]
 8008bd0:	4666      	mov	r6, ip
 8008bd2:	465b      	mov	r3, fp
 8008bd4:	439e      	bics	r6, r3
 8008bd6:	0033      	movs	r3, r6
 8008bd8:	9e01      	ldr	r6, [sp, #4]
 8008bda:	409e      	lsls	r6, r3
 8008bdc:	0033      	movs	r3, r6
 8008bde:	464e      	mov	r6, r9
 8008be0:	5da6      	ldrb	r6, [r4, r6]
 8008be2:	4333      	orrs	r3, r6
 8008be4:	464e      	mov	r6, r9
 8008be6:	55a3      	strb	r3, [r4, r6]
 8008be8:	003e      	movs	r6, r7
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008bea:	1cc3      	adds	r3, r0, #3
 8008bec:	469b      	mov	fp, r3
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008bee:	10db      	asrs	r3, r3, #3
 8008bf0:	4699      	mov	r9, r3
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008bf2:	1ecb      	subs	r3, r1, #3
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008bf4:	40de      	lsrs	r6, r3
 8008bf6:	0033      	movs	r3, r6
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	9301      	str	r3, [sp, #4]
 8008bfc:	4666      	mov	r6, ip
 8008bfe:	465b      	mov	r3, fp
 8008c00:	439e      	bics	r6, r3
 8008c02:	0033      	movs	r3, r6
 8008c04:	9e01      	ldr	r6, [sp, #4]
 8008c06:	409e      	lsls	r6, r3
 8008c08:	0033      	movs	r3, r6
 8008c0a:	464e      	mov	r6, r9
 8008c0c:	5da6      	ldrb	r6, [r4, r6]
 8008c0e:	4333      	orrs	r3, r6
 8008c10:	464e      	mov	r6, r9
 8008c12:	55a3      	strb	r3, [r4, r6]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008c14:	1d06      	adds	r6, r0, #4
 8008c16:	46b3      	mov	fp, r6
 8008c18:	1f0b      	subs	r3, r1, #4
 8008c1a:	2903      	cmp	r1, #3
 8008c1c:	d100      	bne.n	8008c20 <qrcodegen_makeNumeric+0x284>
 8008c1e:	e120      	b.n	8008e62 <qrcodegen_makeNumeric+0x4c6>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008c20:	10f6      	asrs	r6, r6, #3
 8008c22:	46b1      	mov	r9, r6
 8008c24:	003e      	movs	r6, r7
 8008c26:	40de      	lsrs	r6, r3
 8008c28:	0033      	movs	r3, r6
 8008c2a:	4013      	ands	r3, r2
 8008c2c:	9301      	str	r3, [sp, #4]
 8008c2e:	4666      	mov	r6, ip
 8008c30:	465b      	mov	r3, fp
 8008c32:	439e      	bics	r6, r3
 8008c34:	0033      	movs	r3, r6
 8008c36:	9e01      	ldr	r6, [sp, #4]
 8008c38:	409e      	lsls	r6, r3
 8008c3a:	0033      	movs	r3, r6
 8008c3c:	464e      	mov	r6, r9
 8008c3e:	5da6      	ldrb	r6, [r4, r6]
 8008c40:	4333      	orrs	r3, r6
 8008c42:	464e      	mov	r6, r9
 8008c44:	55a3      	strb	r3, [r4, r6]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008c46:	1d46      	adds	r6, r0, #5
 8008c48:	46b3      	mov	fp, r6
 8008c4a:	1f4b      	subs	r3, r1, #5
 8008c4c:	2904      	cmp	r1, #4
 8008c4e:	d100      	bne.n	8008c52 <qrcodegen_makeNumeric+0x2b6>
 8008c50:	e107      	b.n	8008e62 <qrcodegen_makeNumeric+0x4c6>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008c52:	10f6      	asrs	r6, r6, #3
 8008c54:	46b1      	mov	r9, r6
 8008c56:	003e      	movs	r6, r7
 8008c58:	40de      	lsrs	r6, r3
 8008c5a:	0033      	movs	r3, r6
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	9301      	str	r3, [sp, #4]
 8008c60:	4666      	mov	r6, ip
 8008c62:	465b      	mov	r3, fp
 8008c64:	439e      	bics	r6, r3
 8008c66:	0033      	movs	r3, r6
 8008c68:	9e01      	ldr	r6, [sp, #4]
 8008c6a:	409e      	lsls	r6, r3
 8008c6c:	0033      	movs	r3, r6
 8008c6e:	464e      	mov	r6, r9
 8008c70:	5da6      	ldrb	r6, [r4, r6]
 8008c72:	4333      	orrs	r3, r6
 8008c74:	464e      	mov	r6, r9
 8008c76:	55a3      	strb	r3, [r4, r6]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008c78:	1d86      	adds	r6, r0, #6
 8008c7a:	46b3      	mov	fp, r6
 8008c7c:	1f8b      	subs	r3, r1, #6
 8008c7e:	2905      	cmp	r1, #5
 8008c80:	d100      	bne.n	8008c84 <qrcodegen_makeNumeric+0x2e8>
 8008c82:	e0ee      	b.n	8008e62 <qrcodegen_makeNumeric+0x4c6>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008c84:	10f6      	asrs	r6, r6, #3
 8008c86:	46b1      	mov	r9, r6
 8008c88:	003e      	movs	r6, r7
 8008c8a:	40de      	lsrs	r6, r3
 8008c8c:	0033      	movs	r3, r6
 8008c8e:	4013      	ands	r3, r2
 8008c90:	9301      	str	r3, [sp, #4]
 8008c92:	4666      	mov	r6, ip
 8008c94:	465b      	mov	r3, fp
 8008c96:	439e      	bics	r6, r3
 8008c98:	0033      	movs	r3, r6
 8008c9a:	9e01      	ldr	r6, [sp, #4]
 8008c9c:	409e      	lsls	r6, r3
 8008c9e:	0033      	movs	r3, r6
 8008ca0:	464e      	mov	r6, r9
 8008ca2:	5da6      	ldrb	r6, [r4, r6]
 8008ca4:	4333      	orrs	r3, r6
 8008ca6:	464e      	mov	r6, r9
 8008ca8:	55a3      	strb	r3, [r4, r6]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008caa:	1dc6      	adds	r6, r0, #7
 8008cac:	46b3      	mov	fp, r6
 8008cae:	1fcb      	subs	r3, r1, #7
 8008cb0:	2906      	cmp	r1, #6
 8008cb2:	d100      	bne.n	8008cb6 <qrcodegen_makeNumeric+0x31a>
 8008cb4:	e0d5      	b.n	8008e62 <qrcodegen_makeNumeric+0x4c6>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008cb6:	10f6      	asrs	r6, r6, #3
 8008cb8:	46b1      	mov	r9, r6
 8008cba:	003e      	movs	r6, r7
 8008cbc:	40de      	lsrs	r6, r3
 8008cbe:	0033      	movs	r3, r6
 8008cc0:	4013      	ands	r3, r2
 8008cc2:	9301      	str	r3, [sp, #4]
 8008cc4:	4666      	mov	r6, ip
 8008cc6:	465b      	mov	r3, fp
 8008cc8:	439e      	bics	r6, r3
 8008cca:	0033      	movs	r3, r6
 8008ccc:	9e01      	ldr	r6, [sp, #4]
 8008cce:	409e      	lsls	r6, r3
 8008cd0:	0033      	movs	r3, r6
 8008cd2:	464e      	mov	r6, r9
 8008cd4:	5da6      	ldrb	r6, [r4, r6]
 8008cd6:	4333      	orrs	r3, r6
 8008cd8:	464e      	mov	r6, r9
 8008cda:	55a3      	strb	r3, [r4, r6]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008cdc:	2308      	movs	r3, #8
 8008cde:	425b      	negs	r3, r3
 8008ce0:	469b      	mov	fp, r3
 8008ce2:	3310      	adds	r3, #16
 8008ce4:	4699      	mov	r9, r3
 8008ce6:	448b      	add	fp, r1
 8008ce8:	4481      	add	r9, r0
 8008cea:	2907      	cmp	r1, #7
 8008cec:	d100      	bne.n	8008cf0 <qrcodegen_makeNumeric+0x354>
 8008cee:	e0b8      	b.n	8008e62 <qrcodegen_makeNumeric+0x4c6>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008cf0:	464b      	mov	r3, r9
 8008cf2:	10de      	asrs	r6, r3, #3
 8008cf4:	9601      	str	r6, [sp, #4]
 8008cf6:	465b      	mov	r3, fp
 8008cf8:	003e      	movs	r6, r7
 8008cfa:	40de      	lsrs	r6, r3
 8008cfc:	464b      	mov	r3, r9
 8008cfe:	4032      	ands	r2, r6
 8008d00:	4666      	mov	r6, ip
 8008d02:	439e      	bics	r6, r3
 8008d04:	40b2      	lsls	r2, r6
 8008d06:	9e01      	ldr	r6, [sp, #4]
 8008d08:	5da3      	ldrb	r3, [r4, r6]
 8008d0a:	431a      	orrs	r2, r3
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008d0c:	2309      	movs	r3, #9
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008d0e:	55a2      	strb	r2, [r4, r6]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008d10:	469b      	mov	fp, r3
 8008d12:	000a      	movs	r2, r1
 8008d14:	4483      	add	fp, r0
 8008d16:	3a09      	subs	r2, #9
 8008d18:	2908      	cmp	r1, #8
 8008d1a:	d100      	bne.n	8008d1e <qrcodegen_makeNumeric+0x382>
 8008d1c:	e0a1      	b.n	8008e62 <qrcodegen_makeNumeric+0x4c6>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008d1e:	003e      	movs	r6, r7
 8008d20:	40d6      	lsrs	r6, r2
 8008d22:	0032      	movs	r2, r6
 8008d24:	2601      	movs	r6, #1
 8008d26:	4032      	ands	r2, r6
 8008d28:	9201      	str	r2, [sp, #4]
 8008d2a:	465a      	mov	r2, fp
 8008d2c:	46b1      	mov	r9, r6
 8008d2e:	3606      	adds	r6, #6
 8008d30:	46b4      	mov	ip, r6
 8008d32:	4396      	bics	r6, r2
 8008d34:	0032      	movs	r2, r6
 8008d36:	9e01      	ldr	r6, [sp, #4]
 8008d38:	465b      	mov	r3, fp
 8008d3a:	4096      	lsls	r6, r2
 8008d3c:	0032      	movs	r2, r6
 8008d3e:	10db      	asrs	r3, r3, #3
 8008d40:	5ce6      	ldrb	r6, [r4, r3]
 8008d42:	4332      	orrs	r2, r6
 8008d44:	54e2      	strb	r2, [r4, r3]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008d46:	220a      	movs	r2, #10
 8008d48:	000b      	movs	r3, r1
 8008d4a:	4693      	mov	fp, r2
 8008d4c:	3b0a      	subs	r3, #10
 8008d4e:	4483      	add	fp, r0
 8008d50:	2909      	cmp	r1, #9
 8008d52:	d100      	bne.n	8008d56 <qrcodegen_makeNumeric+0x3ba>
 8008d54:	e085      	b.n	8008e62 <qrcodegen_makeNumeric+0x4c6>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008d56:	003e      	movs	r6, r7
 8008d58:	40de      	lsrs	r6, r3
 8008d5a:	0033      	movs	r3, r6
 8008d5c:	464e      	mov	r6, r9
 8008d5e:	4033      	ands	r3, r6
 8008d60:	9301      	str	r3, [sp, #4]
 8008d62:	4666      	mov	r6, ip
 8008d64:	465b      	mov	r3, fp
 8008d66:	439e      	bics	r6, r3
 8008d68:	0033      	movs	r3, r6
 8008d6a:	9e01      	ldr	r6, [sp, #4]
 8008d6c:	465a      	mov	r2, fp
 8008d6e:	409e      	lsls	r6, r3
 8008d70:	0033      	movs	r3, r6
 8008d72:	10d2      	asrs	r2, r2, #3
 8008d74:	5ca6      	ldrb	r6, [r4, r2]
 8008d76:	4333      	orrs	r3, r6
 8008d78:	54a3      	strb	r3, [r4, r2]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008d7a:	220b      	movs	r2, #11
 8008d7c:	000b      	movs	r3, r1
 8008d7e:	4693      	mov	fp, r2
 8008d80:	3b0b      	subs	r3, #11
 8008d82:	4483      	add	fp, r0
 8008d84:	290a      	cmp	r1, #10
 8008d86:	d06c      	beq.n	8008e62 <qrcodegen_makeNumeric+0x4c6>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008d88:	003e      	movs	r6, r7
 8008d8a:	40de      	lsrs	r6, r3
 8008d8c:	0033      	movs	r3, r6
 8008d8e:	464e      	mov	r6, r9
 8008d90:	4033      	ands	r3, r6
 8008d92:	9301      	str	r3, [sp, #4]
 8008d94:	4666      	mov	r6, ip
 8008d96:	465b      	mov	r3, fp
 8008d98:	439e      	bics	r6, r3
 8008d9a:	0033      	movs	r3, r6
 8008d9c:	9e01      	ldr	r6, [sp, #4]
 8008d9e:	465a      	mov	r2, fp
 8008da0:	409e      	lsls	r6, r3
 8008da2:	0033      	movs	r3, r6
 8008da4:	10d2      	asrs	r2, r2, #3
 8008da6:	5ca6      	ldrb	r6, [r4, r2]
 8008da8:	4333      	orrs	r3, r6
 8008daa:	54a3      	strb	r3, [r4, r2]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008dac:	220c      	movs	r2, #12
 8008dae:	000b      	movs	r3, r1
 8008db0:	4693      	mov	fp, r2
 8008db2:	3b0c      	subs	r3, #12
 8008db4:	4483      	add	fp, r0
 8008db6:	290b      	cmp	r1, #11
 8008db8:	d053      	beq.n	8008e62 <qrcodegen_makeNumeric+0x4c6>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008dba:	003e      	movs	r6, r7
 8008dbc:	40de      	lsrs	r6, r3
 8008dbe:	0033      	movs	r3, r6
 8008dc0:	464e      	mov	r6, r9
 8008dc2:	4033      	ands	r3, r6
 8008dc4:	9301      	str	r3, [sp, #4]
 8008dc6:	4666      	mov	r6, ip
 8008dc8:	465b      	mov	r3, fp
 8008dca:	439e      	bics	r6, r3
 8008dcc:	0033      	movs	r3, r6
 8008dce:	9e01      	ldr	r6, [sp, #4]
 8008dd0:	465a      	mov	r2, fp
 8008dd2:	409e      	lsls	r6, r3
 8008dd4:	0033      	movs	r3, r6
 8008dd6:	10d2      	asrs	r2, r2, #3
 8008dd8:	5ca6      	ldrb	r6, [r4, r2]
 8008dda:	4333      	orrs	r3, r6
 8008ddc:	54a3      	strb	r3, [r4, r2]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008dde:	220d      	movs	r2, #13
 8008de0:	000b      	movs	r3, r1
 8008de2:	4693      	mov	fp, r2
 8008de4:	3b0d      	subs	r3, #13
 8008de6:	4483      	add	fp, r0
 8008de8:	290c      	cmp	r1, #12
 8008dea:	d03a      	beq.n	8008e62 <qrcodegen_makeNumeric+0x4c6>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008dec:	003e      	movs	r6, r7
 8008dee:	40de      	lsrs	r6, r3
 8008df0:	0033      	movs	r3, r6
 8008df2:	464e      	mov	r6, r9
 8008df4:	4033      	ands	r3, r6
 8008df6:	9301      	str	r3, [sp, #4]
 8008df8:	4666      	mov	r6, ip
 8008dfa:	465b      	mov	r3, fp
 8008dfc:	439e      	bics	r6, r3
 8008dfe:	0033      	movs	r3, r6
 8008e00:	9e01      	ldr	r6, [sp, #4]
 8008e02:	465a      	mov	r2, fp
 8008e04:	409e      	lsls	r6, r3
 8008e06:	0033      	movs	r3, r6
 8008e08:	10d2      	asrs	r2, r2, #3
 8008e0a:	5ca6      	ldrb	r6, [r4, r2]
 8008e0c:	4333      	orrs	r3, r6
 8008e0e:	54a3      	strb	r3, [r4, r2]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008e10:	220e      	movs	r2, #14
 8008e12:	000b      	movs	r3, r1
 8008e14:	4693      	mov	fp, r2
 8008e16:	3b0e      	subs	r3, #14
 8008e18:	4483      	add	fp, r0
 8008e1a:	290d      	cmp	r1, #13
 8008e1c:	d021      	beq.n	8008e62 <qrcodegen_makeNumeric+0x4c6>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008e1e:	003e      	movs	r6, r7
 8008e20:	40de      	lsrs	r6, r3
 8008e22:	0033      	movs	r3, r6
 8008e24:	464e      	mov	r6, r9
 8008e26:	4033      	ands	r3, r6
 8008e28:	9301      	str	r3, [sp, #4]
 8008e2a:	4666      	mov	r6, ip
 8008e2c:	465b      	mov	r3, fp
 8008e2e:	439e      	bics	r6, r3
 8008e30:	0033      	movs	r3, r6
 8008e32:	9e01      	ldr	r6, [sp, #4]
 8008e34:	465a      	mov	r2, fp
 8008e36:	409e      	lsls	r6, r3
 8008e38:	0033      	movs	r3, r6
 8008e3a:	10d2      	asrs	r2, r2, #3
 8008e3c:	5ca6      	ldrb	r6, [r4, r2]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008e3e:	300f      	adds	r0, #15
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008e40:	4333      	orrs	r3, r6
 8008e42:	54a3      	strb	r3, [r4, r2]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008e44:	000b      	movs	r3, r1
 8008e46:	3b0f      	subs	r3, #15
 8008e48:	290e      	cmp	r1, #14
 8008e4a:	d00a      	beq.n	8008e62 <qrcodegen_makeNumeric+0x4c6>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008e4c:	40df      	lsrs	r7, r3
 8008e4e:	464e      	mov	r6, r9
 8008e50:	403e      	ands	r6, r7
 8008e52:	0033      	movs	r3, r6
 8008e54:	4666      	mov	r6, ip
 8008e56:	4386      	bics	r6, r0
 8008e58:	40b3      	lsls	r3, r6
 8008e5a:	10c2      	asrs	r2, r0, #3
 8008e5c:	5ca0      	ldrb	r0, [r4, r2]
 8008e5e:	4303      	orrs	r3, r0
 8008e60:	54a3      	strb	r3, [r4, r2]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008e62:	1948      	adds	r0, r1, r5
 8008e64:	e657      	b.n	8008b16 <qrcodegen_makeNumeric+0x17a>
	result.bitLength = 0;
 8008e66:	2000      	movs	r0, #0
 8008e68:	e657      	b.n	8008b1a <qrcodegen_makeNumeric+0x17e>
		assert('0' <= c && c <= '9');
 8008e6a:	4b0d      	ldr	r3, [pc, #52]	; (8008ea0 <qrcodegen_makeNumeric+0x504>)
 8008e6c:	4a0d      	ldr	r2, [pc, #52]	; (8008ea4 <qrcodegen_makeNumeric+0x508>)
 8008e6e:	490e      	ldr	r1, [pc, #56]	; (8008ea8 <qrcodegen_makeNumeric+0x50c>)
 8008e70:	480e      	ldr	r0, [pc, #56]	; (8008eac <qrcodegen_makeNumeric+0x510>)
 8008e72:	f000 fb81 	bl	8009578 <__assert_func>
	assert(0 <= numBits && numBits <= 16 && (unsigned long)val >> numBits == 0);
 8008e76:	21bd      	movs	r1, #189	; 0xbd
 8008e78:	4b0d      	ldr	r3, [pc, #52]	; (8008eb0 <qrcodegen_makeNumeric+0x514>)
 8008e7a:	4a0e      	ldr	r2, [pc, #56]	; (8008eb4 <qrcodegen_makeNumeric+0x518>)
 8008e7c:	480b      	ldr	r0, [pc, #44]	; (8008eac <qrcodegen_makeNumeric+0x510>)
 8008e7e:	f000 fb7b 	bl	8009578 <__assert_func>
	assert(digits != NULL);
 8008e82:	4b0d      	ldr	r3, [pc, #52]	; (8008eb8 <qrcodegen_makeNumeric+0x51c>)
 8008e84:	4a07      	ldr	r2, [pc, #28]	; (8008ea4 <qrcodegen_makeNumeric+0x508>)
 8008e86:	490d      	ldr	r1, [pc, #52]	; (8008ebc <qrcodegen_makeNumeric+0x520>)
 8008e88:	4808      	ldr	r0, [pc, #32]	; (8008eac <qrcodegen_makeNumeric+0x510>)
 8008e8a:	f000 fb75 	bl	8009578 <__assert_func>
 8008e8e:	f7fc fc4f 	bl	8005730 <appendBitsToBuffer.part.0>
	assert(bitLen != LENGTH_OVERFLOW);
 8008e92:	21e1      	movs	r1, #225	; 0xe1
 8008e94:	4b0a      	ldr	r3, [pc, #40]	; (8008ec0 <qrcodegen_makeNumeric+0x524>)
 8008e96:	4a03      	ldr	r2, [pc, #12]	; (8008ea4 <qrcodegen_makeNumeric+0x508>)
 8008e98:	4804      	ldr	r0, [pc, #16]	; (8008eac <qrcodegen_makeNumeric+0x510>)
 8008e9a:	0089      	lsls	r1, r1, #2
 8008e9c:	f000 fb6c 	bl	8009578 <__assert_func>
 8008ea0:	0800e6b8 	.word	0x0800e6b8
 8008ea4:	0800e914 	.word	0x0800e914
 8008ea8:	0000038e 	.word	0x0000038e
 8008eac:	0800e204 	.word	0x0800e204
 8008eb0:	0800e220 	.word	0x0800e220
 8008eb4:	0800e948 	.word	0x0800e948
 8008eb8:	0800e68c 	.word	0x0800e68c
 8008ebc:	0000037f 	.word	0x0000037f
 8008ec0:	0800e69c 	.word	0x0800e69c

08008ec4 <qrcodegen_makeAlphanumeric>:
struct qrcodegen_Segment qrcodegen_makeAlphanumeric(const char *text, uint8_t buf[]) {
 8008ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ec6:	46de      	mov	lr, fp
 8008ec8:	4657      	mov	r7, sl
 8008eca:	4645      	mov	r5, r8
 8008ecc:	464e      	mov	r6, r9
 8008ece:	b5e0      	push	{r5, r6, r7, lr}
 8008ed0:	4683      	mov	fp, r0
 8008ed2:	000f      	movs	r7, r1
 8008ed4:	0015      	movs	r5, r2
 8008ed6:	b083      	sub	sp, #12
	assert(text != NULL);
 8008ed8:	2900      	cmp	r1, #0
 8008eda:	d100      	bne.n	8008ede <qrcodegen_makeAlphanumeric+0x1a>
 8008edc:	e13e      	b.n	800915c <qrcodegen_makeAlphanumeric+0x298>
	size_t len = strlen(text);
 8008ede:	0008      	movs	r0, r1
 8008ee0:	f7f7 f912 	bl	8000108 <strlen>
	if (numChars > (unsigned int)INT16_MAX)
 8008ee4:	2280      	movs	r2, #128	; 0x80
	size_t len = strlen(text);
 8008ee6:	9001      	str	r0, [sp, #4]
	if (numChars > (unsigned int)INT16_MAX)
 8008ee8:	0212      	lsls	r2, r2, #8
 8008eea:	4290      	cmp	r0, r2
 8008eec:	d300      	bcc.n	8008ef0 <qrcodegen_makeAlphanumeric+0x2c>
 8008eee:	e12d      	b.n	800914c <qrcodegen_makeAlphanumeric+0x288>
		result = (result * 11 + 1) / 2;  // ceil(11/2 * n)
 8008ef0:	4684      	mov	ip, r0
 8008ef2:	0083      	lsls	r3, r0, #2
 8008ef4:	4463      	add	r3, ip
 8008ef6:	005b      	lsls	r3, r3, #1
 8008ef8:	4463      	add	r3, ip
 8008efa:	3301      	adds	r3, #1
 8008efc:	105b      	asrs	r3, r3, #1
 8008efe:	9300      	str	r3, [sp, #0]
	if (result > INT16_MAX)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	db00      	blt.n	8008f06 <qrcodegen_makeAlphanumeric+0x42>
 8008f04:	e122      	b.n	800914c <qrcodegen_makeAlphanumeric+0x288>
	if (bitLen > 0)
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d000      	beq.n	8008f0c <qrcodegen_makeAlphanumeric+0x48>
 8008f0a:	e0ba      	b.n	8009082 <qrcodegen_makeAlphanumeric+0x1be>
	for (; *text != '\0'; text++) {
 8008f0c:	7839      	ldrb	r1, [r7, #0]
 8008f0e:	2900      	cmp	r1, #0
 8008f10:	d100      	bne.n	8008f14 <qrcodegen_makeAlphanumeric+0x50>
 8008f12:	e10b      	b.n	800912c <qrcodegen_makeAlphanumeric+0x268>
	result.bitLength = 0;
 8008f14:	2300      	movs	r3, #0
 8008f16:	4698      	mov	r8, r3
 8008f18:	4b93      	ldr	r3, [pc, #588]	; (8009168 <qrcodegen_makeAlphanumeric+0x2a4>)
	int accumCount = 0;
 8008f1a:	2600      	movs	r6, #0
 8008f1c:	469a      	mov	sl, r3
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008f1e:	2307      	movs	r3, #7
	unsigned int accumData = 0;
 8008f20:	2400      	movs	r4, #0
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008f22:	4699      	mov	r9, r3
 8008f24:	e005      	b.n	8008f32 <qrcodegen_makeAlphanumeric+0x6e>
	for (; *text != '\0'; text++) {
 8008f26:	7879      	ldrb	r1, [r7, #1]
 8008f28:	3701      	adds	r7, #1
 8008f2a:	2601      	movs	r6, #1
 8008f2c:	2900      	cmp	r1, #0
 8008f2e:	d100      	bne.n	8008f32 <qrcodegen_makeAlphanumeric+0x6e>
 8008f30:	e091      	b.n	8009056 <qrcodegen_makeAlphanumeric+0x192>
		const char *temp = strchr(ALPHANUMERIC_CHARSET, *text);
 8008f32:	4650      	mov	r0, sl
 8008f34:	f000 ff36 	bl	8009da4 <strchr>
		assert(temp != NULL);
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	d100      	bne.n	8008f3e <qrcodegen_makeAlphanumeric+0x7a>
 8008f3c:	e0f9      	b.n	8009132 <qrcodegen_makeAlphanumeric+0x26e>
		accumData = accumData * 45 + (unsigned int)(temp - ALPHANUMERIC_CHARSET);
 8008f3e:	0063      	lsls	r3, r4, #1
 8008f40:	191c      	adds	r4, r3, r4
 8008f42:	0123      	lsls	r3, r4, #4
 8008f44:	1b1c      	subs	r4, r3, r4
 8008f46:	4653      	mov	r3, sl
 8008f48:	1ac0      	subs	r0, r0, r3
 8008f4a:	1904      	adds	r4, r0, r4
		if (accumCount == 2) {
 8008f4c:	2e01      	cmp	r6, #1
 8008f4e:	d1ea      	bne.n	8008f26 <qrcodegen_makeAlphanumeric+0x62>
	assert(0 <= numBits && numBits <= 16 && (unsigned long)val >> numBits == 0);
 8008f50:	0ae3      	lsrs	r3, r4, #11
 8008f52:	d000      	beq.n	8008f56 <qrcodegen_makeAlphanumeric+0x92>
 8008f54:	e0f4      	b.n	8009140 <qrcodegen_makeAlphanumeric+0x27c>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008f56:	4640      	mov	r0, r8
 8008f58:	4643      	mov	r3, r8
 8008f5a:	4649      	mov	r1, r9
 8008f5c:	10da      	asrs	r2, r3, #3
 8008f5e:	4381      	bics	r1, r0
 8008f60:	0aa3      	lsrs	r3, r4, #10
 8008f62:	408b      	lsls	r3, r1
 8008f64:	5ca9      	ldrb	r1, [r5, r2]
	for (; *text != '\0'; text++) {
 8008f66:	3701      	adds	r7, #1
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008f68:	430b      	orrs	r3, r1
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008f6a:	1c41      	adds	r1, r0, #1
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008f6c:	4648      	mov	r0, r9
 8008f6e:	54ab      	strb	r3, [r5, r2]
 8008f70:	0a63      	lsrs	r3, r4, #9
 8008f72:	4388      	bics	r0, r1
 8008f74:	4033      	ands	r3, r6
 8008f76:	4083      	lsls	r3, r0
 8008f78:	10ca      	asrs	r2, r1, #3
 8008f7a:	5ca9      	ldrb	r1, [r5, r2]
 8008f7c:	4648      	mov	r0, r9
 8008f7e:	430b      	orrs	r3, r1
 8008f80:	54ab      	strb	r3, [r5, r2]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008f82:	4643      	mov	r3, r8
 8008f84:	1c99      	adds	r1, r3, #2
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008f86:	0a23      	lsrs	r3, r4, #8
 8008f88:	4388      	bics	r0, r1
 8008f8a:	4033      	ands	r3, r6
 8008f8c:	4083      	lsls	r3, r0
 8008f8e:	10ca      	asrs	r2, r1, #3
 8008f90:	5ca9      	ldrb	r1, [r5, r2]
 8008f92:	4648      	mov	r0, r9
 8008f94:	430b      	orrs	r3, r1
 8008f96:	54ab      	strb	r3, [r5, r2]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008f98:	4643      	mov	r3, r8
 8008f9a:	1cd9      	adds	r1, r3, #3
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008f9c:	09e3      	lsrs	r3, r4, #7
 8008f9e:	4388      	bics	r0, r1
 8008fa0:	4033      	ands	r3, r6
 8008fa2:	4083      	lsls	r3, r0
 8008fa4:	10ca      	asrs	r2, r1, #3
 8008fa6:	5ca9      	ldrb	r1, [r5, r2]
 8008fa8:	4648      	mov	r0, r9
 8008faa:	430b      	orrs	r3, r1
 8008fac:	54ab      	strb	r3, [r5, r2]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008fae:	4643      	mov	r3, r8
 8008fb0:	1d19      	adds	r1, r3, #4
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008fb2:	09a3      	lsrs	r3, r4, #6
 8008fb4:	4388      	bics	r0, r1
 8008fb6:	4033      	ands	r3, r6
 8008fb8:	4083      	lsls	r3, r0
 8008fba:	10ca      	asrs	r2, r1, #3
 8008fbc:	5ca9      	ldrb	r1, [r5, r2]
 8008fbe:	4648      	mov	r0, r9
 8008fc0:	430b      	orrs	r3, r1
 8008fc2:	54ab      	strb	r3, [r5, r2]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008fc4:	4643      	mov	r3, r8
 8008fc6:	1d59      	adds	r1, r3, #5
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008fc8:	0963      	lsrs	r3, r4, #5
 8008fca:	4388      	bics	r0, r1
 8008fcc:	4033      	ands	r3, r6
 8008fce:	4083      	lsls	r3, r0
 8008fd0:	10ca      	asrs	r2, r1, #3
 8008fd2:	5ca9      	ldrb	r1, [r5, r2]
 8008fd4:	4648      	mov	r0, r9
 8008fd6:	430b      	orrs	r3, r1
 8008fd8:	54ab      	strb	r3, [r5, r2]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008fda:	4643      	mov	r3, r8
 8008fdc:	1d99      	adds	r1, r3, #6
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008fde:	0923      	lsrs	r3, r4, #4
 8008fe0:	4388      	bics	r0, r1
 8008fe2:	4033      	ands	r3, r6
 8008fe4:	4083      	lsls	r3, r0
 8008fe6:	10ca      	asrs	r2, r1, #3
 8008fe8:	5ca9      	ldrb	r1, [r5, r2]
 8008fea:	4648      	mov	r0, r9
 8008fec:	430b      	orrs	r3, r1
 8008fee:	54ab      	strb	r3, [r5, r2]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8008ff0:	4643      	mov	r3, r8
 8008ff2:	1dd9      	adds	r1, r3, #7
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8008ff4:	08e3      	lsrs	r3, r4, #3
 8008ff6:	4388      	bics	r0, r1
 8008ff8:	4033      	ands	r3, r6
 8008ffa:	4083      	lsls	r3, r0
 8008ffc:	10ca      	asrs	r2, r1, #3
 8008ffe:	5ca9      	ldrb	r1, [r5, r2]
 8009000:	4648      	mov	r0, r9
 8009002:	430b      	orrs	r3, r1
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8009004:	4641      	mov	r1, r8
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8009006:	54ab      	strb	r3, [r5, r2]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8009008:	3108      	adds	r1, #8
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 800900a:	08a3      	lsrs	r3, r4, #2
 800900c:	4388      	bics	r0, r1
 800900e:	4033      	ands	r3, r6
 8009010:	4083      	lsls	r3, r0
 8009012:	10ca      	asrs	r2, r1, #3
 8009014:	5ca9      	ldrb	r1, [r5, r2]
 8009016:	4648      	mov	r0, r9
 8009018:	430b      	orrs	r3, r1
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 800901a:	4641      	mov	r1, r8
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 800901c:	54ab      	strb	r3, [r5, r2]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 800901e:	3109      	adds	r1, #9
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8009020:	0863      	lsrs	r3, r4, #1
 8009022:	4033      	ands	r3, r6
 8009024:	4388      	bics	r0, r1
 8009026:	4083      	lsls	r3, r0
 8009028:	10ca      	asrs	r2, r1, #3
 800902a:	5ca9      	ldrb	r1, [r5, r2]
 800902c:	4034      	ands	r4, r6
 800902e:	430b      	orrs	r3, r1
 8009030:	54ab      	strb	r3, [r5, r2]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8009032:	4642      	mov	r2, r8
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8009034:	4649      	mov	r1, r9
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8009036:	320a      	adds	r2, #10
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8009038:	4391      	bics	r1, r2
 800903a:	408c      	lsls	r4, r1
 800903c:	10d3      	asrs	r3, r2, #3
 800903e:	5cee      	ldrb	r6, [r5, r3]
 8009040:	4334      	orrs	r4, r6
 8009042:	54ec      	strb	r4, [r5, r3]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8009044:	230b      	movs	r3, #11
 8009046:	469c      	mov	ip, r3
	for (; *text != '\0'; text++) {
 8009048:	7839      	ldrb	r1, [r7, #0]
			accumData = 0;
 800904a:	2400      	movs	r4, #0
			accumCount = 0;
 800904c:	2600      	movs	r6, #0
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 800904e:	44e0      	add	r8, ip
	for (; *text != '\0'; text++) {
 8009050:	2900      	cmp	r1, #0
 8009052:	d000      	beq.n	8009056 <qrcodegen_makeAlphanumeric+0x192>
 8009054:	e76d      	b.n	8008f32 <qrcodegen_makeAlphanumeric+0x6e>
	if (accumCount > 0)  // 1 character remaining
 8009056:	2e01      	cmp	r6, #1
 8009058:	d023      	beq.n	80090a2 <qrcodegen_makeAlphanumeric+0x1de>
	assert(result.bitLength == bitLen);
 800905a:	9b00      	ldr	r3, [sp, #0]
 800905c:	4543      	cmp	r3, r8
 800905e:	d11a      	bne.n	8009096 <qrcodegen_makeAlphanumeric+0x1d2>
	return result;
 8009060:	465a      	mov	r2, fp
 8009062:	2302      	movs	r3, #2
 8009064:	7013      	strb	r3, [r2, #0]
 8009066:	465b      	mov	r3, fp
 8009068:	9a01      	ldr	r2, [sp, #4]
}
 800906a:	4658      	mov	r0, fp
	return result;
 800906c:	605a      	str	r2, [r3, #4]
 800906e:	4642      	mov	r2, r8
 8009070:	609d      	str	r5, [r3, #8]
 8009072:	60da      	str	r2, [r3, #12]
}
 8009074:	b003      	add	sp, #12
 8009076:	bcf0      	pop	{r4, r5, r6, r7}
 8009078:	46bb      	mov	fp, r7
 800907a:	46b2      	mov	sl, r6
 800907c:	46a9      	mov	r9, r5
 800907e:	46a0      	mov	r8, r4
 8009080:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(buf, 0, ((size_t)bitLen + 7) / 8 * sizeof(buf[0]));
 8009082:	1dda      	adds	r2, r3, #7
 8009084:	2100      	movs	r1, #0
 8009086:	0028      	movs	r0, r5
 8009088:	08d2      	lsrs	r2, r2, #3
 800908a:	f000 fae9 	bl	8009660 <memset>
	for (; *text != '\0'; text++) {
 800908e:	7839      	ldrb	r1, [r7, #0]
 8009090:	2900      	cmp	r1, #0
 8009092:	d000      	beq.n	8009096 <qrcodegen_makeAlphanumeric+0x1d2>
 8009094:	e73e      	b.n	8008f14 <qrcodegen_makeAlphanumeric+0x50>
	assert(result.bitLength == bitLen);
 8009096:	4b35      	ldr	r3, [pc, #212]	; (800916c <qrcodegen_makeAlphanumeric+0x2a8>)
 8009098:	4a35      	ldr	r2, [pc, #212]	; (8009170 <qrcodegen_makeAlphanumeric+0x2ac>)
 800909a:	4936      	ldr	r1, [pc, #216]	; (8009174 <qrcodegen_makeAlphanumeric+0x2b0>)
 800909c:	4836      	ldr	r0, [pc, #216]	; (8009178 <qrcodegen_makeAlphanumeric+0x2b4>)
 800909e:	f000 fa6b 	bl	8009578 <__assert_func>
	assert(0 <= numBits && numBits <= 16 && (unsigned long)val >> numBits == 0);
 80090a2:	09a3      	lsrs	r3, r4, #6
 80090a4:	d158      	bne.n	8009158 <qrcodegen_makeAlphanumeric+0x294>
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 80090a6:	4643      	mov	r3, r8
 80090a8:	10d9      	asrs	r1, r3, #3
 80090aa:	2307      	movs	r3, #7
 80090ac:	4647      	mov	r7, r8
 80090ae:	0018      	movs	r0, r3
 80090b0:	0962      	lsrs	r2, r4, #5
 80090b2:	43b8      	bics	r0, r7
 80090b4:	4082      	lsls	r2, r0
 80090b6:	5c68      	ldrb	r0, [r5, r1]
 80090b8:	4302      	orrs	r2, r0
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 80090ba:	1c78      	adds	r0, r7, #1
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 80090bc:	001f      	movs	r7, r3
 80090be:	546a      	strb	r2, [r5, r1]
 80090c0:	0922      	lsrs	r2, r4, #4
 80090c2:	4387      	bics	r7, r0
 80090c4:	4032      	ands	r2, r6
 80090c6:	40ba      	lsls	r2, r7
 80090c8:	10c1      	asrs	r1, r0, #3
 80090ca:	5c68      	ldrb	r0, [r5, r1]
 80090cc:	001f      	movs	r7, r3
 80090ce:	4302      	orrs	r2, r0
 80090d0:	546a      	strb	r2, [r5, r1]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 80090d2:	4642      	mov	r2, r8
 80090d4:	1c90      	adds	r0, r2, #2
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 80090d6:	08e2      	lsrs	r2, r4, #3
 80090d8:	4387      	bics	r7, r0
 80090da:	4032      	ands	r2, r6
 80090dc:	40ba      	lsls	r2, r7
 80090de:	10c1      	asrs	r1, r0, #3
 80090e0:	5c68      	ldrb	r0, [r5, r1]
 80090e2:	001f      	movs	r7, r3
 80090e4:	4302      	orrs	r2, r0
 80090e6:	546a      	strb	r2, [r5, r1]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 80090e8:	4642      	mov	r2, r8
 80090ea:	1cd0      	adds	r0, r2, #3
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 80090ec:	08a2      	lsrs	r2, r4, #2
 80090ee:	4387      	bics	r7, r0
 80090f0:	4032      	ands	r2, r6
 80090f2:	40ba      	lsls	r2, r7
 80090f4:	10c1      	asrs	r1, r0, #3
 80090f6:	5c68      	ldrb	r0, [r5, r1]
 80090f8:	001f      	movs	r7, r3
 80090fa:	4302      	orrs	r2, r0
 80090fc:	546a      	strb	r2, [r5, r1]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 80090fe:	4642      	mov	r2, r8
 8009100:	1d10      	adds	r0, r2, #4
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8009102:	0862      	lsrs	r2, r4, #1
 8009104:	4032      	ands	r2, r6
 8009106:	4387      	bics	r7, r0
 8009108:	40ba      	lsls	r2, r7
 800910a:	10c1      	asrs	r1, r0, #3
 800910c:	5c68      	ldrb	r0, [r5, r1]
 800910e:	4026      	ands	r6, r4
 8009110:	4302      	orrs	r2, r0
 8009112:	546a      	strb	r2, [r5, r1]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8009114:	4642      	mov	r2, r8
 8009116:	1d51      	adds	r1, r2, #5
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8009118:	438b      	bics	r3, r1
 800911a:	409e      	lsls	r6, r3
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 800911c:	2306      	movs	r3, #6
 800911e:	469c      	mov	ip, r3
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8009120:	10ca      	asrs	r2, r1, #3
 8009122:	5cac      	ldrb	r4, [r5, r2]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 8009124:	44e0      	add	r8, ip
		buffer[*bitLen >> 3] |= ((val >> i) & 1) << (7 - (*bitLen & 7));
 8009126:	4326      	orrs	r6, r4
 8009128:	54ae      	strb	r6, [r5, r2]
	for (int i = numBits - 1; i >= 0; i--, (*bitLen)++)
 800912a:	e796      	b.n	800905a <qrcodegen_makeAlphanumeric+0x196>
	result.bitLength = 0;
 800912c:	2300      	movs	r3, #0
 800912e:	4698      	mov	r8, r3
 8009130:	e796      	b.n	8009060 <qrcodegen_makeAlphanumeric+0x19c>
		assert(temp != NULL);
 8009132:	21ec      	movs	r1, #236	; 0xec
 8009134:	4b11      	ldr	r3, [pc, #68]	; (800917c <qrcodegen_makeAlphanumeric+0x2b8>)
 8009136:	4a0e      	ldr	r2, [pc, #56]	; (8009170 <qrcodegen_makeAlphanumeric+0x2ac>)
 8009138:	480f      	ldr	r0, [pc, #60]	; (8009178 <qrcodegen_makeAlphanumeric+0x2b4>)
 800913a:	0089      	lsls	r1, r1, #2
 800913c:	f000 fa1c 	bl	8009578 <__assert_func>
	assert(0 <= numBits && numBits <= 16 && (unsigned long)val >> numBits == 0);
 8009140:	21bd      	movs	r1, #189	; 0xbd
 8009142:	4b0f      	ldr	r3, [pc, #60]	; (8009180 <qrcodegen_makeAlphanumeric+0x2bc>)
 8009144:	4a0f      	ldr	r2, [pc, #60]	; (8009184 <qrcodegen_makeAlphanumeric+0x2c0>)
 8009146:	480c      	ldr	r0, [pc, #48]	; (8009178 <qrcodegen_makeAlphanumeric+0x2b4>)
 8009148:	f000 fa16 	bl	8009578 <__assert_func>
	assert(bitLen != LENGTH_OVERFLOW);
 800914c:	4b0e      	ldr	r3, [pc, #56]	; (8009188 <qrcodegen_makeAlphanumeric+0x2c4>)
 800914e:	4a08      	ldr	r2, [pc, #32]	; (8009170 <qrcodegen_makeAlphanumeric+0x2ac>)
 8009150:	490e      	ldr	r1, [pc, #56]	; (800918c <qrcodegen_makeAlphanumeric+0x2c8>)
 8009152:	4809      	ldr	r0, [pc, #36]	; (8009178 <qrcodegen_makeAlphanumeric+0x2b4>)
 8009154:	f000 fa10 	bl	8009578 <__assert_func>
 8009158:	f7fc faea 	bl	8005730 <appendBitsToBuffer.part.0>
	assert(text != NULL);
 800915c:	4b0c      	ldr	r3, [pc, #48]	; (8009190 <qrcodegen_makeAlphanumeric+0x2cc>)
 800915e:	4a04      	ldr	r2, [pc, #16]	; (8009170 <qrcodegen_makeAlphanumeric+0x2ac>)
 8009160:	490c      	ldr	r1, [pc, #48]	; (8009194 <qrcodegen_makeAlphanumeric+0x2d0>)
 8009162:	4805      	ldr	r0, [pc, #20]	; (8009178 <qrcodegen_makeAlphanumeric+0x2b4>)
 8009164:	f000 fa08 	bl	8009578 <__assert_func>
 8009168:	0800e65c 	.word	0x0800e65c
 800916c:	0800e6d0 	.word	0x0800e6d0
 8009170:	0800e844 	.word	0x0800e844
 8009174:	000003bb 	.word	0x000003bb
 8009178:	0800e204 	.word	0x0800e204
 800917c:	0800e6ec 	.word	0x0800e6ec
 8009180:	0800e220 	.word	0x0800e220
 8009184:	0800e948 	.word	0x0800e948
 8009188:	0800e69c 	.word	0x0800e69c
 800918c:	000003a6 	.word	0x000003a6
 8009190:	0800e64c 	.word	0x0800e64c
 8009194:	000003a1 	.word	0x000003a1

08009198 <qrcodegen_encodeText>:
		enum qrcodegen_Ecc ecl, int minVersion, int maxVersion, enum qrcodegen_Mask mask, bool boostEcl) {
 8009198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800919a:	46de      	mov	lr, fp
 800919c:	4657      	mov	r7, sl
 800919e:	4645      	mov	r5, r8
 80091a0:	464e      	mov	r6, r9
 80091a2:	b5e0      	push	{r5, r6, r7, lr}
 80091a4:	b091      	sub	sp, #68	; 0x44
 80091a6:	469a      	mov	sl, r3
 80091a8:	ab1c      	add	r3, sp, #112	; 0x70
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	0005      	movs	r5, r0
 80091ae:	b25b      	sxtb	r3, r3
 80091b0:	9306      	str	r3, [sp, #24]
 80091b2:	ab1d      	add	r3, sp, #116	; 0x74
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	000f      	movs	r7, r1
 80091b8:	4690      	mov	r8, r2
 80091ba:	469b      	mov	fp, r3
	size_t textLen = strlen(text);
 80091bc:	f7f6 ffa4 	bl	8000108 <strlen>
 80091c0:	1e06      	subs	r6, r0, #0
	if (textLen == 0)
 80091c2:	d100      	bne.n	80091c6 <qrcodegen_encodeText+0x2e>
 80091c4:	e09a      	b.n	80092fc <qrcodegen_encodeText+0x164>
	size_t bufLen = (size_t)qrcodegen_BUFFER_LEN_FOR_VERSION(maxVersion);
 80091c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
	for (; *text != '\0'; text++) {
 80091c8:	7829      	ldrb	r1, [r5, #0]
	size_t bufLen = (size_t)qrcodegen_BUFFER_LEN_FOR_VERSION(maxVersion);
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	3311      	adds	r3, #17
 80091ce:	435b      	muls	r3, r3
 80091d0:	3307      	adds	r3, #7
 80091d2:	10db      	asrs	r3, r3, #3
 80091d4:	3301      	adds	r3, #1
 80091d6:	9307      	str	r3, [sp, #28]
	for (; *text != '\0'; text++) {
 80091d8:	2900      	cmp	r1, #0
 80091da:	d06e      	beq.n	80092ba <qrcodegen_encodeText+0x122>
 80091dc:	000b      	movs	r3, r1
 80091de:	002a      	movs	r2, r5
 80091e0:	e003      	b.n	80091ea <qrcodegen_encodeText+0x52>
 80091e2:	7853      	ldrb	r3, [r2, #1]
 80091e4:	3201      	adds	r2, #1
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d067      	beq.n	80092ba <qrcodegen_encodeText+0x122>
		if (*text < '0' || *text > '9')
 80091ea:	3b30      	subs	r3, #48	; 0x30
 80091ec:	2b09      	cmp	r3, #9
 80091ee:	d9f8      	bls.n	80091e2 <qrcodegen_encodeText+0x4a>
 80091f0:	4b5d      	ldr	r3, [pc, #372]	; (8009368 <qrcodegen_encodeText+0x1d0>)
 80091f2:	002c      	movs	r4, r5
 80091f4:	4699      	mov	r9, r3
 80091f6:	e004      	b.n	8009202 <qrcodegen_encodeText+0x6a>
	for (; *text != '\0'; text++) {
 80091f8:	7861      	ldrb	r1, [r4, #1]
 80091fa:	3401      	adds	r4, #1
 80091fc:	2900      	cmp	r1, #0
 80091fe:	d100      	bne.n	8009202 <qrcodegen_encodeText+0x6a>
 8009200:	e08c      	b.n	800931c <qrcodegen_encodeText+0x184>
		if (strchr(ALPHANUMERIC_CHARSET, *text) == NULL)
 8009202:	4648      	mov	r0, r9
 8009204:	f000 fdce 	bl	8009da4 <strchr>
 8009208:	2800      	cmp	r0, #0
 800920a:	d1f5      	bne.n	80091f8 <qrcodegen_encodeText+0x60>
		if (textLen > bufLen)
 800920c:	9b07      	ldr	r3, [sp, #28]
 800920e:	429e      	cmp	r6, r3
 8009210:	d848      	bhi.n	80092a4 <qrcodegen_encodeText+0x10c>
 8009212:	2302      	movs	r3, #2
 8009214:	1c6a      	adds	r2, r5, #1
 8009216:	1aba      	subs	r2, r7, r2
 8009218:	0039      	movs	r1, r7
 800921a:	4293      	cmp	r3, r2
 800921c:	419b      	sbcs	r3, r3
 800921e:	2203      	movs	r2, #3
 8009220:	4329      	orrs	r1, r5
 8009222:	400a      	ands	r2, r1
 8009224:	4251      	negs	r1, r2
 8009226:	414a      	adcs	r2, r1
 8009228:	425b      	negs	r3, r3
 800922a:	421a      	tst	r2, r3
 800922c:	d100      	bne.n	8009230 <qrcodegen_encodeText+0x98>
 800922e:	e093      	b.n	8009358 <qrcodegen_encodeText+0x1c0>
 8009230:	1e73      	subs	r3, r6, #1
 8009232:	2b08      	cmp	r3, #8
 8009234:	d800      	bhi.n	8009238 <qrcodegen_encodeText+0xa0>
 8009236:	e08f      	b.n	8009358 <qrcodegen_encodeText+0x1c0>
 8009238:	2300      	movs	r3, #0
 800923a:	08b2      	lsrs	r2, r6, #2
 800923c:	0092      	lsls	r2, r2, #2
			tempBuffer[i] = (uint8_t)text[i];
 800923e:	58e9      	ldr	r1, [r5, r3]
 8009240:	50f9      	str	r1, [r7, r3]
		for (size_t i = 0; i < textLen; i++)
 8009242:	3304      	adds	r3, #4
 8009244:	4293      	cmp	r3, r2
 8009246:	d1fa      	bne.n	800923e <qrcodegen_encodeText+0xa6>
 8009248:	2203      	movs	r2, #3
 800924a:	0033      	movs	r3, r6
 800924c:	4393      	bics	r3, r2
 800924e:	4232      	tst	r2, r6
 8009250:	d00b      	beq.n	800926a <qrcodegen_encodeText+0xd2>
			tempBuffer[i] = (uint8_t)text[i];
 8009252:	5cea      	ldrb	r2, [r5, r3]
 8009254:	54fa      	strb	r2, [r7, r3]
		for (size_t i = 0; i < textLen; i++)
 8009256:	1c5a      	adds	r2, r3, #1
 8009258:	4296      	cmp	r6, r2
 800925a:	d906      	bls.n	800926a <qrcodegen_encodeText+0xd2>
			tempBuffer[i] = (uint8_t)text[i];
 800925c:	5ca9      	ldrb	r1, [r5, r2]
		for (size_t i = 0; i < textLen; i++)
 800925e:	3302      	adds	r3, #2
			tempBuffer[i] = (uint8_t)text[i];
 8009260:	54b9      	strb	r1, [r7, r2]
		for (size_t i = 0; i < textLen; i++)
 8009262:	429e      	cmp	r6, r3
 8009264:	d901      	bls.n	800926a <qrcodegen_encodeText+0xd2>
			tempBuffer[i] = (uint8_t)text[i];
 8009266:	5cea      	ldrb	r2, [r5, r3]
 8009268:	54fa      	strb	r2, [r7, r3]
		seg.mode = qrcodegen_Mode_BYTE;
 800926a:	2304      	movs	r3, #4
	if (numChars > (unsigned int)INT16_MAX)
 800926c:	2280      	movs	r2, #128	; 0x80
		seg.mode = qrcodegen_Mode_BYTE;
 800926e:	ac0c      	add	r4, sp, #48	; 0x30
 8009270:	7023      	strb	r3, [r4, #0]
	if (numChars > (unsigned int)INT16_MAX)
 8009272:	0212      	lsls	r2, r2, #8
 8009274:	4296      	cmp	r6, r2
 8009276:	d215      	bcs.n	80092a4 <qrcodegen_encodeText+0x10c>
		result *= 8;
 8009278:	00f3      	lsls	r3, r6, #3
	if (result > INT16_MAX)
 800927a:	4293      	cmp	r3, r2
 800927c:	da12      	bge.n	80092a4 <qrcodegen_encodeText+0x10c>
		seg.bitLength = calcSegmentBitLength(seg.mode, textLen);
 800927e:	930f      	str	r3, [sp, #60]	; 0x3c
		seg.numChars = (int)textLen;
 8009280:	960d      	str	r6, [sp, #52]	; 0x34
		seg.data = tempBuffer;
 8009282:	970e      	str	r7, [sp, #56]	; 0x38
	return qrcodegen_encodeSegmentsAdvanced(&seg, 1, ecl, minVersion, maxVersion, mask, boostEcl, tempBuffer, qrcode);
 8009284:	4643      	mov	r3, r8
 8009286:	9304      	str	r3, [sp, #16]
 8009288:	465b      	mov	r3, fp
 800928a:	9302      	str	r3, [sp, #8]
 800928c:	9b06      	ldr	r3, [sp, #24]
 800928e:	4652      	mov	r2, sl
 8009290:	9301      	str	r3, [sp, #4]
 8009292:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009294:	2101      	movs	r1, #1
 8009296:	9300      	str	r3, [sp, #0]
 8009298:	0020      	movs	r0, r4
 800929a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800929c:	9703      	str	r7, [sp, #12]
 800929e:	f7fd ff35 	bl	800710c <qrcodegen_encodeSegmentsAdvanced>
 80092a2:	e003      	b.n	80092ac <qrcodegen_encodeText+0x114>
	qrcode[0] = 0;  // Set size to invalid value for safety
 80092a4:	2300      	movs	r3, #0
 80092a6:	4642      	mov	r2, r8
	return false;
 80092a8:	2000      	movs	r0, #0
	qrcode[0] = 0;  // Set size to invalid value for safety
 80092aa:	7013      	strb	r3, [r2, #0]
}
 80092ac:	b011      	add	sp, #68	; 0x44
 80092ae:	bcf0      	pop	{r4, r5, r6, r7}
 80092b0:	46bb      	mov	fp, r7
 80092b2:	46b2      	mov	sl, r6
 80092b4:	46a9      	mov	r9, r5
 80092b6:	46a0      	mov	r8, r4
 80092b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (numChars > (unsigned int)INT16_MAX)
 80092ba:	2380      	movs	r3, #128	; 0x80
 80092bc:	021b      	lsls	r3, r3, #8
 80092be:	429e      	cmp	r6, r3
 80092c0:	d2f0      	bcs.n	80092a4 <qrcodegen_encodeText+0x10c>
		result = (result * 10 + 2) / 3;  // ceil(10/3 * n)
 80092c2:	00b0      	lsls	r0, r6, #2
 80092c4:	1986      	adds	r6, r0, r6
 80092c6:	0076      	lsls	r6, r6, #1
 80092c8:	2103      	movs	r1, #3
 80092ca:	1cb0      	adds	r0, r6, #2
 80092cc:	f7f6 ffb8 	bl	8000240 <__divsi3>
	if (result > INT16_MAX)
 80092d0:	4a26      	ldr	r2, [pc, #152]	; (800936c <qrcodegen_encodeText+0x1d4>)
		result = (result * 10 + 2) / 3;  // ceil(10/3 * n)
 80092d2:	0003      	movs	r3, r0
	if (result > INT16_MAX)
 80092d4:	4296      	cmp	r6, r2
 80092d6:	dce5      	bgt.n	80092a4 <qrcodegen_encodeText+0x10c>
		if (qrcodegen_calcSegmentBufferSize(qrcodegen_Mode_NUMERIC, textLen) > bufLen)
 80092d8:	9a07      	ldr	r2, [sp, #28]
	return ((size_t)temp + 7) / 8;
 80092da:	3307      	adds	r3, #7
 80092dc:	08db      	lsrs	r3, r3, #3
		if (qrcodegen_calcSegmentBufferSize(qrcodegen_Mode_NUMERIC, textLen) > bufLen)
 80092de:	429a      	cmp	r2, r3
 80092e0:	d3e0      	bcc.n	80092a4 <qrcodegen_encodeText+0x10c>
		seg = qrcodegen_makeNumeric(text, tempBuffer);
 80092e2:	ae08      	add	r6, sp, #32
 80092e4:	003a      	movs	r2, r7
 80092e6:	0029      	movs	r1, r5
 80092e8:	0030      	movs	r0, r6
 80092ea:	ac0c      	add	r4, sp, #48	; 0x30
 80092ec:	f7ff fb56 	bl	800899c <qrcodegen_makeNumeric>
 80092f0:	0023      	movs	r3, r4
 80092f2:	ce07      	ldmia	r6!, {r0, r1, r2}
 80092f4:	c307      	stmia	r3!, {r0, r1, r2}
 80092f6:	6832      	ldr	r2, [r6, #0]
 80092f8:	601a      	str	r2, [r3, #0]
 80092fa:	e7c3      	b.n	8009284 <qrcodegen_encodeText+0xec>
		return qrcodegen_encodeSegmentsAdvanced(NULL, 0, ecl, minVersion, maxVersion, mask, boostEcl, tempBuffer, qrcode);
 80092fc:	4643      	mov	r3, r8
 80092fe:	9304      	str	r3, [sp, #16]
 8009300:	465b      	mov	r3, fp
 8009302:	9302      	str	r3, [sp, #8]
 8009304:	9b06      	ldr	r3, [sp, #24]
 8009306:	4652      	mov	r2, sl
 8009308:	9301      	str	r3, [sp, #4]
 800930a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800930c:	2100      	movs	r1, #0
 800930e:	9300      	str	r3, [sp, #0]
 8009310:	9703      	str	r7, [sp, #12]
 8009312:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009314:	2000      	movs	r0, #0
 8009316:	f7fd fef9 	bl	800710c <qrcodegen_encodeSegmentsAdvanced>
 800931a:	e7c7      	b.n	80092ac <qrcodegen_encodeText+0x114>
	if (numChars > (unsigned int)INT16_MAX)
 800931c:	2280      	movs	r2, #128	; 0x80
 800931e:	0212      	lsls	r2, r2, #8
 8009320:	4296      	cmp	r6, r2
 8009322:	d2bf      	bcs.n	80092a4 <qrcodegen_encodeText+0x10c>
		result = (result * 11 + 1) / 2;  // ceil(11/2 * n)
 8009324:	00b3      	lsls	r3, r6, #2
 8009326:	199b      	adds	r3, r3, r6
 8009328:	005b      	lsls	r3, r3, #1
 800932a:	199e      	adds	r6, r3, r6
 800932c:	3601      	adds	r6, #1
 800932e:	1073      	asrs	r3, r6, #1
	if (result > INT16_MAX)
 8009330:	4293      	cmp	r3, r2
 8009332:	dab7      	bge.n	80092a4 <qrcodegen_encodeText+0x10c>
		if (qrcodegen_calcSegmentBufferSize(qrcodegen_Mode_ALPHANUMERIC, textLen) > bufLen)
 8009334:	9a07      	ldr	r2, [sp, #28]
	return ((size_t)temp + 7) / 8;
 8009336:	3307      	adds	r3, #7
 8009338:	08db      	lsrs	r3, r3, #3
		if (qrcodegen_calcSegmentBufferSize(qrcodegen_Mode_ALPHANUMERIC, textLen) > bufLen)
 800933a:	429a      	cmp	r2, r3
 800933c:	d3b2      	bcc.n	80092a4 <qrcodegen_encodeText+0x10c>
		seg = qrcodegen_makeAlphanumeric(text, tempBuffer);
 800933e:	ae08      	add	r6, sp, #32
 8009340:	003a      	movs	r2, r7
 8009342:	0029      	movs	r1, r5
 8009344:	0030      	movs	r0, r6
 8009346:	ac0c      	add	r4, sp, #48	; 0x30
 8009348:	f7ff fdbc 	bl	8008ec4 <qrcodegen_makeAlphanumeric>
 800934c:	0023      	movs	r3, r4
 800934e:	ce07      	ldmia	r6!, {r0, r1, r2}
 8009350:	c307      	stmia	r3!, {r0, r1, r2}
 8009352:	6832      	ldr	r2, [r6, #0]
 8009354:	601a      	str	r2, [r3, #0]
 8009356:	e795      	b.n	8009284 <qrcodegen_encodeText+0xec>
		for (size_t i = 0; i < textLen; i++)
 8009358:	2300      	movs	r3, #0
			tempBuffer[i] = (uint8_t)text[i];
 800935a:	5cea      	ldrb	r2, [r5, r3]
 800935c:	54fa      	strb	r2, [r7, r3]
		for (size_t i = 0; i < textLen; i++)
 800935e:	3301      	adds	r3, #1
 8009360:	429e      	cmp	r6, r3
 8009362:	d1fa      	bne.n	800935a <qrcodegen_encodeText+0x1c2>
 8009364:	e781      	b.n	800926a <qrcodegen_encodeText+0xd2>
 8009366:	46c0      	nop			; (mov r8, r8)
 8009368:	0800e65c 	.word	0x0800e65c
 800936c:	00017ffd 	.word	0x00017ffd

08009370 <ST25DV_ReadData>:
  * @param  TarAddr I2C data memory address to read.
  * @param  NbByte  Number of bytes to be read.
  * @return int32_t enum status.
  */
int32_t ST25DV_ReadData(ST25DV_Object_t* pObj,  uint8_t * const pData, const uint16_t TarAddr, const uint16_t NbByte )
{
 8009370:	b570      	push	{r4, r5, r6, lr}
 8009372:	000c      	movs	r4, r1
  /* Read Data in user memory */
  return pObj->IO.Read(ST25DV_ADDR_DATA_I2C, TarAddr, pData, NbByte );
 8009374:	6905      	ldr	r5, [r0, #16]
{
 8009376:	0011      	movs	r1, r2
  return pObj->IO.Read(ST25DV_ADDR_DATA_I2C, TarAddr, pData, NbByte );
 8009378:	20a6      	movs	r0, #166	; 0xa6
 800937a:	0022      	movs	r2, r4
 800937c:	47a8      	blx	r5
}
 800937e:	bd70      	pop	{r4, r5, r6, pc}

08009380 <ReadRegWrap>:
  /* Read actual value of MBLEN_DYN register */
  return ST25DV_GetMBLEN_DYN_MBLEN( &(pObj->Ctx),pMBLength );
}

static int32_t ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t len)
{
 8009380:	b510      	push	{r4, lr}
  ST25DV_Object_t *pObj = (ST25DV_Object_t *)handle;
  if(Reg & (ST25DV_IS_DYNAMIC_REGISTER))
 8009382:	048c      	lsls	r4, r1, #18
 8009384:	d503      	bpl.n	800938e <ReadRegWrap+0xe>
  {
    return pObj->IO.Read(ST25DV_ADDR_DATA_I2C, Reg, pData, len);
 8009386:	6904      	ldr	r4, [r0, #16]
 8009388:	20a6      	movs	r0, #166	; 0xa6
 800938a:	47a0      	blx	r4
  } else {
    return pObj->IO.Read(ST25DV_ADDR_SYST_I2C, Reg, pData, len);
  }
}
 800938c:	bd10      	pop	{r4, pc}
    return pObj->IO.Read(ST25DV_ADDR_SYST_I2C, Reg, pData, len);
 800938e:	6904      	ldr	r4, [r0, #16]
 8009390:	20ae      	movs	r0, #174	; 0xae
 8009392:	47a0      	blx	r4
 8009394:	e7fa      	b.n	800938c <ReadRegWrap+0xc>
 8009396:	46c0      	nop			; (mov r8, r8)

08009398 <WriteRegWrap>:

static int32_t WriteRegWrap(void *handle, uint16_t Reg, const uint8_t* pData, uint16_t len)
{
 8009398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800939a:	0005      	movs	r5, r0
  int32_t ret;
  ST25DV_Object_t *pObj = (ST25DV_Object_t *)handle;
  if(Reg & (ST25DV_IS_DYNAMIC_REGISTER))
 800939c:	0488      	lsls	r0, r1, #18
 800939e:	d41a      	bmi.n	80093d6 <WriteRegWrap+0x3e>
  {
    return pObj->IO.Write(ST25DV_ADDR_DATA_I2C, Reg, pData, len);
  } else {
    ret = pObj->IO.Write(ST25DV_ADDR_SYST_I2C, Reg, pData, len);
 80093a0:	68ec      	ldr	r4, [r5, #12]
 80093a2:	20ae      	movs	r0, #174	; 0xae
 80093a4:	47a0      	blx	r4
 80093a6:	1e04      	subs	r4, r0, #0
  }

  if( ret == NFCTAG_OK )
 80093a8:	d113      	bne.n	80093d2 <WriteRegWrap+0x3a>
  {
    int32_t pollstatus;
    /* Poll until EEPROM is available */
    int32_t tickstart = pObj->IO.GetTick();
 80093aa:	696b      	ldr	r3, [r5, #20]
 80093ac:	4798      	blx	r3
    /* Wait until ST25DV is ready or timeout occurs */
    do
    {
      pollstatus = pObj->IO.IsReady( ST25DV_ADDR_SYST_I2C, 1 );
    } while( ( (uint32_t)(pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 80093ae:	27a0      	movs	r7, #160	; 0xa0
    int32_t tickstart = pObj->IO.GetTick();
 80093b0:	0006      	movs	r6, r0
    } while( ( (uint32_t)(pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 80093b2:	007f      	lsls	r7, r7, #1
 80093b4:	e001      	b.n	80093ba <WriteRegWrap+0x22>
 80093b6:	2c00      	cmp	r4, #0
 80093b8:	d00b      	beq.n	80093d2 <WriteRegWrap+0x3a>
      pollstatus = pObj->IO.IsReady( ST25DV_ADDR_SYST_I2C, 1 );
 80093ba:	2101      	movs	r1, #1
 80093bc:	68ab      	ldr	r3, [r5, #8]
 80093be:	20ae      	movs	r0, #174	; 0xae
 80093c0:	4798      	blx	r3
    } while( ( (uint32_t)(pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 80093c2:	696b      	ldr	r3, [r5, #20]
      pollstatus = pObj->IO.IsReady( ST25DV_ADDR_SYST_I2C, 1 );
 80093c4:	0004      	movs	r4, r0
    } while( ( (uint32_t)(pObj->IO.GetTick() - (int32_t)tickstart) < ST25DV_WRITE_TIMEOUT) && (pollstatus != NFCTAG_OK) );
 80093c6:	4798      	blx	r3
 80093c8:	1b80      	subs	r0, r0, r6
 80093ca:	42b8      	cmp	r0, r7
 80093cc:	d3f3      	bcc.n	80093b6 <WriteRegWrap+0x1e>
    
    if( pollstatus != NFCTAG_OK )
 80093ce:	2c00      	cmp	r4, #0
 80093d0:	d106      	bne.n	80093e0 <WriteRegWrap+0x48>
      ret = NFCTAG_TIMEOUT;
    }
  }

  return ret;
}
 80093d2:	0020      	movs	r0, r4
 80093d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return pObj->IO.Write(ST25DV_ADDR_DATA_I2C, Reg, pData, len);
 80093d6:	68ec      	ldr	r4, [r5, #12]
 80093d8:	20a6      	movs	r0, #166	; 0xa6
 80093da:	47a0      	blx	r4
 80093dc:	0004      	movs	r4, r0
 80093de:	e7f8      	b.n	80093d2 <WriteRegWrap+0x3a>
      ret = NFCTAG_TIMEOUT;
 80093e0:	2403      	movs	r4, #3
 80093e2:	4264      	negs	r4, r4
 80093e4:	e7f5      	b.n	80093d2 <WriteRegWrap+0x3a>
 80093e6:	46c0      	nop			; (mov r8, r8)

080093e8 <ST25DV_RegisterBusIO>:
{
 80093e8:	b510      	push	{r4, lr}
  if (pObj == NULL)
 80093ea:	2800      	cmp	r0, #0
 80093ec:	d017      	beq.n	800941e <ST25DV_RegisterBusIO+0x36>
    pObj->IO.DeInit      = pIO->DeInit;
 80093ee:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init        = pIO->Init;
 80093f0:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit      = pIO->DeInit;
 80093f2:	6042      	str	r2, [r0, #4]
    pObj->IO.Write       = pIO->Write;
 80093f4:	68ca      	ldr	r2, [r1, #12]
    pObj->IO.Init        = pIO->Init;
 80093f6:	6003      	str	r3, [r0, #0]
    pObj->IO.Write       = pIO->Write;
 80093f8:	60c2      	str	r2, [r0, #12]
    pObj->IO.Read        = pIO->Read;
 80093fa:	690a      	ldr	r2, [r1, #16]
 80093fc:	6102      	str	r2, [r0, #16]
    pObj->IO.IsReady     = pIO->IsReady;
 80093fe:	688a      	ldr	r2, [r1, #8]
 8009400:	6082      	str	r2, [r0, #8]
    pObj->IO.GetTick     = pIO->GetTick;
 8009402:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8009404:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick     = pIO->GetTick;
 8009406:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8009408:	4a06      	ldr	r2, [pc, #24]	; (8009424 <ST25DV_RegisterBusIO+0x3c>)
 800940a:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800940c:	4a06      	ldr	r2, [pc, #24]	; (8009428 <ST25DV_RegisterBusIO+0x40>)
 800940e:	6182      	str	r2, [r0, #24]
    if (pObj->IO.Init == NULL)
 8009410:	2b00      	cmp	r3, #0
 8009412:	d004      	beq.n	800941e <ST25DV_RegisterBusIO+0x36>
    } else if (pObj->IO.Init() != 0) {
 8009414:	4798      	blx	r3
 8009416:	1e43      	subs	r3, r0, #1
 8009418:	4198      	sbcs	r0, r3
 800941a:	4240      	negs	r0, r0
}
 800941c:	bd10      	pop	{r4, pc}
    ret = NFCTAG_ERROR;
 800941e:	2001      	movs	r0, #1
 8009420:	4240      	negs	r0, r0
 8009422:	e7fb      	b.n	800941c <ST25DV_RegisterBusIO+0x34>
 8009424:	08009381 	.word	0x08009381
 8009428:	08009399 	.word	0x08009399

0800942c <ST25DV_SetGPO_RFUSERSTATE>:
  *value = *value >> (ST25DV_GPO_RFUSERSTATE_SHIFT);
  return NFCTAG_OK;
}

int32_t ST25DV_SetGPO_RFUSERSTATE (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 800942c:	b570      	push	{r4, r5, r6, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	0004      	movs	r4, r0
  return ctx->ReadReg(ctx->handle, Reg, Data, len);
 8009432:	466a      	mov	r2, sp
{
 8009434:	000d      	movs	r5, r1
  return ctx->ReadReg(ctx->handle, Reg, Data, len);
 8009436:	2301      	movs	r3, #1
 8009438:	2100      	movs	r1, #0
 800943a:	6880      	ldr	r0, [r0, #8]
 800943c:	6866      	ldr	r6, [r4, #4]
 800943e:	3207      	adds	r2, #7
 8009440:	47b0      	blx	r6
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_GPO_REG), &reg_value, 1))
 8009442:	2800      	cmp	r0, #0
 8009444:	d113      	bne.n	800946e <ST25DV_SetGPO_RFUSERSTATE+0x42>
    return NFCTAG_ERROR;

  reg_value = ( (*value << (ST25DV_GPO_RFUSERSTATE_SHIFT)) & (ST25DV_GPO_RFUSERSTATE_MASK)) |
                (reg_value & ~(ST25DV_GPO_RFUSERSTATE_MASK));
 8009446:	466a      	mov	r2, sp
  reg_value = ( (*value << (ST25DV_GPO_RFUSERSTATE_SHIFT)) & (ST25DV_GPO_RFUSERSTATE_MASK)) |
 8009448:	2101      	movs	r1, #1
                (reg_value & ~(ST25DV_GPO_RFUSERSTATE_MASK));
 800944a:	79d2      	ldrb	r2, [r2, #7]
  reg_value = ( (*value << (ST25DV_GPO_RFUSERSTATE_SHIFT)) & (ST25DV_GPO_RFUSERSTATE_MASK)) |
 800944c:	782b      	ldrb	r3, [r5, #0]
                (reg_value & ~(ST25DV_GPO_RFUSERSTATE_MASK));
 800944e:	438a      	bics	r2, r1
  reg_value = ( (*value << (ST25DV_GPO_RFUSERSTATE_SHIFT)) & (ST25DV_GPO_RFUSERSTATE_MASK)) |
 8009450:	400b      	ands	r3, r1
 8009452:	4313      	orrs	r3, r2
 8009454:	466a      	mov	r2, sp
  return ctx->WriteReg(ctx->handle, Reg, Data, len);
 8009456:	68a0      	ldr	r0, [r4, #8]
  reg_value = ( (*value << (ST25DV_GPO_RFUSERSTATE_SHIFT)) & (ST25DV_GPO_RFUSERSTATE_MASK)) |
 8009458:	71d3      	strb	r3, [r2, #7]
  return ctx->WriteReg(ctx->handle, Reg, Data, len);
 800945a:	2100      	movs	r1, #0
 800945c:	2301      	movs	r3, #1
 800945e:	6824      	ldr	r4, [r4, #0]
 8009460:	3207      	adds	r2, #7
 8009462:	47a0      	blx	r4

  if( ST25DV_WriteReg(ctx, (ST25DV_GPO_REG), &reg_value, 1))
 8009464:	1e43      	subs	r3, r0, #1
 8009466:	4198      	sbcs	r0, r3
 8009468:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800946a:	b002      	add	sp, #8
 800946c:	bd70      	pop	{r4, r5, r6, pc}
    return NFCTAG_ERROR;
 800946e:	2001      	movs	r0, #1
 8009470:	4240      	negs	r0, r0
 8009472:	e7fa      	b.n	800946a <ST25DV_SetGPO_RFUSERSTATE+0x3e>

08009474 <ST25DV_SetGPO_RFWRITE>:
  *value = *value >> (ST25DV_GPO_RFWRITE_SHIFT);
  return NFCTAG_OK;
}

int32_t ST25DV_SetGPO_RFWRITE (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 8009474:	b570      	push	{r4, r5, r6, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	0004      	movs	r4, r0
  return ctx->ReadReg(ctx->handle, Reg, Data, len);
 800947a:	466a      	mov	r2, sp
{
 800947c:	000d      	movs	r5, r1
  return ctx->ReadReg(ctx->handle, Reg, Data, len);
 800947e:	2301      	movs	r3, #1
 8009480:	2100      	movs	r1, #0
 8009482:	6880      	ldr	r0, [r0, #8]
 8009484:	6866      	ldr	r6, [r4, #4]
 8009486:	3207      	adds	r2, #7
 8009488:	47b0      	blx	r6
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_GPO_REG), &reg_value, 1))
 800948a:	2800      	cmp	r0, #0
 800948c:	d114      	bne.n	80094b8 <ST25DV_SetGPO_RFWRITE+0x44>
    return NFCTAG_ERROR;

  reg_value = ( (*value << (ST25DV_GPO_RFWRITE_SHIFT)) & (ST25DV_GPO_RFWRITE_MASK)) |
                (reg_value & ~(ST25DV_GPO_RFWRITE_MASK));
 800948e:	466a      	mov	r2, sp
  reg_value = ( (*value << (ST25DV_GPO_RFWRITE_SHIFT)) & (ST25DV_GPO_RFWRITE_MASK)) |
 8009490:	2140      	movs	r1, #64	; 0x40
 8009492:	782b      	ldrb	r3, [r5, #0]
                (reg_value & ~(ST25DV_GPO_RFWRITE_MASK));
 8009494:	79d2      	ldrb	r2, [r2, #7]
  reg_value = ( (*value << (ST25DV_GPO_RFWRITE_SHIFT)) & (ST25DV_GPO_RFWRITE_MASK)) |
 8009496:	019b      	lsls	r3, r3, #6
                (reg_value & ~(ST25DV_GPO_RFWRITE_MASK));
 8009498:	438a      	bics	r2, r1
  reg_value = ( (*value << (ST25DV_GPO_RFWRITE_SHIFT)) & (ST25DV_GPO_RFWRITE_MASK)) |
 800949a:	400b      	ands	r3, r1
 800949c:	4313      	orrs	r3, r2
 800949e:	466a      	mov	r2, sp
  return ctx->WriteReg(ctx->handle, Reg, Data, len);
 80094a0:	68a0      	ldr	r0, [r4, #8]
  reg_value = ( (*value << (ST25DV_GPO_RFWRITE_SHIFT)) & (ST25DV_GPO_RFWRITE_MASK)) |
 80094a2:	71d3      	strb	r3, [r2, #7]
  return ctx->WriteReg(ctx->handle, Reg, Data, len);
 80094a4:	2100      	movs	r1, #0
 80094a6:	2301      	movs	r3, #1
 80094a8:	6824      	ldr	r4, [r4, #0]
 80094aa:	3207      	adds	r2, #7
 80094ac:	47a0      	blx	r4

  if( ST25DV_WriteReg(ctx, (ST25DV_GPO_REG), &reg_value, 1))
 80094ae:	1e43      	subs	r3, r0, #1
 80094b0:	4198      	sbcs	r0, r3
 80094b2:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 80094b4:	b002      	add	sp, #8
 80094b6:	bd70      	pop	{r4, r5, r6, pc}
    return NFCTAG_ERROR;
 80094b8:	2001      	movs	r0, #1
 80094ba:	4240      	negs	r0, r0
 80094bc:	e7fa      	b.n	80094b4 <ST25DV_SetGPO_RFWRITE+0x40>
 80094be:	46c0      	nop			; (mov r8, r8)

080094c0 <ST25DV_SetGPO_ENABLE>:
  *value = *value >> (ST25DV_GPO_ENABLE_SHIFT);
  return NFCTAG_OK;
}

int32_t ST25DV_SetGPO_ENABLE (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 80094c0:	b570      	push	{r4, r5, r6, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	0004      	movs	r4, r0
  return ctx->ReadReg(ctx->handle, Reg, Data, len);
 80094c6:	466a      	mov	r2, sp
{
 80094c8:	000d      	movs	r5, r1
  return ctx->ReadReg(ctx->handle, Reg, Data, len);
 80094ca:	2301      	movs	r3, #1
 80094cc:	2100      	movs	r1, #0
 80094ce:	6880      	ldr	r0, [r0, #8]
 80094d0:	6866      	ldr	r6, [r4, #4]
 80094d2:	3207      	adds	r2, #7
 80094d4:	47b0      	blx	r6
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_GPO_REG), &reg_value, 1))
 80094d6:	2800      	cmp	r0, #0
 80094d8:	d113      	bne.n	8009502 <ST25DV_SetGPO_ENABLE+0x42>
    return NFCTAG_ERROR;

  reg_value = ( (*value << (ST25DV_GPO_ENABLE_SHIFT)) & (ST25DV_GPO_ENABLE_MASK)) |
                (reg_value & ~(ST25DV_GPO_ENABLE_MASK));
 80094da:	466a      	mov	r2, sp
 80094dc:	79d1      	ldrb	r1, [r2, #7]
 80094de:	227f      	movs	r2, #127	; 0x7f
  reg_value = ( (*value << (ST25DV_GPO_ENABLE_SHIFT)) & (ST25DV_GPO_ENABLE_MASK)) |
 80094e0:	782b      	ldrb	r3, [r5, #0]
                (reg_value & ~(ST25DV_GPO_ENABLE_MASK));
 80094e2:	400a      	ands	r2, r1
  reg_value = ( (*value << (ST25DV_GPO_ENABLE_SHIFT)) & (ST25DV_GPO_ENABLE_MASK)) |
 80094e4:	01db      	lsls	r3, r3, #7
 80094e6:	4313      	orrs	r3, r2
 80094e8:	466a      	mov	r2, sp
  return ctx->WriteReg(ctx->handle, Reg, Data, len);
 80094ea:	68a0      	ldr	r0, [r4, #8]
  reg_value = ( (*value << (ST25DV_GPO_ENABLE_SHIFT)) & (ST25DV_GPO_ENABLE_MASK)) |
 80094ec:	71d3      	strb	r3, [r2, #7]
  return ctx->WriteReg(ctx->handle, Reg, Data, len);
 80094ee:	2100      	movs	r1, #0
 80094f0:	2301      	movs	r3, #1
 80094f2:	6824      	ldr	r4, [r4, #0]
 80094f4:	3207      	adds	r2, #7
 80094f6:	47a0      	blx	r4

  if( ST25DV_WriteReg(ctx, (ST25DV_GPO_REG), &reg_value, 1))
 80094f8:	1e43      	subs	r3, r0, #1
 80094fa:	4198      	sbcs	r0, r3
 80094fc:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 80094fe:	b002      	add	sp, #8
 8009500:	bd70      	pop	{r4, r5, r6, pc}
    return NFCTAG_ERROR;
 8009502:	2001      	movs	r0, #1
 8009504:	4240      	negs	r0, r0
 8009506:	e7fa      	b.n	80094fe <ST25DV_SetGPO_ENABLE+0x3e>

08009508 <ST25DV_GetEH_MODE>:
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}

int32_t ST25DV_GetEH_MODE (ST25DV_Ctx_t *ctx, uint8_t *value)
{
 8009508:	0003      	movs	r3, r0
 800950a:	b570      	push	{r4, r5, r6, lr}
  return ctx->ReadReg(ctx->handle, Reg, Data, len);
 800950c:	000a      	movs	r2, r1
{
 800950e:	000c      	movs	r4, r1
  return ctx->ReadReg(ctx->handle, Reg, Data, len);
 8009510:	685d      	ldr	r5, [r3, #4]
 8009512:	2102      	movs	r1, #2
 8009514:	2301      	movs	r3, #1
 8009516:	6880      	ldr	r0, [r0, #8]
 8009518:	47a8      	blx	r5
  if( ST25DV_ReadReg(ctx, (ST25DV_EH_MODE_REG), (uint8_t *)value, 1))
 800951a:	2800      	cmp	r0, #0
 800951c:	d104      	bne.n	8009528 <ST25DV_GetEH_MODE+0x20>
    return NFCTAG_ERROR;
  *value &= (ST25DV_EH_MODE_MASK);
 800951e:	2301      	movs	r3, #1
 8009520:	7822      	ldrb	r2, [r4, #0]
 8009522:	4013      	ands	r3, r2
 8009524:	7023      	strb	r3, [r4, #0]
  *value = *value >> (ST25DV_EH_MODE_SHIFT);
  return NFCTAG_OK;
}
 8009526:	bd70      	pop	{r4, r5, r6, pc}
    return NFCTAG_ERROR;
 8009528:	2001      	movs	r0, #1
 800952a:	4240      	negs	r0, r0
 800952c:	e7fb      	b.n	8009526 <ST25DV_GetEH_MODE+0x1e>
 800952e:	46c0      	nop			; (mov r8, r8)

08009530 <ST25DV_SetEH_MODE>:

int32_t ST25DV_SetEH_MODE (ST25DV_Ctx_t *ctx, const uint8_t *value)
{
 8009530:	b570      	push	{r4, r5, r6, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	0004      	movs	r4, r0
  return ctx->ReadReg(ctx->handle, Reg, Data, len);
 8009536:	466a      	mov	r2, sp
{
 8009538:	000d      	movs	r5, r1
  return ctx->ReadReg(ctx->handle, Reg, Data, len);
 800953a:	2301      	movs	r3, #1
 800953c:	2102      	movs	r1, #2
 800953e:	6880      	ldr	r0, [r0, #8]
 8009540:	6866      	ldr	r6, [r4, #4]
 8009542:	3207      	adds	r2, #7
 8009544:	47b0      	blx	r6
  uint8_t reg_value;
  if( ST25DV_ReadReg(ctx, (ST25DV_EH_MODE_REG), &reg_value, 1))
 8009546:	2800      	cmp	r0, #0
 8009548:	d113      	bne.n	8009572 <ST25DV_SetEH_MODE+0x42>
    return NFCTAG_ERROR;

  reg_value = ( (*value << (ST25DV_EH_MODE_SHIFT)) & (ST25DV_EH_MODE_MASK)) |
                (reg_value & ~(ST25DV_EH_MODE_MASK));
 800954a:	466a      	mov	r2, sp
  reg_value = ( (*value << (ST25DV_EH_MODE_SHIFT)) & (ST25DV_EH_MODE_MASK)) |
 800954c:	2101      	movs	r1, #1
                (reg_value & ~(ST25DV_EH_MODE_MASK));
 800954e:	79d2      	ldrb	r2, [r2, #7]
  reg_value = ( (*value << (ST25DV_EH_MODE_SHIFT)) & (ST25DV_EH_MODE_MASK)) |
 8009550:	782b      	ldrb	r3, [r5, #0]
                (reg_value & ~(ST25DV_EH_MODE_MASK));
 8009552:	438a      	bics	r2, r1
  reg_value = ( (*value << (ST25DV_EH_MODE_SHIFT)) & (ST25DV_EH_MODE_MASK)) |
 8009554:	400b      	ands	r3, r1
 8009556:	4313      	orrs	r3, r2
 8009558:	466a      	mov	r2, sp
  return ctx->WriteReg(ctx->handle, Reg, Data, len);
 800955a:	68a0      	ldr	r0, [r4, #8]
  reg_value = ( (*value << (ST25DV_EH_MODE_SHIFT)) & (ST25DV_EH_MODE_MASK)) |
 800955c:	71d3      	strb	r3, [r2, #7]
  return ctx->WriteReg(ctx->handle, Reg, Data, len);
 800955e:	6824      	ldr	r4, [r4, #0]
 8009560:	2301      	movs	r3, #1
 8009562:	3207      	adds	r2, #7
 8009564:	3101      	adds	r1, #1
 8009566:	47a0      	blx	r4

  if( ST25DV_WriteReg(ctx, (ST25DV_EH_MODE_REG), &reg_value, 1))
 8009568:	1e43      	subs	r3, r0, #1
 800956a:	4198      	sbcs	r0, r3
 800956c:	4240      	negs	r0, r0
    return NFCTAG_ERROR;
  return NFCTAG_OK;
}
 800956e:	b002      	add	sp, #8
 8009570:	bd70      	pop	{r4, r5, r6, pc}
    return NFCTAG_ERROR;
 8009572:	2001      	movs	r0, #1
 8009574:	4240      	negs	r0, r0
 8009576:	e7fa      	b.n	800956e <ST25DV_SetEH_MODE+0x3e>

08009578 <__assert_func>:
 8009578:	b530      	push	{r4, r5, lr}
 800957a:	0014      	movs	r4, r2
 800957c:	001a      	movs	r2, r3
 800957e:	4b09      	ldr	r3, [pc, #36]	; (80095a4 <__assert_func+0x2c>)
 8009580:	0005      	movs	r5, r0
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	b085      	sub	sp, #20
 8009586:	68d8      	ldr	r0, [r3, #12]
 8009588:	4b07      	ldr	r3, [pc, #28]	; (80095a8 <__assert_func+0x30>)
 800958a:	2c00      	cmp	r4, #0
 800958c:	d101      	bne.n	8009592 <__assert_func+0x1a>
 800958e:	4b07      	ldr	r3, [pc, #28]	; (80095ac <__assert_func+0x34>)
 8009590:	001c      	movs	r4, r3
 8009592:	9301      	str	r3, [sp, #4]
 8009594:	9100      	str	r1, [sp, #0]
 8009596:	002b      	movs	r3, r5
 8009598:	4905      	ldr	r1, [pc, #20]	; (80095b0 <__assert_func+0x38>)
 800959a:	9402      	str	r4, [sp, #8]
 800959c:	f000 f810 	bl	80095c0 <fiprintf>
 80095a0:	f000 fcf8 	bl	8009f94 <abort>
 80095a4:	20000024 	.word	0x20000024
 80095a8:	0800ea20 	.word	0x0800ea20
 80095ac:	0800ea5b 	.word	0x0800ea5b
 80095b0:	0800ea2d 	.word	0x0800ea2d

080095b4 <__errno>:
 80095b4:	4b01      	ldr	r3, [pc, #4]	; (80095bc <__errno+0x8>)
 80095b6:	6818      	ldr	r0, [r3, #0]
 80095b8:	4770      	bx	lr
 80095ba:	46c0      	nop			; (mov r8, r8)
 80095bc:	20000024 	.word	0x20000024

080095c0 <fiprintf>:
 80095c0:	b40e      	push	{r1, r2, r3}
 80095c2:	b503      	push	{r0, r1, lr}
 80095c4:	0001      	movs	r1, r0
 80095c6:	ab03      	add	r3, sp, #12
 80095c8:	4804      	ldr	r0, [pc, #16]	; (80095dc <fiprintf+0x1c>)
 80095ca:	cb04      	ldmia	r3!, {r2}
 80095cc:	6800      	ldr	r0, [r0, #0]
 80095ce:	9301      	str	r3, [sp, #4]
 80095d0:	f000 f876 	bl	80096c0 <_vfiprintf_r>
 80095d4:	b002      	add	sp, #8
 80095d6:	bc08      	pop	{r3}
 80095d8:	b003      	add	sp, #12
 80095da:	4718      	bx	r3
 80095dc:	20000024 	.word	0x20000024

080095e0 <__libc_init_array>:
 80095e0:	b570      	push	{r4, r5, r6, lr}
 80095e2:	2600      	movs	r6, #0
 80095e4:	4d0c      	ldr	r5, [pc, #48]	; (8009618 <__libc_init_array+0x38>)
 80095e6:	4c0d      	ldr	r4, [pc, #52]	; (800961c <__libc_init_array+0x3c>)
 80095e8:	1b64      	subs	r4, r4, r5
 80095ea:	10a4      	asrs	r4, r4, #2
 80095ec:	42a6      	cmp	r6, r4
 80095ee:	d109      	bne.n	8009604 <__libc_init_array+0x24>
 80095f0:	2600      	movs	r6, #0
 80095f2:	f001 fac7 	bl	800ab84 <_init>
 80095f6:	4d0a      	ldr	r5, [pc, #40]	; (8009620 <__libc_init_array+0x40>)
 80095f8:	4c0a      	ldr	r4, [pc, #40]	; (8009624 <__libc_init_array+0x44>)
 80095fa:	1b64      	subs	r4, r4, r5
 80095fc:	10a4      	asrs	r4, r4, #2
 80095fe:	42a6      	cmp	r6, r4
 8009600:	d105      	bne.n	800960e <__libc_init_array+0x2e>
 8009602:	bd70      	pop	{r4, r5, r6, pc}
 8009604:	00b3      	lsls	r3, r6, #2
 8009606:	58eb      	ldr	r3, [r5, r3]
 8009608:	4798      	blx	r3
 800960a:	3601      	adds	r6, #1
 800960c:	e7ee      	b.n	80095ec <__libc_init_array+0xc>
 800960e:	00b3      	lsls	r3, r6, #2
 8009610:	58eb      	ldr	r3, [r5, r3]
 8009612:	4798      	blx	r3
 8009614:	3601      	adds	r6, #1
 8009616:	e7f2      	b.n	80095fe <__libc_init_array+0x1e>
 8009618:	0800eafc 	.word	0x0800eafc
 800961c:	0800eafc 	.word	0x0800eafc
 8009620:	0800eafc 	.word	0x0800eafc
 8009624:	0800eb00 	.word	0x0800eb00

08009628 <memcpy>:
 8009628:	2300      	movs	r3, #0
 800962a:	b510      	push	{r4, lr}
 800962c:	429a      	cmp	r2, r3
 800962e:	d100      	bne.n	8009632 <memcpy+0xa>
 8009630:	bd10      	pop	{r4, pc}
 8009632:	5ccc      	ldrb	r4, [r1, r3]
 8009634:	54c4      	strb	r4, [r0, r3]
 8009636:	3301      	adds	r3, #1
 8009638:	e7f8      	b.n	800962c <memcpy+0x4>

0800963a <memmove>:
 800963a:	b510      	push	{r4, lr}
 800963c:	4288      	cmp	r0, r1
 800963e:	d902      	bls.n	8009646 <memmove+0xc>
 8009640:	188b      	adds	r3, r1, r2
 8009642:	4298      	cmp	r0, r3
 8009644:	d303      	bcc.n	800964e <memmove+0x14>
 8009646:	2300      	movs	r3, #0
 8009648:	e007      	b.n	800965a <memmove+0x20>
 800964a:	5c8b      	ldrb	r3, [r1, r2]
 800964c:	5483      	strb	r3, [r0, r2]
 800964e:	3a01      	subs	r2, #1
 8009650:	d2fb      	bcs.n	800964a <memmove+0x10>
 8009652:	bd10      	pop	{r4, pc}
 8009654:	5ccc      	ldrb	r4, [r1, r3]
 8009656:	54c4      	strb	r4, [r0, r3]
 8009658:	3301      	adds	r3, #1
 800965a:	429a      	cmp	r2, r3
 800965c:	d1fa      	bne.n	8009654 <memmove+0x1a>
 800965e:	e7f8      	b.n	8009652 <memmove+0x18>

08009660 <memset>:
 8009660:	0003      	movs	r3, r0
 8009662:	1882      	adds	r2, r0, r2
 8009664:	4293      	cmp	r3, r2
 8009666:	d100      	bne.n	800966a <memset+0xa>
 8009668:	4770      	bx	lr
 800966a:	7019      	strb	r1, [r3, #0]
 800966c:	3301      	adds	r3, #1
 800966e:	e7f9      	b.n	8009664 <memset+0x4>

08009670 <__sfputc_r>:
 8009670:	6893      	ldr	r3, [r2, #8]
 8009672:	b510      	push	{r4, lr}
 8009674:	3b01      	subs	r3, #1
 8009676:	6093      	str	r3, [r2, #8]
 8009678:	2b00      	cmp	r3, #0
 800967a:	da04      	bge.n	8009686 <__sfputc_r+0x16>
 800967c:	6994      	ldr	r4, [r2, #24]
 800967e:	42a3      	cmp	r3, r4
 8009680:	db07      	blt.n	8009692 <__sfputc_r+0x22>
 8009682:	290a      	cmp	r1, #10
 8009684:	d005      	beq.n	8009692 <__sfputc_r+0x22>
 8009686:	6813      	ldr	r3, [r2, #0]
 8009688:	1c58      	adds	r0, r3, #1
 800968a:	6010      	str	r0, [r2, #0]
 800968c:	7019      	strb	r1, [r3, #0]
 800968e:	0008      	movs	r0, r1
 8009690:	bd10      	pop	{r4, pc}
 8009692:	f000 fbb1 	bl	8009df8 <__swbuf_r>
 8009696:	0001      	movs	r1, r0
 8009698:	e7f9      	b.n	800968e <__sfputc_r+0x1e>

0800969a <__sfputs_r>:
 800969a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800969c:	0006      	movs	r6, r0
 800969e:	000f      	movs	r7, r1
 80096a0:	0014      	movs	r4, r2
 80096a2:	18d5      	adds	r5, r2, r3
 80096a4:	42ac      	cmp	r4, r5
 80096a6:	d101      	bne.n	80096ac <__sfputs_r+0x12>
 80096a8:	2000      	movs	r0, #0
 80096aa:	e007      	b.n	80096bc <__sfputs_r+0x22>
 80096ac:	7821      	ldrb	r1, [r4, #0]
 80096ae:	003a      	movs	r2, r7
 80096b0:	0030      	movs	r0, r6
 80096b2:	f7ff ffdd 	bl	8009670 <__sfputc_r>
 80096b6:	3401      	adds	r4, #1
 80096b8:	1c43      	adds	r3, r0, #1
 80096ba:	d1f3      	bne.n	80096a4 <__sfputs_r+0xa>
 80096bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096c0 <_vfiprintf_r>:
 80096c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096c2:	b0a1      	sub	sp, #132	; 0x84
 80096c4:	0006      	movs	r6, r0
 80096c6:	000c      	movs	r4, r1
 80096c8:	001f      	movs	r7, r3
 80096ca:	9203      	str	r2, [sp, #12]
 80096cc:	2800      	cmp	r0, #0
 80096ce:	d004      	beq.n	80096da <_vfiprintf_r+0x1a>
 80096d0:	6983      	ldr	r3, [r0, #24]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d101      	bne.n	80096da <_vfiprintf_r+0x1a>
 80096d6:	f000 fd93 	bl	800a200 <__sinit>
 80096da:	4b8e      	ldr	r3, [pc, #568]	; (8009914 <_vfiprintf_r+0x254>)
 80096dc:	429c      	cmp	r4, r3
 80096de:	d11c      	bne.n	800971a <_vfiprintf_r+0x5a>
 80096e0:	6874      	ldr	r4, [r6, #4]
 80096e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096e4:	07db      	lsls	r3, r3, #31
 80096e6:	d405      	bmi.n	80096f4 <_vfiprintf_r+0x34>
 80096e8:	89a3      	ldrh	r3, [r4, #12]
 80096ea:	059b      	lsls	r3, r3, #22
 80096ec:	d402      	bmi.n	80096f4 <_vfiprintf_r+0x34>
 80096ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096f0:	f000 fe27 	bl	800a342 <__retarget_lock_acquire_recursive>
 80096f4:	89a3      	ldrh	r3, [r4, #12]
 80096f6:	071b      	lsls	r3, r3, #28
 80096f8:	d502      	bpl.n	8009700 <_vfiprintf_r+0x40>
 80096fa:	6923      	ldr	r3, [r4, #16]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d11d      	bne.n	800973c <_vfiprintf_r+0x7c>
 8009700:	0021      	movs	r1, r4
 8009702:	0030      	movs	r0, r6
 8009704:	f000 fbce 	bl	8009ea4 <__swsetup_r>
 8009708:	2800      	cmp	r0, #0
 800970a:	d017      	beq.n	800973c <_vfiprintf_r+0x7c>
 800970c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800970e:	07db      	lsls	r3, r3, #31
 8009710:	d50d      	bpl.n	800972e <_vfiprintf_r+0x6e>
 8009712:	2001      	movs	r0, #1
 8009714:	4240      	negs	r0, r0
 8009716:	b021      	add	sp, #132	; 0x84
 8009718:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800971a:	4b7f      	ldr	r3, [pc, #508]	; (8009918 <_vfiprintf_r+0x258>)
 800971c:	429c      	cmp	r4, r3
 800971e:	d101      	bne.n	8009724 <_vfiprintf_r+0x64>
 8009720:	68b4      	ldr	r4, [r6, #8]
 8009722:	e7de      	b.n	80096e2 <_vfiprintf_r+0x22>
 8009724:	4b7d      	ldr	r3, [pc, #500]	; (800991c <_vfiprintf_r+0x25c>)
 8009726:	429c      	cmp	r4, r3
 8009728:	d1db      	bne.n	80096e2 <_vfiprintf_r+0x22>
 800972a:	68f4      	ldr	r4, [r6, #12]
 800972c:	e7d9      	b.n	80096e2 <_vfiprintf_r+0x22>
 800972e:	89a3      	ldrh	r3, [r4, #12]
 8009730:	059b      	lsls	r3, r3, #22
 8009732:	d4ee      	bmi.n	8009712 <_vfiprintf_r+0x52>
 8009734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009736:	f000 fe05 	bl	800a344 <__retarget_lock_release_recursive>
 800973a:	e7ea      	b.n	8009712 <_vfiprintf_r+0x52>
 800973c:	2300      	movs	r3, #0
 800973e:	ad08      	add	r5, sp, #32
 8009740:	616b      	str	r3, [r5, #20]
 8009742:	3320      	adds	r3, #32
 8009744:	766b      	strb	r3, [r5, #25]
 8009746:	3310      	adds	r3, #16
 8009748:	76ab      	strb	r3, [r5, #26]
 800974a:	9707      	str	r7, [sp, #28]
 800974c:	9f03      	ldr	r7, [sp, #12]
 800974e:	783b      	ldrb	r3, [r7, #0]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d001      	beq.n	8009758 <_vfiprintf_r+0x98>
 8009754:	2b25      	cmp	r3, #37	; 0x25
 8009756:	d14e      	bne.n	80097f6 <_vfiprintf_r+0x136>
 8009758:	9b03      	ldr	r3, [sp, #12]
 800975a:	1afb      	subs	r3, r7, r3
 800975c:	9305      	str	r3, [sp, #20]
 800975e:	9b03      	ldr	r3, [sp, #12]
 8009760:	429f      	cmp	r7, r3
 8009762:	d00d      	beq.n	8009780 <_vfiprintf_r+0xc0>
 8009764:	9b05      	ldr	r3, [sp, #20]
 8009766:	0021      	movs	r1, r4
 8009768:	0030      	movs	r0, r6
 800976a:	9a03      	ldr	r2, [sp, #12]
 800976c:	f7ff ff95 	bl	800969a <__sfputs_r>
 8009770:	1c43      	adds	r3, r0, #1
 8009772:	d100      	bne.n	8009776 <_vfiprintf_r+0xb6>
 8009774:	e0b5      	b.n	80098e2 <_vfiprintf_r+0x222>
 8009776:	696a      	ldr	r2, [r5, #20]
 8009778:	9b05      	ldr	r3, [sp, #20]
 800977a:	4694      	mov	ip, r2
 800977c:	4463      	add	r3, ip
 800977e:	616b      	str	r3, [r5, #20]
 8009780:	783b      	ldrb	r3, [r7, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d100      	bne.n	8009788 <_vfiprintf_r+0xc8>
 8009786:	e0ac      	b.n	80098e2 <_vfiprintf_r+0x222>
 8009788:	2201      	movs	r2, #1
 800978a:	1c7b      	adds	r3, r7, #1
 800978c:	9303      	str	r3, [sp, #12]
 800978e:	2300      	movs	r3, #0
 8009790:	4252      	negs	r2, r2
 8009792:	606a      	str	r2, [r5, #4]
 8009794:	a904      	add	r1, sp, #16
 8009796:	3254      	adds	r2, #84	; 0x54
 8009798:	1852      	adds	r2, r2, r1
 800979a:	602b      	str	r3, [r5, #0]
 800979c:	60eb      	str	r3, [r5, #12]
 800979e:	60ab      	str	r3, [r5, #8]
 80097a0:	7013      	strb	r3, [r2, #0]
 80097a2:	65ab      	str	r3, [r5, #88]	; 0x58
 80097a4:	9b03      	ldr	r3, [sp, #12]
 80097a6:	2205      	movs	r2, #5
 80097a8:	7819      	ldrb	r1, [r3, #0]
 80097aa:	485d      	ldr	r0, [pc, #372]	; (8009920 <_vfiprintf_r+0x260>)
 80097ac:	f000 fe38 	bl	800a420 <memchr>
 80097b0:	9b03      	ldr	r3, [sp, #12]
 80097b2:	1c5f      	adds	r7, r3, #1
 80097b4:	2800      	cmp	r0, #0
 80097b6:	d120      	bne.n	80097fa <_vfiprintf_r+0x13a>
 80097b8:	682a      	ldr	r2, [r5, #0]
 80097ba:	06d3      	lsls	r3, r2, #27
 80097bc:	d504      	bpl.n	80097c8 <_vfiprintf_r+0x108>
 80097be:	2353      	movs	r3, #83	; 0x53
 80097c0:	a904      	add	r1, sp, #16
 80097c2:	185b      	adds	r3, r3, r1
 80097c4:	2120      	movs	r1, #32
 80097c6:	7019      	strb	r1, [r3, #0]
 80097c8:	0713      	lsls	r3, r2, #28
 80097ca:	d504      	bpl.n	80097d6 <_vfiprintf_r+0x116>
 80097cc:	2353      	movs	r3, #83	; 0x53
 80097ce:	a904      	add	r1, sp, #16
 80097d0:	185b      	adds	r3, r3, r1
 80097d2:	212b      	movs	r1, #43	; 0x2b
 80097d4:	7019      	strb	r1, [r3, #0]
 80097d6:	9b03      	ldr	r3, [sp, #12]
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	2b2a      	cmp	r3, #42	; 0x2a
 80097dc:	d016      	beq.n	800980c <_vfiprintf_r+0x14c>
 80097de:	2100      	movs	r1, #0
 80097e0:	68eb      	ldr	r3, [r5, #12]
 80097e2:	9f03      	ldr	r7, [sp, #12]
 80097e4:	783a      	ldrb	r2, [r7, #0]
 80097e6:	1c78      	adds	r0, r7, #1
 80097e8:	3a30      	subs	r2, #48	; 0x30
 80097ea:	4684      	mov	ip, r0
 80097ec:	2a09      	cmp	r2, #9
 80097ee:	d94f      	bls.n	8009890 <_vfiprintf_r+0x1d0>
 80097f0:	2900      	cmp	r1, #0
 80097f2:	d111      	bne.n	8009818 <_vfiprintf_r+0x158>
 80097f4:	e017      	b.n	8009826 <_vfiprintf_r+0x166>
 80097f6:	3701      	adds	r7, #1
 80097f8:	e7a9      	b.n	800974e <_vfiprintf_r+0x8e>
 80097fa:	4b49      	ldr	r3, [pc, #292]	; (8009920 <_vfiprintf_r+0x260>)
 80097fc:	682a      	ldr	r2, [r5, #0]
 80097fe:	1ac0      	subs	r0, r0, r3
 8009800:	2301      	movs	r3, #1
 8009802:	4083      	lsls	r3, r0
 8009804:	4313      	orrs	r3, r2
 8009806:	602b      	str	r3, [r5, #0]
 8009808:	9703      	str	r7, [sp, #12]
 800980a:	e7cb      	b.n	80097a4 <_vfiprintf_r+0xe4>
 800980c:	9b07      	ldr	r3, [sp, #28]
 800980e:	1d19      	adds	r1, r3, #4
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	9107      	str	r1, [sp, #28]
 8009814:	2b00      	cmp	r3, #0
 8009816:	db01      	blt.n	800981c <_vfiprintf_r+0x15c>
 8009818:	930b      	str	r3, [sp, #44]	; 0x2c
 800981a:	e004      	b.n	8009826 <_vfiprintf_r+0x166>
 800981c:	425b      	negs	r3, r3
 800981e:	60eb      	str	r3, [r5, #12]
 8009820:	2302      	movs	r3, #2
 8009822:	4313      	orrs	r3, r2
 8009824:	602b      	str	r3, [r5, #0]
 8009826:	783b      	ldrb	r3, [r7, #0]
 8009828:	2b2e      	cmp	r3, #46	; 0x2e
 800982a:	d10a      	bne.n	8009842 <_vfiprintf_r+0x182>
 800982c:	787b      	ldrb	r3, [r7, #1]
 800982e:	2b2a      	cmp	r3, #42	; 0x2a
 8009830:	d137      	bne.n	80098a2 <_vfiprintf_r+0x1e2>
 8009832:	9b07      	ldr	r3, [sp, #28]
 8009834:	3702      	adds	r7, #2
 8009836:	1d1a      	adds	r2, r3, #4
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	9207      	str	r2, [sp, #28]
 800983c:	2b00      	cmp	r3, #0
 800983e:	db2d      	blt.n	800989c <_vfiprintf_r+0x1dc>
 8009840:	9309      	str	r3, [sp, #36]	; 0x24
 8009842:	2203      	movs	r2, #3
 8009844:	7839      	ldrb	r1, [r7, #0]
 8009846:	4837      	ldr	r0, [pc, #220]	; (8009924 <_vfiprintf_r+0x264>)
 8009848:	f000 fdea 	bl	800a420 <memchr>
 800984c:	2800      	cmp	r0, #0
 800984e:	d007      	beq.n	8009860 <_vfiprintf_r+0x1a0>
 8009850:	4b34      	ldr	r3, [pc, #208]	; (8009924 <_vfiprintf_r+0x264>)
 8009852:	682a      	ldr	r2, [r5, #0]
 8009854:	1ac0      	subs	r0, r0, r3
 8009856:	2340      	movs	r3, #64	; 0x40
 8009858:	4083      	lsls	r3, r0
 800985a:	4313      	orrs	r3, r2
 800985c:	3701      	adds	r7, #1
 800985e:	602b      	str	r3, [r5, #0]
 8009860:	7839      	ldrb	r1, [r7, #0]
 8009862:	1c7b      	adds	r3, r7, #1
 8009864:	2206      	movs	r2, #6
 8009866:	4830      	ldr	r0, [pc, #192]	; (8009928 <_vfiprintf_r+0x268>)
 8009868:	9303      	str	r3, [sp, #12]
 800986a:	7629      	strb	r1, [r5, #24]
 800986c:	f000 fdd8 	bl	800a420 <memchr>
 8009870:	2800      	cmp	r0, #0
 8009872:	d045      	beq.n	8009900 <_vfiprintf_r+0x240>
 8009874:	4b2d      	ldr	r3, [pc, #180]	; (800992c <_vfiprintf_r+0x26c>)
 8009876:	2b00      	cmp	r3, #0
 8009878:	d127      	bne.n	80098ca <_vfiprintf_r+0x20a>
 800987a:	2207      	movs	r2, #7
 800987c:	9b07      	ldr	r3, [sp, #28]
 800987e:	3307      	adds	r3, #7
 8009880:	4393      	bics	r3, r2
 8009882:	3308      	adds	r3, #8
 8009884:	9307      	str	r3, [sp, #28]
 8009886:	696b      	ldr	r3, [r5, #20]
 8009888:	9a04      	ldr	r2, [sp, #16]
 800988a:	189b      	adds	r3, r3, r2
 800988c:	616b      	str	r3, [r5, #20]
 800988e:	e75d      	b.n	800974c <_vfiprintf_r+0x8c>
 8009890:	210a      	movs	r1, #10
 8009892:	434b      	muls	r3, r1
 8009894:	4667      	mov	r7, ip
 8009896:	189b      	adds	r3, r3, r2
 8009898:	3909      	subs	r1, #9
 800989a:	e7a3      	b.n	80097e4 <_vfiprintf_r+0x124>
 800989c:	2301      	movs	r3, #1
 800989e:	425b      	negs	r3, r3
 80098a0:	e7ce      	b.n	8009840 <_vfiprintf_r+0x180>
 80098a2:	2300      	movs	r3, #0
 80098a4:	001a      	movs	r2, r3
 80098a6:	3701      	adds	r7, #1
 80098a8:	606b      	str	r3, [r5, #4]
 80098aa:	7839      	ldrb	r1, [r7, #0]
 80098ac:	1c78      	adds	r0, r7, #1
 80098ae:	3930      	subs	r1, #48	; 0x30
 80098b0:	4684      	mov	ip, r0
 80098b2:	2909      	cmp	r1, #9
 80098b4:	d903      	bls.n	80098be <_vfiprintf_r+0x1fe>
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d0c3      	beq.n	8009842 <_vfiprintf_r+0x182>
 80098ba:	9209      	str	r2, [sp, #36]	; 0x24
 80098bc:	e7c1      	b.n	8009842 <_vfiprintf_r+0x182>
 80098be:	230a      	movs	r3, #10
 80098c0:	435a      	muls	r2, r3
 80098c2:	4667      	mov	r7, ip
 80098c4:	1852      	adds	r2, r2, r1
 80098c6:	3b09      	subs	r3, #9
 80098c8:	e7ef      	b.n	80098aa <_vfiprintf_r+0x1ea>
 80098ca:	ab07      	add	r3, sp, #28
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	0022      	movs	r2, r4
 80098d0:	0029      	movs	r1, r5
 80098d2:	0030      	movs	r0, r6
 80098d4:	4b16      	ldr	r3, [pc, #88]	; (8009930 <_vfiprintf_r+0x270>)
 80098d6:	e000      	b.n	80098da <_vfiprintf_r+0x21a>
 80098d8:	bf00      	nop
 80098da:	9004      	str	r0, [sp, #16]
 80098dc:	9b04      	ldr	r3, [sp, #16]
 80098de:	3301      	adds	r3, #1
 80098e0:	d1d1      	bne.n	8009886 <_vfiprintf_r+0x1c6>
 80098e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098e4:	07db      	lsls	r3, r3, #31
 80098e6:	d405      	bmi.n	80098f4 <_vfiprintf_r+0x234>
 80098e8:	89a3      	ldrh	r3, [r4, #12]
 80098ea:	059b      	lsls	r3, r3, #22
 80098ec:	d402      	bmi.n	80098f4 <_vfiprintf_r+0x234>
 80098ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098f0:	f000 fd28 	bl	800a344 <__retarget_lock_release_recursive>
 80098f4:	89a3      	ldrh	r3, [r4, #12]
 80098f6:	065b      	lsls	r3, r3, #25
 80098f8:	d500      	bpl.n	80098fc <_vfiprintf_r+0x23c>
 80098fa:	e70a      	b.n	8009712 <_vfiprintf_r+0x52>
 80098fc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80098fe:	e70a      	b.n	8009716 <_vfiprintf_r+0x56>
 8009900:	ab07      	add	r3, sp, #28
 8009902:	9300      	str	r3, [sp, #0]
 8009904:	0022      	movs	r2, r4
 8009906:	0029      	movs	r1, r5
 8009908:	0030      	movs	r0, r6
 800990a:	4b09      	ldr	r3, [pc, #36]	; (8009930 <_vfiprintf_r+0x270>)
 800990c:	f000 f882 	bl	8009a14 <_printf_i>
 8009910:	e7e3      	b.n	80098da <_vfiprintf_r+0x21a>
 8009912:	46c0      	nop			; (mov r8, r8)
 8009914:	0800eab4 	.word	0x0800eab4
 8009918:	0800ead4 	.word	0x0800ead4
 800991c:	0800ea94 	.word	0x0800ea94
 8009920:	0800ea60 	.word	0x0800ea60
 8009924:	0800ea66 	.word	0x0800ea66
 8009928:	0800ea6a 	.word	0x0800ea6a
 800992c:	00000000 	.word	0x00000000
 8009930:	0800969b 	.word	0x0800969b

08009934 <_printf_common>:
 8009934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009936:	0015      	movs	r5, r2
 8009938:	9301      	str	r3, [sp, #4]
 800993a:	688a      	ldr	r2, [r1, #8]
 800993c:	690b      	ldr	r3, [r1, #16]
 800993e:	000c      	movs	r4, r1
 8009940:	9000      	str	r0, [sp, #0]
 8009942:	4293      	cmp	r3, r2
 8009944:	da00      	bge.n	8009948 <_printf_common+0x14>
 8009946:	0013      	movs	r3, r2
 8009948:	0022      	movs	r2, r4
 800994a:	602b      	str	r3, [r5, #0]
 800994c:	3243      	adds	r2, #67	; 0x43
 800994e:	7812      	ldrb	r2, [r2, #0]
 8009950:	2a00      	cmp	r2, #0
 8009952:	d001      	beq.n	8009958 <_printf_common+0x24>
 8009954:	3301      	adds	r3, #1
 8009956:	602b      	str	r3, [r5, #0]
 8009958:	6823      	ldr	r3, [r4, #0]
 800995a:	069b      	lsls	r3, r3, #26
 800995c:	d502      	bpl.n	8009964 <_printf_common+0x30>
 800995e:	682b      	ldr	r3, [r5, #0]
 8009960:	3302      	adds	r3, #2
 8009962:	602b      	str	r3, [r5, #0]
 8009964:	6822      	ldr	r2, [r4, #0]
 8009966:	2306      	movs	r3, #6
 8009968:	0017      	movs	r7, r2
 800996a:	401f      	ands	r7, r3
 800996c:	421a      	tst	r2, r3
 800996e:	d027      	beq.n	80099c0 <_printf_common+0x8c>
 8009970:	0023      	movs	r3, r4
 8009972:	3343      	adds	r3, #67	; 0x43
 8009974:	781b      	ldrb	r3, [r3, #0]
 8009976:	1e5a      	subs	r2, r3, #1
 8009978:	4193      	sbcs	r3, r2
 800997a:	6822      	ldr	r2, [r4, #0]
 800997c:	0692      	lsls	r2, r2, #26
 800997e:	d430      	bmi.n	80099e2 <_printf_common+0xae>
 8009980:	0022      	movs	r2, r4
 8009982:	9901      	ldr	r1, [sp, #4]
 8009984:	9800      	ldr	r0, [sp, #0]
 8009986:	9e08      	ldr	r6, [sp, #32]
 8009988:	3243      	adds	r2, #67	; 0x43
 800998a:	47b0      	blx	r6
 800998c:	1c43      	adds	r3, r0, #1
 800998e:	d025      	beq.n	80099dc <_printf_common+0xa8>
 8009990:	2306      	movs	r3, #6
 8009992:	6820      	ldr	r0, [r4, #0]
 8009994:	682a      	ldr	r2, [r5, #0]
 8009996:	68e1      	ldr	r1, [r4, #12]
 8009998:	2500      	movs	r5, #0
 800999a:	4003      	ands	r3, r0
 800999c:	2b04      	cmp	r3, #4
 800999e:	d103      	bne.n	80099a8 <_printf_common+0x74>
 80099a0:	1a8d      	subs	r5, r1, r2
 80099a2:	43eb      	mvns	r3, r5
 80099a4:	17db      	asrs	r3, r3, #31
 80099a6:	401d      	ands	r5, r3
 80099a8:	68a3      	ldr	r3, [r4, #8]
 80099aa:	6922      	ldr	r2, [r4, #16]
 80099ac:	4293      	cmp	r3, r2
 80099ae:	dd01      	ble.n	80099b4 <_printf_common+0x80>
 80099b0:	1a9b      	subs	r3, r3, r2
 80099b2:	18ed      	adds	r5, r5, r3
 80099b4:	2700      	movs	r7, #0
 80099b6:	42bd      	cmp	r5, r7
 80099b8:	d120      	bne.n	80099fc <_printf_common+0xc8>
 80099ba:	2000      	movs	r0, #0
 80099bc:	e010      	b.n	80099e0 <_printf_common+0xac>
 80099be:	3701      	adds	r7, #1
 80099c0:	68e3      	ldr	r3, [r4, #12]
 80099c2:	682a      	ldr	r2, [r5, #0]
 80099c4:	1a9b      	subs	r3, r3, r2
 80099c6:	42bb      	cmp	r3, r7
 80099c8:	ddd2      	ble.n	8009970 <_printf_common+0x3c>
 80099ca:	0022      	movs	r2, r4
 80099cc:	2301      	movs	r3, #1
 80099ce:	9901      	ldr	r1, [sp, #4]
 80099d0:	9800      	ldr	r0, [sp, #0]
 80099d2:	9e08      	ldr	r6, [sp, #32]
 80099d4:	3219      	adds	r2, #25
 80099d6:	47b0      	blx	r6
 80099d8:	1c43      	adds	r3, r0, #1
 80099da:	d1f0      	bne.n	80099be <_printf_common+0x8a>
 80099dc:	2001      	movs	r0, #1
 80099de:	4240      	negs	r0, r0
 80099e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80099e2:	2030      	movs	r0, #48	; 0x30
 80099e4:	18e1      	adds	r1, r4, r3
 80099e6:	3143      	adds	r1, #67	; 0x43
 80099e8:	7008      	strb	r0, [r1, #0]
 80099ea:	0021      	movs	r1, r4
 80099ec:	1c5a      	adds	r2, r3, #1
 80099ee:	3145      	adds	r1, #69	; 0x45
 80099f0:	7809      	ldrb	r1, [r1, #0]
 80099f2:	18a2      	adds	r2, r4, r2
 80099f4:	3243      	adds	r2, #67	; 0x43
 80099f6:	3302      	adds	r3, #2
 80099f8:	7011      	strb	r1, [r2, #0]
 80099fa:	e7c1      	b.n	8009980 <_printf_common+0x4c>
 80099fc:	0022      	movs	r2, r4
 80099fe:	2301      	movs	r3, #1
 8009a00:	9901      	ldr	r1, [sp, #4]
 8009a02:	9800      	ldr	r0, [sp, #0]
 8009a04:	9e08      	ldr	r6, [sp, #32]
 8009a06:	321a      	adds	r2, #26
 8009a08:	47b0      	blx	r6
 8009a0a:	1c43      	adds	r3, r0, #1
 8009a0c:	d0e6      	beq.n	80099dc <_printf_common+0xa8>
 8009a0e:	3701      	adds	r7, #1
 8009a10:	e7d1      	b.n	80099b6 <_printf_common+0x82>
	...

08009a14 <_printf_i>:
 8009a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a16:	b08b      	sub	sp, #44	; 0x2c
 8009a18:	9206      	str	r2, [sp, #24]
 8009a1a:	000a      	movs	r2, r1
 8009a1c:	3243      	adds	r2, #67	; 0x43
 8009a1e:	9307      	str	r3, [sp, #28]
 8009a20:	9005      	str	r0, [sp, #20]
 8009a22:	9204      	str	r2, [sp, #16]
 8009a24:	7e0a      	ldrb	r2, [r1, #24]
 8009a26:	000c      	movs	r4, r1
 8009a28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009a2a:	2a78      	cmp	r2, #120	; 0x78
 8009a2c:	d807      	bhi.n	8009a3e <_printf_i+0x2a>
 8009a2e:	2a62      	cmp	r2, #98	; 0x62
 8009a30:	d809      	bhi.n	8009a46 <_printf_i+0x32>
 8009a32:	2a00      	cmp	r2, #0
 8009a34:	d100      	bne.n	8009a38 <_printf_i+0x24>
 8009a36:	e0c1      	b.n	8009bbc <_printf_i+0x1a8>
 8009a38:	2a58      	cmp	r2, #88	; 0x58
 8009a3a:	d100      	bne.n	8009a3e <_printf_i+0x2a>
 8009a3c:	e08c      	b.n	8009b58 <_printf_i+0x144>
 8009a3e:	0026      	movs	r6, r4
 8009a40:	3642      	adds	r6, #66	; 0x42
 8009a42:	7032      	strb	r2, [r6, #0]
 8009a44:	e022      	b.n	8009a8c <_printf_i+0x78>
 8009a46:	0010      	movs	r0, r2
 8009a48:	3863      	subs	r0, #99	; 0x63
 8009a4a:	2815      	cmp	r0, #21
 8009a4c:	d8f7      	bhi.n	8009a3e <_printf_i+0x2a>
 8009a4e:	f7f6 fb63 	bl	8000118 <__gnu_thumb1_case_shi>
 8009a52:	0016      	.short	0x0016
 8009a54:	fff6001f 	.word	0xfff6001f
 8009a58:	fff6fff6 	.word	0xfff6fff6
 8009a5c:	001ffff6 	.word	0x001ffff6
 8009a60:	fff6fff6 	.word	0xfff6fff6
 8009a64:	fff6fff6 	.word	0xfff6fff6
 8009a68:	003600a8 	.word	0x003600a8
 8009a6c:	fff6009a 	.word	0xfff6009a
 8009a70:	00b9fff6 	.word	0x00b9fff6
 8009a74:	0036fff6 	.word	0x0036fff6
 8009a78:	fff6fff6 	.word	0xfff6fff6
 8009a7c:	009e      	.short	0x009e
 8009a7e:	0026      	movs	r6, r4
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	3642      	adds	r6, #66	; 0x42
 8009a84:	1d11      	adds	r1, r2, #4
 8009a86:	6019      	str	r1, [r3, #0]
 8009a88:	6813      	ldr	r3, [r2, #0]
 8009a8a:	7033      	strb	r3, [r6, #0]
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	e0a7      	b.n	8009be0 <_printf_i+0x1cc>
 8009a90:	6808      	ldr	r0, [r1, #0]
 8009a92:	6819      	ldr	r1, [r3, #0]
 8009a94:	1d0a      	adds	r2, r1, #4
 8009a96:	0605      	lsls	r5, r0, #24
 8009a98:	d50b      	bpl.n	8009ab2 <_printf_i+0x9e>
 8009a9a:	680d      	ldr	r5, [r1, #0]
 8009a9c:	601a      	str	r2, [r3, #0]
 8009a9e:	2d00      	cmp	r5, #0
 8009aa0:	da03      	bge.n	8009aaa <_printf_i+0x96>
 8009aa2:	232d      	movs	r3, #45	; 0x2d
 8009aa4:	9a04      	ldr	r2, [sp, #16]
 8009aa6:	426d      	negs	r5, r5
 8009aa8:	7013      	strb	r3, [r2, #0]
 8009aaa:	4b61      	ldr	r3, [pc, #388]	; (8009c30 <_printf_i+0x21c>)
 8009aac:	270a      	movs	r7, #10
 8009aae:	9303      	str	r3, [sp, #12]
 8009ab0:	e01b      	b.n	8009aea <_printf_i+0xd6>
 8009ab2:	680d      	ldr	r5, [r1, #0]
 8009ab4:	601a      	str	r2, [r3, #0]
 8009ab6:	0641      	lsls	r1, r0, #25
 8009ab8:	d5f1      	bpl.n	8009a9e <_printf_i+0x8a>
 8009aba:	b22d      	sxth	r5, r5
 8009abc:	e7ef      	b.n	8009a9e <_printf_i+0x8a>
 8009abe:	680d      	ldr	r5, [r1, #0]
 8009ac0:	6819      	ldr	r1, [r3, #0]
 8009ac2:	1d08      	adds	r0, r1, #4
 8009ac4:	6018      	str	r0, [r3, #0]
 8009ac6:	062e      	lsls	r6, r5, #24
 8009ac8:	d501      	bpl.n	8009ace <_printf_i+0xba>
 8009aca:	680d      	ldr	r5, [r1, #0]
 8009acc:	e003      	b.n	8009ad6 <_printf_i+0xc2>
 8009ace:	066d      	lsls	r5, r5, #25
 8009ad0:	d5fb      	bpl.n	8009aca <_printf_i+0xb6>
 8009ad2:	680d      	ldr	r5, [r1, #0]
 8009ad4:	b2ad      	uxth	r5, r5
 8009ad6:	4b56      	ldr	r3, [pc, #344]	; (8009c30 <_printf_i+0x21c>)
 8009ad8:	2708      	movs	r7, #8
 8009ada:	9303      	str	r3, [sp, #12]
 8009adc:	2a6f      	cmp	r2, #111	; 0x6f
 8009ade:	d000      	beq.n	8009ae2 <_printf_i+0xce>
 8009ae0:	3702      	adds	r7, #2
 8009ae2:	0023      	movs	r3, r4
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	3343      	adds	r3, #67	; 0x43
 8009ae8:	701a      	strb	r2, [r3, #0]
 8009aea:	6863      	ldr	r3, [r4, #4]
 8009aec:	60a3      	str	r3, [r4, #8]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	db03      	blt.n	8009afa <_printf_i+0xe6>
 8009af2:	2204      	movs	r2, #4
 8009af4:	6821      	ldr	r1, [r4, #0]
 8009af6:	4391      	bics	r1, r2
 8009af8:	6021      	str	r1, [r4, #0]
 8009afa:	2d00      	cmp	r5, #0
 8009afc:	d102      	bne.n	8009b04 <_printf_i+0xf0>
 8009afe:	9e04      	ldr	r6, [sp, #16]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d00c      	beq.n	8009b1e <_printf_i+0x10a>
 8009b04:	9e04      	ldr	r6, [sp, #16]
 8009b06:	0028      	movs	r0, r5
 8009b08:	0039      	movs	r1, r7
 8009b0a:	f7f6 fb95 	bl	8000238 <__aeabi_uidivmod>
 8009b0e:	9b03      	ldr	r3, [sp, #12]
 8009b10:	3e01      	subs	r6, #1
 8009b12:	5c5b      	ldrb	r3, [r3, r1]
 8009b14:	7033      	strb	r3, [r6, #0]
 8009b16:	002b      	movs	r3, r5
 8009b18:	0005      	movs	r5, r0
 8009b1a:	429f      	cmp	r7, r3
 8009b1c:	d9f3      	bls.n	8009b06 <_printf_i+0xf2>
 8009b1e:	2f08      	cmp	r7, #8
 8009b20:	d109      	bne.n	8009b36 <_printf_i+0x122>
 8009b22:	6823      	ldr	r3, [r4, #0]
 8009b24:	07db      	lsls	r3, r3, #31
 8009b26:	d506      	bpl.n	8009b36 <_printf_i+0x122>
 8009b28:	6863      	ldr	r3, [r4, #4]
 8009b2a:	6922      	ldr	r2, [r4, #16]
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	dc02      	bgt.n	8009b36 <_printf_i+0x122>
 8009b30:	2330      	movs	r3, #48	; 0x30
 8009b32:	3e01      	subs	r6, #1
 8009b34:	7033      	strb	r3, [r6, #0]
 8009b36:	9b04      	ldr	r3, [sp, #16]
 8009b38:	1b9b      	subs	r3, r3, r6
 8009b3a:	6123      	str	r3, [r4, #16]
 8009b3c:	9b07      	ldr	r3, [sp, #28]
 8009b3e:	0021      	movs	r1, r4
 8009b40:	9300      	str	r3, [sp, #0]
 8009b42:	9805      	ldr	r0, [sp, #20]
 8009b44:	9b06      	ldr	r3, [sp, #24]
 8009b46:	aa09      	add	r2, sp, #36	; 0x24
 8009b48:	f7ff fef4 	bl	8009934 <_printf_common>
 8009b4c:	1c43      	adds	r3, r0, #1
 8009b4e:	d14c      	bne.n	8009bea <_printf_i+0x1d6>
 8009b50:	2001      	movs	r0, #1
 8009b52:	4240      	negs	r0, r0
 8009b54:	b00b      	add	sp, #44	; 0x2c
 8009b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b58:	3145      	adds	r1, #69	; 0x45
 8009b5a:	700a      	strb	r2, [r1, #0]
 8009b5c:	4a34      	ldr	r2, [pc, #208]	; (8009c30 <_printf_i+0x21c>)
 8009b5e:	9203      	str	r2, [sp, #12]
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	6821      	ldr	r1, [r4, #0]
 8009b64:	ca20      	ldmia	r2!, {r5}
 8009b66:	601a      	str	r2, [r3, #0]
 8009b68:	0608      	lsls	r0, r1, #24
 8009b6a:	d516      	bpl.n	8009b9a <_printf_i+0x186>
 8009b6c:	07cb      	lsls	r3, r1, #31
 8009b6e:	d502      	bpl.n	8009b76 <_printf_i+0x162>
 8009b70:	2320      	movs	r3, #32
 8009b72:	4319      	orrs	r1, r3
 8009b74:	6021      	str	r1, [r4, #0]
 8009b76:	2710      	movs	r7, #16
 8009b78:	2d00      	cmp	r5, #0
 8009b7a:	d1b2      	bne.n	8009ae2 <_printf_i+0xce>
 8009b7c:	2320      	movs	r3, #32
 8009b7e:	6822      	ldr	r2, [r4, #0]
 8009b80:	439a      	bics	r2, r3
 8009b82:	6022      	str	r2, [r4, #0]
 8009b84:	e7ad      	b.n	8009ae2 <_printf_i+0xce>
 8009b86:	2220      	movs	r2, #32
 8009b88:	6809      	ldr	r1, [r1, #0]
 8009b8a:	430a      	orrs	r2, r1
 8009b8c:	6022      	str	r2, [r4, #0]
 8009b8e:	0022      	movs	r2, r4
 8009b90:	2178      	movs	r1, #120	; 0x78
 8009b92:	3245      	adds	r2, #69	; 0x45
 8009b94:	7011      	strb	r1, [r2, #0]
 8009b96:	4a27      	ldr	r2, [pc, #156]	; (8009c34 <_printf_i+0x220>)
 8009b98:	e7e1      	b.n	8009b5e <_printf_i+0x14a>
 8009b9a:	0648      	lsls	r0, r1, #25
 8009b9c:	d5e6      	bpl.n	8009b6c <_printf_i+0x158>
 8009b9e:	b2ad      	uxth	r5, r5
 8009ba0:	e7e4      	b.n	8009b6c <_printf_i+0x158>
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	680d      	ldr	r5, [r1, #0]
 8009ba6:	1d10      	adds	r0, r2, #4
 8009ba8:	6949      	ldr	r1, [r1, #20]
 8009baa:	6018      	str	r0, [r3, #0]
 8009bac:	6813      	ldr	r3, [r2, #0]
 8009bae:	062e      	lsls	r6, r5, #24
 8009bb0:	d501      	bpl.n	8009bb6 <_printf_i+0x1a2>
 8009bb2:	6019      	str	r1, [r3, #0]
 8009bb4:	e002      	b.n	8009bbc <_printf_i+0x1a8>
 8009bb6:	066d      	lsls	r5, r5, #25
 8009bb8:	d5fb      	bpl.n	8009bb2 <_printf_i+0x19e>
 8009bba:	8019      	strh	r1, [r3, #0]
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	9e04      	ldr	r6, [sp, #16]
 8009bc0:	6123      	str	r3, [r4, #16]
 8009bc2:	e7bb      	b.n	8009b3c <_printf_i+0x128>
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	1d11      	adds	r1, r2, #4
 8009bc8:	6019      	str	r1, [r3, #0]
 8009bca:	6816      	ldr	r6, [r2, #0]
 8009bcc:	2100      	movs	r1, #0
 8009bce:	0030      	movs	r0, r6
 8009bd0:	6862      	ldr	r2, [r4, #4]
 8009bd2:	f000 fc25 	bl	800a420 <memchr>
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	d001      	beq.n	8009bde <_printf_i+0x1ca>
 8009bda:	1b80      	subs	r0, r0, r6
 8009bdc:	6060      	str	r0, [r4, #4]
 8009bde:	6863      	ldr	r3, [r4, #4]
 8009be0:	6123      	str	r3, [r4, #16]
 8009be2:	2300      	movs	r3, #0
 8009be4:	9a04      	ldr	r2, [sp, #16]
 8009be6:	7013      	strb	r3, [r2, #0]
 8009be8:	e7a8      	b.n	8009b3c <_printf_i+0x128>
 8009bea:	6923      	ldr	r3, [r4, #16]
 8009bec:	0032      	movs	r2, r6
 8009bee:	9906      	ldr	r1, [sp, #24]
 8009bf0:	9805      	ldr	r0, [sp, #20]
 8009bf2:	9d07      	ldr	r5, [sp, #28]
 8009bf4:	47a8      	blx	r5
 8009bf6:	1c43      	adds	r3, r0, #1
 8009bf8:	d0aa      	beq.n	8009b50 <_printf_i+0x13c>
 8009bfa:	6823      	ldr	r3, [r4, #0]
 8009bfc:	079b      	lsls	r3, r3, #30
 8009bfe:	d415      	bmi.n	8009c2c <_printf_i+0x218>
 8009c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c02:	68e0      	ldr	r0, [r4, #12]
 8009c04:	4298      	cmp	r0, r3
 8009c06:	daa5      	bge.n	8009b54 <_printf_i+0x140>
 8009c08:	0018      	movs	r0, r3
 8009c0a:	e7a3      	b.n	8009b54 <_printf_i+0x140>
 8009c0c:	0022      	movs	r2, r4
 8009c0e:	2301      	movs	r3, #1
 8009c10:	9906      	ldr	r1, [sp, #24]
 8009c12:	9805      	ldr	r0, [sp, #20]
 8009c14:	9e07      	ldr	r6, [sp, #28]
 8009c16:	3219      	adds	r2, #25
 8009c18:	47b0      	blx	r6
 8009c1a:	1c43      	adds	r3, r0, #1
 8009c1c:	d098      	beq.n	8009b50 <_printf_i+0x13c>
 8009c1e:	3501      	adds	r5, #1
 8009c20:	68e3      	ldr	r3, [r4, #12]
 8009c22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c24:	1a9b      	subs	r3, r3, r2
 8009c26:	42ab      	cmp	r3, r5
 8009c28:	dcf0      	bgt.n	8009c0c <_printf_i+0x1f8>
 8009c2a:	e7e9      	b.n	8009c00 <_printf_i+0x1ec>
 8009c2c:	2500      	movs	r5, #0
 8009c2e:	e7f7      	b.n	8009c20 <_printf_i+0x20c>
 8009c30:	0800ea71 	.word	0x0800ea71
 8009c34:	0800ea82 	.word	0x0800ea82

08009c38 <iprintf>:
 8009c38:	b40f      	push	{r0, r1, r2, r3}
 8009c3a:	4b0b      	ldr	r3, [pc, #44]	; (8009c68 <iprintf+0x30>)
 8009c3c:	b513      	push	{r0, r1, r4, lr}
 8009c3e:	681c      	ldr	r4, [r3, #0]
 8009c40:	2c00      	cmp	r4, #0
 8009c42:	d005      	beq.n	8009c50 <iprintf+0x18>
 8009c44:	69a3      	ldr	r3, [r4, #24]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d102      	bne.n	8009c50 <iprintf+0x18>
 8009c4a:	0020      	movs	r0, r4
 8009c4c:	f000 fad8 	bl	800a200 <__sinit>
 8009c50:	ab05      	add	r3, sp, #20
 8009c52:	0020      	movs	r0, r4
 8009c54:	9a04      	ldr	r2, [sp, #16]
 8009c56:	68a1      	ldr	r1, [r4, #8]
 8009c58:	9301      	str	r3, [sp, #4]
 8009c5a:	f7ff fd31 	bl	80096c0 <_vfiprintf_r>
 8009c5e:	bc16      	pop	{r1, r2, r4}
 8009c60:	bc08      	pop	{r3}
 8009c62:	b004      	add	sp, #16
 8009c64:	4718      	bx	r3
 8009c66:	46c0      	nop			; (mov r8, r8)
 8009c68:	20000024 	.word	0x20000024

08009c6c <_puts_r>:
 8009c6c:	b570      	push	{r4, r5, r6, lr}
 8009c6e:	0005      	movs	r5, r0
 8009c70:	000e      	movs	r6, r1
 8009c72:	2800      	cmp	r0, #0
 8009c74:	d004      	beq.n	8009c80 <_puts_r+0x14>
 8009c76:	6983      	ldr	r3, [r0, #24]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d101      	bne.n	8009c80 <_puts_r+0x14>
 8009c7c:	f000 fac0 	bl	800a200 <__sinit>
 8009c80:	69ab      	ldr	r3, [r5, #24]
 8009c82:	68ac      	ldr	r4, [r5, #8]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d102      	bne.n	8009c8e <_puts_r+0x22>
 8009c88:	0028      	movs	r0, r5
 8009c8a:	f000 fab9 	bl	800a200 <__sinit>
 8009c8e:	4b2d      	ldr	r3, [pc, #180]	; (8009d44 <_puts_r+0xd8>)
 8009c90:	429c      	cmp	r4, r3
 8009c92:	d122      	bne.n	8009cda <_puts_r+0x6e>
 8009c94:	686c      	ldr	r4, [r5, #4]
 8009c96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c98:	07db      	lsls	r3, r3, #31
 8009c9a:	d405      	bmi.n	8009ca8 <_puts_r+0x3c>
 8009c9c:	89a3      	ldrh	r3, [r4, #12]
 8009c9e:	059b      	lsls	r3, r3, #22
 8009ca0:	d402      	bmi.n	8009ca8 <_puts_r+0x3c>
 8009ca2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ca4:	f000 fb4d 	bl	800a342 <__retarget_lock_acquire_recursive>
 8009ca8:	89a3      	ldrh	r3, [r4, #12]
 8009caa:	071b      	lsls	r3, r3, #28
 8009cac:	d502      	bpl.n	8009cb4 <_puts_r+0x48>
 8009cae:	6923      	ldr	r3, [r4, #16]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d129      	bne.n	8009d08 <_puts_r+0x9c>
 8009cb4:	0021      	movs	r1, r4
 8009cb6:	0028      	movs	r0, r5
 8009cb8:	f000 f8f4 	bl	8009ea4 <__swsetup_r>
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	d023      	beq.n	8009d08 <_puts_r+0x9c>
 8009cc0:	2501      	movs	r5, #1
 8009cc2:	426d      	negs	r5, r5
 8009cc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009cc6:	07db      	lsls	r3, r3, #31
 8009cc8:	d405      	bmi.n	8009cd6 <_puts_r+0x6a>
 8009cca:	89a3      	ldrh	r3, [r4, #12]
 8009ccc:	059b      	lsls	r3, r3, #22
 8009cce:	d402      	bmi.n	8009cd6 <_puts_r+0x6a>
 8009cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cd2:	f000 fb37 	bl	800a344 <__retarget_lock_release_recursive>
 8009cd6:	0028      	movs	r0, r5
 8009cd8:	bd70      	pop	{r4, r5, r6, pc}
 8009cda:	4b1b      	ldr	r3, [pc, #108]	; (8009d48 <_puts_r+0xdc>)
 8009cdc:	429c      	cmp	r4, r3
 8009cde:	d101      	bne.n	8009ce4 <_puts_r+0x78>
 8009ce0:	68ac      	ldr	r4, [r5, #8]
 8009ce2:	e7d8      	b.n	8009c96 <_puts_r+0x2a>
 8009ce4:	4b19      	ldr	r3, [pc, #100]	; (8009d4c <_puts_r+0xe0>)
 8009ce6:	429c      	cmp	r4, r3
 8009ce8:	d1d5      	bne.n	8009c96 <_puts_r+0x2a>
 8009cea:	68ec      	ldr	r4, [r5, #12]
 8009cec:	e7d3      	b.n	8009c96 <_puts_r+0x2a>
 8009cee:	3601      	adds	r6, #1
 8009cf0:	60a3      	str	r3, [r4, #8]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	da04      	bge.n	8009d00 <_puts_r+0x94>
 8009cf6:	69a2      	ldr	r2, [r4, #24]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	dc16      	bgt.n	8009d2a <_puts_r+0xbe>
 8009cfc:	290a      	cmp	r1, #10
 8009cfe:	d014      	beq.n	8009d2a <_puts_r+0xbe>
 8009d00:	6823      	ldr	r3, [r4, #0]
 8009d02:	1c5a      	adds	r2, r3, #1
 8009d04:	6022      	str	r2, [r4, #0]
 8009d06:	7019      	strb	r1, [r3, #0]
 8009d08:	68a3      	ldr	r3, [r4, #8]
 8009d0a:	7831      	ldrb	r1, [r6, #0]
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	2900      	cmp	r1, #0
 8009d10:	d1ed      	bne.n	8009cee <_puts_r+0x82>
 8009d12:	60a3      	str	r3, [r4, #8]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	da0f      	bge.n	8009d38 <_puts_r+0xcc>
 8009d18:	0028      	movs	r0, r5
 8009d1a:	0022      	movs	r2, r4
 8009d1c:	310a      	adds	r1, #10
 8009d1e:	f000 f86b 	bl	8009df8 <__swbuf_r>
 8009d22:	250a      	movs	r5, #10
 8009d24:	1c43      	adds	r3, r0, #1
 8009d26:	d1cd      	bne.n	8009cc4 <_puts_r+0x58>
 8009d28:	e7ca      	b.n	8009cc0 <_puts_r+0x54>
 8009d2a:	0022      	movs	r2, r4
 8009d2c:	0028      	movs	r0, r5
 8009d2e:	f000 f863 	bl	8009df8 <__swbuf_r>
 8009d32:	1c43      	adds	r3, r0, #1
 8009d34:	d1e8      	bne.n	8009d08 <_puts_r+0x9c>
 8009d36:	e7c3      	b.n	8009cc0 <_puts_r+0x54>
 8009d38:	250a      	movs	r5, #10
 8009d3a:	6823      	ldr	r3, [r4, #0]
 8009d3c:	1c5a      	adds	r2, r3, #1
 8009d3e:	6022      	str	r2, [r4, #0]
 8009d40:	701d      	strb	r5, [r3, #0]
 8009d42:	e7bf      	b.n	8009cc4 <_puts_r+0x58>
 8009d44:	0800eab4 	.word	0x0800eab4
 8009d48:	0800ead4 	.word	0x0800ead4
 8009d4c:	0800ea94 	.word	0x0800ea94

08009d50 <puts>:
 8009d50:	b510      	push	{r4, lr}
 8009d52:	4b03      	ldr	r3, [pc, #12]	; (8009d60 <puts+0x10>)
 8009d54:	0001      	movs	r1, r0
 8009d56:	6818      	ldr	r0, [r3, #0]
 8009d58:	f7ff ff88 	bl	8009c6c <_puts_r>
 8009d5c:	bd10      	pop	{r4, pc}
 8009d5e:	46c0      	nop			; (mov r8, r8)
 8009d60:	20000024 	.word	0x20000024

08009d64 <siprintf>:
 8009d64:	b40e      	push	{r1, r2, r3}
 8009d66:	b500      	push	{lr}
 8009d68:	490b      	ldr	r1, [pc, #44]	; (8009d98 <siprintf+0x34>)
 8009d6a:	b09c      	sub	sp, #112	; 0x70
 8009d6c:	ab1d      	add	r3, sp, #116	; 0x74
 8009d6e:	9002      	str	r0, [sp, #8]
 8009d70:	9006      	str	r0, [sp, #24]
 8009d72:	9107      	str	r1, [sp, #28]
 8009d74:	9104      	str	r1, [sp, #16]
 8009d76:	4809      	ldr	r0, [pc, #36]	; (8009d9c <siprintf+0x38>)
 8009d78:	4909      	ldr	r1, [pc, #36]	; (8009da0 <siprintf+0x3c>)
 8009d7a:	cb04      	ldmia	r3!, {r2}
 8009d7c:	9105      	str	r1, [sp, #20]
 8009d7e:	6800      	ldr	r0, [r0, #0]
 8009d80:	a902      	add	r1, sp, #8
 8009d82:	9301      	str	r3, [sp, #4]
 8009d84:	f000 fccc 	bl	800a720 <_svfiprintf_r>
 8009d88:	2300      	movs	r3, #0
 8009d8a:	9a02      	ldr	r2, [sp, #8]
 8009d8c:	7013      	strb	r3, [r2, #0]
 8009d8e:	b01c      	add	sp, #112	; 0x70
 8009d90:	bc08      	pop	{r3}
 8009d92:	b003      	add	sp, #12
 8009d94:	4718      	bx	r3
 8009d96:	46c0      	nop			; (mov r8, r8)
 8009d98:	7fffffff 	.word	0x7fffffff
 8009d9c:	20000024 	.word	0x20000024
 8009da0:	ffff0208 	.word	0xffff0208

08009da4 <strchr>:
 8009da4:	b2c9      	uxtb	r1, r1
 8009da6:	7803      	ldrb	r3, [r0, #0]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d004      	beq.n	8009db6 <strchr+0x12>
 8009dac:	428b      	cmp	r3, r1
 8009dae:	d100      	bne.n	8009db2 <strchr+0xe>
 8009db0:	4770      	bx	lr
 8009db2:	3001      	adds	r0, #1
 8009db4:	e7f7      	b.n	8009da6 <strchr+0x2>
 8009db6:	424b      	negs	r3, r1
 8009db8:	4159      	adcs	r1, r3
 8009dba:	4249      	negs	r1, r1
 8009dbc:	4008      	ands	r0, r1
 8009dbe:	e7f7      	b.n	8009db0 <strchr+0xc>

08009dc0 <strcpy>:
 8009dc0:	0003      	movs	r3, r0
 8009dc2:	780a      	ldrb	r2, [r1, #0]
 8009dc4:	3101      	adds	r1, #1
 8009dc6:	701a      	strb	r2, [r3, #0]
 8009dc8:	3301      	adds	r3, #1
 8009dca:	2a00      	cmp	r2, #0
 8009dcc:	d1f9      	bne.n	8009dc2 <strcpy+0x2>
 8009dce:	4770      	bx	lr

08009dd0 <strncpy>:
 8009dd0:	0003      	movs	r3, r0
 8009dd2:	b530      	push	{r4, r5, lr}
 8009dd4:	001d      	movs	r5, r3
 8009dd6:	2a00      	cmp	r2, #0
 8009dd8:	d006      	beq.n	8009de8 <strncpy+0x18>
 8009dda:	780c      	ldrb	r4, [r1, #0]
 8009ddc:	3a01      	subs	r2, #1
 8009dde:	3301      	adds	r3, #1
 8009de0:	702c      	strb	r4, [r5, #0]
 8009de2:	3101      	adds	r1, #1
 8009de4:	2c00      	cmp	r4, #0
 8009de6:	d1f5      	bne.n	8009dd4 <strncpy+0x4>
 8009de8:	2100      	movs	r1, #0
 8009dea:	189a      	adds	r2, r3, r2
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d100      	bne.n	8009df2 <strncpy+0x22>
 8009df0:	bd30      	pop	{r4, r5, pc}
 8009df2:	7019      	strb	r1, [r3, #0]
 8009df4:	3301      	adds	r3, #1
 8009df6:	e7f9      	b.n	8009dec <strncpy+0x1c>

08009df8 <__swbuf_r>:
 8009df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dfa:	0005      	movs	r5, r0
 8009dfc:	000e      	movs	r6, r1
 8009dfe:	0014      	movs	r4, r2
 8009e00:	2800      	cmp	r0, #0
 8009e02:	d004      	beq.n	8009e0e <__swbuf_r+0x16>
 8009e04:	6983      	ldr	r3, [r0, #24]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d101      	bne.n	8009e0e <__swbuf_r+0x16>
 8009e0a:	f000 f9f9 	bl	800a200 <__sinit>
 8009e0e:	4b22      	ldr	r3, [pc, #136]	; (8009e98 <__swbuf_r+0xa0>)
 8009e10:	429c      	cmp	r4, r3
 8009e12:	d12e      	bne.n	8009e72 <__swbuf_r+0x7a>
 8009e14:	686c      	ldr	r4, [r5, #4]
 8009e16:	69a3      	ldr	r3, [r4, #24]
 8009e18:	60a3      	str	r3, [r4, #8]
 8009e1a:	89a3      	ldrh	r3, [r4, #12]
 8009e1c:	071b      	lsls	r3, r3, #28
 8009e1e:	d532      	bpl.n	8009e86 <__swbuf_r+0x8e>
 8009e20:	6923      	ldr	r3, [r4, #16]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d02f      	beq.n	8009e86 <__swbuf_r+0x8e>
 8009e26:	6823      	ldr	r3, [r4, #0]
 8009e28:	6922      	ldr	r2, [r4, #16]
 8009e2a:	b2f7      	uxtb	r7, r6
 8009e2c:	1a98      	subs	r0, r3, r2
 8009e2e:	6963      	ldr	r3, [r4, #20]
 8009e30:	b2f6      	uxtb	r6, r6
 8009e32:	4283      	cmp	r3, r0
 8009e34:	dc05      	bgt.n	8009e42 <__swbuf_r+0x4a>
 8009e36:	0021      	movs	r1, r4
 8009e38:	0028      	movs	r0, r5
 8009e3a:	f000 f93f 	bl	800a0bc <_fflush_r>
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	d127      	bne.n	8009e92 <__swbuf_r+0x9a>
 8009e42:	68a3      	ldr	r3, [r4, #8]
 8009e44:	3001      	adds	r0, #1
 8009e46:	3b01      	subs	r3, #1
 8009e48:	60a3      	str	r3, [r4, #8]
 8009e4a:	6823      	ldr	r3, [r4, #0]
 8009e4c:	1c5a      	adds	r2, r3, #1
 8009e4e:	6022      	str	r2, [r4, #0]
 8009e50:	701f      	strb	r7, [r3, #0]
 8009e52:	6963      	ldr	r3, [r4, #20]
 8009e54:	4283      	cmp	r3, r0
 8009e56:	d004      	beq.n	8009e62 <__swbuf_r+0x6a>
 8009e58:	89a3      	ldrh	r3, [r4, #12]
 8009e5a:	07db      	lsls	r3, r3, #31
 8009e5c:	d507      	bpl.n	8009e6e <__swbuf_r+0x76>
 8009e5e:	2e0a      	cmp	r6, #10
 8009e60:	d105      	bne.n	8009e6e <__swbuf_r+0x76>
 8009e62:	0021      	movs	r1, r4
 8009e64:	0028      	movs	r0, r5
 8009e66:	f000 f929 	bl	800a0bc <_fflush_r>
 8009e6a:	2800      	cmp	r0, #0
 8009e6c:	d111      	bne.n	8009e92 <__swbuf_r+0x9a>
 8009e6e:	0030      	movs	r0, r6
 8009e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e72:	4b0a      	ldr	r3, [pc, #40]	; (8009e9c <__swbuf_r+0xa4>)
 8009e74:	429c      	cmp	r4, r3
 8009e76:	d101      	bne.n	8009e7c <__swbuf_r+0x84>
 8009e78:	68ac      	ldr	r4, [r5, #8]
 8009e7a:	e7cc      	b.n	8009e16 <__swbuf_r+0x1e>
 8009e7c:	4b08      	ldr	r3, [pc, #32]	; (8009ea0 <__swbuf_r+0xa8>)
 8009e7e:	429c      	cmp	r4, r3
 8009e80:	d1c9      	bne.n	8009e16 <__swbuf_r+0x1e>
 8009e82:	68ec      	ldr	r4, [r5, #12]
 8009e84:	e7c7      	b.n	8009e16 <__swbuf_r+0x1e>
 8009e86:	0021      	movs	r1, r4
 8009e88:	0028      	movs	r0, r5
 8009e8a:	f000 f80b 	bl	8009ea4 <__swsetup_r>
 8009e8e:	2800      	cmp	r0, #0
 8009e90:	d0c9      	beq.n	8009e26 <__swbuf_r+0x2e>
 8009e92:	2601      	movs	r6, #1
 8009e94:	4276      	negs	r6, r6
 8009e96:	e7ea      	b.n	8009e6e <__swbuf_r+0x76>
 8009e98:	0800eab4 	.word	0x0800eab4
 8009e9c:	0800ead4 	.word	0x0800ead4
 8009ea0:	0800ea94 	.word	0x0800ea94

08009ea4 <__swsetup_r>:
 8009ea4:	4b37      	ldr	r3, [pc, #220]	; (8009f84 <__swsetup_r+0xe0>)
 8009ea6:	b570      	push	{r4, r5, r6, lr}
 8009ea8:	681d      	ldr	r5, [r3, #0]
 8009eaa:	0006      	movs	r6, r0
 8009eac:	000c      	movs	r4, r1
 8009eae:	2d00      	cmp	r5, #0
 8009eb0:	d005      	beq.n	8009ebe <__swsetup_r+0x1a>
 8009eb2:	69ab      	ldr	r3, [r5, #24]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d102      	bne.n	8009ebe <__swsetup_r+0x1a>
 8009eb8:	0028      	movs	r0, r5
 8009eba:	f000 f9a1 	bl	800a200 <__sinit>
 8009ebe:	4b32      	ldr	r3, [pc, #200]	; (8009f88 <__swsetup_r+0xe4>)
 8009ec0:	429c      	cmp	r4, r3
 8009ec2:	d10f      	bne.n	8009ee4 <__swsetup_r+0x40>
 8009ec4:	686c      	ldr	r4, [r5, #4]
 8009ec6:	230c      	movs	r3, #12
 8009ec8:	5ee2      	ldrsh	r2, [r4, r3]
 8009eca:	b293      	uxth	r3, r2
 8009ecc:	0711      	lsls	r1, r2, #28
 8009ece:	d42d      	bmi.n	8009f2c <__swsetup_r+0x88>
 8009ed0:	06d9      	lsls	r1, r3, #27
 8009ed2:	d411      	bmi.n	8009ef8 <__swsetup_r+0x54>
 8009ed4:	2309      	movs	r3, #9
 8009ed6:	2001      	movs	r0, #1
 8009ed8:	6033      	str	r3, [r6, #0]
 8009eda:	3337      	adds	r3, #55	; 0x37
 8009edc:	4313      	orrs	r3, r2
 8009ede:	81a3      	strh	r3, [r4, #12]
 8009ee0:	4240      	negs	r0, r0
 8009ee2:	bd70      	pop	{r4, r5, r6, pc}
 8009ee4:	4b29      	ldr	r3, [pc, #164]	; (8009f8c <__swsetup_r+0xe8>)
 8009ee6:	429c      	cmp	r4, r3
 8009ee8:	d101      	bne.n	8009eee <__swsetup_r+0x4a>
 8009eea:	68ac      	ldr	r4, [r5, #8]
 8009eec:	e7eb      	b.n	8009ec6 <__swsetup_r+0x22>
 8009eee:	4b28      	ldr	r3, [pc, #160]	; (8009f90 <__swsetup_r+0xec>)
 8009ef0:	429c      	cmp	r4, r3
 8009ef2:	d1e8      	bne.n	8009ec6 <__swsetup_r+0x22>
 8009ef4:	68ec      	ldr	r4, [r5, #12]
 8009ef6:	e7e6      	b.n	8009ec6 <__swsetup_r+0x22>
 8009ef8:	075b      	lsls	r3, r3, #29
 8009efa:	d513      	bpl.n	8009f24 <__swsetup_r+0x80>
 8009efc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009efe:	2900      	cmp	r1, #0
 8009f00:	d008      	beq.n	8009f14 <__swsetup_r+0x70>
 8009f02:	0023      	movs	r3, r4
 8009f04:	3344      	adds	r3, #68	; 0x44
 8009f06:	4299      	cmp	r1, r3
 8009f08:	d002      	beq.n	8009f10 <__swsetup_r+0x6c>
 8009f0a:	0030      	movs	r0, r6
 8009f0c:	f000 fa94 	bl	800a438 <_free_r>
 8009f10:	2300      	movs	r3, #0
 8009f12:	6363      	str	r3, [r4, #52]	; 0x34
 8009f14:	2224      	movs	r2, #36	; 0x24
 8009f16:	89a3      	ldrh	r3, [r4, #12]
 8009f18:	4393      	bics	r3, r2
 8009f1a:	81a3      	strh	r3, [r4, #12]
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	6063      	str	r3, [r4, #4]
 8009f20:	6923      	ldr	r3, [r4, #16]
 8009f22:	6023      	str	r3, [r4, #0]
 8009f24:	2308      	movs	r3, #8
 8009f26:	89a2      	ldrh	r2, [r4, #12]
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	81a3      	strh	r3, [r4, #12]
 8009f2c:	6923      	ldr	r3, [r4, #16]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d10b      	bne.n	8009f4a <__swsetup_r+0xa6>
 8009f32:	21a0      	movs	r1, #160	; 0xa0
 8009f34:	2280      	movs	r2, #128	; 0x80
 8009f36:	89a3      	ldrh	r3, [r4, #12]
 8009f38:	0089      	lsls	r1, r1, #2
 8009f3a:	0092      	lsls	r2, r2, #2
 8009f3c:	400b      	ands	r3, r1
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d003      	beq.n	8009f4a <__swsetup_r+0xa6>
 8009f42:	0021      	movs	r1, r4
 8009f44:	0030      	movs	r0, r6
 8009f46:	f000 fa27 	bl	800a398 <__smakebuf_r>
 8009f4a:	220c      	movs	r2, #12
 8009f4c:	5ea3      	ldrsh	r3, [r4, r2]
 8009f4e:	2001      	movs	r0, #1
 8009f50:	001a      	movs	r2, r3
 8009f52:	b299      	uxth	r1, r3
 8009f54:	4002      	ands	r2, r0
 8009f56:	4203      	tst	r3, r0
 8009f58:	d00f      	beq.n	8009f7a <__swsetup_r+0xd6>
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	60a2      	str	r2, [r4, #8]
 8009f5e:	6962      	ldr	r2, [r4, #20]
 8009f60:	4252      	negs	r2, r2
 8009f62:	61a2      	str	r2, [r4, #24]
 8009f64:	2000      	movs	r0, #0
 8009f66:	6922      	ldr	r2, [r4, #16]
 8009f68:	4282      	cmp	r2, r0
 8009f6a:	d1ba      	bne.n	8009ee2 <__swsetup_r+0x3e>
 8009f6c:	060a      	lsls	r2, r1, #24
 8009f6e:	d5b8      	bpl.n	8009ee2 <__swsetup_r+0x3e>
 8009f70:	2240      	movs	r2, #64	; 0x40
 8009f72:	4313      	orrs	r3, r2
 8009f74:	81a3      	strh	r3, [r4, #12]
 8009f76:	3801      	subs	r0, #1
 8009f78:	e7b3      	b.n	8009ee2 <__swsetup_r+0x3e>
 8009f7a:	0788      	lsls	r0, r1, #30
 8009f7c:	d400      	bmi.n	8009f80 <__swsetup_r+0xdc>
 8009f7e:	6962      	ldr	r2, [r4, #20]
 8009f80:	60a2      	str	r2, [r4, #8]
 8009f82:	e7ef      	b.n	8009f64 <__swsetup_r+0xc0>
 8009f84:	20000024 	.word	0x20000024
 8009f88:	0800eab4 	.word	0x0800eab4
 8009f8c:	0800ead4 	.word	0x0800ead4
 8009f90:	0800ea94 	.word	0x0800ea94

08009f94 <abort>:
 8009f94:	2006      	movs	r0, #6
 8009f96:	b510      	push	{r4, lr}
 8009f98:	f000 fcfe 	bl	800a998 <raise>
 8009f9c:	2001      	movs	r0, #1
 8009f9e:	f7f7 f939 	bl	8001214 <_exit>
	...

08009fa4 <__sflush_r>:
 8009fa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fa6:	898b      	ldrh	r3, [r1, #12]
 8009fa8:	0005      	movs	r5, r0
 8009faa:	000c      	movs	r4, r1
 8009fac:	071a      	lsls	r2, r3, #28
 8009fae:	d45f      	bmi.n	800a070 <__sflush_r+0xcc>
 8009fb0:	684a      	ldr	r2, [r1, #4]
 8009fb2:	2a00      	cmp	r2, #0
 8009fb4:	dc04      	bgt.n	8009fc0 <__sflush_r+0x1c>
 8009fb6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8009fb8:	2a00      	cmp	r2, #0
 8009fba:	dc01      	bgt.n	8009fc0 <__sflush_r+0x1c>
 8009fbc:	2000      	movs	r0, #0
 8009fbe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009fc0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009fc2:	2f00      	cmp	r7, #0
 8009fc4:	d0fa      	beq.n	8009fbc <__sflush_r+0x18>
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	2180      	movs	r1, #128	; 0x80
 8009fca:	682e      	ldr	r6, [r5, #0]
 8009fcc:	602a      	str	r2, [r5, #0]
 8009fce:	001a      	movs	r2, r3
 8009fd0:	0149      	lsls	r1, r1, #5
 8009fd2:	400a      	ands	r2, r1
 8009fd4:	420b      	tst	r3, r1
 8009fd6:	d034      	beq.n	800a042 <__sflush_r+0x9e>
 8009fd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009fda:	89a3      	ldrh	r3, [r4, #12]
 8009fdc:	075b      	lsls	r3, r3, #29
 8009fde:	d506      	bpl.n	8009fee <__sflush_r+0x4a>
 8009fe0:	6863      	ldr	r3, [r4, #4]
 8009fe2:	1ac0      	subs	r0, r0, r3
 8009fe4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d001      	beq.n	8009fee <__sflush_r+0x4a>
 8009fea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009fec:	1ac0      	subs	r0, r0, r3
 8009fee:	0002      	movs	r2, r0
 8009ff0:	6a21      	ldr	r1, [r4, #32]
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	0028      	movs	r0, r5
 8009ff6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009ff8:	47b8      	blx	r7
 8009ffa:	89a1      	ldrh	r1, [r4, #12]
 8009ffc:	1c43      	adds	r3, r0, #1
 8009ffe:	d106      	bne.n	800a00e <__sflush_r+0x6a>
 800a000:	682b      	ldr	r3, [r5, #0]
 800a002:	2b1d      	cmp	r3, #29
 800a004:	d831      	bhi.n	800a06a <__sflush_r+0xc6>
 800a006:	4a2c      	ldr	r2, [pc, #176]	; (800a0b8 <__sflush_r+0x114>)
 800a008:	40da      	lsrs	r2, r3
 800a00a:	07d3      	lsls	r3, r2, #31
 800a00c:	d52d      	bpl.n	800a06a <__sflush_r+0xc6>
 800a00e:	2300      	movs	r3, #0
 800a010:	6063      	str	r3, [r4, #4]
 800a012:	6923      	ldr	r3, [r4, #16]
 800a014:	6023      	str	r3, [r4, #0]
 800a016:	04cb      	lsls	r3, r1, #19
 800a018:	d505      	bpl.n	800a026 <__sflush_r+0x82>
 800a01a:	1c43      	adds	r3, r0, #1
 800a01c:	d102      	bne.n	800a024 <__sflush_r+0x80>
 800a01e:	682b      	ldr	r3, [r5, #0]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d100      	bne.n	800a026 <__sflush_r+0x82>
 800a024:	6560      	str	r0, [r4, #84]	; 0x54
 800a026:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a028:	602e      	str	r6, [r5, #0]
 800a02a:	2900      	cmp	r1, #0
 800a02c:	d0c6      	beq.n	8009fbc <__sflush_r+0x18>
 800a02e:	0023      	movs	r3, r4
 800a030:	3344      	adds	r3, #68	; 0x44
 800a032:	4299      	cmp	r1, r3
 800a034:	d002      	beq.n	800a03c <__sflush_r+0x98>
 800a036:	0028      	movs	r0, r5
 800a038:	f000 f9fe 	bl	800a438 <_free_r>
 800a03c:	2000      	movs	r0, #0
 800a03e:	6360      	str	r0, [r4, #52]	; 0x34
 800a040:	e7bd      	b.n	8009fbe <__sflush_r+0x1a>
 800a042:	2301      	movs	r3, #1
 800a044:	0028      	movs	r0, r5
 800a046:	6a21      	ldr	r1, [r4, #32]
 800a048:	47b8      	blx	r7
 800a04a:	1c43      	adds	r3, r0, #1
 800a04c:	d1c5      	bne.n	8009fda <__sflush_r+0x36>
 800a04e:	682b      	ldr	r3, [r5, #0]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d0c2      	beq.n	8009fda <__sflush_r+0x36>
 800a054:	2b1d      	cmp	r3, #29
 800a056:	d001      	beq.n	800a05c <__sflush_r+0xb8>
 800a058:	2b16      	cmp	r3, #22
 800a05a:	d101      	bne.n	800a060 <__sflush_r+0xbc>
 800a05c:	602e      	str	r6, [r5, #0]
 800a05e:	e7ad      	b.n	8009fbc <__sflush_r+0x18>
 800a060:	2340      	movs	r3, #64	; 0x40
 800a062:	89a2      	ldrh	r2, [r4, #12]
 800a064:	4313      	orrs	r3, r2
 800a066:	81a3      	strh	r3, [r4, #12]
 800a068:	e7a9      	b.n	8009fbe <__sflush_r+0x1a>
 800a06a:	2340      	movs	r3, #64	; 0x40
 800a06c:	430b      	orrs	r3, r1
 800a06e:	e7fa      	b.n	800a066 <__sflush_r+0xc2>
 800a070:	690f      	ldr	r7, [r1, #16]
 800a072:	2f00      	cmp	r7, #0
 800a074:	d0a2      	beq.n	8009fbc <__sflush_r+0x18>
 800a076:	680a      	ldr	r2, [r1, #0]
 800a078:	600f      	str	r7, [r1, #0]
 800a07a:	1bd2      	subs	r2, r2, r7
 800a07c:	9201      	str	r2, [sp, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	079b      	lsls	r3, r3, #30
 800a082:	d100      	bne.n	800a086 <__sflush_r+0xe2>
 800a084:	694a      	ldr	r2, [r1, #20]
 800a086:	60a2      	str	r2, [r4, #8]
 800a088:	9b01      	ldr	r3, [sp, #4]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	dc00      	bgt.n	800a090 <__sflush_r+0xec>
 800a08e:	e795      	b.n	8009fbc <__sflush_r+0x18>
 800a090:	003a      	movs	r2, r7
 800a092:	0028      	movs	r0, r5
 800a094:	9b01      	ldr	r3, [sp, #4]
 800a096:	6a21      	ldr	r1, [r4, #32]
 800a098:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a09a:	47b0      	blx	r6
 800a09c:	2800      	cmp	r0, #0
 800a09e:	dc06      	bgt.n	800a0ae <__sflush_r+0x10a>
 800a0a0:	2340      	movs	r3, #64	; 0x40
 800a0a2:	2001      	movs	r0, #1
 800a0a4:	89a2      	ldrh	r2, [r4, #12]
 800a0a6:	4240      	negs	r0, r0
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	81a3      	strh	r3, [r4, #12]
 800a0ac:	e787      	b.n	8009fbe <__sflush_r+0x1a>
 800a0ae:	9b01      	ldr	r3, [sp, #4]
 800a0b0:	183f      	adds	r7, r7, r0
 800a0b2:	1a1b      	subs	r3, r3, r0
 800a0b4:	9301      	str	r3, [sp, #4]
 800a0b6:	e7e7      	b.n	800a088 <__sflush_r+0xe4>
 800a0b8:	20400001 	.word	0x20400001

0800a0bc <_fflush_r>:
 800a0bc:	690b      	ldr	r3, [r1, #16]
 800a0be:	b570      	push	{r4, r5, r6, lr}
 800a0c0:	0005      	movs	r5, r0
 800a0c2:	000c      	movs	r4, r1
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d102      	bne.n	800a0ce <_fflush_r+0x12>
 800a0c8:	2500      	movs	r5, #0
 800a0ca:	0028      	movs	r0, r5
 800a0cc:	bd70      	pop	{r4, r5, r6, pc}
 800a0ce:	2800      	cmp	r0, #0
 800a0d0:	d004      	beq.n	800a0dc <_fflush_r+0x20>
 800a0d2:	6983      	ldr	r3, [r0, #24]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d101      	bne.n	800a0dc <_fflush_r+0x20>
 800a0d8:	f000 f892 	bl	800a200 <__sinit>
 800a0dc:	4b14      	ldr	r3, [pc, #80]	; (800a130 <_fflush_r+0x74>)
 800a0de:	429c      	cmp	r4, r3
 800a0e0:	d11b      	bne.n	800a11a <_fflush_r+0x5e>
 800a0e2:	686c      	ldr	r4, [r5, #4]
 800a0e4:	220c      	movs	r2, #12
 800a0e6:	5ea3      	ldrsh	r3, [r4, r2]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d0ed      	beq.n	800a0c8 <_fflush_r+0xc>
 800a0ec:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a0ee:	07d2      	lsls	r2, r2, #31
 800a0f0:	d404      	bmi.n	800a0fc <_fflush_r+0x40>
 800a0f2:	059b      	lsls	r3, r3, #22
 800a0f4:	d402      	bmi.n	800a0fc <_fflush_r+0x40>
 800a0f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0f8:	f000 f923 	bl	800a342 <__retarget_lock_acquire_recursive>
 800a0fc:	0028      	movs	r0, r5
 800a0fe:	0021      	movs	r1, r4
 800a100:	f7ff ff50 	bl	8009fa4 <__sflush_r>
 800a104:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a106:	0005      	movs	r5, r0
 800a108:	07db      	lsls	r3, r3, #31
 800a10a:	d4de      	bmi.n	800a0ca <_fflush_r+0xe>
 800a10c:	89a3      	ldrh	r3, [r4, #12]
 800a10e:	059b      	lsls	r3, r3, #22
 800a110:	d4db      	bmi.n	800a0ca <_fflush_r+0xe>
 800a112:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a114:	f000 f916 	bl	800a344 <__retarget_lock_release_recursive>
 800a118:	e7d7      	b.n	800a0ca <_fflush_r+0xe>
 800a11a:	4b06      	ldr	r3, [pc, #24]	; (800a134 <_fflush_r+0x78>)
 800a11c:	429c      	cmp	r4, r3
 800a11e:	d101      	bne.n	800a124 <_fflush_r+0x68>
 800a120:	68ac      	ldr	r4, [r5, #8]
 800a122:	e7df      	b.n	800a0e4 <_fflush_r+0x28>
 800a124:	4b04      	ldr	r3, [pc, #16]	; (800a138 <_fflush_r+0x7c>)
 800a126:	429c      	cmp	r4, r3
 800a128:	d1dc      	bne.n	800a0e4 <_fflush_r+0x28>
 800a12a:	68ec      	ldr	r4, [r5, #12]
 800a12c:	e7da      	b.n	800a0e4 <_fflush_r+0x28>
 800a12e:	46c0      	nop			; (mov r8, r8)
 800a130:	0800eab4 	.word	0x0800eab4
 800a134:	0800ead4 	.word	0x0800ead4
 800a138:	0800ea94 	.word	0x0800ea94

0800a13c <std>:
 800a13c:	2300      	movs	r3, #0
 800a13e:	b510      	push	{r4, lr}
 800a140:	0004      	movs	r4, r0
 800a142:	6003      	str	r3, [r0, #0]
 800a144:	6043      	str	r3, [r0, #4]
 800a146:	6083      	str	r3, [r0, #8]
 800a148:	8181      	strh	r1, [r0, #12]
 800a14a:	6643      	str	r3, [r0, #100]	; 0x64
 800a14c:	0019      	movs	r1, r3
 800a14e:	81c2      	strh	r2, [r0, #14]
 800a150:	6103      	str	r3, [r0, #16]
 800a152:	6143      	str	r3, [r0, #20]
 800a154:	6183      	str	r3, [r0, #24]
 800a156:	2208      	movs	r2, #8
 800a158:	305c      	adds	r0, #92	; 0x5c
 800a15a:	f7ff fa81 	bl	8009660 <memset>
 800a15e:	4b05      	ldr	r3, [pc, #20]	; (800a174 <std+0x38>)
 800a160:	6224      	str	r4, [r4, #32]
 800a162:	6263      	str	r3, [r4, #36]	; 0x24
 800a164:	4b04      	ldr	r3, [pc, #16]	; (800a178 <std+0x3c>)
 800a166:	62a3      	str	r3, [r4, #40]	; 0x28
 800a168:	4b04      	ldr	r3, [pc, #16]	; (800a17c <std+0x40>)
 800a16a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a16c:	4b04      	ldr	r3, [pc, #16]	; (800a180 <std+0x44>)
 800a16e:	6323      	str	r3, [r4, #48]	; 0x30
 800a170:	bd10      	pop	{r4, pc}
 800a172:	46c0      	nop			; (mov r8, r8)
 800a174:	0800a9d9 	.word	0x0800a9d9
 800a178:	0800aa01 	.word	0x0800aa01
 800a17c:	0800aa39 	.word	0x0800aa39
 800a180:	0800aa65 	.word	0x0800aa65

0800a184 <_cleanup_r>:
 800a184:	b510      	push	{r4, lr}
 800a186:	4902      	ldr	r1, [pc, #8]	; (800a190 <_cleanup_r+0xc>)
 800a188:	f000 f8ba 	bl	800a300 <_fwalk_reent>
 800a18c:	bd10      	pop	{r4, pc}
 800a18e:	46c0      	nop			; (mov r8, r8)
 800a190:	0800a0bd 	.word	0x0800a0bd

0800a194 <__sfmoreglue>:
 800a194:	b570      	push	{r4, r5, r6, lr}
 800a196:	2568      	movs	r5, #104	; 0x68
 800a198:	1e4a      	subs	r2, r1, #1
 800a19a:	4355      	muls	r5, r2
 800a19c:	000e      	movs	r6, r1
 800a19e:	0029      	movs	r1, r5
 800a1a0:	3174      	adds	r1, #116	; 0x74
 800a1a2:	f000 f9b5 	bl	800a510 <_malloc_r>
 800a1a6:	1e04      	subs	r4, r0, #0
 800a1a8:	d008      	beq.n	800a1bc <__sfmoreglue+0x28>
 800a1aa:	2100      	movs	r1, #0
 800a1ac:	002a      	movs	r2, r5
 800a1ae:	6001      	str	r1, [r0, #0]
 800a1b0:	6046      	str	r6, [r0, #4]
 800a1b2:	300c      	adds	r0, #12
 800a1b4:	60a0      	str	r0, [r4, #8]
 800a1b6:	3268      	adds	r2, #104	; 0x68
 800a1b8:	f7ff fa52 	bl	8009660 <memset>
 800a1bc:	0020      	movs	r0, r4
 800a1be:	bd70      	pop	{r4, r5, r6, pc}

0800a1c0 <__sfp_lock_acquire>:
 800a1c0:	b510      	push	{r4, lr}
 800a1c2:	4802      	ldr	r0, [pc, #8]	; (800a1cc <__sfp_lock_acquire+0xc>)
 800a1c4:	f000 f8bd 	bl	800a342 <__retarget_lock_acquire_recursive>
 800a1c8:	bd10      	pop	{r4, pc}
 800a1ca:	46c0      	nop			; (mov r8, r8)
 800a1cc:	2000138d 	.word	0x2000138d

0800a1d0 <__sfp_lock_release>:
 800a1d0:	b510      	push	{r4, lr}
 800a1d2:	4802      	ldr	r0, [pc, #8]	; (800a1dc <__sfp_lock_release+0xc>)
 800a1d4:	f000 f8b6 	bl	800a344 <__retarget_lock_release_recursive>
 800a1d8:	bd10      	pop	{r4, pc}
 800a1da:	46c0      	nop			; (mov r8, r8)
 800a1dc:	2000138d 	.word	0x2000138d

0800a1e0 <__sinit_lock_acquire>:
 800a1e0:	b510      	push	{r4, lr}
 800a1e2:	4802      	ldr	r0, [pc, #8]	; (800a1ec <__sinit_lock_acquire+0xc>)
 800a1e4:	f000 f8ad 	bl	800a342 <__retarget_lock_acquire_recursive>
 800a1e8:	bd10      	pop	{r4, pc}
 800a1ea:	46c0      	nop			; (mov r8, r8)
 800a1ec:	2000138e 	.word	0x2000138e

0800a1f0 <__sinit_lock_release>:
 800a1f0:	b510      	push	{r4, lr}
 800a1f2:	4802      	ldr	r0, [pc, #8]	; (800a1fc <__sinit_lock_release+0xc>)
 800a1f4:	f000 f8a6 	bl	800a344 <__retarget_lock_release_recursive>
 800a1f8:	bd10      	pop	{r4, pc}
 800a1fa:	46c0      	nop			; (mov r8, r8)
 800a1fc:	2000138e 	.word	0x2000138e

0800a200 <__sinit>:
 800a200:	b513      	push	{r0, r1, r4, lr}
 800a202:	0004      	movs	r4, r0
 800a204:	f7ff ffec 	bl	800a1e0 <__sinit_lock_acquire>
 800a208:	69a3      	ldr	r3, [r4, #24]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d002      	beq.n	800a214 <__sinit+0x14>
 800a20e:	f7ff ffef 	bl	800a1f0 <__sinit_lock_release>
 800a212:	bd13      	pop	{r0, r1, r4, pc}
 800a214:	64a3      	str	r3, [r4, #72]	; 0x48
 800a216:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a218:	6523      	str	r3, [r4, #80]	; 0x50
 800a21a:	4b13      	ldr	r3, [pc, #76]	; (800a268 <__sinit+0x68>)
 800a21c:	4a13      	ldr	r2, [pc, #76]	; (800a26c <__sinit+0x6c>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	62a2      	str	r2, [r4, #40]	; 0x28
 800a222:	9301      	str	r3, [sp, #4]
 800a224:	42a3      	cmp	r3, r4
 800a226:	d101      	bne.n	800a22c <__sinit+0x2c>
 800a228:	2301      	movs	r3, #1
 800a22a:	61a3      	str	r3, [r4, #24]
 800a22c:	0020      	movs	r0, r4
 800a22e:	f000 f81f 	bl	800a270 <__sfp>
 800a232:	6060      	str	r0, [r4, #4]
 800a234:	0020      	movs	r0, r4
 800a236:	f000 f81b 	bl	800a270 <__sfp>
 800a23a:	60a0      	str	r0, [r4, #8]
 800a23c:	0020      	movs	r0, r4
 800a23e:	f000 f817 	bl	800a270 <__sfp>
 800a242:	2200      	movs	r2, #0
 800a244:	2104      	movs	r1, #4
 800a246:	60e0      	str	r0, [r4, #12]
 800a248:	6860      	ldr	r0, [r4, #4]
 800a24a:	f7ff ff77 	bl	800a13c <std>
 800a24e:	2201      	movs	r2, #1
 800a250:	2109      	movs	r1, #9
 800a252:	68a0      	ldr	r0, [r4, #8]
 800a254:	f7ff ff72 	bl	800a13c <std>
 800a258:	2202      	movs	r2, #2
 800a25a:	2112      	movs	r1, #18
 800a25c:	68e0      	ldr	r0, [r4, #12]
 800a25e:	f7ff ff6d 	bl	800a13c <std>
 800a262:	2301      	movs	r3, #1
 800a264:	61a3      	str	r3, [r4, #24]
 800a266:	e7d2      	b.n	800a20e <__sinit+0xe>
 800a268:	0800ea5c 	.word	0x0800ea5c
 800a26c:	0800a185 	.word	0x0800a185

0800a270 <__sfp>:
 800a270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a272:	0007      	movs	r7, r0
 800a274:	f7ff ffa4 	bl	800a1c0 <__sfp_lock_acquire>
 800a278:	4b1f      	ldr	r3, [pc, #124]	; (800a2f8 <__sfp+0x88>)
 800a27a:	681e      	ldr	r6, [r3, #0]
 800a27c:	69b3      	ldr	r3, [r6, #24]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d102      	bne.n	800a288 <__sfp+0x18>
 800a282:	0030      	movs	r0, r6
 800a284:	f7ff ffbc 	bl	800a200 <__sinit>
 800a288:	3648      	adds	r6, #72	; 0x48
 800a28a:	68b4      	ldr	r4, [r6, #8]
 800a28c:	6873      	ldr	r3, [r6, #4]
 800a28e:	3b01      	subs	r3, #1
 800a290:	d504      	bpl.n	800a29c <__sfp+0x2c>
 800a292:	6833      	ldr	r3, [r6, #0]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d022      	beq.n	800a2de <__sfp+0x6e>
 800a298:	6836      	ldr	r6, [r6, #0]
 800a29a:	e7f6      	b.n	800a28a <__sfp+0x1a>
 800a29c:	220c      	movs	r2, #12
 800a29e:	5ea5      	ldrsh	r5, [r4, r2]
 800a2a0:	2d00      	cmp	r5, #0
 800a2a2:	d11a      	bne.n	800a2da <__sfp+0x6a>
 800a2a4:	0020      	movs	r0, r4
 800a2a6:	4b15      	ldr	r3, [pc, #84]	; (800a2fc <__sfp+0x8c>)
 800a2a8:	3058      	adds	r0, #88	; 0x58
 800a2aa:	60e3      	str	r3, [r4, #12]
 800a2ac:	6665      	str	r5, [r4, #100]	; 0x64
 800a2ae:	f000 f847 	bl	800a340 <__retarget_lock_init_recursive>
 800a2b2:	f7ff ff8d 	bl	800a1d0 <__sfp_lock_release>
 800a2b6:	0020      	movs	r0, r4
 800a2b8:	2208      	movs	r2, #8
 800a2ba:	0029      	movs	r1, r5
 800a2bc:	6025      	str	r5, [r4, #0]
 800a2be:	60a5      	str	r5, [r4, #8]
 800a2c0:	6065      	str	r5, [r4, #4]
 800a2c2:	6125      	str	r5, [r4, #16]
 800a2c4:	6165      	str	r5, [r4, #20]
 800a2c6:	61a5      	str	r5, [r4, #24]
 800a2c8:	305c      	adds	r0, #92	; 0x5c
 800a2ca:	f7ff f9c9 	bl	8009660 <memset>
 800a2ce:	6365      	str	r5, [r4, #52]	; 0x34
 800a2d0:	63a5      	str	r5, [r4, #56]	; 0x38
 800a2d2:	64a5      	str	r5, [r4, #72]	; 0x48
 800a2d4:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a2d6:	0020      	movs	r0, r4
 800a2d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2da:	3468      	adds	r4, #104	; 0x68
 800a2dc:	e7d7      	b.n	800a28e <__sfp+0x1e>
 800a2de:	2104      	movs	r1, #4
 800a2e0:	0038      	movs	r0, r7
 800a2e2:	f7ff ff57 	bl	800a194 <__sfmoreglue>
 800a2e6:	1e04      	subs	r4, r0, #0
 800a2e8:	6030      	str	r0, [r6, #0]
 800a2ea:	d1d5      	bne.n	800a298 <__sfp+0x28>
 800a2ec:	f7ff ff70 	bl	800a1d0 <__sfp_lock_release>
 800a2f0:	230c      	movs	r3, #12
 800a2f2:	603b      	str	r3, [r7, #0]
 800a2f4:	e7ef      	b.n	800a2d6 <__sfp+0x66>
 800a2f6:	46c0      	nop			; (mov r8, r8)
 800a2f8:	0800ea5c 	.word	0x0800ea5c
 800a2fc:	ffff0001 	.word	0xffff0001

0800a300 <_fwalk_reent>:
 800a300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a302:	0004      	movs	r4, r0
 800a304:	0006      	movs	r6, r0
 800a306:	2700      	movs	r7, #0
 800a308:	9101      	str	r1, [sp, #4]
 800a30a:	3448      	adds	r4, #72	; 0x48
 800a30c:	6863      	ldr	r3, [r4, #4]
 800a30e:	68a5      	ldr	r5, [r4, #8]
 800a310:	9300      	str	r3, [sp, #0]
 800a312:	9b00      	ldr	r3, [sp, #0]
 800a314:	3b01      	subs	r3, #1
 800a316:	9300      	str	r3, [sp, #0]
 800a318:	d504      	bpl.n	800a324 <_fwalk_reent+0x24>
 800a31a:	6824      	ldr	r4, [r4, #0]
 800a31c:	2c00      	cmp	r4, #0
 800a31e:	d1f5      	bne.n	800a30c <_fwalk_reent+0xc>
 800a320:	0038      	movs	r0, r7
 800a322:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a324:	89ab      	ldrh	r3, [r5, #12]
 800a326:	2b01      	cmp	r3, #1
 800a328:	d908      	bls.n	800a33c <_fwalk_reent+0x3c>
 800a32a:	220e      	movs	r2, #14
 800a32c:	5eab      	ldrsh	r3, [r5, r2]
 800a32e:	3301      	adds	r3, #1
 800a330:	d004      	beq.n	800a33c <_fwalk_reent+0x3c>
 800a332:	0029      	movs	r1, r5
 800a334:	0030      	movs	r0, r6
 800a336:	9b01      	ldr	r3, [sp, #4]
 800a338:	4798      	blx	r3
 800a33a:	4307      	orrs	r7, r0
 800a33c:	3568      	adds	r5, #104	; 0x68
 800a33e:	e7e8      	b.n	800a312 <_fwalk_reent+0x12>

0800a340 <__retarget_lock_init_recursive>:
 800a340:	4770      	bx	lr

0800a342 <__retarget_lock_acquire_recursive>:
 800a342:	4770      	bx	lr

0800a344 <__retarget_lock_release_recursive>:
 800a344:	4770      	bx	lr
	...

0800a348 <__swhatbuf_r>:
 800a348:	b570      	push	{r4, r5, r6, lr}
 800a34a:	000e      	movs	r6, r1
 800a34c:	001d      	movs	r5, r3
 800a34e:	230e      	movs	r3, #14
 800a350:	5ec9      	ldrsh	r1, [r1, r3]
 800a352:	0014      	movs	r4, r2
 800a354:	b096      	sub	sp, #88	; 0x58
 800a356:	2900      	cmp	r1, #0
 800a358:	da08      	bge.n	800a36c <__swhatbuf_r+0x24>
 800a35a:	220c      	movs	r2, #12
 800a35c:	5eb3      	ldrsh	r3, [r6, r2]
 800a35e:	2200      	movs	r2, #0
 800a360:	602a      	str	r2, [r5, #0]
 800a362:	061b      	lsls	r3, r3, #24
 800a364:	d411      	bmi.n	800a38a <__swhatbuf_r+0x42>
 800a366:	2380      	movs	r3, #128	; 0x80
 800a368:	00db      	lsls	r3, r3, #3
 800a36a:	e00f      	b.n	800a38c <__swhatbuf_r+0x44>
 800a36c:	466a      	mov	r2, sp
 800a36e:	f000 fba5 	bl	800aabc <_fstat_r>
 800a372:	2800      	cmp	r0, #0
 800a374:	dbf1      	blt.n	800a35a <__swhatbuf_r+0x12>
 800a376:	23f0      	movs	r3, #240	; 0xf0
 800a378:	9901      	ldr	r1, [sp, #4]
 800a37a:	021b      	lsls	r3, r3, #8
 800a37c:	4019      	ands	r1, r3
 800a37e:	4b05      	ldr	r3, [pc, #20]	; (800a394 <__swhatbuf_r+0x4c>)
 800a380:	18c9      	adds	r1, r1, r3
 800a382:	424b      	negs	r3, r1
 800a384:	4159      	adcs	r1, r3
 800a386:	6029      	str	r1, [r5, #0]
 800a388:	e7ed      	b.n	800a366 <__swhatbuf_r+0x1e>
 800a38a:	2340      	movs	r3, #64	; 0x40
 800a38c:	2000      	movs	r0, #0
 800a38e:	6023      	str	r3, [r4, #0]
 800a390:	b016      	add	sp, #88	; 0x58
 800a392:	bd70      	pop	{r4, r5, r6, pc}
 800a394:	ffffe000 	.word	0xffffe000

0800a398 <__smakebuf_r>:
 800a398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a39a:	2602      	movs	r6, #2
 800a39c:	898b      	ldrh	r3, [r1, #12]
 800a39e:	0005      	movs	r5, r0
 800a3a0:	000c      	movs	r4, r1
 800a3a2:	4233      	tst	r3, r6
 800a3a4:	d006      	beq.n	800a3b4 <__smakebuf_r+0x1c>
 800a3a6:	0023      	movs	r3, r4
 800a3a8:	3347      	adds	r3, #71	; 0x47
 800a3aa:	6023      	str	r3, [r4, #0]
 800a3ac:	6123      	str	r3, [r4, #16]
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	6163      	str	r3, [r4, #20]
 800a3b2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a3b4:	466a      	mov	r2, sp
 800a3b6:	ab01      	add	r3, sp, #4
 800a3b8:	f7ff ffc6 	bl	800a348 <__swhatbuf_r>
 800a3bc:	9900      	ldr	r1, [sp, #0]
 800a3be:	0007      	movs	r7, r0
 800a3c0:	0028      	movs	r0, r5
 800a3c2:	f000 f8a5 	bl	800a510 <_malloc_r>
 800a3c6:	2800      	cmp	r0, #0
 800a3c8:	d108      	bne.n	800a3dc <__smakebuf_r+0x44>
 800a3ca:	220c      	movs	r2, #12
 800a3cc:	5ea3      	ldrsh	r3, [r4, r2]
 800a3ce:	059a      	lsls	r2, r3, #22
 800a3d0:	d4ef      	bmi.n	800a3b2 <__smakebuf_r+0x1a>
 800a3d2:	2203      	movs	r2, #3
 800a3d4:	4393      	bics	r3, r2
 800a3d6:	431e      	orrs	r6, r3
 800a3d8:	81a6      	strh	r6, [r4, #12]
 800a3da:	e7e4      	b.n	800a3a6 <__smakebuf_r+0xe>
 800a3dc:	4b0f      	ldr	r3, [pc, #60]	; (800a41c <__smakebuf_r+0x84>)
 800a3de:	62ab      	str	r3, [r5, #40]	; 0x28
 800a3e0:	2380      	movs	r3, #128	; 0x80
 800a3e2:	89a2      	ldrh	r2, [r4, #12]
 800a3e4:	6020      	str	r0, [r4, #0]
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	81a3      	strh	r3, [r4, #12]
 800a3ea:	9b00      	ldr	r3, [sp, #0]
 800a3ec:	6120      	str	r0, [r4, #16]
 800a3ee:	6163      	str	r3, [r4, #20]
 800a3f0:	9b01      	ldr	r3, [sp, #4]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d00d      	beq.n	800a412 <__smakebuf_r+0x7a>
 800a3f6:	0028      	movs	r0, r5
 800a3f8:	230e      	movs	r3, #14
 800a3fa:	5ee1      	ldrsh	r1, [r4, r3]
 800a3fc:	f000 fb70 	bl	800aae0 <_isatty_r>
 800a400:	2800      	cmp	r0, #0
 800a402:	d006      	beq.n	800a412 <__smakebuf_r+0x7a>
 800a404:	2203      	movs	r2, #3
 800a406:	89a3      	ldrh	r3, [r4, #12]
 800a408:	4393      	bics	r3, r2
 800a40a:	001a      	movs	r2, r3
 800a40c:	2301      	movs	r3, #1
 800a40e:	4313      	orrs	r3, r2
 800a410:	81a3      	strh	r3, [r4, #12]
 800a412:	89a0      	ldrh	r0, [r4, #12]
 800a414:	4307      	orrs	r7, r0
 800a416:	81a7      	strh	r7, [r4, #12]
 800a418:	e7cb      	b.n	800a3b2 <__smakebuf_r+0x1a>
 800a41a:	46c0      	nop			; (mov r8, r8)
 800a41c:	0800a185 	.word	0x0800a185

0800a420 <memchr>:
 800a420:	b2c9      	uxtb	r1, r1
 800a422:	1882      	adds	r2, r0, r2
 800a424:	4290      	cmp	r0, r2
 800a426:	d101      	bne.n	800a42c <memchr+0xc>
 800a428:	2000      	movs	r0, #0
 800a42a:	4770      	bx	lr
 800a42c:	7803      	ldrb	r3, [r0, #0]
 800a42e:	428b      	cmp	r3, r1
 800a430:	d0fb      	beq.n	800a42a <memchr+0xa>
 800a432:	3001      	adds	r0, #1
 800a434:	e7f6      	b.n	800a424 <memchr+0x4>
	...

0800a438 <_free_r>:
 800a438:	b570      	push	{r4, r5, r6, lr}
 800a43a:	0005      	movs	r5, r0
 800a43c:	2900      	cmp	r1, #0
 800a43e:	d010      	beq.n	800a462 <_free_r+0x2a>
 800a440:	1f0c      	subs	r4, r1, #4
 800a442:	6823      	ldr	r3, [r4, #0]
 800a444:	2b00      	cmp	r3, #0
 800a446:	da00      	bge.n	800a44a <_free_r+0x12>
 800a448:	18e4      	adds	r4, r4, r3
 800a44a:	0028      	movs	r0, r5
 800a44c:	f000 fb6e 	bl	800ab2c <__malloc_lock>
 800a450:	4a1d      	ldr	r2, [pc, #116]	; (800a4c8 <_free_r+0x90>)
 800a452:	6813      	ldr	r3, [r2, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d105      	bne.n	800a464 <_free_r+0x2c>
 800a458:	6063      	str	r3, [r4, #4]
 800a45a:	6014      	str	r4, [r2, #0]
 800a45c:	0028      	movs	r0, r5
 800a45e:	f000 fb6d 	bl	800ab3c <__malloc_unlock>
 800a462:	bd70      	pop	{r4, r5, r6, pc}
 800a464:	42a3      	cmp	r3, r4
 800a466:	d908      	bls.n	800a47a <_free_r+0x42>
 800a468:	6821      	ldr	r1, [r4, #0]
 800a46a:	1860      	adds	r0, r4, r1
 800a46c:	4283      	cmp	r3, r0
 800a46e:	d1f3      	bne.n	800a458 <_free_r+0x20>
 800a470:	6818      	ldr	r0, [r3, #0]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	1841      	adds	r1, r0, r1
 800a476:	6021      	str	r1, [r4, #0]
 800a478:	e7ee      	b.n	800a458 <_free_r+0x20>
 800a47a:	001a      	movs	r2, r3
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d001      	beq.n	800a486 <_free_r+0x4e>
 800a482:	42a3      	cmp	r3, r4
 800a484:	d9f9      	bls.n	800a47a <_free_r+0x42>
 800a486:	6811      	ldr	r1, [r2, #0]
 800a488:	1850      	adds	r0, r2, r1
 800a48a:	42a0      	cmp	r0, r4
 800a48c:	d10b      	bne.n	800a4a6 <_free_r+0x6e>
 800a48e:	6820      	ldr	r0, [r4, #0]
 800a490:	1809      	adds	r1, r1, r0
 800a492:	1850      	adds	r0, r2, r1
 800a494:	6011      	str	r1, [r2, #0]
 800a496:	4283      	cmp	r3, r0
 800a498:	d1e0      	bne.n	800a45c <_free_r+0x24>
 800a49a:	6818      	ldr	r0, [r3, #0]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	1841      	adds	r1, r0, r1
 800a4a0:	6011      	str	r1, [r2, #0]
 800a4a2:	6053      	str	r3, [r2, #4]
 800a4a4:	e7da      	b.n	800a45c <_free_r+0x24>
 800a4a6:	42a0      	cmp	r0, r4
 800a4a8:	d902      	bls.n	800a4b0 <_free_r+0x78>
 800a4aa:	230c      	movs	r3, #12
 800a4ac:	602b      	str	r3, [r5, #0]
 800a4ae:	e7d5      	b.n	800a45c <_free_r+0x24>
 800a4b0:	6821      	ldr	r1, [r4, #0]
 800a4b2:	1860      	adds	r0, r4, r1
 800a4b4:	4283      	cmp	r3, r0
 800a4b6:	d103      	bne.n	800a4c0 <_free_r+0x88>
 800a4b8:	6818      	ldr	r0, [r3, #0]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	1841      	adds	r1, r0, r1
 800a4be:	6021      	str	r1, [r4, #0]
 800a4c0:	6063      	str	r3, [r4, #4]
 800a4c2:	6054      	str	r4, [r2, #4]
 800a4c4:	e7ca      	b.n	800a45c <_free_r+0x24>
 800a4c6:	46c0      	nop			; (mov r8, r8)
 800a4c8:	20001390 	.word	0x20001390

0800a4cc <sbrk_aligned>:
 800a4cc:	b570      	push	{r4, r5, r6, lr}
 800a4ce:	4e0f      	ldr	r6, [pc, #60]	; (800a50c <sbrk_aligned+0x40>)
 800a4d0:	000d      	movs	r5, r1
 800a4d2:	6831      	ldr	r1, [r6, #0]
 800a4d4:	0004      	movs	r4, r0
 800a4d6:	2900      	cmp	r1, #0
 800a4d8:	d102      	bne.n	800a4e0 <sbrk_aligned+0x14>
 800a4da:	f000 fa21 	bl	800a920 <_sbrk_r>
 800a4de:	6030      	str	r0, [r6, #0]
 800a4e0:	0029      	movs	r1, r5
 800a4e2:	0020      	movs	r0, r4
 800a4e4:	f000 fa1c 	bl	800a920 <_sbrk_r>
 800a4e8:	1c43      	adds	r3, r0, #1
 800a4ea:	d00a      	beq.n	800a502 <sbrk_aligned+0x36>
 800a4ec:	2303      	movs	r3, #3
 800a4ee:	1cc5      	adds	r5, r0, #3
 800a4f0:	439d      	bics	r5, r3
 800a4f2:	42a8      	cmp	r0, r5
 800a4f4:	d007      	beq.n	800a506 <sbrk_aligned+0x3a>
 800a4f6:	1a29      	subs	r1, r5, r0
 800a4f8:	0020      	movs	r0, r4
 800a4fa:	f000 fa11 	bl	800a920 <_sbrk_r>
 800a4fe:	1c43      	adds	r3, r0, #1
 800a500:	d101      	bne.n	800a506 <sbrk_aligned+0x3a>
 800a502:	2501      	movs	r5, #1
 800a504:	426d      	negs	r5, r5
 800a506:	0028      	movs	r0, r5
 800a508:	bd70      	pop	{r4, r5, r6, pc}
 800a50a:	46c0      	nop			; (mov r8, r8)
 800a50c:	20001394 	.word	0x20001394

0800a510 <_malloc_r>:
 800a510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a512:	2203      	movs	r2, #3
 800a514:	1ccb      	adds	r3, r1, #3
 800a516:	4393      	bics	r3, r2
 800a518:	3308      	adds	r3, #8
 800a51a:	0006      	movs	r6, r0
 800a51c:	001f      	movs	r7, r3
 800a51e:	2b0c      	cmp	r3, #12
 800a520:	d232      	bcs.n	800a588 <_malloc_r+0x78>
 800a522:	270c      	movs	r7, #12
 800a524:	42b9      	cmp	r1, r7
 800a526:	d831      	bhi.n	800a58c <_malloc_r+0x7c>
 800a528:	0030      	movs	r0, r6
 800a52a:	f000 faff 	bl	800ab2c <__malloc_lock>
 800a52e:	4d32      	ldr	r5, [pc, #200]	; (800a5f8 <_malloc_r+0xe8>)
 800a530:	682b      	ldr	r3, [r5, #0]
 800a532:	001c      	movs	r4, r3
 800a534:	2c00      	cmp	r4, #0
 800a536:	d12e      	bne.n	800a596 <_malloc_r+0x86>
 800a538:	0039      	movs	r1, r7
 800a53a:	0030      	movs	r0, r6
 800a53c:	f7ff ffc6 	bl	800a4cc <sbrk_aligned>
 800a540:	0004      	movs	r4, r0
 800a542:	1c43      	adds	r3, r0, #1
 800a544:	d11e      	bne.n	800a584 <_malloc_r+0x74>
 800a546:	682c      	ldr	r4, [r5, #0]
 800a548:	0025      	movs	r5, r4
 800a54a:	2d00      	cmp	r5, #0
 800a54c:	d14a      	bne.n	800a5e4 <_malloc_r+0xd4>
 800a54e:	6823      	ldr	r3, [r4, #0]
 800a550:	0029      	movs	r1, r5
 800a552:	18e3      	adds	r3, r4, r3
 800a554:	0030      	movs	r0, r6
 800a556:	9301      	str	r3, [sp, #4]
 800a558:	f000 f9e2 	bl	800a920 <_sbrk_r>
 800a55c:	9b01      	ldr	r3, [sp, #4]
 800a55e:	4283      	cmp	r3, r0
 800a560:	d143      	bne.n	800a5ea <_malloc_r+0xda>
 800a562:	6823      	ldr	r3, [r4, #0]
 800a564:	3703      	adds	r7, #3
 800a566:	1aff      	subs	r7, r7, r3
 800a568:	2303      	movs	r3, #3
 800a56a:	439f      	bics	r7, r3
 800a56c:	3708      	adds	r7, #8
 800a56e:	2f0c      	cmp	r7, #12
 800a570:	d200      	bcs.n	800a574 <_malloc_r+0x64>
 800a572:	270c      	movs	r7, #12
 800a574:	0039      	movs	r1, r7
 800a576:	0030      	movs	r0, r6
 800a578:	f7ff ffa8 	bl	800a4cc <sbrk_aligned>
 800a57c:	1c43      	adds	r3, r0, #1
 800a57e:	d034      	beq.n	800a5ea <_malloc_r+0xda>
 800a580:	6823      	ldr	r3, [r4, #0]
 800a582:	19df      	adds	r7, r3, r7
 800a584:	6027      	str	r7, [r4, #0]
 800a586:	e013      	b.n	800a5b0 <_malloc_r+0xa0>
 800a588:	2b00      	cmp	r3, #0
 800a58a:	dacb      	bge.n	800a524 <_malloc_r+0x14>
 800a58c:	230c      	movs	r3, #12
 800a58e:	2500      	movs	r5, #0
 800a590:	6033      	str	r3, [r6, #0]
 800a592:	0028      	movs	r0, r5
 800a594:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a596:	6822      	ldr	r2, [r4, #0]
 800a598:	1bd1      	subs	r1, r2, r7
 800a59a:	d420      	bmi.n	800a5de <_malloc_r+0xce>
 800a59c:	290b      	cmp	r1, #11
 800a59e:	d917      	bls.n	800a5d0 <_malloc_r+0xc0>
 800a5a0:	19e2      	adds	r2, r4, r7
 800a5a2:	6027      	str	r7, [r4, #0]
 800a5a4:	42a3      	cmp	r3, r4
 800a5a6:	d111      	bne.n	800a5cc <_malloc_r+0xbc>
 800a5a8:	602a      	str	r2, [r5, #0]
 800a5aa:	6863      	ldr	r3, [r4, #4]
 800a5ac:	6011      	str	r1, [r2, #0]
 800a5ae:	6053      	str	r3, [r2, #4]
 800a5b0:	0030      	movs	r0, r6
 800a5b2:	0025      	movs	r5, r4
 800a5b4:	f000 fac2 	bl	800ab3c <__malloc_unlock>
 800a5b8:	2207      	movs	r2, #7
 800a5ba:	350b      	adds	r5, #11
 800a5bc:	1d23      	adds	r3, r4, #4
 800a5be:	4395      	bics	r5, r2
 800a5c0:	1aea      	subs	r2, r5, r3
 800a5c2:	429d      	cmp	r5, r3
 800a5c4:	d0e5      	beq.n	800a592 <_malloc_r+0x82>
 800a5c6:	1b5b      	subs	r3, r3, r5
 800a5c8:	50a3      	str	r3, [r4, r2]
 800a5ca:	e7e2      	b.n	800a592 <_malloc_r+0x82>
 800a5cc:	605a      	str	r2, [r3, #4]
 800a5ce:	e7ec      	b.n	800a5aa <_malloc_r+0x9a>
 800a5d0:	6862      	ldr	r2, [r4, #4]
 800a5d2:	42a3      	cmp	r3, r4
 800a5d4:	d101      	bne.n	800a5da <_malloc_r+0xca>
 800a5d6:	602a      	str	r2, [r5, #0]
 800a5d8:	e7ea      	b.n	800a5b0 <_malloc_r+0xa0>
 800a5da:	605a      	str	r2, [r3, #4]
 800a5dc:	e7e8      	b.n	800a5b0 <_malloc_r+0xa0>
 800a5de:	0023      	movs	r3, r4
 800a5e0:	6864      	ldr	r4, [r4, #4]
 800a5e2:	e7a7      	b.n	800a534 <_malloc_r+0x24>
 800a5e4:	002c      	movs	r4, r5
 800a5e6:	686d      	ldr	r5, [r5, #4]
 800a5e8:	e7af      	b.n	800a54a <_malloc_r+0x3a>
 800a5ea:	230c      	movs	r3, #12
 800a5ec:	0030      	movs	r0, r6
 800a5ee:	6033      	str	r3, [r6, #0]
 800a5f0:	f000 faa4 	bl	800ab3c <__malloc_unlock>
 800a5f4:	e7cd      	b.n	800a592 <_malloc_r+0x82>
 800a5f6:	46c0      	nop			; (mov r8, r8)
 800a5f8:	20001390 	.word	0x20001390

0800a5fc <_realloc_r>:
 800a5fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5fe:	0007      	movs	r7, r0
 800a600:	000e      	movs	r6, r1
 800a602:	0014      	movs	r4, r2
 800a604:	2900      	cmp	r1, #0
 800a606:	d105      	bne.n	800a614 <_realloc_r+0x18>
 800a608:	0011      	movs	r1, r2
 800a60a:	f7ff ff81 	bl	800a510 <_malloc_r>
 800a60e:	0005      	movs	r5, r0
 800a610:	0028      	movs	r0, r5
 800a612:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a614:	2a00      	cmp	r2, #0
 800a616:	d103      	bne.n	800a620 <_realloc_r+0x24>
 800a618:	f7ff ff0e 	bl	800a438 <_free_r>
 800a61c:	0025      	movs	r5, r4
 800a61e:	e7f7      	b.n	800a610 <_realloc_r+0x14>
 800a620:	f000 fa94 	bl	800ab4c <_malloc_usable_size_r>
 800a624:	9001      	str	r0, [sp, #4]
 800a626:	4284      	cmp	r4, r0
 800a628:	d803      	bhi.n	800a632 <_realloc_r+0x36>
 800a62a:	0035      	movs	r5, r6
 800a62c:	0843      	lsrs	r3, r0, #1
 800a62e:	42a3      	cmp	r3, r4
 800a630:	d3ee      	bcc.n	800a610 <_realloc_r+0x14>
 800a632:	0021      	movs	r1, r4
 800a634:	0038      	movs	r0, r7
 800a636:	f7ff ff6b 	bl	800a510 <_malloc_r>
 800a63a:	1e05      	subs	r5, r0, #0
 800a63c:	d0e8      	beq.n	800a610 <_realloc_r+0x14>
 800a63e:	9b01      	ldr	r3, [sp, #4]
 800a640:	0022      	movs	r2, r4
 800a642:	429c      	cmp	r4, r3
 800a644:	d900      	bls.n	800a648 <_realloc_r+0x4c>
 800a646:	001a      	movs	r2, r3
 800a648:	0031      	movs	r1, r6
 800a64a:	0028      	movs	r0, r5
 800a64c:	f7fe ffec 	bl	8009628 <memcpy>
 800a650:	0031      	movs	r1, r6
 800a652:	0038      	movs	r0, r7
 800a654:	f7ff fef0 	bl	800a438 <_free_r>
 800a658:	e7da      	b.n	800a610 <_realloc_r+0x14>
	...

0800a65c <__ssputs_r>:
 800a65c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a65e:	688e      	ldr	r6, [r1, #8]
 800a660:	b085      	sub	sp, #20
 800a662:	0007      	movs	r7, r0
 800a664:	000c      	movs	r4, r1
 800a666:	9203      	str	r2, [sp, #12]
 800a668:	9301      	str	r3, [sp, #4]
 800a66a:	429e      	cmp	r6, r3
 800a66c:	d83c      	bhi.n	800a6e8 <__ssputs_r+0x8c>
 800a66e:	2390      	movs	r3, #144	; 0x90
 800a670:	898a      	ldrh	r2, [r1, #12]
 800a672:	00db      	lsls	r3, r3, #3
 800a674:	421a      	tst	r2, r3
 800a676:	d034      	beq.n	800a6e2 <__ssputs_r+0x86>
 800a678:	6909      	ldr	r1, [r1, #16]
 800a67a:	6823      	ldr	r3, [r4, #0]
 800a67c:	6960      	ldr	r0, [r4, #20]
 800a67e:	1a5b      	subs	r3, r3, r1
 800a680:	9302      	str	r3, [sp, #8]
 800a682:	2303      	movs	r3, #3
 800a684:	4343      	muls	r3, r0
 800a686:	0fdd      	lsrs	r5, r3, #31
 800a688:	18ed      	adds	r5, r5, r3
 800a68a:	9b01      	ldr	r3, [sp, #4]
 800a68c:	9802      	ldr	r0, [sp, #8]
 800a68e:	3301      	adds	r3, #1
 800a690:	181b      	adds	r3, r3, r0
 800a692:	106d      	asrs	r5, r5, #1
 800a694:	42ab      	cmp	r3, r5
 800a696:	d900      	bls.n	800a69a <__ssputs_r+0x3e>
 800a698:	001d      	movs	r5, r3
 800a69a:	0553      	lsls	r3, r2, #21
 800a69c:	d532      	bpl.n	800a704 <__ssputs_r+0xa8>
 800a69e:	0029      	movs	r1, r5
 800a6a0:	0038      	movs	r0, r7
 800a6a2:	f7ff ff35 	bl	800a510 <_malloc_r>
 800a6a6:	1e06      	subs	r6, r0, #0
 800a6a8:	d109      	bne.n	800a6be <__ssputs_r+0x62>
 800a6aa:	230c      	movs	r3, #12
 800a6ac:	603b      	str	r3, [r7, #0]
 800a6ae:	2340      	movs	r3, #64	; 0x40
 800a6b0:	2001      	movs	r0, #1
 800a6b2:	89a2      	ldrh	r2, [r4, #12]
 800a6b4:	4240      	negs	r0, r0
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	81a3      	strh	r3, [r4, #12]
 800a6ba:	b005      	add	sp, #20
 800a6bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6be:	9a02      	ldr	r2, [sp, #8]
 800a6c0:	6921      	ldr	r1, [r4, #16]
 800a6c2:	f7fe ffb1 	bl	8009628 <memcpy>
 800a6c6:	89a3      	ldrh	r3, [r4, #12]
 800a6c8:	4a14      	ldr	r2, [pc, #80]	; (800a71c <__ssputs_r+0xc0>)
 800a6ca:	401a      	ands	r2, r3
 800a6cc:	2380      	movs	r3, #128	; 0x80
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	81a3      	strh	r3, [r4, #12]
 800a6d2:	9b02      	ldr	r3, [sp, #8]
 800a6d4:	6126      	str	r6, [r4, #16]
 800a6d6:	18f6      	adds	r6, r6, r3
 800a6d8:	6026      	str	r6, [r4, #0]
 800a6da:	6165      	str	r5, [r4, #20]
 800a6dc:	9e01      	ldr	r6, [sp, #4]
 800a6de:	1aed      	subs	r5, r5, r3
 800a6e0:	60a5      	str	r5, [r4, #8]
 800a6e2:	9b01      	ldr	r3, [sp, #4]
 800a6e4:	429e      	cmp	r6, r3
 800a6e6:	d900      	bls.n	800a6ea <__ssputs_r+0x8e>
 800a6e8:	9e01      	ldr	r6, [sp, #4]
 800a6ea:	0032      	movs	r2, r6
 800a6ec:	9903      	ldr	r1, [sp, #12]
 800a6ee:	6820      	ldr	r0, [r4, #0]
 800a6f0:	f7fe ffa3 	bl	800963a <memmove>
 800a6f4:	68a3      	ldr	r3, [r4, #8]
 800a6f6:	2000      	movs	r0, #0
 800a6f8:	1b9b      	subs	r3, r3, r6
 800a6fa:	60a3      	str	r3, [r4, #8]
 800a6fc:	6823      	ldr	r3, [r4, #0]
 800a6fe:	199e      	adds	r6, r3, r6
 800a700:	6026      	str	r6, [r4, #0]
 800a702:	e7da      	b.n	800a6ba <__ssputs_r+0x5e>
 800a704:	002a      	movs	r2, r5
 800a706:	0038      	movs	r0, r7
 800a708:	f7ff ff78 	bl	800a5fc <_realloc_r>
 800a70c:	1e06      	subs	r6, r0, #0
 800a70e:	d1e0      	bne.n	800a6d2 <__ssputs_r+0x76>
 800a710:	0038      	movs	r0, r7
 800a712:	6921      	ldr	r1, [r4, #16]
 800a714:	f7ff fe90 	bl	800a438 <_free_r>
 800a718:	e7c7      	b.n	800a6aa <__ssputs_r+0x4e>
 800a71a:	46c0      	nop			; (mov r8, r8)
 800a71c:	fffffb7f 	.word	0xfffffb7f

0800a720 <_svfiprintf_r>:
 800a720:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a722:	b0a1      	sub	sp, #132	; 0x84
 800a724:	9003      	str	r0, [sp, #12]
 800a726:	001d      	movs	r5, r3
 800a728:	898b      	ldrh	r3, [r1, #12]
 800a72a:	000f      	movs	r7, r1
 800a72c:	0016      	movs	r6, r2
 800a72e:	061b      	lsls	r3, r3, #24
 800a730:	d511      	bpl.n	800a756 <_svfiprintf_r+0x36>
 800a732:	690b      	ldr	r3, [r1, #16]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d10e      	bne.n	800a756 <_svfiprintf_r+0x36>
 800a738:	2140      	movs	r1, #64	; 0x40
 800a73a:	f7ff fee9 	bl	800a510 <_malloc_r>
 800a73e:	6038      	str	r0, [r7, #0]
 800a740:	6138      	str	r0, [r7, #16]
 800a742:	2800      	cmp	r0, #0
 800a744:	d105      	bne.n	800a752 <_svfiprintf_r+0x32>
 800a746:	230c      	movs	r3, #12
 800a748:	9a03      	ldr	r2, [sp, #12]
 800a74a:	3801      	subs	r0, #1
 800a74c:	6013      	str	r3, [r2, #0]
 800a74e:	b021      	add	sp, #132	; 0x84
 800a750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a752:	2340      	movs	r3, #64	; 0x40
 800a754:	617b      	str	r3, [r7, #20]
 800a756:	2300      	movs	r3, #0
 800a758:	ac08      	add	r4, sp, #32
 800a75a:	6163      	str	r3, [r4, #20]
 800a75c:	3320      	adds	r3, #32
 800a75e:	7663      	strb	r3, [r4, #25]
 800a760:	3310      	adds	r3, #16
 800a762:	76a3      	strb	r3, [r4, #26]
 800a764:	9507      	str	r5, [sp, #28]
 800a766:	0035      	movs	r5, r6
 800a768:	782b      	ldrb	r3, [r5, #0]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d001      	beq.n	800a772 <_svfiprintf_r+0x52>
 800a76e:	2b25      	cmp	r3, #37	; 0x25
 800a770:	d147      	bne.n	800a802 <_svfiprintf_r+0xe2>
 800a772:	1bab      	subs	r3, r5, r6
 800a774:	9305      	str	r3, [sp, #20]
 800a776:	42b5      	cmp	r5, r6
 800a778:	d00c      	beq.n	800a794 <_svfiprintf_r+0x74>
 800a77a:	0032      	movs	r2, r6
 800a77c:	0039      	movs	r1, r7
 800a77e:	9803      	ldr	r0, [sp, #12]
 800a780:	f7ff ff6c 	bl	800a65c <__ssputs_r>
 800a784:	1c43      	adds	r3, r0, #1
 800a786:	d100      	bne.n	800a78a <_svfiprintf_r+0x6a>
 800a788:	e0ae      	b.n	800a8e8 <_svfiprintf_r+0x1c8>
 800a78a:	6962      	ldr	r2, [r4, #20]
 800a78c:	9b05      	ldr	r3, [sp, #20]
 800a78e:	4694      	mov	ip, r2
 800a790:	4463      	add	r3, ip
 800a792:	6163      	str	r3, [r4, #20]
 800a794:	782b      	ldrb	r3, [r5, #0]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d100      	bne.n	800a79c <_svfiprintf_r+0x7c>
 800a79a:	e0a5      	b.n	800a8e8 <_svfiprintf_r+0x1c8>
 800a79c:	2201      	movs	r2, #1
 800a79e:	2300      	movs	r3, #0
 800a7a0:	4252      	negs	r2, r2
 800a7a2:	6062      	str	r2, [r4, #4]
 800a7a4:	a904      	add	r1, sp, #16
 800a7a6:	3254      	adds	r2, #84	; 0x54
 800a7a8:	1852      	adds	r2, r2, r1
 800a7aa:	1c6e      	adds	r6, r5, #1
 800a7ac:	6023      	str	r3, [r4, #0]
 800a7ae:	60e3      	str	r3, [r4, #12]
 800a7b0:	60a3      	str	r3, [r4, #8]
 800a7b2:	7013      	strb	r3, [r2, #0]
 800a7b4:	65a3      	str	r3, [r4, #88]	; 0x58
 800a7b6:	2205      	movs	r2, #5
 800a7b8:	7831      	ldrb	r1, [r6, #0]
 800a7ba:	4854      	ldr	r0, [pc, #336]	; (800a90c <_svfiprintf_r+0x1ec>)
 800a7bc:	f7ff fe30 	bl	800a420 <memchr>
 800a7c0:	1c75      	adds	r5, r6, #1
 800a7c2:	2800      	cmp	r0, #0
 800a7c4:	d11f      	bne.n	800a806 <_svfiprintf_r+0xe6>
 800a7c6:	6822      	ldr	r2, [r4, #0]
 800a7c8:	06d3      	lsls	r3, r2, #27
 800a7ca:	d504      	bpl.n	800a7d6 <_svfiprintf_r+0xb6>
 800a7cc:	2353      	movs	r3, #83	; 0x53
 800a7ce:	a904      	add	r1, sp, #16
 800a7d0:	185b      	adds	r3, r3, r1
 800a7d2:	2120      	movs	r1, #32
 800a7d4:	7019      	strb	r1, [r3, #0]
 800a7d6:	0713      	lsls	r3, r2, #28
 800a7d8:	d504      	bpl.n	800a7e4 <_svfiprintf_r+0xc4>
 800a7da:	2353      	movs	r3, #83	; 0x53
 800a7dc:	a904      	add	r1, sp, #16
 800a7de:	185b      	adds	r3, r3, r1
 800a7e0:	212b      	movs	r1, #43	; 0x2b
 800a7e2:	7019      	strb	r1, [r3, #0]
 800a7e4:	7833      	ldrb	r3, [r6, #0]
 800a7e6:	2b2a      	cmp	r3, #42	; 0x2a
 800a7e8:	d016      	beq.n	800a818 <_svfiprintf_r+0xf8>
 800a7ea:	0035      	movs	r5, r6
 800a7ec:	2100      	movs	r1, #0
 800a7ee:	200a      	movs	r0, #10
 800a7f0:	68e3      	ldr	r3, [r4, #12]
 800a7f2:	782a      	ldrb	r2, [r5, #0]
 800a7f4:	1c6e      	adds	r6, r5, #1
 800a7f6:	3a30      	subs	r2, #48	; 0x30
 800a7f8:	2a09      	cmp	r2, #9
 800a7fa:	d94e      	bls.n	800a89a <_svfiprintf_r+0x17a>
 800a7fc:	2900      	cmp	r1, #0
 800a7fe:	d111      	bne.n	800a824 <_svfiprintf_r+0x104>
 800a800:	e017      	b.n	800a832 <_svfiprintf_r+0x112>
 800a802:	3501      	adds	r5, #1
 800a804:	e7b0      	b.n	800a768 <_svfiprintf_r+0x48>
 800a806:	4b41      	ldr	r3, [pc, #260]	; (800a90c <_svfiprintf_r+0x1ec>)
 800a808:	6822      	ldr	r2, [r4, #0]
 800a80a:	1ac0      	subs	r0, r0, r3
 800a80c:	2301      	movs	r3, #1
 800a80e:	4083      	lsls	r3, r0
 800a810:	4313      	orrs	r3, r2
 800a812:	002e      	movs	r6, r5
 800a814:	6023      	str	r3, [r4, #0]
 800a816:	e7ce      	b.n	800a7b6 <_svfiprintf_r+0x96>
 800a818:	9b07      	ldr	r3, [sp, #28]
 800a81a:	1d19      	adds	r1, r3, #4
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	9107      	str	r1, [sp, #28]
 800a820:	2b00      	cmp	r3, #0
 800a822:	db01      	blt.n	800a828 <_svfiprintf_r+0x108>
 800a824:	930b      	str	r3, [sp, #44]	; 0x2c
 800a826:	e004      	b.n	800a832 <_svfiprintf_r+0x112>
 800a828:	425b      	negs	r3, r3
 800a82a:	60e3      	str	r3, [r4, #12]
 800a82c:	2302      	movs	r3, #2
 800a82e:	4313      	orrs	r3, r2
 800a830:	6023      	str	r3, [r4, #0]
 800a832:	782b      	ldrb	r3, [r5, #0]
 800a834:	2b2e      	cmp	r3, #46	; 0x2e
 800a836:	d10a      	bne.n	800a84e <_svfiprintf_r+0x12e>
 800a838:	786b      	ldrb	r3, [r5, #1]
 800a83a:	2b2a      	cmp	r3, #42	; 0x2a
 800a83c:	d135      	bne.n	800a8aa <_svfiprintf_r+0x18a>
 800a83e:	9b07      	ldr	r3, [sp, #28]
 800a840:	3502      	adds	r5, #2
 800a842:	1d1a      	adds	r2, r3, #4
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	9207      	str	r2, [sp, #28]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	db2b      	blt.n	800a8a4 <_svfiprintf_r+0x184>
 800a84c:	9309      	str	r3, [sp, #36]	; 0x24
 800a84e:	4e30      	ldr	r6, [pc, #192]	; (800a910 <_svfiprintf_r+0x1f0>)
 800a850:	2203      	movs	r2, #3
 800a852:	0030      	movs	r0, r6
 800a854:	7829      	ldrb	r1, [r5, #0]
 800a856:	f7ff fde3 	bl	800a420 <memchr>
 800a85a:	2800      	cmp	r0, #0
 800a85c:	d006      	beq.n	800a86c <_svfiprintf_r+0x14c>
 800a85e:	2340      	movs	r3, #64	; 0x40
 800a860:	1b80      	subs	r0, r0, r6
 800a862:	4083      	lsls	r3, r0
 800a864:	6822      	ldr	r2, [r4, #0]
 800a866:	3501      	adds	r5, #1
 800a868:	4313      	orrs	r3, r2
 800a86a:	6023      	str	r3, [r4, #0]
 800a86c:	7829      	ldrb	r1, [r5, #0]
 800a86e:	2206      	movs	r2, #6
 800a870:	4828      	ldr	r0, [pc, #160]	; (800a914 <_svfiprintf_r+0x1f4>)
 800a872:	1c6e      	adds	r6, r5, #1
 800a874:	7621      	strb	r1, [r4, #24]
 800a876:	f7ff fdd3 	bl	800a420 <memchr>
 800a87a:	2800      	cmp	r0, #0
 800a87c:	d03c      	beq.n	800a8f8 <_svfiprintf_r+0x1d8>
 800a87e:	4b26      	ldr	r3, [pc, #152]	; (800a918 <_svfiprintf_r+0x1f8>)
 800a880:	2b00      	cmp	r3, #0
 800a882:	d125      	bne.n	800a8d0 <_svfiprintf_r+0x1b0>
 800a884:	2207      	movs	r2, #7
 800a886:	9b07      	ldr	r3, [sp, #28]
 800a888:	3307      	adds	r3, #7
 800a88a:	4393      	bics	r3, r2
 800a88c:	3308      	adds	r3, #8
 800a88e:	9307      	str	r3, [sp, #28]
 800a890:	6963      	ldr	r3, [r4, #20]
 800a892:	9a04      	ldr	r2, [sp, #16]
 800a894:	189b      	adds	r3, r3, r2
 800a896:	6163      	str	r3, [r4, #20]
 800a898:	e765      	b.n	800a766 <_svfiprintf_r+0x46>
 800a89a:	4343      	muls	r3, r0
 800a89c:	0035      	movs	r5, r6
 800a89e:	2101      	movs	r1, #1
 800a8a0:	189b      	adds	r3, r3, r2
 800a8a2:	e7a6      	b.n	800a7f2 <_svfiprintf_r+0xd2>
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	425b      	negs	r3, r3
 800a8a8:	e7d0      	b.n	800a84c <_svfiprintf_r+0x12c>
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	200a      	movs	r0, #10
 800a8ae:	001a      	movs	r2, r3
 800a8b0:	3501      	adds	r5, #1
 800a8b2:	6063      	str	r3, [r4, #4]
 800a8b4:	7829      	ldrb	r1, [r5, #0]
 800a8b6:	1c6e      	adds	r6, r5, #1
 800a8b8:	3930      	subs	r1, #48	; 0x30
 800a8ba:	2909      	cmp	r1, #9
 800a8bc:	d903      	bls.n	800a8c6 <_svfiprintf_r+0x1a6>
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d0c5      	beq.n	800a84e <_svfiprintf_r+0x12e>
 800a8c2:	9209      	str	r2, [sp, #36]	; 0x24
 800a8c4:	e7c3      	b.n	800a84e <_svfiprintf_r+0x12e>
 800a8c6:	4342      	muls	r2, r0
 800a8c8:	0035      	movs	r5, r6
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	1852      	adds	r2, r2, r1
 800a8ce:	e7f1      	b.n	800a8b4 <_svfiprintf_r+0x194>
 800a8d0:	ab07      	add	r3, sp, #28
 800a8d2:	9300      	str	r3, [sp, #0]
 800a8d4:	003a      	movs	r2, r7
 800a8d6:	0021      	movs	r1, r4
 800a8d8:	4b10      	ldr	r3, [pc, #64]	; (800a91c <_svfiprintf_r+0x1fc>)
 800a8da:	9803      	ldr	r0, [sp, #12]
 800a8dc:	e000      	b.n	800a8e0 <_svfiprintf_r+0x1c0>
 800a8de:	bf00      	nop
 800a8e0:	9004      	str	r0, [sp, #16]
 800a8e2:	9b04      	ldr	r3, [sp, #16]
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	d1d3      	bne.n	800a890 <_svfiprintf_r+0x170>
 800a8e8:	89bb      	ldrh	r3, [r7, #12]
 800a8ea:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a8ec:	065b      	lsls	r3, r3, #25
 800a8ee:	d400      	bmi.n	800a8f2 <_svfiprintf_r+0x1d2>
 800a8f0:	e72d      	b.n	800a74e <_svfiprintf_r+0x2e>
 800a8f2:	2001      	movs	r0, #1
 800a8f4:	4240      	negs	r0, r0
 800a8f6:	e72a      	b.n	800a74e <_svfiprintf_r+0x2e>
 800a8f8:	ab07      	add	r3, sp, #28
 800a8fa:	9300      	str	r3, [sp, #0]
 800a8fc:	003a      	movs	r2, r7
 800a8fe:	0021      	movs	r1, r4
 800a900:	4b06      	ldr	r3, [pc, #24]	; (800a91c <_svfiprintf_r+0x1fc>)
 800a902:	9803      	ldr	r0, [sp, #12]
 800a904:	f7ff f886 	bl	8009a14 <_printf_i>
 800a908:	e7ea      	b.n	800a8e0 <_svfiprintf_r+0x1c0>
 800a90a:	46c0      	nop			; (mov r8, r8)
 800a90c:	0800ea60 	.word	0x0800ea60
 800a910:	0800ea66 	.word	0x0800ea66
 800a914:	0800ea6a 	.word	0x0800ea6a
 800a918:	00000000 	.word	0x00000000
 800a91c:	0800a65d 	.word	0x0800a65d

0800a920 <_sbrk_r>:
 800a920:	2300      	movs	r3, #0
 800a922:	b570      	push	{r4, r5, r6, lr}
 800a924:	4d06      	ldr	r5, [pc, #24]	; (800a940 <_sbrk_r+0x20>)
 800a926:	0004      	movs	r4, r0
 800a928:	0008      	movs	r0, r1
 800a92a:	602b      	str	r3, [r5, #0]
 800a92c:	f7f6 fca2 	bl	8001274 <_sbrk>
 800a930:	1c43      	adds	r3, r0, #1
 800a932:	d103      	bne.n	800a93c <_sbrk_r+0x1c>
 800a934:	682b      	ldr	r3, [r5, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d000      	beq.n	800a93c <_sbrk_r+0x1c>
 800a93a:	6023      	str	r3, [r4, #0]
 800a93c:	bd70      	pop	{r4, r5, r6, pc}
 800a93e:	46c0      	nop			; (mov r8, r8)
 800a940:	20001398 	.word	0x20001398

0800a944 <_raise_r>:
 800a944:	b570      	push	{r4, r5, r6, lr}
 800a946:	0004      	movs	r4, r0
 800a948:	000d      	movs	r5, r1
 800a94a:	291f      	cmp	r1, #31
 800a94c:	d904      	bls.n	800a958 <_raise_r+0x14>
 800a94e:	2316      	movs	r3, #22
 800a950:	6003      	str	r3, [r0, #0]
 800a952:	2001      	movs	r0, #1
 800a954:	4240      	negs	r0, r0
 800a956:	bd70      	pop	{r4, r5, r6, pc}
 800a958:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d004      	beq.n	800a968 <_raise_r+0x24>
 800a95e:	008a      	lsls	r2, r1, #2
 800a960:	189b      	adds	r3, r3, r2
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	2a00      	cmp	r2, #0
 800a966:	d108      	bne.n	800a97a <_raise_r+0x36>
 800a968:	0020      	movs	r0, r4
 800a96a:	f000 f831 	bl	800a9d0 <_getpid_r>
 800a96e:	002a      	movs	r2, r5
 800a970:	0001      	movs	r1, r0
 800a972:	0020      	movs	r0, r4
 800a974:	f000 f81a 	bl	800a9ac <_kill_r>
 800a978:	e7ed      	b.n	800a956 <_raise_r+0x12>
 800a97a:	2000      	movs	r0, #0
 800a97c:	2a01      	cmp	r2, #1
 800a97e:	d0ea      	beq.n	800a956 <_raise_r+0x12>
 800a980:	1c51      	adds	r1, r2, #1
 800a982:	d103      	bne.n	800a98c <_raise_r+0x48>
 800a984:	2316      	movs	r3, #22
 800a986:	3001      	adds	r0, #1
 800a988:	6023      	str	r3, [r4, #0]
 800a98a:	e7e4      	b.n	800a956 <_raise_r+0x12>
 800a98c:	2400      	movs	r4, #0
 800a98e:	0028      	movs	r0, r5
 800a990:	601c      	str	r4, [r3, #0]
 800a992:	4790      	blx	r2
 800a994:	0020      	movs	r0, r4
 800a996:	e7de      	b.n	800a956 <_raise_r+0x12>

0800a998 <raise>:
 800a998:	b510      	push	{r4, lr}
 800a99a:	4b03      	ldr	r3, [pc, #12]	; (800a9a8 <raise+0x10>)
 800a99c:	0001      	movs	r1, r0
 800a99e:	6818      	ldr	r0, [r3, #0]
 800a9a0:	f7ff ffd0 	bl	800a944 <_raise_r>
 800a9a4:	bd10      	pop	{r4, pc}
 800a9a6:	46c0      	nop			; (mov r8, r8)
 800a9a8:	20000024 	.word	0x20000024

0800a9ac <_kill_r>:
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	b570      	push	{r4, r5, r6, lr}
 800a9b0:	4d06      	ldr	r5, [pc, #24]	; (800a9cc <_kill_r+0x20>)
 800a9b2:	0004      	movs	r4, r0
 800a9b4:	0008      	movs	r0, r1
 800a9b6:	0011      	movs	r1, r2
 800a9b8:	602b      	str	r3, [r5, #0]
 800a9ba:	f7f6 fc23 	bl	8001204 <_kill>
 800a9be:	1c43      	adds	r3, r0, #1
 800a9c0:	d103      	bne.n	800a9ca <_kill_r+0x1e>
 800a9c2:	682b      	ldr	r3, [r5, #0]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d000      	beq.n	800a9ca <_kill_r+0x1e>
 800a9c8:	6023      	str	r3, [r4, #0]
 800a9ca:	bd70      	pop	{r4, r5, r6, pc}
 800a9cc:	20001398 	.word	0x20001398

0800a9d0 <_getpid_r>:
 800a9d0:	b510      	push	{r4, lr}
 800a9d2:	f7f6 fc15 	bl	8001200 <_getpid>
 800a9d6:	bd10      	pop	{r4, pc}

0800a9d8 <__sread>:
 800a9d8:	b570      	push	{r4, r5, r6, lr}
 800a9da:	000c      	movs	r4, r1
 800a9dc:	250e      	movs	r5, #14
 800a9de:	5f49      	ldrsh	r1, [r1, r5]
 800a9e0:	f000 f8bc 	bl	800ab5c <_read_r>
 800a9e4:	2800      	cmp	r0, #0
 800a9e6:	db03      	blt.n	800a9f0 <__sread+0x18>
 800a9e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a9ea:	181b      	adds	r3, r3, r0
 800a9ec:	6563      	str	r3, [r4, #84]	; 0x54
 800a9ee:	bd70      	pop	{r4, r5, r6, pc}
 800a9f0:	89a3      	ldrh	r3, [r4, #12]
 800a9f2:	4a02      	ldr	r2, [pc, #8]	; (800a9fc <__sread+0x24>)
 800a9f4:	4013      	ands	r3, r2
 800a9f6:	81a3      	strh	r3, [r4, #12]
 800a9f8:	e7f9      	b.n	800a9ee <__sread+0x16>
 800a9fa:	46c0      	nop			; (mov r8, r8)
 800a9fc:	ffffefff 	.word	0xffffefff

0800aa00 <__swrite>:
 800aa00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa02:	001f      	movs	r7, r3
 800aa04:	898b      	ldrh	r3, [r1, #12]
 800aa06:	0005      	movs	r5, r0
 800aa08:	000c      	movs	r4, r1
 800aa0a:	0016      	movs	r6, r2
 800aa0c:	05db      	lsls	r3, r3, #23
 800aa0e:	d505      	bpl.n	800aa1c <__swrite+0x1c>
 800aa10:	230e      	movs	r3, #14
 800aa12:	5ec9      	ldrsh	r1, [r1, r3]
 800aa14:	2200      	movs	r2, #0
 800aa16:	2302      	movs	r3, #2
 800aa18:	f000 f874 	bl	800ab04 <_lseek_r>
 800aa1c:	89a3      	ldrh	r3, [r4, #12]
 800aa1e:	4a05      	ldr	r2, [pc, #20]	; (800aa34 <__swrite+0x34>)
 800aa20:	0028      	movs	r0, r5
 800aa22:	4013      	ands	r3, r2
 800aa24:	81a3      	strh	r3, [r4, #12]
 800aa26:	0032      	movs	r2, r6
 800aa28:	230e      	movs	r3, #14
 800aa2a:	5ee1      	ldrsh	r1, [r4, r3]
 800aa2c:	003b      	movs	r3, r7
 800aa2e:	f000 f81f 	bl	800aa70 <_write_r>
 800aa32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa34:	ffffefff 	.word	0xffffefff

0800aa38 <__sseek>:
 800aa38:	b570      	push	{r4, r5, r6, lr}
 800aa3a:	000c      	movs	r4, r1
 800aa3c:	250e      	movs	r5, #14
 800aa3e:	5f49      	ldrsh	r1, [r1, r5]
 800aa40:	f000 f860 	bl	800ab04 <_lseek_r>
 800aa44:	89a3      	ldrh	r3, [r4, #12]
 800aa46:	1c42      	adds	r2, r0, #1
 800aa48:	d103      	bne.n	800aa52 <__sseek+0x1a>
 800aa4a:	4a05      	ldr	r2, [pc, #20]	; (800aa60 <__sseek+0x28>)
 800aa4c:	4013      	ands	r3, r2
 800aa4e:	81a3      	strh	r3, [r4, #12]
 800aa50:	bd70      	pop	{r4, r5, r6, pc}
 800aa52:	2280      	movs	r2, #128	; 0x80
 800aa54:	0152      	lsls	r2, r2, #5
 800aa56:	4313      	orrs	r3, r2
 800aa58:	81a3      	strh	r3, [r4, #12]
 800aa5a:	6560      	str	r0, [r4, #84]	; 0x54
 800aa5c:	e7f8      	b.n	800aa50 <__sseek+0x18>
 800aa5e:	46c0      	nop			; (mov r8, r8)
 800aa60:	ffffefff 	.word	0xffffefff

0800aa64 <__sclose>:
 800aa64:	b510      	push	{r4, lr}
 800aa66:	230e      	movs	r3, #14
 800aa68:	5ec9      	ldrsh	r1, [r1, r3]
 800aa6a:	f000 f815 	bl	800aa98 <_close_r>
 800aa6e:	bd10      	pop	{r4, pc}

0800aa70 <_write_r>:
 800aa70:	b570      	push	{r4, r5, r6, lr}
 800aa72:	0004      	movs	r4, r0
 800aa74:	0008      	movs	r0, r1
 800aa76:	0011      	movs	r1, r2
 800aa78:	001a      	movs	r2, r3
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	4d05      	ldr	r5, [pc, #20]	; (800aa94 <_write_r+0x24>)
 800aa7e:	602b      	str	r3, [r5, #0]
 800aa80:	f7f6 fbdc 	bl	800123c <_write>
 800aa84:	1c43      	adds	r3, r0, #1
 800aa86:	d103      	bne.n	800aa90 <_write_r+0x20>
 800aa88:	682b      	ldr	r3, [r5, #0]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d000      	beq.n	800aa90 <_write_r+0x20>
 800aa8e:	6023      	str	r3, [r4, #0]
 800aa90:	bd70      	pop	{r4, r5, r6, pc}
 800aa92:	46c0      	nop			; (mov r8, r8)
 800aa94:	20001398 	.word	0x20001398

0800aa98 <_close_r>:
 800aa98:	2300      	movs	r3, #0
 800aa9a:	b570      	push	{r4, r5, r6, lr}
 800aa9c:	4d06      	ldr	r5, [pc, #24]	; (800aab8 <_close_r+0x20>)
 800aa9e:	0004      	movs	r4, r0
 800aaa0:	0008      	movs	r0, r1
 800aaa2:	602b      	str	r3, [r5, #0]
 800aaa4:	f7f6 fbd8 	bl	8001258 <_close>
 800aaa8:	1c43      	adds	r3, r0, #1
 800aaaa:	d103      	bne.n	800aab4 <_close_r+0x1c>
 800aaac:	682b      	ldr	r3, [r5, #0]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d000      	beq.n	800aab4 <_close_r+0x1c>
 800aab2:	6023      	str	r3, [r4, #0]
 800aab4:	bd70      	pop	{r4, r5, r6, pc}
 800aab6:	46c0      	nop			; (mov r8, r8)
 800aab8:	20001398 	.word	0x20001398

0800aabc <_fstat_r>:
 800aabc:	2300      	movs	r3, #0
 800aabe:	b570      	push	{r4, r5, r6, lr}
 800aac0:	4d06      	ldr	r5, [pc, #24]	; (800aadc <_fstat_r+0x20>)
 800aac2:	0004      	movs	r4, r0
 800aac4:	0008      	movs	r0, r1
 800aac6:	0011      	movs	r1, r2
 800aac8:	602b      	str	r3, [r5, #0]
 800aaca:	f7f6 fbc9 	bl	8001260 <_fstat>
 800aace:	1c43      	adds	r3, r0, #1
 800aad0:	d103      	bne.n	800aada <_fstat_r+0x1e>
 800aad2:	682b      	ldr	r3, [r5, #0]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d000      	beq.n	800aada <_fstat_r+0x1e>
 800aad8:	6023      	str	r3, [r4, #0]
 800aada:	bd70      	pop	{r4, r5, r6, pc}
 800aadc:	20001398 	.word	0x20001398

0800aae0 <_isatty_r>:
 800aae0:	2300      	movs	r3, #0
 800aae2:	b570      	push	{r4, r5, r6, lr}
 800aae4:	4d06      	ldr	r5, [pc, #24]	; (800ab00 <_isatty_r+0x20>)
 800aae6:	0004      	movs	r4, r0
 800aae8:	0008      	movs	r0, r1
 800aaea:	602b      	str	r3, [r5, #0]
 800aaec:	f7f6 fbbe 	bl	800126c <_isatty>
 800aaf0:	1c43      	adds	r3, r0, #1
 800aaf2:	d103      	bne.n	800aafc <_isatty_r+0x1c>
 800aaf4:	682b      	ldr	r3, [r5, #0]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d000      	beq.n	800aafc <_isatty_r+0x1c>
 800aafa:	6023      	str	r3, [r4, #0]
 800aafc:	bd70      	pop	{r4, r5, r6, pc}
 800aafe:	46c0      	nop			; (mov r8, r8)
 800ab00:	20001398 	.word	0x20001398

0800ab04 <_lseek_r>:
 800ab04:	b570      	push	{r4, r5, r6, lr}
 800ab06:	0004      	movs	r4, r0
 800ab08:	0008      	movs	r0, r1
 800ab0a:	0011      	movs	r1, r2
 800ab0c:	001a      	movs	r2, r3
 800ab0e:	2300      	movs	r3, #0
 800ab10:	4d05      	ldr	r5, [pc, #20]	; (800ab28 <_lseek_r+0x24>)
 800ab12:	602b      	str	r3, [r5, #0]
 800ab14:	f7f6 fbac 	bl	8001270 <_lseek>
 800ab18:	1c43      	adds	r3, r0, #1
 800ab1a:	d103      	bne.n	800ab24 <_lseek_r+0x20>
 800ab1c:	682b      	ldr	r3, [r5, #0]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d000      	beq.n	800ab24 <_lseek_r+0x20>
 800ab22:	6023      	str	r3, [r4, #0]
 800ab24:	bd70      	pop	{r4, r5, r6, pc}
 800ab26:	46c0      	nop			; (mov r8, r8)
 800ab28:	20001398 	.word	0x20001398

0800ab2c <__malloc_lock>:
 800ab2c:	b510      	push	{r4, lr}
 800ab2e:	4802      	ldr	r0, [pc, #8]	; (800ab38 <__malloc_lock+0xc>)
 800ab30:	f7ff fc07 	bl	800a342 <__retarget_lock_acquire_recursive>
 800ab34:	bd10      	pop	{r4, pc}
 800ab36:	46c0      	nop			; (mov r8, r8)
 800ab38:	2000138c 	.word	0x2000138c

0800ab3c <__malloc_unlock>:
 800ab3c:	b510      	push	{r4, lr}
 800ab3e:	4802      	ldr	r0, [pc, #8]	; (800ab48 <__malloc_unlock+0xc>)
 800ab40:	f7ff fc00 	bl	800a344 <__retarget_lock_release_recursive>
 800ab44:	bd10      	pop	{r4, pc}
 800ab46:	46c0      	nop			; (mov r8, r8)
 800ab48:	2000138c 	.word	0x2000138c

0800ab4c <_malloc_usable_size_r>:
 800ab4c:	1f0b      	subs	r3, r1, #4
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	1f18      	subs	r0, r3, #4
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	da01      	bge.n	800ab5a <_malloc_usable_size_r+0xe>
 800ab56:	580b      	ldr	r3, [r1, r0]
 800ab58:	18c0      	adds	r0, r0, r3
 800ab5a:	4770      	bx	lr

0800ab5c <_read_r>:
 800ab5c:	b570      	push	{r4, r5, r6, lr}
 800ab5e:	0004      	movs	r4, r0
 800ab60:	0008      	movs	r0, r1
 800ab62:	0011      	movs	r1, r2
 800ab64:	001a      	movs	r2, r3
 800ab66:	2300      	movs	r3, #0
 800ab68:	4d05      	ldr	r5, [pc, #20]	; (800ab80 <_read_r+0x24>)
 800ab6a:	602b      	str	r3, [r5, #0]
 800ab6c:	f7f6 fb58 	bl	8001220 <_read>
 800ab70:	1c43      	adds	r3, r0, #1
 800ab72:	d103      	bne.n	800ab7c <_read_r+0x20>
 800ab74:	682b      	ldr	r3, [r5, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d000      	beq.n	800ab7c <_read_r+0x20>
 800ab7a:	6023      	str	r3, [r4, #0]
 800ab7c:	bd70      	pop	{r4, r5, r6, pc}
 800ab7e:	46c0      	nop			; (mov r8, r8)
 800ab80:	20001398 	.word	0x20001398

0800ab84 <_init>:
 800ab84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab86:	46c0      	nop			; (mov r8, r8)
 800ab88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab8a:	bc08      	pop	{r3}
 800ab8c:	469e      	mov	lr, r3
 800ab8e:	4770      	bx	lr

0800ab90 <_fini>:
 800ab90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab92:	46c0      	nop			; (mov r8, r8)
 800ab94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab96:	bc08      	pop	{r3}
 800ab98:	469e      	mov	lr, r3
 800ab9a:	4770      	bx	lr
